
STM32_languages.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000b5954  08014c20  08014c20  00024c20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080ca574  080ca574  000e1664  2**0
                  CONTENTS
  4 .ARM          00000000  080ca574  080ca574  000e1664  2**0
                  CONTENTS
  5 .preinit_array 00000000  080ca574  080ca574  000e1664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080ca574  080ca574  000da574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080ca578  080ca578  000da578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001664  20000000  080ca57c  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fc98  20001680  080cbbe0  000e1680  2**5
                  ALLOC
 10 ._user_heap_stack 00004800  20011318  080cbbe0  000f1318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000e1664  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d5c6  00000000  00000000  000e1694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e31  00000000  00000000  0010ec5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00114a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00115a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b577  00000000  00000000  001167c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d06d  00000000  00000000  00141d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9bd2  00000000  00000000  0015eda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  00258976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea8  00000000  00000000  00258a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0025d8ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0025d9b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001680 	.word	0x20001680
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014bf8 	.word	0x08014bf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001684 	.word	0x20001684
 80001cc:	08014bf8 	.word	0x08014bf8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_f2lz>:
 8000ba8:	ee07 0a90 	vmov	s15, r0
 8000bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb4:	d401      	bmi.n	8000bba <__aeabi_f2lz+0x12>
 8000bb6:	f000 b80b 	b.w	8000bd0 <__aeabi_f2ulz>
 8000bba:	eef1 7a67 	vneg.f32	s15, s15
 8000bbe:	b508      	push	{r3, lr}
 8000bc0:	ee17 0a90 	vmov	r0, s15
 8000bc4:	f000 f804 	bl	8000bd0 <__aeabi_f2ulz>
 8000bc8:	4240      	negs	r0, r0
 8000bca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bce:	bd08      	pop	{r3, pc}

08000bd0 <__aeabi_f2ulz>:
 8000bd0:	b5d0      	push	{r4, r6, r7, lr}
 8000bd2:	f7ff fcb9 	bl	8000548 <__aeabi_f2d>
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__aeabi_f2ulz+0x38>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4606      	mov	r6, r0
 8000bdc:	460f      	mov	r7, r1
 8000bde:	f7ff fd0b 	bl	80005f8 <__aeabi_dmul>
 8000be2:	f000 f815 	bl	8000c10 <__aeabi_d2uiz>
 8000be6:	4604      	mov	r4, r0
 8000be8:	f7ff fc8c 	bl	8000504 <__aeabi_ui2d>
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <__aeabi_f2ulz+0x3c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f7ff fd02 	bl	80005f8 <__aeabi_dmul>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4630      	mov	r0, r6
 8000bfa:	4639      	mov	r1, r7
 8000bfc:	f7ff fb44 	bl	8000288 <__aeabi_dsub>
 8000c00:	f000 f806 	bl	8000c10 <__aeabi_d2uiz>
 8000c04:	4621      	mov	r1, r4
 8000c06:	bdd0      	pop	{r4, r6, r7, pc}
 8000c08:	3df00000 	.word	0x3df00000
 8000c0c:	41f00000 	.word	0x41f00000

08000c10 <__aeabi_d2uiz>:
 8000c10:	004a      	lsls	r2, r1, #1
 8000c12:	d211      	bcs.n	8000c38 <__aeabi_d2uiz+0x28>
 8000c14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c18:	d211      	bcs.n	8000c3e <__aeabi_d2uiz+0x2e>
 8000c1a:	d50d      	bpl.n	8000c38 <__aeabi_d2uiz+0x28>
 8000c1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c24:	d40e      	bmi.n	8000c44 <__aeabi_d2uiz+0x34>
 8000c26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c32:	fa23 f002 	lsr.w	r0, r3, r2
 8000c36:	4770      	bx	lr
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c42:	d102      	bne.n	8000c4a <__aeabi_d2uiz+0x3a>
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	4770      	bx	lr
 8000c4a:	f04f 0000 	mov.w	r0, #0
 8000c4e:	4770      	bx	lr

08000c50 <HAL_DFSDM_FilterRegConvCpltCallback>:
	}
	return ch;
}

void HAL_DFSDM_FilterRegConvCpltCallback(
		DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	secondHalfFull = true;
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	2000169d 	.word	0x2000169d

08000c70 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback(
		DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	firstHalfFull = true;
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	2000169c 	.word	0x2000169c

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	arm_mfcc_init_q15(&mfcc_config, FFT_LENGTH, NB_MFCC_NB_FILTER_Q15,
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <main+0x6c>)
 8000c98:	9304      	str	r3, [sp, #16]
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <main+0x70>)
 8000c9c:	9303      	str	r3, [sp, #12]
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <main+0x74>)
 8000ca0:	9302      	str	r3, [sp, #8]
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <main+0x78>)
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <main+0x7c>)
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	230c      	movs	r3, #12
 8000cac:	2214      	movs	r2, #20
 8000cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb2:	4817      	ldr	r0, [pc, #92]	; (8000d10 <main+0x80>)
 8000cb4:	f004 ff35 	bl	8005b22 <arm_mfcc_init_q15>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f005 fb69 	bl	800638e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f82e 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f000 f952 	bl	8000f68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc4:	f000 f932 	bl	8000f2c <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000cc8:	f000 f89e 	bl	8000e08 <MX_DFSDM1_Init>
  MX_USART1_Init();
 8000ccc:	f000 f902 	bl	8000ed4 <MX_USART1_Init>
  MX_CRC_Init();
 8000cd0:	f000 f878 	bl	8000dc4 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8000cd4:	f008 fd46 	bl	8009764 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
	if (HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuff, FFT_LENGTH)) {
 8000cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cdc:	490d      	ldr	r1, [pc, #52]	; (8000d14 <main+0x84>)
 8000cde:	480e      	ldr	r0, [pc, #56]	; (8000d18 <main+0x88>)
 8000ce0:	f005 ffde 	bl	8006ca0 <HAL_DFSDM_FilterRegularStart_DMA>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <main+0x5e>
		Error_Handler();
 8000cea:	f000 fcc7 	bl	800167c <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000cee:	f008 fd43 	bl	8009778 <MX_X_CUBE_AI_Process>
		 secondHalfFull = false;
		 }
		 }*/
		// NN
		//MX_X_CUBE_AI_Process();
		HAL_Delay(1000);
 8000cf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf6:	f005 fbbf 	bl	8006478 <HAL_Delay>
  MX_X_CUBE_AI_Process();
 8000cfa:	e7f8      	b.n	8000cee <main+0x5e>
 8000cfc:	08014f70 	.word	0x08014f70
 8000d00:	08015210 	.word	0x08015210
 8000d04:	080151c0 	.word	0x080151c0
 8000d08:	08015170 	.word	0x08015170
 8000d0c:	08014d90 	.word	0x08014d90
 8000d10:	2000ab9c 	.word	0x2000ab9c
 8000d14:	2000abd4 	.word	0x2000abd4
 8000d18:	2000aff8 	.word	0x2000aff8

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b096      	sub	sp, #88	; 0x58
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	2244      	movs	r2, #68	; 0x44
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f010 fb2e 	bl	801138c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	463b      	mov	r3, r7
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d42:	f006 fe7f 	bl	8007a44 <HAL_PWREx_ControlVoltageScaling>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d4c:	f000 fc96 	bl	800167c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d50:	2310      	movs	r3, #16
 8000d52:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d54:	2301      	movs	r3, #1
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d5c:	2360      	movs	r3, #96	; 0x60
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d60:	2302      	movs	r3, #2
 8000d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d64:	2301      	movs	r3, #1
 8000d66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d6c:	2328      	movs	r3, #40	; 0x28
 8000d6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d70:	2307      	movs	r3, #7
 8000d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4618      	mov	r0, r3
 8000d82:	f006 feb5 	bl	8007af0 <HAL_RCC_OscConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000d8c:	f000 fc76 	bl	800167c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d90:	230f      	movs	r3, #15
 8000d92:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d94:	2303      	movs	r3, #3
 8000d96:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	2104      	movs	r1, #4
 8000daa:	4618      	mov	r0, r3
 8000dac:	f007 fa86 	bl	80082bc <HAL_RCC_ClockConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000db6:	f000 fc61 	bl	800167c <Error_Handler>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3758      	adds	r7, #88	; 0x58
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <MX_CRC_Init+0x3c>)
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <MX_CRC_Init+0x40>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_CRC_Init+0x3c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <MX_CRC_Init+0x3c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_CRC_Init+0x3c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <MX_CRC_Init+0x3c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_CRC_Init+0x3c>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_CRC_Init+0x3c>)
 8000dee:	f005 fc79 	bl	80066e4 <HAL_CRC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000df8:	f000 fc40 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000afd4 	.word	0x2000afd4
 8000e04:	40023000 	.word	0x40023000

08000e08 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <MX_DFSDM1_Init+0xb8>)
 8000e0e:	4a2d      	ldr	r2, [pc, #180]	; (8000ec4 <MX_DFSDM1_Init+0xbc>)
 8000e10:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000e12:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <MX_DFSDM1_Init+0xb8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <MX_DFSDM1_Init+0xb8>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <MX_DFSDM1_Init+0xb8>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000e24:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <MX_DFSDM1_Init+0xb8>)
 8000e26:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000e2a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 32;
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <MX_DFSDM1_Init+0xb8>)
 8000e2e:	2220      	movs	r2, #32
 8000e30:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 4;
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <MX_DFSDM1_Init+0xb8>)
 8000e34:	2204      	movs	r2, #4
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000e38:	4821      	ldr	r0, [pc, #132]	; (8000ec0 <MX_DFSDM1_Init+0xb8>)
 8000e3a:	f005 fe11 	bl	8006a60 <HAL_DFSDM_FilterInit>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000e44:	f000 fc1a 	bl	800167c <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <MX_DFSDM1_Init+0xc0>)
 8000e4a:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <MX_DFSDM1_Init+0xc4>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <MX_DFSDM1_Init+0xc0>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <MX_DFSDM1_Init+0xc0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 38;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_DFSDM1_Init+0xc0>)
 8000e5c:	2226      	movs	r2, #38	; 0x26
 8000e5e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <MX_DFSDM1_Init+0xc0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_DFSDM1_Init+0xc0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_DFSDM1_Init+0xc0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_DFSDM1_Init+0xc0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_DFSDM1_Init+0xc0>)
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_DFSDM1_Init+0xc0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_DFSDM1_Init+0xc0>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_DFSDM1_Init+0xc0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_DFSDM1_Init+0xc0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000e96:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <MX_DFSDM1_Init+0xc0>)
 8000e98:	f005 fd0e 	bl	80068b8 <HAL_DFSDM_ChannelInit>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000ea2:	f000 fbeb 	bl	800167c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4909      	ldr	r1, [pc, #36]	; (8000ed0 <MX_DFSDM1_Init+0xc8>)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_DFSDM1_Init+0xb8>)
 8000eac:	f005 feb2 	bl	8006c14 <HAL_DFSDM_FilterConfigRegChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000eb6:	f000 fbe1 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000aff8 	.word	0x2000aff8
 8000ec4:	40016100 	.word	0x40016100
 8000ec8:	2000f37c 	.word	0x2000f37c
 8000ecc:	40016040 	.word	0x40016040
 8000ed0:	00020004 	.word	0x00020004

08000ed4 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_USART1_Init+0x50>)
 8000eda:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <MX_USART1_Init+0x54>)
 8000edc:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_USART1_Init+0x50>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_USART1_Init+0x50>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <MX_USART1_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_USART1_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <MX_USART1_Init+0x50>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_USART1_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <MX_USART1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_USART1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_USART1_Init+0x50>)
 8000f12:	f008 f895 	bl	8009040 <HAL_USART_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000f1c:	f000 fbae 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000f32c 	.word	0x2000f32c
 8000f28:	40013800 	.word	0x40013800

08000f2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_DMA_Init+0x38>)
 8000f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <MX_DMA_Init+0x38>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6493      	str	r3, [r2, #72]	; 0x48
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_DMA_Init+0x38>)
 8000f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	200e      	movs	r0, #14
 8000f50:	f005 fb91 	bl	8006676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f54:	200e      	movs	r0, #14
 8000f56:	f005 fbaa 	bl	80066ae <HAL_NVIC_EnableIRQ>

}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000

08000f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <MX_GPIO_Init+0xc4>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <MX_GPIO_Init+0xc4>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <MX_GPIO_Init+0xc4>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f96:	4b25      	ldr	r3, [pc, #148]	; (800102c <MX_GPIO_Init+0xc4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a24      	ldr	r2, [pc, #144]	; (800102c <MX_GPIO_Init+0xc4>)
 8000f9c:	f043 0310 	orr.w	r3, r3, #16
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <MX_GPIO_Init+0xc4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_GPIO_Init+0xc4>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	; (800102c <MX_GPIO_Init+0xc4>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_GPIO_Init+0xc4>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_GPIO_Init+0xc4>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a18      	ldr	r2, [pc, #96]	; (800102c <MX_GPIO_Init+0xc4>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <MX_GPIO_Init+0xc4>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe4:	4812      	ldr	r0, [pc, #72]	; (8001030 <MX_GPIO_Init+0xc8>)
 8000fe6:	f006 fced 	bl	80079c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_GPIO_Init+0xcc>)
 8001000:	f006 fb1e 	bl	8007640 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001004:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100e:	2301      	movs	r3, #1
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_GPIO_Init+0xc8>)
 800101e:	f006 fb0f 	bl	8007640 <HAL_GPIO_Init>

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000
 8001030:	48000400 	.word	0x48000400
 8001034:	48000800 	.word	0x48000800

08001038 <set_data_ai_in>:

/* USER CODE BEGIN 4 */
void set_data_ai_in(int8_t* input) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b0ca      	sub	sp, #296	; 0x128
 800103c:	af00      	add	r7, sp, #0
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	6018      	str	r0, [r3, #0]
	//MFCC Calc
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001048:	48b9      	ldr	r0, [pc, #740]	; (8001330 <set_data_ai_in+0x2f8>)
 800104a:	f006 fcbb 	bl	80079c4 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) != GPIO_PIN_RESET);
 800104e:	bf00      	nop
 8001050:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001054:	48b7      	ldr	r0, [pc, #732]	; (8001334 <set_data_ai_in+0x2fc>)
 8001056:	f006 fc9d 	bl	8007994 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f7      	bne.n	8001050 <set_data_ai_in+0x18>
	firstHalfFull = false;
 8001060:	4bb5      	ldr	r3, [pc, #724]	; (8001338 <set_data_ai_in+0x300>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
	secondHalfFull = false;
 8001066:	4bb5      	ldr	r3, [pc, #724]	; (800133c <set_data_ai_in+0x304>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
	int16_t cur_nb_mfcc = -1;
 800106c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001070:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	q15_t buffer[FFT_LENGTH/2];
	int32_t gain_numerator = 1000;
 8001074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001078:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	int32_t gain_denominator = 1000;
 800107c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001080:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint8_t led_count = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
	while (cur_nb_mfcc < NB_MFCC) {
 800108a:	e0df      	b.n	800124c <set_data_ai_in+0x214>
		if (firstHalfFull) {
 800108c:	4baa      	ldr	r3, [pc, #680]	; (8001338 <set_data_ai_in+0x300>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d062      	beq.n	800115c <set_data_ai_in+0x124>
			for (uint16_t i = 0; i < FFT_LENGTH / 2; i++) {
 8001096:	2300      	movs	r3, #0
 8001098:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
 800109c:	e00f      	b.n	80010be <set_data_ai_in+0x86>
				MfccData[i] = buffer[i];
 800109e:	f8b7 1122 	ldrh.w	r1, [r7, #290]	; 0x122
 80010a2:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80010a6:	f107 0208 	add.w	r2, r7, #8
 80010aa:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
 80010ae:	4aa4      	ldr	r2, [pc, #656]	; (8001340 <set_data_ai_in+0x308>)
 80010b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (uint16_t i = 0; i < FFT_LENGTH / 2; i++) {
 80010b4:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80010b8:	3301      	adds	r3, #1
 80010ba:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
 80010be:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80010c2:	2b7f      	cmp	r3, #127	; 0x7f
 80010c4:	d9eb      	bls.n	800109e <set_data_ai_in+0x66>
			}
			for (uint16_t i = 0; i < FFT_LENGTH / 2; i++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
 80010cc:	e01d      	b.n	800110a <set_data_ai_in+0xd2>
				MfccData[i + FFT_LENGTH / 2] = (q15_t) ((RecBuff[i] >> 8)/**gain_numerator/gain_denominator
 80010ce:	f8b7 3120 	ldrh.w	r3, [r7, #288]	; 0x120
 80010d2:	4a9c      	ldr	r2, [pc, #624]	; (8001344 <set_data_ai_in+0x30c>)
 80010d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d8:	121a      	asrs	r2, r3, #8
 80010da:	f8b7 3120 	ldrh.w	r3, [r7, #288]	; 0x120
 80010de:	3380      	adds	r3, #128	; 0x80
 80010e0:	b211      	sxth	r1, r2
 80010e2:	4a97      	ldr	r2, [pc, #604]	; (8001340 <set_data_ai_in+0x308>)
 80010e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						- (int32_t) (((int32_t) MfccData[i - 1 + FFT_LENGTH / 2])
								* FILTER_CONST / 100)*/);
				buffer[i] = MfccData[i + FFT_LENGTH / 2];
 80010e8:	f8b7 3120 	ldrh.w	r3, [r7, #288]	; 0x120
 80010ec:	3380      	adds	r3, #128	; 0x80
 80010ee:	f8b7 2120 	ldrh.w	r2, [r7, #288]	; 0x120
 80010f2:	4993      	ldr	r1, [pc, #588]	; (8001340 <set_data_ai_in+0x308>)
 80010f4:	f931 1013 	ldrsh.w	r1, [r1, r3, lsl #1]
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (uint16_t i = 0; i < FFT_LENGTH / 2; i++) {
 8001100:	f8b7 3120 	ldrh.w	r3, [r7, #288]	; 0x120
 8001104:	3301      	adds	r3, #1
 8001106:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
 800110a:	f8b7 3120 	ldrh.w	r3, [r7, #288]	; 0x120
 800110e:	2b7f      	cmp	r3, #127	; 0x7f
 8001110:	d9dd      	bls.n	80010ce <set_data_ai_in+0x96>
				//gain_numerator += (TARGET_AMPLITUDE-abs(MfccData[i + FFT_LENGTH / 2]))/GAIN_DIVIDER;
			}
			firstHalfFull = false;
 8001112:	4b89      	ldr	r3, [pc, #548]	; (8001338 <set_data_ai_in+0x300>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
			if(cur_nb_mfcc==-1){
 8001118:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d107      	bne.n	8001132 <set_data_ai_in+0xfa>
				cur_nb_mfcc++;
 8001122:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8001126:	b29b      	uxth	r3, r3
 8001128:	3301      	adds	r3, #1
 800112a:	b29b      	uxth	r3, r3
 800112c:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
				continue;
 8001130:	e08c      	b.n	800124c <set_data_ai_in+0x214>
			}
			arm_mfcc_q15(&mfcc_config, MfccData, &Mfcc[cur_nb_mfcc * NB_DCT_OUTPUTS], TempBuffer);
 8001132:	f9b7 2126 	ldrsh.w	r2, [r7, #294]	; 0x126
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4a81      	ldr	r2, [pc, #516]	; (8001348 <set_data_ai_in+0x310>)
 8001142:	441a      	add	r2, r3
 8001144:	4b81      	ldr	r3, [pc, #516]	; (800134c <set_data_ai_in+0x314>)
 8001146:	497e      	ldr	r1, [pc, #504]	; (8001340 <set_data_ai_in+0x308>)
 8001148:	4881      	ldr	r0, [pc, #516]	; (8001350 <set_data_ai_in+0x318>)
 800114a:	f004 fd19 	bl	8005b80 <arm_mfcc_q15>
			cur_nb_mfcc++;
 800114e:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8001152:	b29b      	uxth	r3, r3
 8001154:	3301      	adds	r3, #1
 8001156:	b29b      	uxth	r3, r3
 8001158:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
		}
		if (secondHalfFull) {
 800115c:	4b77      	ldr	r3, [pc, #476]	; (800133c <set_data_ai_in+0x304>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d072      	beq.n	800124c <set_data_ai_in+0x214>
			for (uint16_t i = 0; i < FFT_LENGTH / 2; i++) {
 8001166:	2300      	movs	r3, #0
 8001168:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 800116c:	e00f      	b.n	800118e <set_data_ai_in+0x156>
				MfccData[i] = buffer[i];
 800116e:	f8b7 111e 	ldrh.w	r1, [r7, #286]	; 0x11e
 8001172:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8001176:	f107 0208 	add.w	r2, r7, #8
 800117a:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
 800117e:	4a70      	ldr	r2, [pc, #448]	; (8001340 <set_data_ai_in+0x308>)
 8001180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (uint16_t i = 0; i < FFT_LENGTH / 2; i++) {
 8001184:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8001188:	3301      	adds	r3, #1
 800118a:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 800118e:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8001192:	2b7f      	cmp	r3, #127	; 0x7f
 8001194:	d9eb      	bls.n	800116e <set_data_ai_in+0x136>
			}
			for (uint16_t i = 0; i < FFT_LENGTH / 2; i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
 800119c:	e01e      	b.n	80011dc <set_data_ai_in+0x1a4>
				MfccData[i + FFT_LENGTH / 2] = (q15_t) ((RecBuff[i+ FFT_LENGTH / 2] >> 8)/**gain_numerator/gain_denominator
 800119e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80011a2:	3380      	adds	r3, #128	; 0x80
 80011a4:	4a67      	ldr	r2, [pc, #412]	; (8001344 <set_data_ai_in+0x30c>)
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	121a      	asrs	r2, r3, #8
 80011ac:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80011b0:	3380      	adds	r3, #128	; 0x80
 80011b2:	b211      	sxth	r1, r2
 80011b4:	4a62      	ldr	r2, [pc, #392]	; (8001340 <set_data_ai_in+0x308>)
 80011b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						- (int32_t) (((int32_t) MfccData[i - 1 + FFT_LENGTH / 2])
								* FILTER_CONST / 100)*/);
				buffer[i] = MfccData[i + FFT_LENGTH / 2];
 80011ba:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80011be:	3380      	adds	r3, #128	; 0x80
 80011c0:	f8b7 211c 	ldrh.w	r2, [r7, #284]	; 0x11c
 80011c4:	495e      	ldr	r1, [pc, #376]	; (8001340 <set_data_ai_in+0x308>)
 80011c6:	f931 1013 	ldrsh.w	r1, [r1, r3, lsl #1]
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (uint16_t i = 0; i < FFT_LENGTH / 2; i++) {
 80011d2:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80011d6:	3301      	adds	r3, #1
 80011d8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
 80011dc:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80011e0:	2b7f      	cmp	r3, #127	; 0x7f
 80011e2:	d9dc      	bls.n	800119e <set_data_ai_in+0x166>
				//gain_numerator += (TARGET_AMPLITUDE-abs(MfccData[i + FFT_LENGTH / 2]))/GAIN_DIVIDER;
			}
			secondHalfFull = false;
 80011e4:	4b55      	ldr	r3, [pc, #340]	; (800133c <set_data_ai_in+0x304>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
			if(cur_nb_mfcc==-1){
 80011ea:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 80011ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f2:	d107      	bne.n	8001204 <set_data_ai_in+0x1cc>
				cur_nb_mfcc++;
 80011f4:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	3301      	adds	r3, #1
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
				continue;
 8001202:	e023      	b.n	800124c <set_data_ai_in+0x214>
			}
			arm_mfcc_q15(&mfcc_config, MfccData, &Mfcc[cur_nb_mfcc * NB_DCT_OUTPUTS], TempBuffer);
 8001204:	f9b7 2126 	ldrsh.w	r2, [r7, #294]	; 0x126
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4a4d      	ldr	r2, [pc, #308]	; (8001348 <set_data_ai_in+0x310>)
 8001214:	441a      	add	r2, r3
 8001216:	4b4d      	ldr	r3, [pc, #308]	; (800134c <set_data_ai_in+0x314>)
 8001218:	4949      	ldr	r1, [pc, #292]	; (8001340 <set_data_ai_in+0x308>)
 800121a:	484d      	ldr	r0, [pc, #308]	; (8001350 <set_data_ai_in+0x318>)
 800121c:	f004 fcb0 	bl	8005b80 <arm_mfcc_q15>
			cur_nb_mfcc++;
 8001220:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8001224:	b29b      	uxth	r3, r3
 8001226:	3301      	adds	r3, #1
 8001228:	b29b      	uxth	r3, r3
 800122a:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126

			if(led_count++%8==0){
 800122e:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	f887 2125 	strb.w	r2, [r7, #293]	; 0x125
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d104      	bne.n	800124c <set_data_ai_in+0x214>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001246:	483a      	ldr	r0, [pc, #232]	; (8001330 <set_data_ai_in+0x2f8>)
 8001248:	f006 fbd4 	bl	80079f4 <HAL_GPIO_TogglePin>
	while (cur_nb_mfcc < NB_MFCC) {
 800124c:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	; 0x126
 8001250:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001254:	f77f af1a 	ble.w	800108c <set_data_ai_in+0x54>
			}
		}
	}
	int32_t max_value = INT32_MIN;
 8001258:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800125c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	int32_t min_value = INT32_MAX;
 8001260:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001264:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	for (uint16_t i = 0; i < NB_DCT_OUTPUTS * NB_MFCC; i++) {
 8001268:	2300      	movs	r3, #0
 800126a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 800126e:	e01e      	b.n	80012ae <set_data_ai_in+0x276>
		max_value = MAX(Mfcc[i], max_value);
 8001270:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8001274:	4a34      	ldr	r2, [pc, #208]	; (8001348 <set_data_ai_in+0x310>)
 8001276:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800127a:	461a      	mov	r2, r3
 800127c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001280:	4293      	cmp	r3, r2
 8001282:	bfb8      	it	lt
 8001284:	4613      	movlt	r3, r2
 8001286:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		min_value = MIN(Mfcc[i], min_value);
 800128a:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 800128e:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <set_data_ai_in+0x310>)
 8001290:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001294:	461a      	mov	r2, r3
 8001296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800129a:	4293      	cmp	r3, r2
 800129c:	bfa8      	it	ge
 800129e:	4613      	movge	r3, r2
 80012a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	for (uint16_t i = 0; i < NB_DCT_OUTPUTS * NB_MFCC; i++) {
 80012a4:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80012a8:	3301      	adds	r3, #1
 80012aa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80012ae:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80012b2:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d9da      	bls.n	8001270 <set_data_ai_in+0x238>
	}

	/*for (uint16_t i = 0; i < NB_DCT_OUTPUTS * NB_MFCC; i++) {
		input[(i%NB_DCT_OUTPUTS)*NB_MFCC + i/NB_DCT_OUTPUTS] = (int8_t) ((UINT8_MAX*(int32_t)Mfcc[i]-127*min_value-128*max_value)/(max_value-min_value));
	}*/
	for (uint16_t i = 0; i < NB_DCT_OUTPUTS * NB_MFCC; i++) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80012c0:	e025      	b.n	800130e <set_data_ai_in+0x2d6>
		input[i] = (int8_t) ((UINT8_MAX*(int32_t)Mfcc[i]-127*min_value-128*max_value)/(max_value-min_value));
 80012c2:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80012c6:	4a20      	ldr	r2, [pc, #128]	; (8001348 <set_data_ai_in+0x310>)
 80012c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4613      	mov	r3, r2
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	1a9a      	subs	r2, r3, r2
 80012d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012d8:	4619      	mov	r1, r3
 80012da:	01db      	lsls	r3, r3, #7
 80012dc:	1acb      	subs	r3, r1, r3
 80012de:	441a      	add	r2, r3
 80012e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80012e4:	01db      	lsls	r3, r3, #7
 80012e6:	1ad2      	subs	r2, r2, r3
 80012e8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80012ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012f0:	1acb      	subs	r3, r1, r3
 80012f2:	fb92 f1f3 	sdiv	r1, r2, r3
 80012f6:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80012fa:	1d3a      	adds	r2, r7, #4
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	b24a      	sxtb	r2, r1
 8001302:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < NB_DCT_OUTPUTS * NB_MFCC; i++) {
 8001304:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8001308:	3301      	adds	r3, #1
 800130a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 800130e:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8001312:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001316:	4293      	cmp	r3, r2
 8001318:	d9d3      	bls.n	80012c2 <set_data_ai_in+0x28a>
	}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <set_data_ai_in+0x2f8>)
 8001322:	f006 fb4f 	bl	80079c4 <HAL_GPIO_WritePin>
}
 8001326:	bf00      	nop
 8001328:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	48000400 	.word	0x48000400
 8001334:	48000800 	.word	0x48000800
 8001338:	2000169c 	.word	0x2000169c
 800133c:	2000169d 	.word	0x2000169d
 8001340:	2000f3b4 	.word	0x2000f3b4
 8001344:	2000abd4 	.word	0x2000abd4
 8001348:	2000b894 	.word	0x2000b894
 800134c:	2000b094 	.word	0x2000b094
 8001350:	2000ab9c 	.word	0x2000ab9c
 8001354:	00000000 	.word	0x00000000

08001358 <get_data_ai_out>:

void get_data_ai_out(int8_t *data) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
		length = sprintf(str, " (German: %f%%, ", data[0]);
		HAL_USART_Transmit(&husart1, (uint8_t*)str, length, 30000);
		length = sprintf(str, "English: %f%%)\n", data[1]);
		HAL_USART_Transmit(&husart1, (uint8_t*)str, length, 30000);
	}*/
	if(data[0] > data[1] && data[0] > data[2]){
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f993 2000 	ldrsb.w	r2, [r3]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3301      	adds	r3, #1
 800136a:	f993 3000 	ldrsb.w	r3, [r3]
 800136e:	429a      	cmp	r2, r3
 8001370:	dd7a      	ble.n	8001468 <get_data_ai_out+0x110>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f993 2000 	ldrsb.w	r2, [r3]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3302      	adds	r3, #2
 800137c:	f993 3000 	ldrsb.w	r3, [r3]
 8001380:	429a      	cmp	r2, r3
 8001382:	dd71      	ble.n	8001468 <get_data_ai_out+0x110>
		length = sprintf(str, "German: %f%%", ((float)data[0]+128)/2.55);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f993 3000 	ldrsb.w	r3, [r3]
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001392:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8001658 <get_data_ai_out+0x300>
 8001396:	ee77 7a87 	vadd.f32	s15, s15, s14
 800139a:	ee17 0a90 	vmov	r0, s15
 800139e:	f7ff f8d3 	bl	8000548 <__aeabi_f2d>
 80013a2:	a3ab      	add	r3, pc, #684	; (adr r3, 8001650 <get_data_ai_out+0x2f8>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	f7ff fa50 	bl	800084c <__aeabi_ddiv>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	f107 0008 	add.w	r0, r7, #8
 80013b4:	49a9      	ldr	r1, [pc, #676]	; (800165c <get_data_ai_out+0x304>)
 80013b6:	f010 fd2d 	bl	8011e14 <siprintf>
 80013ba:	4603      	mov	r3, r0
 80013bc:	84fb      	strh	r3, [r7, #38]	; 0x26
		HAL_USART_Transmit(&husart1, (uint8_t*)str, length, 30000);
 80013be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80013c0:	f107 0108 	add.w	r1, r7, #8
 80013c4:	f247 5330 	movw	r3, #30000	; 0x7530
 80013c8:	48a5      	ldr	r0, [pc, #660]	; (8001660 <get_data_ai_out+0x308>)
 80013ca:	f007 fe83 	bl	80090d4 <HAL_USART_Transmit>
		length = sprintf(str, " (English: %f%%, ", ((float)data[1]+128)/2.55);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3301      	adds	r3, #1
 80013d2:	f993 3000 	ldrsb.w	r3, [r3]
 80013d6:	ee07 3a90 	vmov	s15, r3
 80013da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013de:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001658 <get_data_ai_out+0x300>
 80013e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013e6:	ee17 0a90 	vmov	r0, s15
 80013ea:	f7ff f8ad 	bl	8000548 <__aeabi_f2d>
 80013ee:	a398      	add	r3, pc, #608	; (adr r3, 8001650 <get_data_ai_out+0x2f8>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	f7ff fa2a 	bl	800084c <__aeabi_ddiv>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	f107 0008 	add.w	r0, r7, #8
 8001400:	4998      	ldr	r1, [pc, #608]	; (8001664 <get_data_ai_out+0x30c>)
 8001402:	f010 fd07 	bl	8011e14 <siprintf>
 8001406:	4603      	mov	r3, r0
 8001408:	84fb      	strh	r3, [r7, #38]	; 0x26
		HAL_USART_Transmit(&husart1, (uint8_t*)str, length, 30000);
 800140a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800140c:	f107 0108 	add.w	r1, r7, #8
 8001410:	f247 5330 	movw	r3, #30000	; 0x7530
 8001414:	4892      	ldr	r0, [pc, #584]	; (8001660 <get_data_ai_out+0x308>)
 8001416:	f007 fe5d 	bl	80090d4 <HAL_USART_Transmit>
		length = sprintf(str, "Spanish: %f%%)\n", ((float)data[2]+128)/2.55);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3302      	adds	r3, #2
 800141e:	f993 3000 	ldrsb.w	r3, [r3]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001658 <get_data_ai_out+0x300>
 800142e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001432:	ee17 0a90 	vmov	r0, s15
 8001436:	f7ff f887 	bl	8000548 <__aeabi_f2d>
 800143a:	a385      	add	r3, pc, #532	; (adr r3, 8001650 <get_data_ai_out+0x2f8>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff fa04 	bl	800084c <__aeabi_ddiv>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	f107 0008 	add.w	r0, r7, #8
 800144c:	4986      	ldr	r1, [pc, #536]	; (8001668 <get_data_ai_out+0x310>)
 800144e:	f010 fce1 	bl	8011e14 <siprintf>
 8001452:	4603      	mov	r3, r0
 8001454:	84fb      	strh	r3, [r7, #38]	; 0x26
		HAL_USART_Transmit(&husart1, (uint8_t*)str, length, 30000);
 8001456:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001458:	f107 0108 	add.w	r1, r7, #8
 800145c:	f247 5330 	movw	r3, #30000	; 0x7530
 8001460:	487f      	ldr	r0, [pc, #508]	; (8001660 <get_data_ai_out+0x308>)
 8001462:	f007 fe37 	bl	80090d4 <HAL_USART_Transmit>
		length = sprintf(str, " (German: %f%%, ", ((float)data[0]+128)/2.55);
		HAL_USART_Transmit(&husart1, (uint8_t*)str, length, 30000);
		length = sprintf(str, "English: %f%%)\n", ((float)data[1]+128)/2.55);
		HAL_USART_Transmit(&husart1, (uint8_t*)str, length, 30000);
	}
}
 8001466:	e0ec      	b.n	8001642 <get_data_ai_out+0x2ea>
	else if(data[1] > data[2]){
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3301      	adds	r3, #1
 800146c:	f993 2000 	ldrsb.w	r2, [r3]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3302      	adds	r3, #2
 8001474:	f993 3000 	ldrsb.w	r3, [r3]
 8001478:	429a      	cmp	r2, r3
 800147a:	dd71      	ble.n	8001560 <get_data_ai_out+0x208>
		length = sprintf(str, "English: %f%%", ((float)data[1]+128)/2.55);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3301      	adds	r3, #1
 8001480:	f993 3000 	ldrsb.w	r3, [r3]
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148c:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001658 <get_data_ai_out+0x300>
 8001490:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001494:	ee17 0a90 	vmov	r0, s15
 8001498:	f7ff f856 	bl	8000548 <__aeabi_f2d>
 800149c:	a36c      	add	r3, pc, #432	; (adr r3, 8001650 <get_data_ai_out+0x2f8>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7ff f9d3 	bl	800084c <__aeabi_ddiv>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	f107 0008 	add.w	r0, r7, #8
 80014ae:	496f      	ldr	r1, [pc, #444]	; (800166c <get_data_ai_out+0x314>)
 80014b0:	f010 fcb0 	bl	8011e14 <siprintf>
 80014b4:	4603      	mov	r3, r0
 80014b6:	84fb      	strh	r3, [r7, #38]	; 0x26
		HAL_USART_Transmit(&husart1, (uint8_t*)str, length, 30000);
 80014b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80014ba:	f107 0108 	add.w	r1, r7, #8
 80014be:	f247 5330 	movw	r3, #30000	; 0x7530
 80014c2:	4867      	ldr	r0, [pc, #412]	; (8001660 <get_data_ai_out+0x308>)
 80014c4:	f007 fe06 	bl	80090d4 <HAL_USART_Transmit>
		length = sprintf(str, " (German: %f%%, ", ((float)data[0]+128)/2.55);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f993 3000 	ldrsb.w	r3, [r3]
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d6:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001658 <get_data_ai_out+0x300>
 80014da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014de:	ee17 0a90 	vmov	r0, s15
 80014e2:	f7ff f831 	bl	8000548 <__aeabi_f2d>
 80014e6:	a35a      	add	r3, pc, #360	; (adr r3, 8001650 <get_data_ai_out+0x2f8>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f7ff f9ae 	bl	800084c <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	f107 0008 	add.w	r0, r7, #8
 80014f8:	495d      	ldr	r1, [pc, #372]	; (8001670 <get_data_ai_out+0x318>)
 80014fa:	f010 fc8b 	bl	8011e14 <siprintf>
 80014fe:	4603      	mov	r3, r0
 8001500:	84fb      	strh	r3, [r7, #38]	; 0x26
		HAL_USART_Transmit(&husart1, (uint8_t*)str, length, 30000);
 8001502:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001504:	f107 0108 	add.w	r1, r7, #8
 8001508:	f247 5330 	movw	r3, #30000	; 0x7530
 800150c:	4854      	ldr	r0, [pc, #336]	; (8001660 <get_data_ai_out+0x308>)
 800150e:	f007 fde1 	bl	80090d4 <HAL_USART_Transmit>
		length = sprintf(str, "Spanish: %f%%)\n", ((float)data[2]+128)/2.55);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3302      	adds	r3, #2
 8001516:	f993 3000 	ldrsb.w	r3, [r3]
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001522:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001658 <get_data_ai_out+0x300>
 8001526:	ee77 7a87 	vadd.f32	s15, s15, s14
 800152a:	ee17 0a90 	vmov	r0, s15
 800152e:	f7ff f80b 	bl	8000548 <__aeabi_f2d>
 8001532:	a347      	add	r3, pc, #284	; (adr r3, 8001650 <get_data_ai_out+0x2f8>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f988 	bl	800084c <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	f107 0008 	add.w	r0, r7, #8
 8001544:	4948      	ldr	r1, [pc, #288]	; (8001668 <get_data_ai_out+0x310>)
 8001546:	f010 fc65 	bl	8011e14 <siprintf>
 800154a:	4603      	mov	r3, r0
 800154c:	84fb      	strh	r3, [r7, #38]	; 0x26
		HAL_USART_Transmit(&husart1, (uint8_t*)str, length, 30000);
 800154e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001550:	f107 0108 	add.w	r1, r7, #8
 8001554:	f247 5330 	movw	r3, #30000	; 0x7530
 8001558:	4841      	ldr	r0, [pc, #260]	; (8001660 <get_data_ai_out+0x308>)
 800155a:	f007 fdbb 	bl	80090d4 <HAL_USART_Transmit>
}
 800155e:	e070      	b.n	8001642 <get_data_ai_out+0x2ea>
		length = sprintf(str, "Spanish: %f%%", ((float)data[2]+128)/2.55);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3302      	adds	r3, #2
 8001564:	f993 3000 	ldrsb.w	r3, [r3]
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001570:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001658 <get_data_ai_out+0x300>
 8001574:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001578:	ee17 0a90 	vmov	r0, s15
 800157c:	f7fe ffe4 	bl	8000548 <__aeabi_f2d>
 8001580:	a333      	add	r3, pc, #204	; (adr r3, 8001650 <get_data_ai_out+0x2f8>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7ff f961 	bl	800084c <__aeabi_ddiv>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	f107 0008 	add.w	r0, r7, #8
 8001592:	4938      	ldr	r1, [pc, #224]	; (8001674 <get_data_ai_out+0x31c>)
 8001594:	f010 fc3e 	bl	8011e14 <siprintf>
 8001598:	4603      	mov	r3, r0
 800159a:	84fb      	strh	r3, [r7, #38]	; 0x26
		HAL_USART_Transmit(&husart1, (uint8_t*)str, length, 30000);
 800159c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800159e:	f107 0108 	add.w	r1, r7, #8
 80015a2:	f247 5330 	movw	r3, #30000	; 0x7530
 80015a6:	482e      	ldr	r0, [pc, #184]	; (8001660 <get_data_ai_out+0x308>)
 80015a8:	f007 fd94 	bl	80090d4 <HAL_USART_Transmit>
		length = sprintf(str, " (German: %f%%, ", ((float)data[0]+128)/2.55);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f993 3000 	ldrsb.w	r3, [r3]
 80015b2:	ee07 3a90 	vmov	s15, r3
 80015b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ba:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001658 <get_data_ai_out+0x300>
 80015be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015c2:	ee17 0a90 	vmov	r0, s15
 80015c6:	f7fe ffbf 	bl	8000548 <__aeabi_f2d>
 80015ca:	a321      	add	r3, pc, #132	; (adr r3, 8001650 <get_data_ai_out+0x2f8>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff f93c 	bl	800084c <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	f107 0008 	add.w	r0, r7, #8
 80015dc:	4924      	ldr	r1, [pc, #144]	; (8001670 <get_data_ai_out+0x318>)
 80015de:	f010 fc19 	bl	8011e14 <siprintf>
 80015e2:	4603      	mov	r3, r0
 80015e4:	84fb      	strh	r3, [r7, #38]	; 0x26
		HAL_USART_Transmit(&husart1, (uint8_t*)str, length, 30000);
 80015e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015e8:	f107 0108 	add.w	r1, r7, #8
 80015ec:	f247 5330 	movw	r3, #30000	; 0x7530
 80015f0:	481b      	ldr	r0, [pc, #108]	; (8001660 <get_data_ai_out+0x308>)
 80015f2:	f007 fd6f 	bl	80090d4 <HAL_USART_Transmit>
		length = sprintf(str, "English: %f%%)\n", ((float)data[1]+128)/2.55);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3301      	adds	r3, #1
 80015fa:	f993 3000 	ldrsb.w	r3, [r3]
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001606:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001658 <get_data_ai_out+0x300>
 800160a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800160e:	ee17 0a90 	vmov	r0, s15
 8001612:	f7fe ff99 	bl	8000548 <__aeabi_f2d>
 8001616:	a30e      	add	r3, pc, #56	; (adr r3, 8001650 <get_data_ai_out+0x2f8>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7ff f916 	bl	800084c <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	f107 0008 	add.w	r0, r7, #8
 8001628:	4913      	ldr	r1, [pc, #76]	; (8001678 <get_data_ai_out+0x320>)
 800162a:	f010 fbf3 	bl	8011e14 <siprintf>
 800162e:	4603      	mov	r3, r0
 8001630:	84fb      	strh	r3, [r7, #38]	; 0x26
		HAL_USART_Transmit(&husart1, (uint8_t*)str, length, 30000);
 8001632:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001634:	f107 0108 	add.w	r1, r7, #8
 8001638:	f247 5330 	movw	r3, #30000	; 0x7530
 800163c:	4808      	ldr	r0, [pc, #32]	; (8001660 <get_data_ai_out+0x308>)
 800163e:	f007 fd49 	bl	80090d4 <HAL_USART_Transmit>
}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	f3af 8000 	nop.w
 8001650:	66666666 	.word	0x66666666
 8001654:	40046666 	.word	0x40046666
 8001658:	43000000 	.word	0x43000000
 800165c:	08014c20 	.word	0x08014c20
 8001660:	2000f32c 	.word	0x2000f32c
 8001664:	08014c30 	.word	0x08014c30
 8001668:	08014c44 	.word	0x08014c44
 800166c:	08014c54 	.word	0x08014c54
 8001670:	08014c64 	.word	0x08014c64
 8001674:	08014c78 	.word	0x08014c78
 8001678:	08014c88 	.word	0x08014c88

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_MspInit+0x44>)
 8001694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001696:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <HAL_MspInit+0x44>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6613      	str	r3, [r2, #96]	; 0x60
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_MspInit+0x44>)
 80016a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_MspInit+0x44>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_MspInit+0x44>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6593      	str	r3, [r2, #88]	; 0x58
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_MspInit+0x44>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	; (800170c <HAL_CRC_MspInit+0x38>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d10b      	bne.n	80016fe <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_CRC_MspInit+0x3c>)
 80016e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ea:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_CRC_MspInit+0x3c>)
 80016ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016f0:	6493      	str	r3, [r2, #72]	; 0x48
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_CRC_MspInit+0x3c>)
 80016f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40023000 	.word	0x40023000
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0ac      	sub	sp, #176	; 0xb0
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2288      	movs	r2, #136	; 0x88
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f00f fe29 	bl	801138c <memset>
  if(DFSDM1_Init == 0)
 800173a:	4b49      	ldr	r3, [pc, #292]	; (8001860 <HAL_DFSDM_FilterMspInit+0x14c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d153      	bne.n	80017ea <HAL_DFSDM_FilterMspInit+0xd6>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001746:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4618      	mov	r0, r3
 8001754:	f006 ffb8 	bl	80086c8 <HAL_RCCEx_PeriphCLKConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800175e:	f7ff ff8d 	bl	800167c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001762:	4b40      	ldr	r3, [pc, #256]	; (8001864 <HAL_DFSDM_FilterMspInit+0x150>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	3301      	adds	r3, #1
 8001768:	4a3e      	ldr	r2, [pc, #248]	; (8001864 <HAL_DFSDM_FilterMspInit+0x150>)
 800176a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800176c:	4b3d      	ldr	r3, [pc, #244]	; (8001864 <HAL_DFSDM_FilterMspInit+0x150>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d10b      	bne.n	800178c <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001774:	4b3c      	ldr	r3, [pc, #240]	; (8001868 <HAL_DFSDM_FilterMspInit+0x154>)
 8001776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001778:	4a3b      	ldr	r2, [pc, #236]	; (8001868 <HAL_DFSDM_FilterMspInit+0x154>)
 800177a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800177e:	6613      	str	r3, [r2, #96]	; 0x60
 8001780:	4b39      	ldr	r3, [pc, #228]	; (8001868 <HAL_DFSDM_FilterMspInit+0x154>)
 8001782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <HAL_DFSDM_FilterMspInit+0x154>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	4a35      	ldr	r2, [pc, #212]	; (8001868 <HAL_DFSDM_FilterMspInit+0x154>)
 8001792:	f043 0310 	orr.w	r3, r3, #16
 8001796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001798:	4b33      	ldr	r3, [pc, #204]	; (8001868 <HAL_DFSDM_FilterMspInit+0x154>)
 800179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80017a4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80017a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80017be:	2306      	movs	r3, #6
 80017c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017c8:	4619      	mov	r1, r3
 80017ca:	4828      	ldr	r0, [pc, #160]	; (800186c <HAL_DFSDM_FilterMspInit+0x158>)
 80017cc:	f005 ff38 	bl	8007640 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	203d      	movs	r0, #61	; 0x3d
 80017d6:	f004 ff4e 	bl	8006676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 80017da:	203d      	movs	r0, #61	; 0x3d
 80017dc:	f004 ff67 	bl	80066ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <HAL_DFSDM_FilterMspInit+0x14c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_DFSDM_FilterMspInit+0x14c>)
 80017e8:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a20      	ldr	r2, [pc, #128]	; (8001870 <HAL_DFSDM_FilterMspInit+0x15c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d131      	bne.n	8001858 <HAL_DFSDM_FilterMspInit+0x144>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <HAL_DFSDM_FilterMspInit+0x160>)
 80017f6:	4a20      	ldr	r2, [pc, #128]	; (8001878 <HAL_DFSDM_FilterMspInit+0x164>)
 80017f8:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <HAL_DFSDM_FilterMspInit+0x160>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_DFSDM_FilterMspInit+0x160>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_DFSDM_FilterMspInit+0x160>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800180c:	4b19      	ldr	r3, [pc, #100]	; (8001874 <HAL_DFSDM_FilterMspInit+0x160>)
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_DFSDM_FilterMspInit+0x160>)
 8001814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001818:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800181a:	4b16      	ldr	r3, [pc, #88]	; (8001874 <HAL_DFSDM_FilterMspInit+0x160>)
 800181c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001820:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <HAL_DFSDM_FilterMspInit+0x160>)
 8001824:	2220      	movs	r2, #32
 8001826:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_DFSDM_FilterMspInit+0x160>)
 800182a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800182e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001830:	4810      	ldr	r0, [pc, #64]	; (8001874 <HAL_DFSDM_FilterMspInit+0x160>)
 8001832:	f005 fd0d 	bl	8007250 <HAL_DMA_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_DFSDM_FilterMspInit+0x12c>
    {
      Error_Handler();
 800183c:	f7ff ff1e 	bl	800167c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <HAL_DFSDM_FilterMspInit+0x160>)
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <HAL_DFSDM_FilterMspInit+0x160>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <HAL_DFSDM_FilterMspInit+0x160>)
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_DFSDM_FilterMspInit+0x160>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001858:	bf00      	nop
 800185a:	37b0      	adds	r7, #176	; 0xb0
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200016a4 	.word	0x200016a4
 8001864:	200016a0 	.word	0x200016a0
 8001868:	40021000 	.word	0x40021000
 800186c:	48001000 	.word	0x48001000
 8001870:	40016100 	.word	0x40016100
 8001874:	2000b04c 	.word	0x2000b04c
 8001878:	40020044 	.word	0x40020044

0800187c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b0ac      	sub	sp, #176	; 0xb0
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2288      	movs	r2, #136	; 0x88
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f00f fd75 	bl	801138c <memset>
  if(DFSDM1_Init == 0)
 80018a2:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_DFSDM_ChannelMspInit+0xd0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d14b      	bne.n	8001942 <HAL_DFSDM_ChannelMspInit+0xc6>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80018aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4618      	mov	r0, r3
 80018bc:	f006 ff04 	bl	80086c8 <HAL_RCCEx_PeriphCLKConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80018c6:	f7ff fed9 	bl	800167c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80018d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80018d4:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d10b      	bne.n	80018f4 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80018de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e0:	4a1c      	ldr	r2, [pc, #112]	; (8001954 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80018e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e6:	6613      	str	r3, [r2, #96]	; 0x60
 80018e8:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80018ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80018f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f8:	4a16      	ldr	r2, [pc, #88]	; (8001954 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80018fa:	f043 0310 	orr.w	r3, r3, #16
 80018fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800190c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001926:	2306      	movs	r3, #6
 8001928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800192c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001930:	4619      	mov	r1, r3
 8001932:	4809      	ldr	r0, [pc, #36]	; (8001958 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8001934:	f005 fe84 	bl	8007640 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <HAL_DFSDM_ChannelMspInit+0xd0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	4a03      	ldr	r2, [pc, #12]	; (800194c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001940:	6013      	str	r3, [r2, #0]
  }

}
 8001942:	bf00      	nop
 8001944:	37b0      	adds	r7, #176	; 0xb0
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200016a4 	.word	0x200016a4
 8001950:	200016a0 	.word	0x200016a0
 8001954:	40021000 	.word	0x40021000
 8001958:	48001000 	.word	0x48001000

0800195c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b0ac      	sub	sp, #176	; 0xb0
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2288      	movs	r2, #136	; 0x88
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f00f fd05 	bl	801138c <memset>
  if(husart->Instance==USART1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a21      	ldr	r2, [pc, #132]	; (8001a0c <HAL_USART_MspInit+0xb0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d13a      	bne.n	8001a02 <HAL_USART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800198c:	2301      	movs	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001990:	2301      	movs	r3, #1
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4618      	mov	r0, r3
 800199a:	f006 fe95 	bl	80086c8 <HAL_RCCEx_PeriphCLKConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 80019a4:	f7ff fe6a 	bl	800167c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_USART_MspInit+0xb4>)
 80019aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ac:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <HAL_USART_MspInit+0xb4>)
 80019ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b2:	6613      	str	r3, [r2, #96]	; 0x60
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_USART_MspInit+0xb4>)
 80019b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_USART_MspInit+0xb4>)
 80019c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c4:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <HAL_USART_MspInit+0xb4>)
 80019c6:	f043 0302 	orr.w	r3, r3, #2
 80019ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_USART_MspInit+0xb4>)
 80019ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB5     ------> USART1_CK
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019d8:	23e0      	movs	r3, #224	; 0xe0
 80019da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f0:	2307      	movs	r3, #7
 80019f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <HAL_USART_MspInit+0xb8>)
 80019fe:	f005 fe1f 	bl	8007640 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a02:	bf00      	nop
 8001a04:	37b0      	adds	r7, #176	; 0xb0
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40013800 	.word	0x40013800
 8001a10:	40021000 	.word	0x40021000
 8001a14:	48000400 	.word	0x48000400

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6c:	f004 fce4 	bl	8006438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <DMA1_Channel4_IRQHandler+0x10>)
 8001a7a:	f005 fd01 	bl	8007480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000b04c 	.word	0x2000b04c

08001a88 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <DFSDM1_FLT0_IRQHandler+0x10>)
 8001a8e:	f005 f989 	bl	8006da4 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000aff8 	.word	0x2000aff8

08001a9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <_sbrk+0x50>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <_sbrk+0x16>
		heap_end = &end;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <_sbrk+0x50>)
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <_sbrk+0x54>)
 8001ab0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <_sbrk+0x50>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <_sbrk+0x50>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4413      	add	r3, r2
 8001ac0:	466a      	mov	r2, sp
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d907      	bls.n	8001ad6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ac6:	f00f fc21 	bl	801130c <__errno>
 8001aca:	4603      	mov	r3, r0
 8001acc:	220c      	movs	r2, #12
 8001ace:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	e006      	b.n	8001ae4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <_sbrk+0x50>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a03      	ldr	r2, [pc, #12]	; (8001aec <_sbrk+0x50>)
 8001ae0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200016a8 	.word	0x200016a8
 8001af0:	20011318 	.word	0x20011318

08001af4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <SystemInit+0x64>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afe:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <SystemInit+0x64>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <SystemInit+0x68>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <SystemInit+0x68>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <SystemInit+0x68>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <SystemInit+0x68>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <SystemInit+0x68>)
 8001b20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <SystemInit+0x68>)
 8001b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <SystemInit+0x68>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <SystemInit+0x68>)
 8001b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b3e:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <SystemInit+0x68>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SystemInit+0x64>)
 8001b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00
 8001b5c:	40021000 	.word	0x40021000

08001b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b66:	e003      	b.n	8001b70 <LoopCopyDataInit>

08001b68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b6e:	3104      	adds	r1, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b70:	480b      	ldr	r0, [pc, #44]	; (8001ba0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b78:	d3f6      	bcc.n	8001b68 <CopyDataInit>
	ldr	r2, =_sbss
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b7c:	e002      	b.n	8001b84 <LoopFillZerobss>

08001b7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b80:	f842 3b04 	str.w	r3, [r2], #4

08001b84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <LoopForever+0x16>)
	cmp	r2, r3
 8001b86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b88:	d3f9      	bcc.n	8001b7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b8a:	f7ff ffb3 	bl	8001af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f00f fbc3 	bl	8011318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b92:	f7ff f87d 	bl	8000c90 <main>

08001b96 <LoopForever>:

LoopForever:
    b LoopForever
 8001b96:	e7fe      	b.n	8001b96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b98:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001b9c:	080ca57c 	.word	0x080ca57c
	ldr	r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ba4:	20001664 	.word	0x20001664
	ldr	r2, =_sbss
 8001ba8:	20001680 	.word	0x20001680
	ldr	r3, = _ebss
 8001bac:	20011318 	.word	0x20011318

08001bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC1_2_IRQHandler>

08001bb2 <arm_abs_q15>:
#else
void arm_abs_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b08b      	sub	sp, #44	; 0x2c
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001bc2:	e01e      	b.n	8001c02 <arm_abs_q15+0x50>
  {
    /* C = |A| */

    /* Calculate absolute of input (if -1 then saturated to 0x7fff) and store result in destination buffer. */
    in = *pSrc++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1c9a      	adds	r2, r3, #2
 8001bc8:	60fa      	str	r2, [r7, #12]
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	847b      	strh	r3, [r7, #34]	; 0x22
#if defined (ARM_MATH_DSP)
    *pDst++ = (in > 0) ? in : (q15_t)__QSUB16(0, in);
 8001bce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	dc0c      	bgt.n	8001bf0 <arm_abs_q15+0x3e>
 8001bd6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61fa      	str	r2, [r7, #28]
 8001bde:	61bb      	str	r3, [r7, #24]

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	fad3 f312 	qsub16	r3, r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
  return(result);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	b21a      	sxth	r2, r3
 8001bee:	e001      	b.n	8001bf4 <arm_abs_q15+0x42>
 8001bf0:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1c99      	adds	r1, r3, #2
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	801a      	strh	r2, [r3, #0]
#else
    *pDst++ = (in > 0) ? in : ((in == (q15_t) 0x8000) ? 0x7fff : -in);
#endif

    /* Decrement loop counter */
    blkCnt--;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1dd      	bne.n	8001bc4 <arm_abs_q15+0x12>
  }

}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	372c      	adds	r7, #44	; 0x2c
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <arm_dot_prod_q15>:
void arm_dot_prod_q15(
  const q15_t * pSrcA,
  const q15_t * pSrcB,
        uint32_t blockSize,
        q63_t * result)
{
 8001c16:	b4b0      	push	{r4, r5, r7}
 8001c18:	b089      	sub	sp, #36	; 0x24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	603b      	str	r3, [r7, #0]
        uint32_t blkCnt;                               /* Loop counter */
        q63_t sum = 0;                                 /* Temporary return variable */
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001c34:	e019      	b.n	8001c6a <arm_dot_prod_q15+0x54>

    /* Calculate dot product and store result in a temporary buffer. */
//#if defined (ARM_MATH_DSP)
//    sum  = __SMLALD(*pSrcA++, *pSrcB++, sum);
//#else
    sum += (q63_t)((q31_t) *pSrcA++ * *pSrcB++);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1c9a      	adds	r2, r3, #2
 8001c3a:	60fa      	str	r2, [r7, #12]
 8001c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c40:	4619      	mov	r1, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1c9a      	adds	r2, r3, #2
 8001c46:	60ba      	str	r2, [r7, #8]
 8001c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c4c:	fb03 f301 	mul.w	r3, r3, r1
 8001c50:	461a      	mov	r2, r3
 8001c52:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c5a:	1884      	adds	r4, r0, r2
 8001c5c:	eb41 0503 	adc.w	r5, r1, r3
 8001c60:	e9c7 4504 	strd	r4, r5, [r7, #16]
//#endif

    /* Decrement loop counter */
    blkCnt--;
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e2      	bne.n	8001c36 <arm_dot_prod_q15+0x20>
  }

  /* Store result in destination buffer in 34.30 format */
  *result = sum;
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c76:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001c7a:	bf00      	nop
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bcb0      	pop	{r4, r5, r7}
 8001c82:	4770      	bx	lr

08001c84 <arm_mult_q15>:
void arm_mult_q15(
  const q15_t * pSrcA,
  const q15_t * pSrcB,
        q15_t * pDst,
        uint32_t blockSize)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001c96:	e01b      	b.n	8001cd0 <arm_mult_q15+0x4c>
  {
    /* C = A * B */

    /* Multiply inputs and store result in destination buffer. */
    *pDst++ = (q15_t) __SSAT((((q31_t) (*pSrcA++) * (*pSrcB++)) >> 15), 16);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1c9a      	adds	r2, r3, #2
 8001c9c:	60fa      	str	r2, [r7, #12]
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1c9a      	adds	r2, r3, #2
 8001ca8:	60ba      	str	r2, [r7, #8]
 8001caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cae:	fb03 f301 	mul.w	r3, r3, r1
 8001cb2:	13db      	asrs	r3, r3, #15
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f303 030f 	ssat	r3, #16, r3
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	6979      	ldr	r1, [r7, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	1c9a      	adds	r2, r3, #2
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	b20a      	sxth	r2, r1
 8001cc8:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1e0      	bne.n	8001c98 <arm_mult_q15+0x14>
  }

}
 8001cd6:	bf00      	nop
 8001cd8:	bf00      	nop
 8001cda:	3724      	adds	r7, #36	; 0x24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <arm_offset_q31>:
void arm_offset_q31(
  const q31_t * pSrc,
        q31_t offset,
        q31_t * pDst,
        uint32_t blockSize)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001cf6:	e013      	b.n	8001d20 <arm_offset_q31+0x3c>
  {
    /* C = A + offset */

    /* Add offset and store result in destination buffer. */
#if defined (ARM_MATH_DSP)
    *pDst++ = __QADD(*pSrc++, offset);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1d1a      	adds	r2, r3, #4
 8001cfc:	60fa      	str	r2, [r7, #12]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	1d19      	adds	r1, r3, #4
 8001d04:	6079      	str	r1, [r7, #4]
 8001d06:	61ba      	str	r2, [r7, #24]
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	617a      	str	r2, [r7, #20]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	6979      	ldr	r1, [r7, #20]
 8001d10:	fa81 f282 	qadd	r2, r2, r1
 8001d14:	613a      	str	r2, [r7, #16]
  return(result);
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	601a      	str	r2, [r3, #0]
#else
    *pDst++ = (q31_t) clip_q63_to_q31((q63_t) * pSrc++ + offset);
#endif

    /* Decrement loop counter */
    blkCnt--;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1e8      	bne.n	8001cf8 <arm_offset_q31+0x14>
  }

}
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	3724      	adds	r7, #36	; 0x24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <arm_scale_q15>:
  const q15_t *pSrc,
        q15_t scaleFract,
        int8_t shift,
        q15_t *pDst,
        uint32_t blockSize)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	817b      	strh	r3, [r7, #10]
 8001d42:	4613      	mov	r3, r2
 8001d44:	727b      	strb	r3, [r7, #9]
        uint32_t blkCnt;                               /* Loop counter */
        int8_t kShift = 15 - shift;                    /* Shift to apply after scaling */
 8001d46:	7a7b      	ldrb	r3, [r7, #9]
 8001d48:	f1c3 030f 	rsb	r3, r3, #15
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8001d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d52:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001d54:	e01b      	b.n	8001d8e <arm_scale_q15+0x5a>
  {
    /* C = A * scale */

    /* Scale input and store result in destination buffer. */
    *pDst++ = (q15_t) (__SSAT(((q31_t) *pSrc++ * scaleFract) >> kShift, 16));
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1c9a      	adds	r2, r3, #2
 8001d5a:	60fa      	str	r2, [r7, #12]
 8001d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d60:	461a      	mov	r2, r3
 8001d62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d66:	fb03 f202 	mul.w	r2, r3, r2
 8001d6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001d6e:	fa42 f303 	asr.w	r3, r2, r3
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f303 030f 	ssat	r3, #16, r3
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	6939      	ldr	r1, [r7, #16]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	1c9a      	adds	r2, r3, #2
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	b20a      	sxth	r2, r1
 8001d86:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e0      	bne.n	8001d56 <arm_scale_q15+0x22>
  }

}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <arm_shift_q15>:
void arm_shift_q15(
  const q15_t * pSrc,
        int8_t shiftBits,
        q15_t * pDst,
        uint32_t blockSize)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b089      	sub	sp, #36	; 0x24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	460b      	mov	r3, r1
 8001db0:	72fb      	strb	r3, [r7, #11]
        uint32_t blkCnt;                               /* Loop counter */
        uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 8001db2:	7afb      	ldrb	r3, [r7, #11]
 8001db4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001db8:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* If the shift value is positive then do right shift else left shift */
  if (sign == 0U)
 8001dbe:	7efb      	ldrb	r3, [r7, #27]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d12f      	bne.n	8001e24 <arm_shift_q15+0x82>
  {
    while (blkCnt > 0U)
 8001dc4:	e017      	b.n	8001df6 <arm_shift_q15+0x54>
    {
      /* C = A << shiftBits */

      /* Shift input and store result in destination buffer. */
      *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1c9a      	adds	r2, r3, #2
 8001dca:	60fa      	str	r2, [r7, #12]
 8001dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f303 030f 	ssat	r3, #16, r3
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	6939      	ldr	r1, [r7, #16]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	1c9a      	adds	r2, r3, #2
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	b20a      	sxth	r2, r1
 8001dee:	801a      	strh	r2, [r3, #0]

      /* Decrement loop counter */
      blkCnt--;
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e4      	bne.n	8001dc6 <arm_shift_q15+0x24>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 8001dfc:	e015      	b.n	8001e2a <arm_shift_q15+0x88>
      *pDst++ = (*pSrc++ >> -shiftBits);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1c9a      	adds	r2, r3, #2
 8001e02:	60fa      	str	r2, [r7, #12]
 8001e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001e0e:	425b      	negs	r3, r3
 8001e10:	fa42 f103 	asr.w	r1, r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	1c9a      	adds	r2, r3, #2
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	b20a      	sxth	r2, r1
 8001e1c:	801a      	strh	r2, [r3, #0]
      blkCnt--;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1e9      	bne.n	8001dfe <arm_shift_q15+0x5c>
}
 8001e2a:	bf00      	nop
 8001e2c:	3724      	adds	r7, #36	; 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <arm_shift_q31>:
void arm_shift_q31(
  const q31_t * pSrc,
        int8_t shiftBits,
        q31_t * pDst,
        uint32_t blockSize)
{
 8001e36:	b4f0      	push	{r4, r5, r6, r7}
 8001e38:	b088      	sub	sp, #32
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	460b      	mov	r3, r1
 8001e44:	72fb      	strb	r3, [r7, #11]
        uint32_t blkCnt;                               /* Loop counter */
        uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 8001e46:	7afb      	ldrb	r3, [r7, #11]
 8001e48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e4c:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* If the shift value is positive then do right shift else left shift */
  if (sign == 0U)
 8001e52:	7efb      	ldrb	r3, [r7, #27]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d14e      	bne.n	8001ef6 <arm_shift_q31+0xc0>
  {
    while (blkCnt > 0U)
 8001e58:	e039      	b.n	8001ece <arm_shift_q31+0x98>
    {
      /* C = A << shiftBits */

      /* Shift input and store result in destination buffer. */
      *pDst++ = clip_q63_to_q31((q63_t) *pSrc++ << shiftBits);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1d1a      	adds	r2, r3, #4
 8001e5e:	60fa      	str	r2, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e68:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8001e6c:	f1a1 0620 	sub.w	r6, r1, #32
 8001e70:	f1c1 0020 	rsb	r0, r1, #32
 8001e74:	fa03 f501 	lsl.w	r5, r3, r1
 8001e78:	fa02 f606 	lsl.w	r6, r2, r6
 8001e7c:	4335      	orrs	r5, r6
 8001e7e:	fa22 f000 	lsr.w	r0, r2, r0
 8001e82:	4305      	orrs	r5, r0
 8001e84:	fa02 f401 	lsl.w	r4, r2, r1
 8001e88:	687e      	ldr	r6, [r7, #4]
 8001e8a:	1d33      	adds	r3, r6, #4
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	e9c7 4504 	strd	r4, r5, [r7, #16]
   * @brief Clips Q63 to Q31 values.
   */
  __STATIC_FORCEINLINE q31_t clip_q63_to_q31(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 8001e92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	000a      	movs	r2, r1
 8001ea0:	17cb      	asrs	r3, r1, #31
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	17db      	asrs	r3, r3, #31
      ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d00c      	beq.n	8001ec4 <arm_shift_q31+0x8e>
 8001eaa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	17ca      	asrs	r2, r1, #31
 8001eb8:	17cb      	asrs	r3, r1, #31
 8001eba:	4613      	mov	r3, r2
 8001ebc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	e000      	b.n	8001ec6 <arm_shift_q31+0x90>
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	6033      	str	r3, [r6, #0]

      /* Decrement loop counter */
      blkCnt--;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1c2      	bne.n	8001e5a <arm_shift_q31+0x24>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 8001ed4:	e012      	b.n	8001efc <arm_shift_q31+0xc6>
      *pDst++ = (*pSrc++ >> -shiftBits);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1d1a      	adds	r2, r3, #4
 8001eda:	60fa      	str	r2, [r7, #12]
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ee2:	425a      	negs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	1d18      	adds	r0, r3, #4
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	fa41 f202 	asr.w	r2, r1, r2
 8001eee:	601a      	str	r2, [r3, #0]
      blkCnt--;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1ec      	bne.n	8001ed6 <arm_shift_q31+0xa0>
}
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bcf0      	pop	{r4, r5, r6, r7}
 8001f04:	4770      	bx	lr

08001f06 <arm_cmplx_mag_q15>:
#else
void arm_cmplx_mag_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t numSamples)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b08e      	sub	sp, #56	; 0x38
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001f16:	e027      	b.n	8001f68 <arm_cmplx_mag_q15+0x62>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

#if defined (ARM_MATH_DSP)
    in = read_q15x2_ia (&pSrc);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3b04      	subs	r3, #4
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	681b      	ldr	r3, [r3, #0]
  q15_t const * pQ15)
{
  q31_t val;

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (&val, pQ15, 4);
 8001f28:	617b      	str	r3, [r7, #20]
#else
  val = (pQ15[1] << 16) | (pQ15[0] & 0x0FFFF) ;
#endif

  return (val);
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
    acc0 = __SMUAD(in, in);
 8001f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f32:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3a:	fb23 f302 	smuad	r3, r3, r2
 8001f3e:	623b      	str	r3, [r7, #32]
  return(result);
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* store result in 2.14 format in destination buffer. */
    arm_sqrt_q31(acc0  >> 1 , &res);
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	105b      	asrs	r3, r3, #1
 8001f48:	f107 0218 	add.w	r2, r7, #24
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f884 	bl	800205c <arm_sqrt_q31>
    *pDst++ = res >> 16;
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	1419      	asrs	r1, r3, #16
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	1c9a      	adds	r2, r3, #2
 8001f5c:	60ba      	str	r2, [r7, #8]
 8001f5e:	b20a      	sxth	r2, r1
 8001f60:	801a      	strh	r2, [r3, #0]
    *pDst++ = res >> 16;
 
#endif

    /* Decrement loop counter */
    blkCnt--;
 8001f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f64:	3b01      	subs	r3, #1
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
  while (blkCnt > 0U)
 8001f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1d4      	bne.n	8001f18 <arm_cmplx_mag_q15+0x12>
  }

}
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
 8001f72:	3738      	adds	r7, #56	; 0x38
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <arm_divide_q15>:

arm_status arm_divide_q15(q15_t numerator,
  q15_t denominator,
  q15_t *quotient,
  int16_t *shift)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60ba      	str	r2, [r7, #8]
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	4603      	mov	r3, r0
 8001f84:	81fb      	strh	r3, [r7, #14]
 8001f86:	460b      	mov	r3, r1
 8001f88:	81bb      	strh	r3, [r7, #12]
  int16_t sign=0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	837b      	strh	r3, [r7, #26]
  q31_t temp;
  int16_t shiftForNormalizing;

  *shift = 0;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	801a      	strh	r2, [r3, #0]

  sign = (numerator>>15) ^ (denominator>>15);
 8001f94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f98:	13db      	asrs	r3, r3, #15
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001fa0:	13db      	asrs	r3, r3, #15
 8001fa2:	b21b      	sxth	r3, r3
 8001fa4:	4053      	eors	r3, r2
 8001fa6:	837b      	strh	r3, [r7, #26]

  if (denominator == 0)
 8001fa8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10f      	bne.n	8001fd0 <arm_divide_q15+0x58>
  {
     if (sign)
 8001fb0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d004      	beq.n	8001fc2 <arm_divide_q15+0x4a>
     {
        *quotient = 0x8000;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fbe:	801a      	strh	r2, [r3, #0]
 8001fc0:	e003      	b.n	8001fca <arm_divide_q15+0x52>
     }
     else
     {
        *quotient = 0x7FFF;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001fc8:	801a      	strh	r2, [r3, #0]
     }
     return(ARM_MATH_NANINF);
 8001fca:	f06f 0303 	mvn.w	r3, #3
 8001fce:	e040      	b.n	8002052 <arm_divide_q15+0xda>
  }

  arm_abs_q15(&numerator,&numerator,1);
 8001fd0:	f107 010e 	add.w	r1, r7, #14
 8001fd4:	f107 030e 	add.w	r3, r7, #14
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fde9 	bl	8001bb2 <arm_abs_q15>
  arm_abs_q15(&denominator,&denominator,1);
 8001fe0:	f107 010c 	add.w	r1, r7, #12
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fde1 	bl	8001bb2 <arm_abs_q15>
  
  temp = ((q31_t)numerator << 15) / ((q31_t)denominator);
 8001ff0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ff4:	03db      	lsls	r3, r3, #15
 8001ff6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ffa:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ffe:	61fb      	str	r3, [r7, #28]

  shiftForNormalizing= 17 - __CLZ(temp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <arm_divide_q15+0x96>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e003      	b.n	8002016 <arm_divide_q15+0x9e>
  return __builtin_clz(value);
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	b29b      	uxth	r3, r3
 8002018:	f1c3 0311 	rsb	r3, r3, #17
 800201c:	b29b      	uxth	r3, r3
 800201e:	833b      	strh	r3, [r7, #24]
  if (shiftForNormalizing > 0)
 8002020:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	dd08      	ble.n	800203a <arm_divide_q15+0xc2>
  {
     *shift = shiftForNormalizing;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	8b3a      	ldrh	r2, [r7, #24]
 800202c:	801a      	strh	r2, [r3, #0]
     temp = temp >> shiftForNormalizing;
 800202e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	fa42 f303 	asr.w	r3, r2, r3
 8002038:	61fb      	str	r3, [r7, #28]
  }

  if (sign)
 800203a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <arm_divide_q15+0xd0>
  {
    temp = -temp;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	425b      	negs	r3, r3
 8002046:	61fb      	str	r3, [r7, #28]
  }

  *quotient=temp;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	b21a      	sxth	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	801a      	strh	r2, [r3, #0]

  return(ARM_MATH_SUCCESS);
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3720      	adds	r7, #32
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <arm_sqrt_q31>:
#define Q28QUARTER 0x20000000 

arm_status arm_sqrt_q31(
  q31_t in,
  q31_t * pOut)
{
 800205c:	b4b0      	push	{r4, r5, r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  q31_t number, var1, signBits1 ,temp;
 
  number = in;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	61fb      	str	r3, [r7, #28]

  /* If the input is a positive number then compute the signBits. */
  if (number > 0)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	2b00      	cmp	r3, #0
 800206e:	f340 815b 	ble.w	8002328 <arm_sqrt_q31+0x2cc>
  {
    signBits1 = __CLZ(number) - 1;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <arm_sqrt_q31+0x24>
    return 32U;
 800207c:	2320      	movs	r3, #32
 800207e:	e003      	b.n	8002088 <arm_sqrt_q31+0x2c>
  return __builtin_clz(value);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	617b      	str	r3, [r7, #20]

    /* Shift by the number of signBits1 */
    if ((signBits1 % 2) == 0)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d105      	bne.n	80020a2 <arm_sqrt_q31+0x46>
    {
      number = number << signBits1;
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	e005      	b.n	80020ae <arm_sqrt_q31+0x52>
    }
    else
    {
      number = number << (signBits1 - 1);
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	61fb      	str	r3, [r7, #28]
    }

    /* Start value for 1/sqrt(x) for the Newton iteration */
    var1 = sqrt_initial_lut_q31[(number>> 26) - (Q28QUARTER >> 26)];
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	169b      	asrs	r3, r3, #26
 80020b2:	3b08      	subs	r3, #8
 80020b4:	4aa1      	ldr	r2, [pc, #644]	; (800233c <arm_sqrt_q31+0x2e0>)
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	61bb      	str	r3, [r7, #24]

    /* 0.5 var1 * (3 - number * var1 * var1) */

    /* 1st iteration */

    temp = ((q63_t) var1 * var1) >> 28;
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	4618      	mov	r0, r3
 80020c0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	461a      	mov	r2, r3
 80020c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80020cc:	fb02 f501 	mul.w	r5, r2, r1
 80020d0:	fb00 f403 	mul.w	r4, r0, r3
 80020d4:	442c      	add	r4, r5
 80020d6:	fba0 2302 	umull	r2, r3, r0, r2
 80020da:	18e1      	adds	r1, r4, r3
 80020dc:	460b      	mov	r3, r1
 80020de:	f04f 0000 	mov.w	r0, #0
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	0f10      	lsrs	r0, r2, #28
 80020e8:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 80020ec:	1719      	asrs	r1, r3, #28
 80020ee:	4603      	mov	r3, r0
 80020f0:	613b      	str	r3, [r7, #16]
    temp = ((q63_t) number * temp) >> 31;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	4618      	mov	r0, r3
 80020f6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	461a      	mov	r2, r3
 80020fe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002102:	fb02 f501 	mul.w	r5, r2, r1
 8002106:	fb00 f403 	mul.w	r4, r0, r3
 800210a:	442c      	add	r4, r5
 800210c:	fba0 2302 	umull	r2, r3, r0, r2
 8002110:	18e1      	adds	r1, r4, r3
 8002112:	460b      	mov	r3, r1
 8002114:	f04f 0000 	mov.w	r0, #0
 8002118:	f04f 0100 	mov.w	r1, #0
 800211c:	0fd0      	lsrs	r0, r2, #31
 800211e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8002122:	17d9      	asrs	r1, r3, #31
 8002124:	4603      	mov	r3, r0
 8002126:	613b      	str	r3, [r7, #16]
    temp = 0x30000000 - temp; 
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	f1c3 5340 	rsb	r3, r3, #805306368	; 0x30000000
 800212e:	613b      	str	r3, [r7, #16]
    var1 = ((q63_t) var1 * temp) >> 29;
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	4618      	mov	r0, r3
 8002134:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	461a      	mov	r2, r3
 800213c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002140:	fb02 f501 	mul.w	r5, r2, r1
 8002144:	fb00 f403 	mul.w	r4, r0, r3
 8002148:	442c      	add	r4, r5
 800214a:	fba0 2302 	umull	r2, r3, r0, r2
 800214e:	18e1      	adds	r1, r4, r3
 8002150:	460b      	mov	r3, r1
 8002152:	f04f 0000 	mov.w	r0, #0
 8002156:	f04f 0100 	mov.w	r1, #0
 800215a:	0f50      	lsrs	r0, r2, #29
 800215c:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8002160:	1759      	asrs	r1, r3, #29
 8002162:	4603      	mov	r3, r0
 8002164:	61bb      	str	r3, [r7, #24]

    
    /* 2nd iteration */
    temp = ((q63_t) var1 * var1) >> 28;
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4618      	mov	r0, r3
 800216a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	461a      	mov	r2, r3
 8002172:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002176:	fb02 f501 	mul.w	r5, r2, r1
 800217a:	fb00 f403 	mul.w	r4, r0, r3
 800217e:	442c      	add	r4, r5
 8002180:	fba0 2302 	umull	r2, r3, r0, r2
 8002184:	18e1      	adds	r1, r4, r3
 8002186:	460b      	mov	r3, r1
 8002188:	f04f 0000 	mov.w	r0, #0
 800218c:	f04f 0100 	mov.w	r1, #0
 8002190:	0f10      	lsrs	r0, r2, #28
 8002192:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8002196:	1719      	asrs	r1, r3, #28
 8002198:	4603      	mov	r3, r0
 800219a:	613b      	str	r3, [r7, #16]
    temp = ((q63_t) number * temp) >> 31;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	4618      	mov	r0, r3
 80021a0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	461a      	mov	r2, r3
 80021a8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80021ac:	fb02 f501 	mul.w	r5, r2, r1
 80021b0:	fb00 f403 	mul.w	r4, r0, r3
 80021b4:	442c      	add	r4, r5
 80021b6:	fba0 2302 	umull	r2, r3, r0, r2
 80021ba:	18e1      	adds	r1, r4, r3
 80021bc:	460b      	mov	r3, r1
 80021be:	f04f 0000 	mov.w	r0, #0
 80021c2:	f04f 0100 	mov.w	r1, #0
 80021c6:	0fd0      	lsrs	r0, r2, #31
 80021c8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80021cc:	17d9      	asrs	r1, r3, #31
 80021ce:	4603      	mov	r3, r0
 80021d0:	613b      	str	r3, [r7, #16]
    temp = 0x30000000 - temp; 
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f1c3 5340 	rsb	r3, r3, #805306368	; 0x30000000
 80021d8:	613b      	str	r3, [r7, #16]
    var1 = ((q63_t) var1 * temp) >> 29;
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4618      	mov	r0, r3
 80021de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	461a      	mov	r2, r3
 80021e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80021ea:	fb02 f501 	mul.w	r5, r2, r1
 80021ee:	fb00 f403 	mul.w	r4, r0, r3
 80021f2:	442c      	add	r4, r5
 80021f4:	fba0 2302 	umull	r2, r3, r0, r2
 80021f8:	18e1      	adds	r1, r4, r3
 80021fa:	460b      	mov	r3, r1
 80021fc:	f04f 0000 	mov.w	r0, #0
 8002200:	f04f 0100 	mov.w	r1, #0
 8002204:	0f50      	lsrs	r0, r2, #29
 8002206:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 800220a:	1759      	asrs	r1, r3, #29
 800220c:	4603      	mov	r3, r0
 800220e:	61bb      	str	r3, [r7, #24]

    /* 3nd iteration */
    temp = ((q63_t) var1 * var1) >> 28;
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	4618      	mov	r0, r3
 8002214:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	461a      	mov	r2, r3
 800221c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002220:	fb02 f501 	mul.w	r5, r2, r1
 8002224:	fb00 f403 	mul.w	r4, r0, r3
 8002228:	442c      	add	r4, r5
 800222a:	fba0 2302 	umull	r2, r3, r0, r2
 800222e:	18e1      	adds	r1, r4, r3
 8002230:	460b      	mov	r3, r1
 8002232:	f04f 0000 	mov.w	r0, #0
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	0f10      	lsrs	r0, r2, #28
 800223c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8002240:	1719      	asrs	r1, r3, #28
 8002242:	4603      	mov	r3, r0
 8002244:	613b      	str	r3, [r7, #16]
    temp = ((q63_t) number * temp) >> 31;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	4618      	mov	r0, r3
 800224a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	461a      	mov	r2, r3
 8002252:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002256:	fb02 f501 	mul.w	r5, r2, r1
 800225a:	fb00 f403 	mul.w	r4, r0, r3
 800225e:	442c      	add	r4, r5
 8002260:	fba0 2302 	umull	r2, r3, r0, r2
 8002264:	18e1      	adds	r1, r4, r3
 8002266:	460b      	mov	r3, r1
 8002268:	f04f 0000 	mov.w	r0, #0
 800226c:	f04f 0100 	mov.w	r1, #0
 8002270:	0fd0      	lsrs	r0, r2, #31
 8002272:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8002276:	17d9      	asrs	r1, r3, #31
 8002278:	4603      	mov	r3, r0
 800227a:	613b      	str	r3, [r7, #16]
    temp = 0x30000000 - temp; 
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f1c3 5340 	rsb	r3, r3, #805306368	; 0x30000000
 8002282:	613b      	str	r3, [r7, #16]
    var1 = ((q63_t) var1 * temp) >> 29;
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	4618      	mov	r0, r3
 8002288:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	461a      	mov	r2, r3
 8002290:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002294:	fb02 f501 	mul.w	r5, r2, r1
 8002298:	fb00 f403 	mul.w	r4, r0, r3
 800229c:	442c      	add	r4, r5
 800229e:	fba0 2302 	umull	r2, r3, r0, r2
 80022a2:	18e1      	adds	r1, r4, r3
 80022a4:	460b      	mov	r3, r1
 80022a6:	f04f 0000 	mov.w	r0, #0
 80022aa:	f04f 0100 	mov.w	r1, #0
 80022ae:	0f50      	lsrs	r0, r2, #29
 80022b0:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 80022b4:	1759      	asrs	r1, r3, #29
 80022b6:	4603      	mov	r3, r0
 80022b8:	61bb      	str	r3, [r7, #24]

    /* Multiply the inverse square root with the original value */
    var1 = ((q31_t) (((q63_t) number * var1) >> 28));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	4618      	mov	r0, r3
 80022be:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	461a      	mov	r2, r3
 80022c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80022ca:	fb02 f501 	mul.w	r5, r2, r1
 80022ce:	fb00 f403 	mul.w	r4, r0, r3
 80022d2:	442c      	add	r4, r5
 80022d4:	fba0 2302 	umull	r2, r3, r0, r2
 80022d8:	18e1      	adds	r1, r4, r3
 80022da:	460b      	mov	r3, r1
 80022dc:	f04f 0000 	mov.w	r0, #0
 80022e0:	f04f 0100 	mov.w	r1, #0
 80022e4:	0f10      	lsrs	r0, r2, #28
 80022e6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 80022ea:	1719      	asrs	r1, r3, #28
 80022ec:	4603      	mov	r3, r0
 80022ee:	61bb      	str	r3, [r7, #24]

    /* Shift the output down accordingly */
    if ((signBits1 % 2) == 0)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d108      	bne.n	800230c <arm_sqrt_q31+0x2b0>
    {
      var1 = var1 >> (signBits1 / 2);
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	0fda      	lsrs	r2, r3, #31
 80022fe:	4413      	add	r3, r2
 8002300:	105b      	asrs	r3, r3, #1
 8002302:	461a      	mov	r2, r3
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	4113      	asrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	e008      	b.n	800231e <arm_sqrt_q31+0x2c2>
    }
    else
    {
      var1 = var1 >> ((signBits1 - 1) / 2);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3b01      	subs	r3, #1
 8002310:	0fda      	lsrs	r2, r3, #31
 8002312:	4413      	add	r3, r2
 8002314:	105b      	asrs	r3, r3, #1
 8002316:	461a      	mov	r2, r3
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	4113      	asrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
    }
    *pOut = var1;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	601a      	str	r2, [r3, #0]

    return (ARM_MATH_SUCCESS);
 8002324:	2300      	movs	r3, #0
 8002326:	e004      	b.n	8002332 <arm_sqrt_q31+0x2d6>
  }
  /* If the number is a negative number then store zero as its square root value */
  else
  {
    *pOut = 0;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]

    return (ARM_MATH_ARGUMENT_ERROR);
 800232e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8002332:	4618      	mov	r0, r3
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	bcb0      	pop	{r4, r5, r7}
 800233a:	4770      	bx	lr
 800233c:	080271f8 	.word	0x080271f8

08002340 <arm_scalar_log_q31>:
/* 1.0 / Log2[Exp[1]] in Q31 */
#define LOG_Q31_INVLOG2EXP 0x58b90bfbuL

/* Clay Turner algorithm */
static uint32_t arm_scalar_log_q31(uint32_t src)
{
 8002340:	b4b0      	push	{r4, r5, r7}
 8002342:	b08b      	sub	sp, #44	; 0x2c
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	60bb      	str	r3, [r7, #8]
  if (value == 0U)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <arm_scalar_log_q31+0x16>
    return 32U;
 8002352:	2320      	movs	r3, #32
 8002354:	e003      	b.n	800235e <arm_scalar_log_q31+0x1e>
  return __builtin_clz(value);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
   int32_t i;

   int32_t c = __CLZ(src);
 800235e:	617b      	str	r3, [r7, #20]
   int32_t normalization=0;
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]

   /* 0.5 in q26 */
   uint32_t inc = LOQ_Q31_Q32_HALF >> (LOG_Q31_INTEGER_PART + 1);
 8002364:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002368:	623b      	str	r3, [r7, #32]

   /* Will compute y = log2(x) for 1 <= x < 2.0 */
   uint32_t x;

   /* q26 */
   uint32_t y=0;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
   /* q26 */
   int32_t tmp;


   /* Normalize and convert to q30 format */
   x = src;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	61fb      	str	r3, [r7, #28]
   if ((c-1) < 0)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	dc07      	bgt.n	8002388 <arm_scalar_log_q31+0x48>
   {
     x = x >> (1-c);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f1c3 0301 	rsb	r3, r3, #1
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e005      	b.n	8002394 <arm_scalar_log_q31+0x54>
   }
   else
   {
     x = x << (c-1);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3b01      	subs	r3, #1
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	61fb      	str	r3, [r7, #28]
   }
   normalization = c;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
   /* Compute the Log2. Result is in q26
      because we know 0 <= y < 1.0 but
      do not want to use q32 to allow
      following computation with less instructions.
   */
   for(i = 0; i < LOG_Q31_ACCURACY ; i++)
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
 800239c:	e02a      	b.n	80023f4 <arm_scalar_log_q31+0xb4>
   {
      x = ((int64_t)x*x)  >> (LOG_Q31_ACCURACY - 1);
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f04f 0100 	mov.w	r1, #0
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	461a      	mov	r2, r3
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	fb02 f501 	mul.w	r5, r2, r1
 80023b2:	fb00 f403 	mul.w	r4, r0, r3
 80023b6:	442c      	add	r4, r5
 80023b8:	fba0 2302 	umull	r2, r3, r0, r2
 80023bc:	18e1      	adds	r1, r4, r3
 80023be:	460b      	mov	r3, r1
 80023c0:	f04f 0000 	mov.w	r0, #0
 80023c4:	f04f 0100 	mov.w	r1, #0
 80023c8:	0f90      	lsrs	r0, r2, #30
 80023ca:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
 80023ce:	1799      	asrs	r1, r3, #30
 80023d0:	4603      	mov	r3, r0
 80023d2:	61fb      	str	r3, [r7, #28]

      if (x >= LOQ_Q31_THRESHOLD)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	da06      	bge.n	80023e8 <arm_scalar_log_q31+0xa8>
      {
         y += inc ;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	4413      	add	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
         x = x >> 1;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	085b      	lsrs	r3, r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
      }
      inc = inc >> 1;
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	085b      	lsrs	r3, r3, #1
 80023ec:	623b      	str	r3, [r7, #32]
   for(i = 0; i < LOG_Q31_ACCURACY ; i++)
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	3301      	adds	r3, #1
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	2b1e      	cmp	r3, #30
 80023f8:	ddd1      	ble.n	800239e <arm_scalar_log_q31+0x5e>
      We compute (y - normalisation) * (1 / Log2[e]).

   */

   /* q26 */
   tmp = (int32_t)y - (normalization << (LOG_Q31_ACCURACY - LOG_Q31_INTEGER_PART));
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	069b      	lsls	r3, r3, #26
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	60fb      	str	r3, [r7, #12]


   /* q5.26 */
   y = ((int64_t)tmp * LOG_Q31_INVLOG2EXP) >> 31;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	461a      	mov	r2, r3
 8002408:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800240c:	490d      	ldr	r1, [pc, #52]	; (8002444 <arm_scalar_log_q31+0x104>)
 800240e:	fb01 f003 	mul.w	r0, r1, r3
 8002412:	2100      	movs	r1, #0
 8002414:	fb01 f102 	mul.w	r1, r1, r2
 8002418:	4401      	add	r1, r0
 800241a:	480a      	ldr	r0, [pc, #40]	; (8002444 <arm_scalar_log_q31+0x104>)
 800241c:	fba2 2300 	umull	r2, r3, r2, r0
 8002420:	4419      	add	r1, r3
 8002422:	460b      	mov	r3, r1
 8002424:	f04f 0000 	mov.w	r0, #0
 8002428:	f04f 0100 	mov.w	r1, #0
 800242c:	0fd0      	lsrs	r0, r2, #31
 800242e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8002432:	17d9      	asrs	r1, r3, #31
 8002434:	4603      	mov	r3, r0
 8002436:	61bb      	str	r3, [r7, #24]



   return(y);
 8002438:	69bb      	ldr	r3, [r7, #24]

}
 800243a:	4618      	mov	r0, r3
 800243c:	372c      	adds	r7, #44	; 0x2c
 800243e:	46bd      	mov	sp, r7
 8002440:	bcb0      	pop	{r4, r5, r7}
 8002442:	4770      	bx	lr
 8002444:	58b90bfb 	.word	0x58b90bfb

08002448 <arm_vlog_q31>:
 */
void arm_vlog_q31(
  const q31_t * pSrc,
        q31_t * pDst,
        uint32_t blockSize)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
      blkCnt--;
  }

  blkCnt = blockSize & 3;
  #else
  blkCnt = blockSize;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	617b      	str	r3, [r7, #20]
  #endif

  while (blkCnt > 0U)
 8002458:	e00f      	b.n	800247a <arm_vlog_q31+0x32>
  {
     *pDst++=arm_scalar_log_q31(*pSrc++);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1d1a      	adds	r2, r3, #4
 800245e:	60fa      	str	r2, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff6c 	bl	8002340 <arm_scalar_log_q31>
 8002468:	4601      	mov	r1, r0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1d1a      	adds	r2, r3, #4
 800246e:	60ba      	str	r2, [r7, #8]
 8002470:	460a      	mov	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

     blkCnt--;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	3b01      	subs	r3, #1
 8002478:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ec      	bne.n	800245a <arm_vlog_q31+0x12>
  }

}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <arm_mat_vec_mult_q15>:
    }
}

#else
void arm_mat_vec_mult_q15(const arm_matrix_instance_q15 *pSrcMat, const q15_t *pVec, q15_t *pDst)
{
 800248a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800248e:	b0ed      	sub	sp, #436	; 0x1b4
 8002490:	af00      	add	r7, sp, #0
 8002492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002496:	6018      	str	r0, [r3, #0]
 8002498:	f107 0320 	add.w	r3, r7, #32
 800249c:	6019      	str	r1, [r3, #0]
 800249e:	f107 031c 	add.w	r3, r7, #28
 80024a2:	601a      	str	r2, [r3, #0]
    uint32_t numRows = pSrcMat->numRows;
 80024a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    uint32_t numCols = pSrcMat->numCols;
 80024b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	885b      	ldrh	r3, [r3, #2]
 80024b8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    const q15_t *pSrcA = pSrcMat->pData;
 80024bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    uint16_t i, row, colCnt; /* loop counters */
    q31_t matData, matData2, vecData, vecData2;


    /* Process 4 rows at a time */
    row = numRows >> 2;
 80024c8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
    i = 0u;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
    px = pDst;
 80024d8:	f107 031c 	add.w	r3, r7, #28
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

    /* The following loop performs the dot-product of each row in pSrcA with the vector */
    /* row loop */
    while (row > 0) {
 80024e2:	e296      	b.n	8002a12 <arm_mat_vec_mult_q15+0x588>
        /* Initialize accumulators */
        q63_t sum1 = 0;
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
        q63_t sum2 = 0;
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
        q63_t sum3 = 0;
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
        q63_t sum4 = 0;
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180

        /* For every row wise process, the pInVec pointer is set
         ** to the starting address of the vector */
        pInVec = pVec;
 8002514:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002518:	f107 0220 	add.w	r2, r7, #32
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	601a      	str	r2, [r3, #0]

        /* Loop unrolling: process 2 columns per iteration */
        colCnt = numCols >> 1;
 8002520:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6

        /* Initialize pointers to the starting address of the column being processed */
        pInA1 = pSrcA + i;
 800252a:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8002534:	441a      	add	r2, r3
 8002536:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800253a:	601a      	str	r2, [r3, #0]
        pInA2 = pInA1 + numCols;
 800253c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	441a      	add	r2, r3
 800254a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800254e:	601a      	str	r2, [r3, #0]
        pInA3 = pInA2 + numCols;
 8002550:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	441a      	add	r2, r3
 800255e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002562:	601a      	str	r2, [r3, #0]
        pInA4 = pInA3 + numCols;
 8002564:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	441a      	add	r2, r3
 8002572:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002576:	601a      	str	r2, [r3, #0]

        // Main loop: matrix-vector multiplication
        while (colCnt > 0u) {
 8002578:	e11d      	b.n	80027b6 <arm_mat_vec_mult_q15+0x32c>
            // Read 2 values from vector
            vecData = read_q15x2_ia (&pInVec);
 800257a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	1d1a      	adds	r2, r3, #4
 8002582:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3b04      	subs	r3, #4
 8002590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002594:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 800259c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80025a0:	601a      	str	r2, [r3, #0]
  return (val);
 80025a2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

            // Read 8 values from the matrix - 2 values from each of 4 rows, and do multiply accumulate
            matData =  read_q15x2_ia (&pInA1);
 80025ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	1d1a      	adds	r2, r3, #4
 80025b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	3b04      	subs	r3, #4
 80025c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80025c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80025ce:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025d2:	601a      	str	r2, [r3, #0]
  return (val);
 80025d4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            sum1 = __SMLALD(matData, vecData, sum1);
 80025de:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 80025e2:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80025e6:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 80025ea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 80025ee:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80025f2:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  llr.w64 = acc;
 80025f6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80025fa:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80025fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800260e:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8002612:	4611      	mov	r1, r2
 8002614:	fbc0 13c4 	smlald	r1, r3, r0, r4
 8002618:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800261c:	6011      	str	r1, [r2, #0]
 800261e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002622:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8002624:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002628:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
            matData = read_q15x2_ia (&pInA2);
 800262c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	1d1a      	adds	r2, r3, #4
 8002634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3b04      	subs	r3, #4
 8002642:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002646:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 800264e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002652:	601a      	str	r2, [r3, #0]
  return (val);
 8002654:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            sum2 = __SMLALD(matData, vecData, sum2);
 800265e:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8002662:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8002666:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800266a:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 800266e:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8002672:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
  llr.w64 = acc;
 8002676:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800267a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800267e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800268e:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8002692:	4611      	mov	r1, r2
 8002694:	fbc0 13c4 	smlald	r1, r3, r0, r4
 8002698:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800269c:	6011      	str	r1, [r2, #0]
 800269e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80026a2:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 80026a4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80026a8:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
            matData = read_q15x2_ia (&pInA3);
 80026ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	1d1a      	adds	r2, r3, #4
 80026b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3b04      	subs	r3, #4
 80026c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80026ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026d2:	601a      	str	r2, [r3, #0]
  return (val);
 80026d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            sum3 = __SMLALD(matData, vecData, sum3);
 80026de:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 80026e2:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80026e6:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80026ea:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 80026ee:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 80026f2:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
  llr.w64 = acc;
 80026f6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80026fa:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80026fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800270e:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8002712:	4611      	mov	r1, r2
 8002714:	fbc0 13c4 	smlald	r1, r3, r0, r4
 8002718:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800271c:	6011      	str	r1, [r2, #0]
 800271e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002722:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8002724:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002728:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
            matData = read_q15x2_ia (&pInA4);
 800272c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	1d1a      	adds	r2, r3, #4
 8002734:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3b04      	subs	r3, #4
 8002742:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002746:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 800274e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002752:	601a      	str	r2, [r3, #0]
  return (val);
 8002754:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            sum4 = __SMLALD(matData, vecData, sum4);
 800275e:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8002762:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8002766:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800276a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 800276e:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 8002772:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
  llr.w64 = acc;
 8002776:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800277a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800277e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800278e:	f8d7 412c 	ldr.w	r4, [r7, #300]	; 0x12c
 8002792:	4611      	mov	r1, r2
 8002794:	fbc0 13c4 	smlald	r1, r3, r0, r4
 8002798:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800279c:	6011      	str	r1, [r2, #0]
 800279e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027a2:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 80027a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027a8:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180

            // Decrement the loop counter
            colCnt--;
 80027ac:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 80027b0:	3b01      	subs	r3, #1
 80027b2:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
        while (colCnt > 0u) {
 80027b6:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f47f aedd 	bne.w	800257a <arm_mat_vec_mult_q15+0xf0>
        }

        /* process any remaining columns */
        colCnt = numCols & 1u;
 80027c0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
        if (numCols & 1u) {
 80027ce:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 809c 	beq.w	8002914 <arm_mat_vec_mult_q15+0x48a>
            vecData = *pInVec++;
 80027dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	1c99      	adds	r1, r3, #2
 80027e4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80027e8:	6011      	str	r1, [r2, #0]
 80027ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
            sum1 += (q63_t)*pInA1++ * vecData;
 80027f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	1c99      	adds	r1, r3, #2
 80027fa:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80027fe:	6011      	str	r1, [r2, #0]
 8002800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002804:	b21a      	sxth	r2, r3
 8002806:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800280a:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 800280e:	4608      	mov	r0, r1
 8002810:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002814:	fb00 f503 	mul.w	r5, r0, r3
 8002818:	fb02 f401 	mul.w	r4, r2, r1
 800281c:	442c      	add	r4, r5
 800281e:	fba2 2300 	umull	r2, r3, r2, r0
 8002822:	18e1      	adds	r1, r4, r3
 8002824:	460b      	mov	r3, r1
 8002826:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800282a:	eb10 0a02 	adds.w	sl, r0, r2
 800282e:	eb41 0b03 	adc.w	fp, r1, r3
 8002832:	e9c7 ab66 	strd	sl, fp, [r7, #408]	; 0x198
            sum2 += (q63_t)*pInA2++ * vecData;
 8002836:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	1c99      	adds	r1, r3, #2
 800283e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002842:	6011      	str	r1, [r2, #0]
 8002844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002848:	b21a      	sxth	r2, r3
 800284a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800284e:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8002852:	4608      	mov	r0, r1
 8002854:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002858:	fb00 f503 	mul.w	r5, r0, r3
 800285c:	fb02 f401 	mul.w	r4, r2, r1
 8002860:	442c      	add	r4, r5
 8002862:	fba2 2300 	umull	r2, r3, r2, r0
 8002866:	18e1      	adds	r1, r4, r3
 8002868:	460b      	mov	r3, r1
 800286a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800286e:	1884      	adds	r4, r0, r2
 8002870:	613c      	str	r4, [r7, #16]
 8002872:	eb41 0303 	adc.w	r3, r1, r3
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800287c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
            sum3 += (q63_t)*pInA3++ * vecData;
 8002880:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	1c99      	adds	r1, r3, #2
 8002888:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800288c:	6011      	str	r1, [r2, #0]
 800288e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002892:	b21a      	sxth	r2, r3
 8002894:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002898:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 800289c:	4608      	mov	r0, r1
 800289e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80028a2:	fb00 f503 	mul.w	r5, r0, r3
 80028a6:	fb02 f401 	mul.w	r4, r2, r1
 80028aa:	442c      	add	r4, r5
 80028ac:	fba2 2300 	umull	r2, r3, r2, r0
 80028b0:	18e1      	adds	r1, r4, r3
 80028b2:	460b      	mov	r3, r1
 80028b4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028b8:	1884      	adds	r4, r0, r2
 80028ba:	60bc      	str	r4, [r7, #8]
 80028bc:	eb41 0303 	adc.w	r3, r1, r3
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80028c6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
            sum4 += (q63_t)*pInA4++ * vecData;
 80028ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	1c99      	adds	r1, r3, #2
 80028d2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80028d6:	6011      	str	r1, [r2, #0]
 80028d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028dc:	b21a      	sxth	r2, r3
 80028de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80028e2:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80028e6:	4608      	mov	r0, r1
 80028e8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80028ec:	fb00 f503 	mul.w	r5, r0, r3
 80028f0:	fb02 f401 	mul.w	r4, r2, r1
 80028f4:	442c      	add	r4, r5
 80028f6:	fba2 2300 	umull	r2, r3, r2, r0
 80028fa:	18e1      	adds	r1, r4, r3
 80028fc:	460b      	mov	r3, r1
 80028fe:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8002902:	1884      	adds	r4, r0, r2
 8002904:	603c      	str	r4, [r7, #0]
 8002906:	eb41 0303 	adc.w	r3, r1, r3
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002910:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
        }

        /* Saturate and store the result in the destination buffer */
        *px++ = (q15_t)(__SSAT((sum1 >> 15), 16));
 8002914:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	0bc2      	lsrs	r2, r0, #15
 8002922:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8002926:	13cb      	asrs	r3, r1, #15
 8002928:	4613      	mov	r3, r2
 800292a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800292e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002932:	f303 030f 	ssat	r3, #16, r3
 8002936:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800293a:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800293e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002942:	1c9a      	adds	r2, r3, #2
 8002944:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8002948:	b20a      	sxth	r2, r1
 800294a:	801a      	strh	r2, [r3, #0]
        *px++ = (q15_t)(__SSAT((sum2 >> 15), 16));
 800294c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	0bc2      	lsrs	r2, r0, #15
 800295a:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800295e:	13cb      	asrs	r3, r1, #15
 8002960:	4613      	mov	r3, r2
 8002962:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002966:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800296a:	f303 030f 	ssat	r3, #16, r3
 800296e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002972:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002976:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800297a:	1c9a      	adds	r2, r3, #2
 800297c:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8002980:	b20a      	sxth	r2, r1
 8002982:	801a      	strh	r2, [r3, #0]
        *px++ = (q15_t)(__SSAT((sum3 >> 15), 16));
 8002984:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	0bc2      	lsrs	r2, r0, #15
 8002992:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8002996:	13cb      	asrs	r3, r1, #15
 8002998:	4613      	mov	r3, r2
 800299a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800299e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80029a2:	f303 030f 	ssat	r3, #16, r3
 80029a6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80029aa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80029ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80029b2:	1c9a      	adds	r2, r3, #2
 80029b4:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80029b8:	b20a      	sxth	r2, r1
 80029ba:	801a      	strh	r2, [r3, #0]
        *px++ = (q15_t)(__SSAT((sum4 >> 15), 16));
 80029bc:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	0bc2      	lsrs	r2, r0, #15
 80029ca:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80029ce:	13cb      	asrs	r3, r1, #15
 80029d0:	4613      	mov	r3, r2
 80029d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80029d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80029da:	f303 030f 	ssat	r3, #16, r3
 80029de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80029e2:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80029e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80029ea:	1c9a      	adds	r2, r3, #2
 80029ec:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80029f0:	b20a      	sxth	r2, r1
 80029f2:	801a      	strh	r2, [r3, #0]

        i = i + numCols * 4;
 80029f4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002a02:	4413      	add	r3, r2
 8002a04:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa

        /* Decrement the row loop counter */
        row--;
 8002a08:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
    while (row > 0) {
 8002a12:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f47f ad64 	bne.w	80024e4 <arm_mat_vec_mult_q15+0x5a>
    }

    /* process any remaining rows */
    row = numRows & 3u;
 8002a1c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
    while (row > 0) {
 8002a2a:	e13f      	b.n	8002cac <arm_mat_vec_mult_q15+0x822>

        q63_t sum = 0;
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
        pInVec = pVec;
 8002a38:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002a3c:	f107 0220 	add.w	r2, r7, #32
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	601a      	str	r2, [r3, #0]
        pInA1 = pSrcA + i;
 8002a44:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8002a4e:	441a      	add	r2, r3
 8002a50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a54:	601a      	str	r2, [r3, #0]

        // loop unrolling - process 4 elements at a time
        colCnt = numCols >> 2;
 8002a56:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6

        while (colCnt > 0) {
 8002a60:	e0bc      	b.n	8002bdc <arm_mat_vec_mult_q15+0x752>
            vecData = read_q15x2_ia (&pInVec);
 8002a62:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	1d1a      	adds	r2, r3, #4
 8002a6a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	1f1a      	subs	r2, r3, #4
 8002a78:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8002a88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a8c:	601a      	str	r2, [r3, #0]
  return (val);
 8002a8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
            vecData2 = read_q15x2_ia (&pInVec);
 8002a98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	1d1a      	adds	r2, r3, #4
 8002aa0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	1f1a      	subs	r2, r3, #4
 8002aae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8002abe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ac2:	601a      	str	r2, [r3, #0]
  return (val);
 8002ac4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            matData = read_q15x2_ia (&pInA1);
 8002ace:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	1d1a      	adds	r2, r3, #4
 8002ad6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	1f1a      	subs	r2, r3, #4
 8002ae4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8002af4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002af8:	601a      	str	r2, [r3, #0]
  return (val);
 8002afa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            matData2 = read_q15x2_ia (&pInA1);
 8002b04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	1d1a      	adds	r2, r3, #4
 8002b0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	1f1a      	subs	r2, r3, #4
 8002b1a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8002b2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b2e:	601a      	str	r2, [r3, #0]
  return (val);
 8002b30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            sum = __SMLALD(matData, vecData, sum);
 8002b3a:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8002b3e:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8002b42:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002b46:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 8002b4a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8002b4e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  llr.w64 = acc;
 8002b52:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002b56:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002b5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002b6a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002b6e:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8002b72:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002b76:	600a      	str	r2, [r1, #0]
 8002b78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002b7c:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8002b7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b82:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
            sum = __SMLALD(matData2, vecData2, sum);
 8002b86:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8002b8a:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8002b8e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002b92:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8002b96:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8002b9a:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  llr.w64 = acc;
 8002b9e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002ba2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8002bb6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8002bba:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8002bbe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002bc2:	600a      	str	r2, [r1, #0]
 8002bc4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bc8:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8002bca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bce:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
            colCnt--;
 8002bd2:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
        while (colCnt > 0) {
 8002bdc:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f47f af3e 	bne.w	8002a62 <arm_mat_vec_mult_q15+0x5d8>
        }

        // process remainder of row
        colCnt = numCols & 3u;
 8002be6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
        while (colCnt > 0) {
 8002bf4:	e02d      	b.n	8002c52 <arm_mat_vec_mult_q15+0x7c8>
            sum += (q63_t)*pInA1++ * *pInVec++;
 8002bf6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	1c99      	adds	r1, r3, #2
 8002bfe:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002c02:	6011      	str	r1, [r2, #0]
 8002c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c08:	b218      	sxth	r0, r3
 8002c0a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c0e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1c9c      	adds	r4, r3, #2
 8002c16:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002c1a:	6014      	str	r4, [r2, #0]
 8002c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c20:	b21a      	sxth	r2, r3
 8002c22:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c26:	fb02 f501 	mul.w	r5, r2, r1
 8002c2a:	fb00 f403 	mul.w	r4, r0, r3
 8002c2e:	442c      	add	r4, r5
 8002c30:	fba0 2302 	umull	r2, r3, r0, r2
 8002c34:	18e1      	adds	r1, r4, r3
 8002c36:	460b      	mov	r3, r1
 8002c38:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8002c3c:	eb10 0802 	adds.w	r8, r0, r2
 8002c40:	eb41 0903 	adc.w	r9, r1, r3
 8002c44:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
            colCnt--;
 8002c48:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
        while (colCnt > 0) {
 8002c52:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1cd      	bne.n	8002bf6 <arm_mat_vec_mult_q15+0x76c>
        }
        *px++ = (q15_t)(__SSAT((sum >> 15), 16));
 8002c5a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	0bc2      	lsrs	r2, r0, #15
 8002c68:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8002c6c:	13cb      	asrs	r3, r1, #15
 8002c6e:	4613      	mov	r3, r2
 8002c70:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8002c74:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002c78:	f303 030f 	ssat	r3, #16, r3
 8002c7c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002c80:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8002c84:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002c88:	1c9a      	adds	r2, r3, #2
 8002c8a:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8002c8e:	b20a      	sxth	r2, r1
 8002c90:	801a      	strh	r2, [r3, #0]
        i = i + numCols;
 8002c92:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
        row--;
 8002ca2:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
    while (row > 0) {
 8002cac:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f47f aebb 	bne.w	8002a2c <arm_mat_vec_mult_q15+0x5a2>
    }
}
 8002cb6:	bf00      	nop
 8002cb8:	bf00      	nop
 8002cba:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002cc4:	4770      	bx	lr

08002cc6 <arm_absmax_q15>:
void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b09d      	sub	sp, #116	; 0x74
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
        q15_t cur_absmax, out;                     /* Temporary variables to store the output value. */\
        uint32_t blkCnt, outIndex;                     /* Loop counter */                                   \
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	667b      	str	r3, [r7, #100]	; 0x64
  /* Load first input value that act as reference value for comparision */                                  \
  out = *pSrc++;                                                                                            \
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1c9a      	adds	r2, r3, #2
 8002cdc:	60fa      	str	r2, [r7, #12]
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 8002ce4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	dc0c      	bgt.n	8002d06 <arm_absmax_q15+0x40>
 8002cec:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cf4:	657b      	str	r3, [r7, #84]	; 0x54
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cfa:	fad3 f312 	qsub16	r3, r3, r2
 8002cfe:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8002d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d02:	b21b      	sxth	r3, r3
 8002d04:	e001      	b.n	8002d0a <arm_absmax_q15+0x44>
 8002d06:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8002d0a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
 8002d0e:	2300      	movs	r3, #0
 8002d10:	663b      	str	r3, [r7, #96]	; 0x60
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	66bb      	str	r3, [r7, #104]	; 0x68
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8002d1a:	e0a5      	b.n	8002e68 <arm_absmax_q15+0x1a2>
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1c9a      	adds	r2, r3, #2
 8002d20:	60fa      	str	r2, [r7, #12]
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8002d28:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	dc0c      	bgt.n	8002d4a <arm_absmax_q15+0x84>
 8002d30:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002d34:	2200      	movs	r2, #0
 8002d36:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002d38:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d3e:	fad3 f312 	qsub16	r3, r3, r2
 8002d42:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8002d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d46:	b21b      	sxth	r3, r3
 8002d48:	e001      	b.n	8002d4e <arm_absmax_q15+0x88>
 8002d4a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002d4e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 8002d52:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8002d56:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	dd06      	ble.n	8002d6c <arm_absmax_q15+0xa6>
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
 8002d5e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002d62:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
      outIndex = index + 1U;                                                                                \
 8002d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d68:	3301      	adds	r3, #1
 8002d6a:	667b      	str	r3, [r7, #100]	; 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1c9a      	adds	r2, r3, #2
 8002d70:	60fa      	str	r2, [r7, #12]
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8002d78:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	dc0c      	bgt.n	8002d9a <arm_absmax_q15+0xd4>
 8002d80:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002d84:	2200      	movs	r2, #0
 8002d86:	643a      	str	r2, [r7, #64]	; 0x40
 8002d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d8e:	fad3 f312 	qsub16	r3, r3, r2
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8002d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	e001      	b.n	8002d9e <arm_absmax_q15+0xd8>
 8002d9a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002d9e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    if (cur_absmax > out)                                                                         \
 8002da2:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8002da6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8002daa:	429a      	cmp	r2, r3
 8002dac:	dd06      	ble.n	8002dbc <arm_absmax_q15+0xf6>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8002dae:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002db2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
      outIndex = index + 2U;                                                                                \
 8002db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002db8:	3302      	adds	r3, #2
 8002dba:	667b      	str	r3, [r7, #100]	; 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1c9a      	adds	r2, r3, #2
 8002dc0:	60fa      	str	r2, [r7, #12]
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8002dc8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	dc0c      	bgt.n	8002dea <arm_absmax_q15+0x124>
 8002dd0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	637a      	str	r2, [r7, #52]	; 0x34
 8002dd8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dde:	fad3 f312 	qsub16	r3, r3, r2
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	b21b      	sxth	r3, r3
 8002de8:	e001      	b.n	8002dee <arm_absmax_q15+0x128>
 8002dea:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002dee:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    if (cur_absmax > out)                                                                          \
 8002df2:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8002df6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	dd06      	ble.n	8002e0c <arm_absmax_q15+0x146>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8002dfe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e02:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
      outIndex = index + 3U;                                                                                \
 8002e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e08:	3303      	adds	r3, #3
 8002e0a:	667b      	str	r3, [r7, #100]	; 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1c9a      	adds	r2, r3, #2
 8002e10:	60fa      	str	r2, [r7, #12]
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8002e18:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	dc0c      	bgt.n	8002e3a <arm_absmax_q15+0x174>
 8002e20:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002e24:	2200      	movs	r2, #0
 8002e26:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2e:	fad3 f312 	qsub16	r3, r3, r2
 8002e32:	623b      	str	r3, [r7, #32]
  return(result);
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	b21b      	sxth	r3, r3
 8002e38:	e001      	b.n	8002e3e <arm_absmax_q15+0x178>
 8002e3a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002e3e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    if (cur_absmax > out)                                                                          \
 8002e42:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8002e46:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	dd06      	ble.n	8002e5c <arm_absmax_q15+0x196>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8002e4e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e52:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
      outIndex = index + 4U;                                                                                \
 8002e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e58:	3304      	adds	r3, #4
 8002e5a:	667b      	str	r3, [r7, #100]	; 0x64
    }                                                                                                       \
                                                                                                            \
    index += 4U;                                                                                            \
 8002e5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e5e:	3304      	adds	r3, #4
 8002e60:	663b      	str	r3, [r7, #96]	; 0x60
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 8002e62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e64:	3b01      	subs	r3, #1
 8002e66:	66bb      	str	r3, [r7, #104]	; 0x68
  while (blkCnt > 0U)                                                                                       \
 8002e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f47f af56 	bne.w	8002d1c <arm_absmax_q15+0x56>
  }                                                                                                         \
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	66bb      	str	r3, [r7, #104]	; 0x68
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8002e7a:	e02b      	b.n	8002ed4 <arm_absmax_q15+0x20e>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1c9a      	adds	r2, r3, #2
 8002e80:	60fa      	str	r2, [r7, #12]
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8002e88:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	dc0c      	bgt.n	8002eaa <arm_absmax_q15+0x1e4>
 8002e90:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002e94:	2200      	movs	r2, #0
 8002e96:	61fa      	str	r2, [r7, #28]
 8002e98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	fad3 f312 	qsub16	r3, r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
  return(result);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	b21b      	sxth	r3, r3
 8002ea8:	e001      	b.n	8002eae <arm_absmax_q15+0x1e8>
 8002eaa:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002eae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    if (cur_absmax > out)                                                                         \
 8002eb2:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8002eb6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	dd07      	ble.n	8002ece <arm_absmax_q15+0x208>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8002ebe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002ec2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
      outIndex = blockSize - blkCnt;                                                                        \
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	667b      	str	r3, [r7, #100]	; 0x64
    }                                                                                                       \
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 8002ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	66bb      	str	r3, [r7, #104]	; 0x68
  while (blkCnt > 0U)                                                                                       \
 8002ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1d0      	bne.n	8002e7c <arm_absmax_q15+0x1b6>
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8002ee0:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;  
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ee6:	601a      	str	r2, [r3, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	3774      	adds	r7, #116	; 0x74
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <arm_bitreversal_16>:

void arm_bitreversal_16(
        uint16_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	460b      	mov	r3, r1
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	817b      	strh	r3, [r7, #10]
  uint16_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8002f02:	2300      	movs	r3, #0
 8002f04:	82fb      	strh	r3, [r7, #22]
 8002f06:	e041      	b.n	8002f8c <arm_bitreversal_16+0x98>
  {
     a = pBitRevTab[i    ] >> 2;
 8002f08:	8afb      	ldrh	r3, [r7, #22]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	4413      	add	r3, r2
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	82bb      	strh	r3, [r7, #20]
     b = pBitRevTab[i + 1] >> 2;
 8002f16:	8afb      	ldrh	r3, [r7, #22]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	4413      	add	r3, r2
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	827b      	strh	r3, [r7, #18]

     //real
     tmp = pSrc[a];
 8002f26:	8abb      	ldrh	r3, [r7, #20]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	823b      	strh	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8002f32:	8a7b      	ldrh	r3, [r7, #18]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	441a      	add	r2, r3
 8002f3a:	8abb      	ldrh	r3, [r7, #20]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	68f9      	ldr	r1, [r7, #12]
 8002f40:	440b      	add	r3, r1
 8002f42:	8812      	ldrh	r2, [r2, #0]
 8002f44:	801a      	strh	r2, [r3, #0]
     pSrc[b] = tmp;
 8002f46:	8a7b      	ldrh	r3, [r7, #18]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	8a3a      	ldrh	r2, [r7, #16]
 8002f50:	801a      	strh	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8002f52:	8abb      	ldrh	r3, [r7, #20]
 8002f54:	3301      	adds	r3, #1
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	823b      	strh	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8002f60:	8a7b      	ldrh	r3, [r7, #18]
 8002f62:	3301      	adds	r3, #1
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	441a      	add	r2, r3
 8002f6a:	8abb      	ldrh	r3, [r7, #20]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	68f9      	ldr	r1, [r7, #12]
 8002f72:	440b      	add	r3, r1
 8002f74:	8812      	ldrh	r2, [r2, #0]
 8002f76:	801a      	strh	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8002f78:	8a7b      	ldrh	r3, [r7, #18]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4413      	add	r3, r2
 8002f82:	8a3a      	ldrh	r2, [r7, #16]
 8002f84:	801a      	strh	r2, [r3, #0]

    i += 2;
 8002f86:	8afb      	ldrh	r3, [r7, #22]
 8002f88:	3302      	adds	r3, #2
 8002f8a:	82fb      	strh	r3, [r7, #22]
  for (i = 0; i < bitRevLen; )
 8002f8c:	8afa      	ldrh	r2, [r7, #22]
 8002f8e:	897b      	ldrh	r3, [r7, #10]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d3b9      	bcc.n	8002f08 <arm_bitreversal_16+0x14>
  }
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <arm_cfft_q15>:
void arm_cfft_q15(
  const arm_cfft_instance_q15 * S,
        q15_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	4611      	mov	r1, r2
 8002fae:	461a      	mov	r2, r3
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	71fb      	strb	r3, [r7, #7]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	71bb      	strb	r3, [r7, #6]
  uint32_t L = S->fftLen;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	617b      	str	r3, [r7, #20]

  if (ifftFlag == 1U)
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d14c      	bne.n	800305e <arm_cfft_q15+0xbc>
  {
     switch (L)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fca:	d038      	beq.n	800303e <arm_cfft_q15+0x9c>
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd2:	f200 808f 	bhi.w	80030f4 <arm_cfft_q15+0x152>
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fdc:	d037      	beq.n	800304e <arm_cfft_q15+0xac>
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe4:	f200 8086 	bhi.w	80030f4 <arm_cfft_q15+0x152>
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fee:	d026      	beq.n	800303e <arm_cfft_q15+0x9c>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff6:	d87d      	bhi.n	80030f4 <arm_cfft_q15+0x152>
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffe:	d026      	beq.n	800304e <arm_cfft_q15+0xac>
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003006:	d875      	bhi.n	80030f4 <arm_cfft_q15+0x152>
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300e:	d016      	beq.n	800303e <arm_cfft_q15+0x9c>
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003016:	d86d      	bhi.n	80030f4 <arm_cfft_q15+0x152>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b80      	cmp	r3, #128	; 0x80
 800301c:	d017      	beq.n	800304e <arm_cfft_q15+0xac>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b80      	cmp	r3, #128	; 0x80
 8003022:	d867      	bhi.n	80030f4 <arm_cfft_q15+0x152>
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b40      	cmp	r3, #64	; 0x40
 8003028:	d009      	beq.n	800303e <arm_cfft_q15+0x9c>
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d861      	bhi.n	80030f4 <arm_cfft_q15+0x152>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b10      	cmp	r3, #16
 8003034:	d003      	beq.n	800303e <arm_cfft_q15+0x9c>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b20      	cmp	r3, #32
 800303a:	d008      	beq.n	800304e <arm_cfft_q15+0xac>
 800303c:	e05a      	b.n	80030f4 <arm_cfft_q15+0x152>
     case 16:
     case 64:
     case 256:
     case 1024:
     case 4096:
       arm_radix4_butterfly_inverse_q15 ( p1, L, (q15_t*)S->pTwiddle, 1 );
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	2301      	movs	r3, #1
 8003044:	6979      	ldr	r1, [r7, #20]
 8003046:	68b8      	ldr	r0, [r7, #8]
 8003048:	f001 fc31 	bl	80048ae <arm_radix4_butterfly_inverse_q15>
       break;
 800304c:	e052      	b.n	80030f4 <arm_cfft_q15+0x152>

     case 32:
     case 128:
     case 512:
     case 2048:
       arm_cfft_radix4by2_inverse_q15 ( p1, L, S->pTwiddle );
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	461a      	mov	r2, r3
 8003054:	6979      	ldr	r1, [r7, #20]
 8003056:	68b8      	ldr	r0, [r7, #8]
 8003058:	f000 f9a5 	bl	80033a6 <arm_cfft_radix4by2_inverse_q15>
       break;
 800305c:	e04a      	b.n	80030f4 <arm_cfft_q15+0x152>
     }
  }
  else
  {
     switch (L)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003064:	d036      	beq.n	80030d4 <arm_cfft_q15+0x132>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306c:	d842      	bhi.n	80030f4 <arm_cfft_q15+0x152>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003074:	d036      	beq.n	80030e4 <arm_cfft_q15+0x142>
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307c:	d83a      	bhi.n	80030f4 <arm_cfft_q15+0x152>
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003084:	d026      	beq.n	80030d4 <arm_cfft_q15+0x132>
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308c:	d832      	bhi.n	80030f4 <arm_cfft_q15+0x152>
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003094:	d026      	beq.n	80030e4 <arm_cfft_q15+0x142>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800309c:	d82a      	bhi.n	80030f4 <arm_cfft_q15+0x152>
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a4:	d016      	beq.n	80030d4 <arm_cfft_q15+0x132>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ac:	d822      	bhi.n	80030f4 <arm_cfft_q15+0x152>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b80      	cmp	r3, #128	; 0x80
 80030b2:	d017      	beq.n	80030e4 <arm_cfft_q15+0x142>
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b80      	cmp	r3, #128	; 0x80
 80030b8:	d81c      	bhi.n	80030f4 <arm_cfft_q15+0x152>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d009      	beq.n	80030d4 <arm_cfft_q15+0x132>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d816      	bhi.n	80030f4 <arm_cfft_q15+0x152>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d003      	beq.n	80030d4 <arm_cfft_q15+0x132>
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d008      	beq.n	80030e4 <arm_cfft_q15+0x142>
 80030d2:	e00f      	b.n	80030f4 <arm_cfft_q15+0x152>
     case 16:
     case 64:
     case 256:
     case 1024:
     case 4096:
       arm_radix4_butterfly_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	2301      	movs	r3, #1
 80030da:	6979      	ldr	r1, [r7, #20]
 80030dc:	68b8      	ldr	r0, [r7, #8]
 80030de:	f000 faac 	bl	800363a <arm_radix4_butterfly_q15>
       break;
 80030e2:	e007      	b.n	80030f4 <arm_cfft_q15+0x152>

     case 32:
     case 128:
     case 512:
     case 2048:
       arm_cfft_radix4by2_q15  ( p1, L, S->pTwiddle );
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	461a      	mov	r2, r3
 80030ea:	6979      	ldr	r1, [r7, #20]
 80030ec:	68b8      	ldr	r0, [r7, #8]
 80030ee:	f000 f810 	bl	8003112 <arm_cfft_radix4by2_q15>
       break;
 80030f2:	bf00      	nop
     }
  }

  if ( bitReverseFlag )
 80030f4:	79bb      	ldrb	r3, [r7, #6]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <arm_cfft_q15+0x168>
    arm_bitreversal_16 ((uint16_t*) p1, S->bitRevLength, S->pBitRevTable);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8999      	ldrh	r1, [r3, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	461a      	mov	r2, r3
 8003104:	68b8      	ldr	r0, [r7, #8]
 8003106:	f7ff fef5 	bl	8002ef4 <arm_bitreversal_16>
}
 800310a:	bf00      	nop
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <arm_cfft_radix4by2_q15>:

void arm_cfft_radix4by2_q15(
        q15_t * pSrc,
        uint32_t fftLen,
  const q15_t * pCoef)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b0b0      	sub	sp, #192	; 0xc0
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
        uint32_t n2;
        q15_t p0, p1, p2, p3;
#if defined (ARM_MATH_DSP)
        q31_t T, S, R;
        q31_t coeff, out1, out2;
  const q15_t *pC = pCoef;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	633b      	str	r3, [r7, #48]	; 0x30
        q15_t *pSi = pSrc;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
        q15_t *pSl = pSrc + fftLen;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4413      	add	r3, r2
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        uint32_t l;
        q15_t xt, yt, cosVal, sinVal;
#endif

  n2 = fftLen >> 1U;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

#if defined (ARM_MATH_DSP)

  for (i = n2; i > 0; i--)
 8003138:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800313c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003140:	e0a9      	b.n	8003296 <arm_cfft_radix4by2_q15+0x184>
  {
      coeff = read_q15x2_ia (&pC);
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	3304      	adds	r3, #4
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	3b04      	subs	r3, #4
 800314c:	637b      	str	r3, [r7, #52]	; 0x34
 800314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003150:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
  return (val);
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      T = read_q15x2 (pSi);
 800315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315c:	63bb      	str	r3, [r7, #56]	; 0x38
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 8003162:	623b      	str	r3, [r7, #32]
  return (val);
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 800316a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800316e:	647b      	str	r3, [r7, #68]	; 0x44
 8003170:	2300      	movs	r3, #0
 8003172:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003178:	fa93 f322 	shadd16	r3, r3, r2
 800317c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800317e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003180:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      S = read_q15x2 (pSl);
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	64bb      	str	r3, [r7, #72]	; 0x48
 8003188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318a:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 800318c:	61fb      	str	r3, [r7, #28]
  return (val);
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      S = __SHADD16(S, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8003194:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003198:	657b      	str	r3, [r7, #84]	; 0x54
 800319a:	2300      	movs	r3, #0
 800319c:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800319e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031a2:	fa93 f322 	shadd16	r3, r3, r2
 80031a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80031a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      R = __QSUB16(T, S);
 80031ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031b6:	663a      	str	r2, [r7, #96]	; 0x60
 80031b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80031ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031be:	fad3 f312 	qsub16	r3, r3, r2
 80031c2:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 80031c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

      write_q15x2_ia (&pSi, __SHADD16(T, S));
 80031ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031d4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80031d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031da:	fa93 f322 	shadd16	r3, r3, r2
 80031de:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 80031e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e2:	461a      	mov	r2, r3
 80031e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031e8:	677b      	str	r3, [r7, #116]	; 0x74
 80031ea:	673a      	str	r2, [r7, #112]	; 0x70
 */
__STATIC_FORCEINLINE void write_q15x2_ia (
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
 80031ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ee:	61bb      	str	r3, [r7, #24]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 80031f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	601a      	str	r2, [r3, #0]
#else
  (*pQ15)[0] = (q15_t)(val & 0x0FFFF);
  (*pQ15)[1] = (q15_t)((val >> 16) & 0x0FFFF);
#endif

 *pQ15 += 2;
 80031f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	1d1a      	adds	r2, r3, #4
 80031fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003200:	601a      	str	r2, [r3, #0]
}
 8003202:	bf00      	nop

#ifndef ARM_MATH_BIG_ENDIAN
      out1 = __SMUAD(coeff, R) >> 16U;
 8003204:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003208:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800320c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003210:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003212:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003216:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003218:	fb23 f302 	smuad	r3, r3, r2
 800321c:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 800321e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      out2 = __SMUSDX(coeff, R);
 8003226:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800322a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800322e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800323a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800323e:	fb43 f312 	smusdx	r3, r3, r2
 8003242:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8003246:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800324a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
#else
      out1 = __SMUSDX(R, coeff) >> 16U;
      out2 = __SMUAD(coeff, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      write_q15x2_ia (&pSl, (q31_t)__PKHBT( out1, out2, 0 ) );
 800324e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003252:	b29a      	uxth	r2, r3
 8003254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	041b      	lsls	r3, r3, #16
 800325c:	4313      	orrs	r3, r2
 800325e:	461a      	mov	r2, r3
 8003260:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003264:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003268:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
  q31_t val = value;
 800326c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003270:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8003272:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 800327c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	1d1a      	adds	r2, r3, #4
 8003284:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003288:	601a      	str	r2, [r3, #0]
}
 800328a:	bf00      	nop
  for (i = n2; i > 0; i--)
 800328c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003290:	3b01      	subs	r3, #1
 8003292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003296:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800329a:	2b00      	cmp	r3, #0
 800329c:	f47f af51 	bne.w	8003142 <arm_cfft_radix4by2_q15+0x30>
  }

#endif /* #if defined (ARM_MATH_DSP) */

  /* first col */
  arm_radix4_butterfly_q15( pSrc,          n2, (q15_t*)pCoef, 2U);
 80032a0:	2302      	movs	r3, #2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f9c6 	bl	800363a <arm_radix4_butterfly_q15>

  /* second col */
  arm_radix4_butterfly_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	18d0      	adds	r0, r2, r3
 80032b6:	2302      	movs	r3, #2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80032be:	f000 f9bc 	bl	800363a <arm_radix4_butterfly_q15>

  n2 = fftLen >> 1U;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  for (i = 0; i < n2; i++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80032d0:	e05e      	b.n	8003390 <arm_cfft_radix4by2_q15+0x27e>
  {
     p0 = pSrc[4 * i + 0];
 80032d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
     p1 = pSrc[4 * i + 1];
 80032e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	3302      	adds	r3, #2
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4413      	add	r3, r2
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
     p2 = pSrc[4 * i + 2];
 80032f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	3304      	adds	r3, #4
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
     p3 = pSrc[4 * i + 3];
 8003306:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	3306      	adds	r3, #6
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4413      	add	r3, r2
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0

     p0 <<= 1U;
 8003318:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
     p1 <<= 1U;
 8003322:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
     p2 <<= 1U;
 800332c:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
     p3 <<= 1U;
 8003336:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0

     pSrc[4 * i + 0] = p0;
 8003340:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4413      	add	r3, r2
 800334a:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 800334e:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 1] = p1;
 8003350:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	3302      	adds	r3, #2
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8003360:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 2] = p2;
 8003362:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	3304      	adds	r3, #4
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4413      	add	r3, r2
 800336e:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8003372:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 3] = p3;
 8003374:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	3306      	adds	r3, #6
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8003384:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < n2; i++)
 8003386:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800338a:	3301      	adds	r3, #1
 800338c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003390:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003398:	429a      	cmp	r2, r3
 800339a:	d39a      	bcc.n	80032d2 <arm_cfft_radix4by2_q15+0x1c0>
  }

}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	37c0      	adds	r7, #192	; 0xc0
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <arm_cfft_radix4by2_inverse_q15>:

void arm_cfft_radix4by2_inverse_q15(
        q15_t * pSrc,
        uint32_t fftLen,
  const q15_t * pCoef)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b0b0      	sub	sp, #192	; 0xc0
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
        uint32_t n2;
        q15_t p0, p1, p2, p3;
#if defined (ARM_MATH_DSP)
        q31_t T, S, R;
        q31_t coeff, out1, out2;
  const q15_t *pC = pCoef;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	633b      	str	r3, [r7, #48]	; 0x30
        q15_t *pSi = pSrc;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        q15_t *pSl = pSrc + fftLen;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4413      	add	r3, r2
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        uint32_t l;
        q15_t xt, yt, cosVal, sinVal;
#endif

  n2 = fftLen >> 1U;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

#if defined (ARM_MATH_DSP)

  for (i = n2; i > 0; i--)
 80033cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80033d4:	e0a9      	b.n	800352a <arm_cfft_radix4by2_inverse_q15+0x184>
  {
     coeff = read_q15x2_ia (&pC);
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	3304      	adds	r3, #4
 80033da:	633b      	str	r3, [r7, #48]	; 0x30
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	3b04      	subs	r3, #4
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
 80033e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e4:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
  return (val);
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

     T = read_q15x2 (pSi);
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 80033f6:	623b      	str	r3, [r7, #32]
  return (val);
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
     T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 80033fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003402:	647b      	str	r3, [r7, #68]	; 0x44
 8003404:	2300      	movs	r3, #0
 8003406:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800340a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800340c:	fa93 f322 	shadd16	r3, r3, r2
 8003410:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

     S = read_q15x2 (pSl);
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	64bb      	str	r3, [r7, #72]	; 0x48
 800341c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341e:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 8003420:	61fb      	str	r3, [r7, #28]
  return (val);
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
     S = __SHADD16(S, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8003428:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800342c:	657b      	str	r3, [r7, #84]	; 0x54
 800342e:	2300      	movs	r3, #0
 8003430:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003434:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003436:	fa93 f322 	shadd16	r3, r3, r2
 800343a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800343c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

     R = __QSUB16(T, S);
 8003442:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800344a:	663a      	str	r2, [r7, #96]	; 0x60
 800344c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800344e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003450:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003452:	fad3 f312 	qsub16	r3, r3, r2
 8003456:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8003458:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800345a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

     write_q15x2_ia (&pSi, __SHADD16(T, S));
 800345e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003462:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003466:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003468:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800346a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800346e:	fa93 f322 	shadd16	r3, r3, r2
 8003472:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8003474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003476:	461a      	mov	r2, r3
 8003478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800347c:	677b      	str	r3, [r7, #116]	; 0x74
 800347e:	673a      	str	r2, [r7, #112]	; 0x70
  q31_t val = value;
 8003480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003482:	61bb      	str	r3, [r7, #24]
  memcpy (*pQ15, &val, 4);
 8003484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 800348c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	1d1a      	adds	r2, r3, #4
 8003492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003494:	601a      	str	r2, [r3, #0]
}
 8003496:	bf00      	nop

#ifndef ARM_MATH_BIG_ENDIAN
     out1 = __SMUSD(coeff, R) >> 16U;
 8003498:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800349c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80034a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80034ac:	fb43 f302 	smusd	r3, r3, r2
 80034b0:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 80034b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
     out2 = __SMUADX(coeff, R);
 80034ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80034be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034c2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80034ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80034d2:	fb23 f312 	smuadx	r3, r3, r2
 80034d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 80034da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
#else
     out1 = __SMUADX(R, coeff) >> 16U;
     out2 = __SMUSD(__QSUB(0, coeff), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

     write_q15x2_ia (&pSl, (q31_t)__PKHBT( out1, out2, 0 ));
 80034e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	4313      	orrs	r3, r2
 80034f2:	461a      	mov	r2, r3
 80034f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
  q31_t val = value;
 8003500:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003504:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8003506:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8003510:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	1d1a      	adds	r2, r3, #4
 8003518:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800351c:	601a      	str	r2, [r3, #0]
}
 800351e:	bf00      	nop
  for (i = n2; i > 0; i--)
 8003520:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003524:	3b01      	subs	r3, #1
 8003526:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800352a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800352e:	2b00      	cmp	r3, #0
 8003530:	f47f af51 	bne.w	80033d6 <arm_cfft_radix4by2_inverse_q15+0x30>
  }

#endif /* #if defined (ARM_MATH_DSP) */

  /* first col */
  arm_radix4_butterfly_inverse_q15( pSrc,          n2, (q15_t*)pCoef, 2U);
 8003534:	2302      	movs	r3, #2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f001 f9b6 	bl	80048ae <arm_radix4_butterfly_inverse_q15>

  /* second col */
  arm_radix4_butterfly_inverse_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	18d0      	adds	r0, r2, r3
 800354a:	2302      	movs	r3, #2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8003552:	f001 f9ac 	bl	80048ae <arm_radix4_butterfly_inverse_q15>

  n2 = fftLen >> 1U;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	085b      	lsrs	r3, r3, #1
 800355a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  for (i = 0; i < n2; i++)
 800355e:	2300      	movs	r3, #0
 8003560:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003564:	e05e      	b.n	8003624 <arm_cfft_radix4by2_inverse_q15+0x27e>
  {
     p0 = pSrc[4 * i + 0];
 8003566:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
     p1 = pSrc[4 * i + 1];
 8003576:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	3302      	adds	r3, #2
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4413      	add	r3, r2
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
     p2 = pSrc[4 * i + 2];
 8003588:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	3304      	adds	r3, #4
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
     p3 = pSrc[4 * i + 3];
 800359a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	3306      	adds	r3, #6
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4413      	add	r3, r2
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0

     p0 <<= 1U;
 80035ac:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
     p1 <<= 1U;
 80035b6:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
     p2 <<= 1U;
 80035c0:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
     p3 <<= 1U;
 80035ca:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0

     pSrc[4 * i + 0] = p0;
 80035d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4413      	add	r3, r2
 80035de:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 80035e2:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 1] = p1;
 80035e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	3302      	adds	r3, #2
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 80035f4:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 2] = p2;
 80035f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	3304      	adds	r3, #4
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4413      	add	r3, r2
 8003602:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8003606:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 3] = p3;
 8003608:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	3306      	adds	r3, #6
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8003618:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < n2; i++)
 800361a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800361e:	3301      	adds	r3, #1
 8003620:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003624:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003628:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800362c:	429a      	cmp	r2, r3
 800362e:	d39a      	bcc.n	8003566 <arm_cfft_radix4by2_inverse_q15+0x1c0>
  }
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	37c0      	adds	r7, #192	; 0xc0
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <arm_radix4_butterfly_q15>:
void arm_radix4_butterfly_q15(
        q15_t * pSrc16,
        uint32_t fftLen,
  const q15_t * pCoef16,
        uint32_t twidCoefModifier)
{
 800363a:	b490      	push	{r4, r7}
 800363c:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8003640:	af00      	add	r7, sp, #0
 8003642:	f107 040c 	add.w	r4, r7, #12
 8003646:	6020      	str	r0, [r4, #0]
 8003648:	f107 0008 	add.w	r0, r7, #8
 800364c:	6001      	str	r1, [r0, #0]
 800364e:	1d39      	adds	r1, r7, #4
 8003650:	600a      	str	r2, [r1, #0]
 8003652:	463a      	mov	r2, r7
 8003654:	6013      	str	r3, [r2, #0]
  /* Total process is divided into three stages */

  /* process first stage, middle stages, & last stage */

  /*  Initializations for the first stage */
  n2 = fftLen;
 8003656:	f107 0308 	add.w	r3, r7, #8
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  n1 = n2;
 8003660:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8003664:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0

  /* n2 = fftLen/4 */
  n2 >>= 2U;
 8003668:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800366c:	089b      	lsrs	r3, r3, #2
 800366e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

  /* Index for twiddle coefficient */
  ic = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400

  /* Index for input read and output write */
  j = n2;
 8003678:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800367c:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8

  pSi0 = pSrc16;
 8003680:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003684:	f107 020c 	add.w	r2, r7, #12
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	601a      	str	r2, [r3, #0]
  pSi1 = pSi0 + 2 * n2;
 800368c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	441a      	add	r2, r3
 800369a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800369e:	601a      	str	r2, [r3, #0]
  pSi2 = pSi1 + 2 * n2;
 80036a0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	441a      	add	r2, r3
 80036ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036b2:	601a      	str	r2, [r3, #0]
  pSi3 = pSi2 + 2 * n2;
 80036b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	441a      	add	r2, r3
 80036c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036c6:	601a      	str	r2, [r3, #0]
  {
    /*  Butterfly implementation */

    /* Reading i0, i0+fftLen/2 inputs */
    /* Read ya (real), xa(imag) input */
    T = read_q15x2 (pSi0);
 80036c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80036de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036e2:	601a      	str	r2, [r3, #0]
  return (val);
 80036e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 80036ee:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 80036f2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003700:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	fa93 f222 	shadd16	r2, r3, r2
 8003710:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003714:	601a      	str	r2, [r3, #0]
  return(result);
 8003716:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    T = __SHADD16(T, 0); /* it turns out doing this twice is 2 cycles, the alternative takes 3 cycles */
 8003720:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8003724:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003732:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f507 7215 	add.w	r2, r7, #596	; 0x254
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	fa93 f222 	shadd16	r2, r3, r2
 8003742:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003746:	601a      	str	r2, [r3, #0]
  return(result);
 8003748:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    in = ((int16_t) (T & 0xFFFF)) >> 2;       // alternative code that takes 3 cycles
     T = ((T >> 2) & 0xFFFF0000) | (in & 0xFFFF);
*/

    /* Read yc (real), xc(imag) input */
    S = read_q15x2 (pSi2);
 8003752:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8003768:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800376c:	601a      	str	r2, [r3, #0]
  return (val);
 800376e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
    S = __SHADD16(S, 0);
 8003778:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 800377c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800378a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f507 7219 	add.w	r2, r7, #612	; 0x264
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	fa93 f222 	shadd16	r2, r3, r2
 800379a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800379e:	601a      	str	r2, [r3, #0]
  return(result);
 80037a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
    S = __SHADD16(S, 0);
 80037aa:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80037ae:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80037bc:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f507 721c 	add.w	r2, r7, #624	; 0x270
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	fa93 f222 	shadd16	r2, r3, r2
 80037cc:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80037d0:	601a      	str	r2, [r3, #0]
  return(result);
 80037d2:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

    /* R = packed((ya + yc), (xa + xc) ) */
    R = __QADD16(T, S);
 80037dc:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 80037e0:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80037e4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80037e8:	6019      	str	r1, [r3, #0]
 80037ea:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80037ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80037f0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	fa93 f212 	qadd16	r2, r3, r2
 8003800:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003804:	601a      	str	r2, [r3, #0]
  return(result);
 8003806:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

    /* S = packed((ya - yc), (xa - xc) ) */
    S = __QSUB16(T, S);
 8003810:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8003814:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8003818:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800381c:	6019      	str	r1, [r3, #0]
 800381e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003822:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003824:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f507 7222 	add.w	r2, r7, #648	; 0x288
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	fad3 f212 	qsub16	r2, r3, r2
 8003834:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8003838:	601a      	str	r2, [r3, #0]
  return(result);
 800383a:	f507 7321 	add.w	r3, r7, #644	; 0x284
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

    /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
    /* Read yb (real), xb(imag) input */
    T = read_q15x2 (pSi1);
 8003844:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 800385a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800385e:	601a      	str	r2, [r3, #0]
  return (val);
 8003860:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    T = __SHADD16(T, 0);
 800386a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 800386e:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800387c:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	fa93 f222 	shadd16	r2, r3, r2
 800388c:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8003890:	601a      	str	r2, [r3, #0]
  return(result);
 8003892:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    T = __SHADD16(T, 0);
 800389c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 80038a0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80038ae:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	fa93 f222 	shadd16	r2, r3, r2
 80038be:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80038c2:	601a      	str	r2, [r3, #0]
  return(result);
 80038c4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    /* Read yd (real), xd(imag) input */
    U = read_q15x2 (pSi3);
 80038ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80038e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038e8:	601a      	str	r2, [r3, #0]
  return (val);
 80038ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
    U = __SHADD16(U, 0);
 80038f4:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 80038f8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003906:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	fa93 f222 	shadd16	r2, r3, r2
 8003916:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800391a:	601a      	str	r2, [r3, #0]
  return(result);
 800391c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
    U = __SHADD16(U, 0);
 8003926:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 800392a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003938:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	fa93 f222 	shadd16	r2, r3, r2
 8003948:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800394c:	601a      	str	r2, [r3, #0]
  return(result);
 800394e:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

    /* T = packed((yb + yd), (xb + xd) ) */
    T = __QADD16(T, U);
 8003958:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 800395c:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8003960:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003964:	6019      	str	r1, [r3, #0]
 8003966:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800396a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800396c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	fa93 f212 	qadd16	r2, r3, r2
 800397c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003980:	601a      	str	r2, [r3, #0]
  return(result);
 8003982:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&pSi0, __SHADD16(R, T));
 800398c:	f8d7 13e4 	ldr.w	r1, [r7, #996]	; 0x3e4
 8003990:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8003994:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8003998:	6019      	str	r1, [r3, #0]
 800399a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800399e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80039a0:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	fa93 f222 	shadd16	r2, r3, r2
 80039b0:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80039b4:	601a      	str	r2, [r3, #0]
  return(result);
 80039b6:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4619      	mov	r1, r3
 80039be:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80039c2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80039cc:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80039ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039d2:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80039da:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80039ea:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	1d1a      	adds	r2, r3, #4
 80039f4:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	601a      	str	r2, [r3, #0]
}
 80039fc:	bf00      	nop

    /* R = packed((ya + yc) - (yb + yd), (xa + xc)- (xb + xd)) */
    R = __QSUB16(R, T);
 80039fe:	f8d7 13e4 	ldr.w	r1, [r7, #996]	; 0x3e4
 8003a02:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8003a06:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003a0a:	6019      	str	r1, [r3, #0]
 8003a0c:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8003a10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003a12:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	fad3 f212 	qsub16	r2, r3, r2
 8003a22:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8003a26:	601a      	str	r2, [r3, #0]
  return(result);
 8003a28:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

    /* co2 & si2 are read from SIMD Coefficient pointer */
    C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8003a32:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	1d3a      	adds	r2, r7, #4
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	441a      	add	r2, r3
 8003a3e:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8003a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a52:	601a      	str	r2, [r3, #0]
  return (val);
 8003a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

#ifndef ARM_MATH_BIG_ENDIAN
    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUAD(C2, R) >> 16U;
 8003a5e:	f8d7 13dc 	ldr.w	r1, [r7, #988]	; 0x3dc
 8003a62:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8003a66:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8003a6a:	6019      	str	r1, [r3, #0]
 8003a6c:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8003a70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003a72:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	fb23 f202 	smuad	r2, r3, r2
 8003a82:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8003a86:	601a      	str	r2, [r3, #0]
  return(result);
 8003a88:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	0c1b      	lsrs	r3, r3, #16
 8003a90:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
    /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
    out2 = __SMUSDX(C2, R);
 8003a94:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8003a98:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8003a9c:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8003aa0:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003aa4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003aa6:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8003aaa:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	fb43 f212 	smusdx	r2, r3, r2
 8003ab4:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8003ab8:	601a      	str	r2, [r3, #0]
  return(result);
 8003aba:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    out2 = __SMUAD(C2, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /*  Reading i0+fftLen/4 */
    /* T = packed(yb, xb) */
    T = read_q15x2 (pSi1);
 8003ac4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8003ace:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8003ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ada:	601a      	str	r2, [r3, #0]
  return (val);
 8003adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    T = __SHADD16(T, 0);
 8003ae6:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003aea:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8003aee:	2300      	movs	r3, #0
 8003af0:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003af4:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8003af8:	f8d7 2318 	ldr.w	r2, [r7, #792]	; 0x318
 8003afc:	fa93 f322 	shadd16	r3, r3, r2
 8003b00:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
  return(result);
 8003b04:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8003b08:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    T = __SHADD16(T, 0);
 8003b0c:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003b10:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003b1a:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8003b1e:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8003b22:	fa93 f322 	shadd16	r3, r3, r2
 8003b26:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
  return(result);
 8003b2a:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8003b2e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    write_q15x2_ia (&pSi1, (q31_t) __PKHBT( out1, out2, 0 ));
 8003b32:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	4313      	orrs	r3, r2
 8003b42:	461a      	mov	r2, r3
 8003b44:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b48:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 8003b4c:	f8c7 232c 	str.w	r2, [r7, #812]	; 0x32c
  q31_t val = value;
 8003b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b54:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8003b58:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8003b5a:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003b64:	6812      	ldr	r2, [r2, #0]
 8003b66:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8003b68:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1d1a      	adds	r2, r3, #4
 8003b70:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8003b74:	601a      	str	r2, [r3, #0]
}
 8003b76:	bf00      	nop

    /*  Butterfly calculations */
    /* U = packed(yd, xd) */
    U = read_q15x2 (pSi3);
 8003b78:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8003b82:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8003b8a:	f107 0320 	add.w	r3, r7, #32
 8003b8e:	601a      	str	r2, [r3, #0]
  return (val);
 8003b90:	f107 0320 	add.w	r3, r7, #32
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
    U = __SHADD16(U, 0);
 8003b9a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8003b9e:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003ba8:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8003bac:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8003bb0:	fa93 f322 	shadd16	r3, r3, r2
 8003bb4:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
  return(result);
 8003bb8:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8003bbc:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
    U = __SHADD16(U, 0);
 8003bc0:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8003bc4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003bce:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8003bd2:	f8d7 2348 	ldr.w	r2, [r7, #840]	; 0x348
 8003bd6:	fa93 f322 	shadd16	r3, r3, r2
 8003bda:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
  return(result);
 8003bde:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8003be2:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

    /* T = packed(yb-yd, xb-xd) */
    T = __QSUB16(T, U);
 8003be6:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8003bea:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8003bee:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 8003bf2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003bf6:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8003bfa:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8003bfe:	fad3 f312 	qsub16	r3, r3, r2
 8003c02:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
  return(result);
 8003c06:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8003c0a:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
    /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
    R = __QASX(S, T);
 8003c0e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8003c12:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003c16:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 8003c1a:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003c1e:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003c22:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8003c26:	faa3 f312 	qasx	r3, r3, r2
 8003c2a:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
  return(result);
 8003c2e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8003c32:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QSAX(S, T);
 8003c36:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8003c3a:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003c3e:	f8c7 2370 	str.w	r2, [r7, #880]	; 0x370
 8003c42:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003c46:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8003c4a:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8003c4e:	fae3 f312 	qsax	r3, r3, r2
 8003c52:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
  return(result);
 8003c56:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8003c5a:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QASX(S, T);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* co1 & si1 are read from SIMD Coefficient pointer */
    C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 8003c5e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	1d3a      	adds	r2, r7, #4
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8003c6e:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8003c76:	f107 031c 	add.w	r3, r7, #28
 8003c7a:	601a      	str	r2, [r3, #0]
  return (val);
 8003c7c:	f107 031c 	add.w	r3, r7, #28
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUAD(C1, S) >> 16U;
 8003c86:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8003c8a:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8003c8e:	f8c7 2380 	str.w	r2, [r7, #896]	; 0x380
 8003c92:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003c96:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8003c9a:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 8003c9e:	fb23 f302 	smuad	r3, r3, r2
 8003ca2:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
  return(result);
 8003ca6:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8003caa:	0c1b      	lsrs	r3, r3, #16
 8003cac:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
    /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
    out2 = __SMUSDX(C1, S);
 8003cb0:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8003cb4:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8003cb8:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 8003cbc:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003cc0:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8003cc4:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8003cc8:	fb43 f312 	smusdx	r3, r3, r2
 8003ccc:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
  return(result);
 8003cd0:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8003cd4:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    /* yb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out2 = __SMUAD(C1, S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xb', yb') in little endian format */
    write_q15x2_ia (&pSi2, __PKHBT( out1, out2, 0 ));
 8003cd8:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8003ce2:	0c1b      	lsrs	r3, r3, #16
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003cee:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8003cf2:	f8c7 2390 	str.w	r2, [r7, #912]	; 0x390
  q31_t val = value;
 8003cf6:	f107 0318 	add.w	r3, r7, #24
 8003cfa:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 8003cfe:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8003d00:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f107 0218 	add.w	r2, r7, #24
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8003d0e:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	1d1a      	adds	r2, r3, #4
 8003d16:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8003d1a:	601a      	str	r2, [r3, #0]
}
 8003d1c:	bf00      	nop

    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 8003d1e:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8003d22:	4613      	mov	r3, r2
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	1d3b      	adds	r3, r7, #4
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4413      	add	r3, r2
 8003d32:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8003d36:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8003d3e:	f107 0314 	add.w	r3, r7, #20
 8003d42:	601a      	str	r2, [r3, #0]
  return (val);
 8003d44:	f107 0314 	add.w	r3, r7, #20
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUAD(C3, R) >> 16U;
 8003d4e:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8003d52:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8003d56:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8003d5a:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003d5e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8003d62:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8003d66:	fb23 f302 	smuad	r3, r3, r2
 8003d6a:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
  return(result);
 8003d6e:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8003d72:	0c1b      	lsrs	r3, r3, #16
 8003d74:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
    /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
    out2 = __SMUSDX(C3, R);
 8003d78:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8003d7c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8003d80:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 8003d84:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003d88:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8003d8c:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 8003d90:	fb43 f312 	smusdx	r3, r3, r2
 8003d94:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
  return(result);
 8003d98:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8003d9c:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    /* yd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out2 = __SMUAD(C3, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xd', yd') in little endian format */
    write_q15x2_ia (&pSi3, __PKHBT( out1, out2, 0 ));
 8003da0:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	4313      	orrs	r3, r2
 8003db0:	461a      	mov	r2, r3
 8003db2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003db6:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8003dba:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
  q31_t val = value;
 8003dbe:	f107 0310 	add.w	r3, r7, #16
 8003dc2:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8003dc6:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8003dc8:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f107 0210 	add.w	r2, r7, #16
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8003dd6:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	1d1a      	adds	r2, r3, #4
 8003dde:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8003de2:	601a      	str	r2, [r3, #0]
}
 8003de4:	bf00      	nop

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 8003de6:	463b      	mov	r3, r7
 8003de8:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4413      	add	r3, r2
 8003df0:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400

  } while (--j);
 8003df4:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8003dfe:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f47f ac60 	bne.w	80036c8 <arm_radix4_butterfly_q15+0x8e>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2U;
 8003e08:	463b      	mov	r3, r7
 8003e0a:	463a      	mov	r2, r7
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	0092      	lsls	r2, r2, #2
 8003e10:	601a      	str	r2, [r3, #0]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8003e12:	f107 0308 	add.w	r3, r7, #8
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	089b      	lsrs	r3, r3, #2
 8003e1a:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8003e1e:	e34a      	b.n	80044b6 <arm_radix4_butterfly_q15+0xe7c>
  {
    /*  Initializations for the middle stage */
    n1 = n2;
 8003e20:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8003e24:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    n2 >>= 2U;
 8003e28:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8003e2c:	089b      	lsrs	r3, r3, #2
 8003e2e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
    ic = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400

    for (j = 0U; j <= (n2 - 1U); j++)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8003e3e:	e328      	b.n	8004492 <arm_radix4_butterfly_q15+0xe58>
    {
      /*  index calculation for the coefficients */
      C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 8003e40:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	1d3a      	adds	r2, r7, #4
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	441a      	add	r2, r3
 8003e4c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8003e5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e60:	601a      	str	r2, [r3, #0]
  return (val);
 8003e62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
      C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8003e6c:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	1d3a      	adds	r2, r7, #4
 8003e74:	6812      	ldr	r2, [r2, #0]
 8003e76:	441a      	add	r2, r3
 8003e78:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8003e88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e8c:	601a      	str	r2, [r3, #0]
  return (val);
 8003e8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
      C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 8003e98:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	1d3b      	adds	r3, r7, #4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	441a      	add	r2, r3
 8003eac:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8003ebc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ec0:	601a      	str	r2, [r3, #0]
  return (val);
 8003ec2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;
 8003ecc:	463b      	mov	r3, r7
 8003ece:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400

      pSi0 = pSrc16 + 2 * j;
 8003eda:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	f107 020c 	add.w	r2, r7, #12
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	441a      	add	r2, r3
 8003ee8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003eec:	601a      	str	r2, [r3, #0]
      pSi1 = pSi0 + 2 * n2;
 8003eee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	441a      	add	r2, r3
 8003efc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f00:	601a      	str	r2, [r3, #0]
      pSi2 = pSi1 + 2 * n2;
 8003f02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	441a      	add	r2, r3
 8003f10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f14:	601a      	str	r2, [r3, #0]
      pSi3 = pSi2 + 2 * n2;
 8003f16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	441a      	add	r2, r3
 8003f24:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003f28:	601a      	str	r2, [r3, #0]

      /*  Butterfly implementation */
      for (i0 = j; i0 < fftLen; i0 += n1)
 8003f2a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8003f2e:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8003f32:	e2a1      	b.n	8004478 <arm_radix4_butterfly_q15+0xe3e>
      {
        /*  Reading i0, i0+fftLen/2 inputs */
        /* Read ya (real), xa(imag) input */
        T = read_q15x2 (pSi0);
 8003f34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8003f4a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f4e:	601a      	str	r2, [r3, #0]
  return (val);
 8003f50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

        /* Read yc (real), xc(imag) input */
        S = read_q15x2 (pSi2);
 8003f5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8003f70:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f74:	601a      	str	r2, [r3, #0]
  return (val);
 8003f76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

        /* R = packed( (ya + yc), (xa + xc)) */
        R = __QADD16(T, S);
 8003f80:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8003f84:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8003f88:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f8c:	6019      	str	r1, [r3, #0]
 8003f8e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003f92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003f94:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	fa93 f212 	qadd16	r2, r3, r2
 8003fa4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003fa8:	601a      	str	r2, [r3, #0]
  return(result);
 8003faa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

        /* S = packed((ya - yc), (xa - xc)) */
        S = __QSUB16(T, S);
 8003fb4:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8003fb8:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8003fbc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8003fc0:	6019      	str	r1, [r3, #0]
 8003fc2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003fc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003fc8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	fad3 f212 	qsub16	r2, r3, r2
 8003fd8:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8003fdc:	601a      	str	r2, [r3, #0]
  return(result);
 8003fde:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

        /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8003fe8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8003ffe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004002:	601a      	str	r2, [r3, #0]
  return (val);
 8004004:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 800400e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8004024:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004028:	601a      	str	r2, [r3, #0]
  return (val);
 800402a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

        /* T = packed( (yb + yd), (xb + xd)) */
        T = __QADD16(T, U);
 8004034:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8004038:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 800403c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8004040:	6019      	str	r1, [r3, #0]
 8004042:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8004046:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004048:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	fa93 f212 	qadd16	r2, r3, r2
 8004058:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800405c:	601a      	str	r2, [r3, #0]
  return(result);
 800405e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

        /*  writing the butterfly processed i0 sample */

        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
 8004068:	f8d7 13e4 	ldr.w	r1, [r7, #996]	; 0x3e4
 800406c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8004070:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8004074:	6019      	str	r1, [r3, #0]
 8004076:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800407a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800407c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	fa93 f222 	shadd16	r2, r3, r2
 800408c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004090:	601a      	str	r2, [r3, #0]
  return(result);
 8004092:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        out1 = __SHADD16(out1, 0);
 800409c:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 80040a0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80040ae:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	fa93 f222 	shadd16	r2, r3, r2
 80040be:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80040c2:	601a      	str	r2, [r3, #0]
  return(result);
 80040c4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        write_q15x2 (pSi0, out1);
 80040ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80040de:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 80040e2:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE void write_q15x2 (
  q15_t * pQ15,
  q31_t   value)
{
  q31_t val = value;
 80040e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80040e8:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80040f4:	681a      	ldr	r2, [r3, #0]

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (pQ15, &val, 4);
 80040f6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	601a      	str	r2, [r3, #0]
#else
  pQ15[0] = (q15_t)(val & 0x0FFFF);
  pQ15[1] = (q15_t)(val >> 16);
#endif
}
 80040fe:	bf00      	nop
        pSi0 += 2 * n1;
 8004100:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	441a      	add	r2, r3
 800410e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004112:	601a      	str	r2, [r3, #0]

        /* R = packed( (ya + yc) - (yb + yd), (xa + xc) - (xb + xd)) */
        R = __SHSUB16(R, T);
 8004114:	f8d7 13e4 	ldr.w	r1, [r7, #996]	; 0x3e4
 8004118:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 800411c:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004120:	6019      	str	r1, [r3, #0]
 8004122:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004126:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004128:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	fad3 f222 	shsub16	r2, r3, r2
 8004138:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800413c:	601a      	str	r2, [r3, #0]
  return(result);
 800413e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

#ifndef ARM_MATH_BIG_ENDIAN
        /* (ya-yb+yc-yd)* (si2) + (xa-xb+xc-xd)* co2 */
        out1 = __SMUAD(C2, R) >> 16U;
 8004148:	f8d7 13dc 	ldr.w	r1, [r7, #988]	; 0x3dc
 800414c:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8004150:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004154:	6019      	str	r1, [r3, #0]
 8004156:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800415a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800415c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	fb23 f202 	smuad	r2, r3, r2
 800416c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8004170:	601a      	str	r2, [r3, #0]
  return(result);
 8004172:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8

        /* (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        out2 = __SMUSDX(C2, R);
 800417e:	f8d7 13dc 	ldr.w	r1, [r7, #988]	; 0x3dc
 8004182:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8004186:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800418a:	6019      	str	r1, [r3, #0]
 800418c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004190:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004192:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	fb43 f212 	smusdx	r2, r3, r2
 80041a2:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80041a6:	601a      	str	r2, [r3, #0]
  return(result);
 80041a8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        out2 = __SMUAD(C2, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 80041b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80041c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80041cc:	601a      	str	r2, [r3, #0]
  return (val);
 80041ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        write_q15x2 (pSi1, __PKHBT( out1, out2, 0 ));
 80041d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80041e2:	b299      	uxth	r1, r3
 80041e4:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80041e8:	0c1b      	lsrs	r3, r3, #16
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	430b      	orrs	r3, r1
 80041ee:	4619      	mov	r1, r3
 80041f0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80041fa:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80041fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004200:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800420c:	681a      	ldr	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 800420e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	601a      	str	r2, [r3, #0]
}
 8004216:	bf00      	nop
        pSi1 += 2 * n1;
 8004218:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	441a      	add	r2, r3
 8004226:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800422a:	601a      	str	r2, [r3, #0]

        /*  Butterfly calculations */

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 800422c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8004242:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004246:	601a      	str	r2, [r3, #0]
  return (val);
 8004248:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

        /* T = packed(yb-yd, xb-xd) */
        T = __QSUB16(T, U);
 8004252:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8004256:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 800425a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800425e:	6019      	str	r1, [r3, #0]
 8004260:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8004264:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004266:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	fad3 f212 	qsub16	r2, r3, r2
 8004276:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800427a:	601a      	str	r2, [r3, #0]
  return(result);
 800427c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
        /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
        R = __SHASX(S, T);
 8004286:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 800428a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 800428e:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8004292:	6019      	str	r1, [r3, #0]
 8004294:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004298:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800429a:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	faa3 f222 	shasx	r2, r3, r2
 80042aa:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80042ae:	601a      	str	r2, [r3, #0]
  return(result);
 80042b0:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

        /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
        S = __SHSAX(S, T);
 80042ba:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 80042be:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 80042c2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80042c6:	6019      	str	r1, [r3, #0]
 80042c8:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80042cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80042ce:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	fae3 f222 	shsax	r2, r3, r2
 80042de:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80042e2:	601a      	str	r2, [r3, #0]
  return(result);
 80042e4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8


        /*  Butterfly process for the i0+fftLen/2 sample */
        out1 = __SMUAD(C1, S) >> 16U;
 80042ee:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 80042f2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80042f6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80042fa:	6019      	str	r1, [r3, #0]
 80042fc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004300:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004302:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	fb23 f202 	smuad	r2, r3, r2
 8004312:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8004316:	601a      	str	r2, [r3, #0]
  return(result);
 8004318:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	0c1b      	lsrs	r3, r3, #16
 8004320:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        out2 = __SMUSDX(C1, S);
 8004324:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8004328:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 800432c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004330:	6019      	str	r1, [r3, #0]
 8004332:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8004336:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	fb43 f212 	smusdx	r2, r3, r2
 8004348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434c:	601a      	str	r2, [r3, #0]
  return(result);
 800434e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        out2 = __SMUAD(C1, S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        write_q15x2 (pSi2, __PKHBT( out1, out2, 0 ));
 8004358:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8004362:	b299      	uxth	r1, r3
 8004364:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	430b      	orrs	r3, r1
 800436e:	4619      	mov	r1, r3
 8004370:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800437a:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 800437c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004380:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800438c:	681a      	ldr	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 800438e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	601a      	str	r2, [r3, #0]
}
 8004396:	bf00      	nop
        pSi2 += 2 * n1;
 8004398:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80043aa:	601a      	str	r2, [r3, #0]

        /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
        out1 = __SMUAD(C3, R) >> 16U;
 80043ac:	f8d7 13cc 	ldr.w	r1, [r7, #972]	; 0x3cc
 80043b0:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 80043b4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80043b8:	6019      	str	r1, [r3, #0]
 80043ba:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80043be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80043c0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	fb23 f202 	smuad	r2, r3, r2
 80043d0:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80043d4:	601a      	str	r2, [r3, #0]
  return(result);
 80043d6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	0c1b      	lsrs	r3, r3, #16
 80043de:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        out2 = __SMUSDX(C3, R);
 80043e2:	f8d7 13cc 	ldr.w	r1, [r7, #972]	; 0x3cc
 80043e6:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 80043ea:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80043ee:	6019      	str	r1, [r3, #0]
 80043f0:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80043f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80043f6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	fb43 f212 	smusdx	r2, r3, r2
 8004406:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800440a:	601a      	str	r2, [r3, #0]
  return(result);
 800440c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        out2 = __SMUAD(C3, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        write_q15x2 (pSi3, __PKHBT( out1, out2, 0 ));
 8004416:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8004420:	b299      	uxth	r1, r3
 8004422:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8004426:	0c1b      	lsrs	r3, r3, #16
 8004428:	041b      	lsls	r3, r3, #16
 800442a:	430b      	orrs	r3, r1
 800442c:	4619      	mov	r1, r3
 800442e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8004438:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 800443a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800443e:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800444a:	681a      	ldr	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 800444c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	601a      	str	r2, [r3, #0]
}
 8004454:	bf00      	nop
        pSi3 += 2 * n1;
 8004456:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	441a      	add	r2, r3
 8004464:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004468:	601a      	str	r2, [r3, #0]
      for (i0 = j; i0 < fftLen; i0 += n1)
 800446a:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 800446e:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8004472:	4413      	add	r3, r2
 8004474:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8004478:	f107 0308 	add.w	r3, r7, #8
 800447c:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	f4ff ad56 	bcc.w	8003f34 <arm_radix4_butterfly_q15+0x8fa>
    for (j = 0U; j <= (n2 - 1U); j++)
 8004488:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800448c:	3301      	adds	r3, #1
 800448e:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8004492:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8004496:	3b01      	subs	r3, #1
 8004498:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 800449c:	429a      	cmp	r2, r3
 800449e:	f67f accf 	bls.w	8003e40 <arm_radix4_butterfly_q15+0x806>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2U;
 80044a2:	463b      	mov	r3, r7
 80044a4:	463a      	mov	r2, r7
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	0092      	lsls	r2, r2, #2
 80044aa:	601a      	str	r2, [r3, #0]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 80044ac:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 80044b6:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	f63f acb0 	bhi.w	8003e20 <arm_radix4_butterfly_q15+0x7e6>
  /* data is in 8.8(q8) format for the 256 point */
  /* data is in 6.10(q10) format for the 64 point */
  /* data is in 4.12(q12) format for the 16 point */

  /*  Initializations for the last stage */
  j = fftLen >> 2;
 80044c0:	f107 0308 	add.w	r3, r7, #8
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8

  ptr1 = &pSrc16[0];
 80044cc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80044d0:	f107 020c 	add.w	r2, r7, #12
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	601a      	str	r2, [r3, #0]

  /*  Butterfly implementation */
  do
  {
    /* Read xa (real), ya(imag) input */
    xaya = read_q15x2_ia (&ptr1);
 80044d8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	1d1a      	adds	r2, r3, #4
 80044e0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	1f1a      	subs	r2, r3, #4
 80044ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80044fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004502:	601a      	str	r2, [r3, #0]
  return (val);
 8004504:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8

    /* Read xb (real), yb(imag) input */
    xbyb = read_q15x2_ia (&ptr1);
 800450e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	1d1a      	adds	r2, r3, #4
 8004516:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	1f1a      	subs	r2, r3, #4
 8004524:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8004534:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004538:	601a      	str	r2, [r3, #0]
  return (val);
 800453a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4

    /* Read xc (real), yc(imag) input */
    xcyc = read_q15x2_ia (&ptr1);
 8004544:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	1d1a      	adds	r2, r3, #4
 800454c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	1f1a      	subs	r2, r3, #4
 800455a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 800456a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800456e:	601a      	str	r2, [r3, #0]
  return (val);
 8004570:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

    /* Read xd (real), yd(imag) input */
    xdyd = read_q15x2_ia (&ptr1);
 800457a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	1d1a      	adds	r2, r3, #4
 8004582:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	1f1a      	subs	r2, r3, #4
 8004590:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80045a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80045a4:	601a      	str	r2, [r3, #0]
  return (val);
 80045a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 80045b0:	f8d7 13c8 	ldr.w	r1, [r7, #968]	; 0x3c8
 80045b4:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80045b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80045bc:	6019      	str	r1, [r3, #0]
 80045be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80045c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80045c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	fa93 f212 	qadd16	r2, r3, r2
 80045d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80045d8:	601a      	str	r2, [r3, #0]
  return(result);
 80045da:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 80045e4:	f8d7 13c4 	ldr.w	r1, [r7, #964]	; 0x3c4
 80045e8:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 80045ec:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80045f0:	6019      	str	r1, [r3, #0]
 80045f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80045f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80045f8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	fa93 f212 	qadd16	r2, r3, r2
 8004608:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800460c:	601a      	str	r2, [r3, #0]
  return(result);
 800460e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    /* pointer updation for writing */
    ptr1 = ptr1 - 8U;
 8004618:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f1a3 0210 	sub.w	r2, r3, #16
 8004622:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004626:	601a      	str	r2, [r3, #0]


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&ptr1, __SHADD16(R, T));
 8004628:	f8d7 13e4 	ldr.w	r1, [r7, #996]	; 0x3e4
 800462c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8004630:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004634:	6019      	str	r1, [r3, #0]
 8004636:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800463a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800463c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	fa93 f222 	shadd16	r2, r3, r2
 800464c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004650:	601a      	str	r2, [r3, #0]
  return(result);
 8004652:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4619      	mov	r1, r3
 800465a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800465e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004668:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 800466a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800466e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8004676:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8004686:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	1d1a      	adds	r2, r3, #4
 8004690:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	601a      	str	r2, [r3, #0]
}
 8004698:	bf00      	nop

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 800469a:	f8d7 13c4 	ldr.w	r1, [r7, #964]	; 0x3c4
 800469e:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 80046a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80046a6:	6019      	str	r1, [r3, #0]
 80046a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80046ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80046ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	fa93 f212 	qadd16	r2, r3, r2
 80046be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80046c2:	601a      	str	r2, [r3, #0]
  return(result);
 80046c4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    write_q15x2_ia (&ptr1, __SHSUB16(R, T));
 80046ce:	f8d7 13e4 	ldr.w	r1, [r7, #996]	; 0x3e4
 80046d2:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 80046d6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80046da:	6019      	str	r1, [r3, #0]
 80046dc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80046e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80046e2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	fad3 f222 	shsub16	r2, r3, r2
 80046f2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80046f6:	601a      	str	r2, [r3, #0]
  return(result);
 80046f8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4619      	mov	r1, r3
 8004700:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004704:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800470e:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8004710:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004714:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004718:	6812      	ldr	r2, [r2, #0]
 800471a:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 800471c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 800472c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	1d1a      	adds	r2, r3, #4
 8004736:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	601a      	str	r2, [r3, #0]
}
 800473e:	bf00      	nop

    /* S = packed((ya - yc), (xa - xc)) */
    S = __QSUB16(xaya, xcyc);
 8004740:	f8d7 13c8 	ldr.w	r1, [r7, #968]	; 0x3c8
 8004744:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8004748:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800474c:	6019      	str	r1, [r3, #0]
 800474e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004752:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004754:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	fad3 f212 	qsub16	r2, r3, r2
 8004764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004768:	601a      	str	r2, [r3, #0]
  return(result);
 800476a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

    /* Read yd (real), xd(imag) input */
    /* T = packed( (yb - yd), (xb - xd))  */
    U = __QSUB16(xbyb, xdyd);
 8004774:	f8d7 13c4 	ldr.w	r1, [r7, #964]	; 0x3c4
 8004778:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 800477c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8004780:	6019      	str	r1, [r3, #0]
 8004782:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004786:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004788:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	fad3 f212 	qsub16	r2, r3, r2
 8004798:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800479c:	601a      	str	r2, [r3, #0]
  return(result);
 800479e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
 80047a8:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 80047ac:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 80047b0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80047b4:	6019      	str	r1, [r3, #0]
 80047b6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80047ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80047bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80047c6:	6812      	ldr	r2, [r2, #0]
 80047c8:	fae3 f222 	shsax	r2, r3, r2
 80047cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047d0:	601a      	str	r2, [r3, #0]
  return(result);
 80047d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4619      	mov	r1, r3
 80047da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047de:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80047e8:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80047ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80047ee:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80047f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8004802:	6812      	ldr	r2, [r2, #0]
 8004804:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8004806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	1d1a      	adds	r2, r3, #4
 8004810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	601a      	str	r2, [r3, #0]
}
 8004818:	bf00      	nop

    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
 800481a:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 800481e:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8004822:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8004826:	6019      	str	r1, [r3, #0]
 8004828:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800482c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800482e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	faa3 f222 	shasx	r2, r3, r2
 800483e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8004842:	601a      	str	r2, [r3, #0]
  return(result);
 8004844:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4619      	mov	r1, r3
 800484c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8004850:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800485a:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 800485c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004860:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004864:	6812      	ldr	r2, [r2, #0]
 8004866:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8004868:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8004878:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	1d1a      	adds	r2, r3, #4
 8004882:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	601a      	str	r2, [r3, #0]
}
 800488a:	bf00      	nop
    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

  } while (--j);
 800488c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8004890:	3b01      	subs	r3, #1
 8004892:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8004896:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800489a:	2b00      	cmp	r3, #0
 800489c:	f47f ae1c 	bne.w	80044d8 <arm_radix4_butterfly_q15+0xe9e>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #if defined (ARM_MATH_DSP) */

}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
 80048a4:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc90      	pop	{r4, r7}
 80048ac:	4770      	bx	lr

080048ae <arm_radix4_butterfly_inverse_q15>:
void arm_radix4_butterfly_inverse_q15(
        q15_t * pSrc16,
        uint32_t fftLen,
  const q15_t * pCoef16,
        uint32_t twidCoefModifier)
{
 80048ae:	b490      	push	{r4, r7}
 80048b0:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	f107 040c 	add.w	r4, r7, #12
 80048ba:	6020      	str	r0, [r4, #0]
 80048bc:	f107 0008 	add.w	r0, r7, #8
 80048c0:	6001      	str	r1, [r0, #0]
 80048c2:	1d39      	adds	r1, r7, #4
 80048c4:	600a      	str	r2, [r1, #0]
 80048c6:	463a      	mov	r2, r7
 80048c8:	6013      	str	r3, [r2, #0]
  /* Total process is divided into three stages */

  /* process first stage, middle stages, & last stage */

  /*  Initializations for the first stage */
  n2 = fftLen;
 80048ca:	f107 0308 	add.w	r3, r7, #8
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  n1 = n2;
 80048d4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80048d8:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0

  /* n2 = fftLen/4 */
  n2 >>= 2U;
 80048dc:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80048e0:	089b      	lsrs	r3, r3, #2
 80048e2:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

  /* Index for twiddle coefficient */
  ic = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400

  /* Index for input read and output write */
  j = n2;
 80048ec:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80048f0:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8

  pSi0 = pSrc16;
 80048f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80048f8:	f107 020c 	add.w	r2, r7, #12
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	601a      	str	r2, [r3, #0]
  pSi1 = pSi0 + 2 * n2;
 8004900:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004912:	601a      	str	r2, [r3, #0]
  pSi2 = pSi1 + 2 * n2;
 8004914:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004926:	601a      	str	r2, [r3, #0]
  pSi3 = pSi2 + 2 * n2;
 8004928:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	441a      	add	r2, r3
 8004936:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800493a:	601a      	str	r2, [r3, #0]
  {
    /*  Butterfly implementation */

    /*  Reading i0, i0+fftLen/2 inputs */
    /* Read ya (real), xa(imag) input */
    T = read_q15x2 (pSi0);
 800493c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8004952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004956:	601a      	str	r2, [r3, #0]
  return (val);
 8004958:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    T = __SHADD16(T, 0);
 8004962:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8004966:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004974:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	fa93 f222 	shadd16	r2, r3, r2
 8004984:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8004988:	601a      	str	r2, [r3, #0]
  return(result);
 800498a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    T = __SHADD16(T, 0);
 8004994:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8004998:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80049a6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f507 7215 	add.w	r2, r7, #596	; 0x254
 80049b0:	6812      	ldr	r2, [r2, #0]
 80049b2:	fa93 f222 	shadd16	r2, r3, r2
 80049b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80049ba:	601a      	str	r2, [r3, #0]
  return(result);
 80049bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    /* Read yc (real), xc(imag) input */
    S = read_q15x2 (pSi2);
 80049c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80049dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80049e0:	601a      	str	r2, [r3, #0]
  return (val);
 80049e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
    S = __SHADD16(S, 0);
 80049ec:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80049f0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80049fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f507 7219 	add.w	r2, r7, #612	; 0x264
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	fa93 f222 	shadd16	r2, r3, r2
 8004a0e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a12:	601a      	str	r2, [r3, #0]
  return(result);
 8004a14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
    S = __SHADD16(S, 0);
 8004a1e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8004a22:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004a30:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	fa93 f222 	shadd16	r2, r3, r2
 8004a40:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8004a44:	601a      	str	r2, [r3, #0]
  return(result);
 8004a46:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

    /* R = packed((ya + yc), (xa + xc) ) */
    R = __QADD16(T, S);
 8004a50:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8004a54:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8004a58:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8004a5c:	6019      	str	r1, [r3, #0]
 8004a5e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8004a62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004a64:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	fa93 f212 	qadd16	r2, r3, r2
 8004a74:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004a78:	601a      	str	r2, [r3, #0]
  return(result);
 8004a7a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

    /* S = packed((ya - yc), (xa - xc) ) */
    S = __QSUB16(T, S);
 8004a84:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8004a88:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8004a8c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8004a90:	6019      	str	r1, [r3, #0]
 8004a92:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8004a96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004a98:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	fad3 f212 	qsub16	r2, r3, r2
 8004aa8:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8004aac:	601a      	str	r2, [r3, #0]
  return(result);
 8004aae:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

    /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
    /* Read yb (real), xb(imag) input */
    T = read_q15x2 (pSi1);
 8004ab8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8004ace:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ad2:	601a      	str	r2, [r3, #0]
  return (val);
 8004ad4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    T = __SHADD16(T, 0);
 8004ade:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8004ae2:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004af0:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	fa93 f222 	shadd16	r2, r3, r2
 8004b00:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8004b04:	601a      	str	r2, [r3, #0]
  return(result);
 8004b06:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    T = __SHADD16(T, 0);
 8004b10:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8004b14:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004b22:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	fa93 f222 	shadd16	r2, r3, r2
 8004b32:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004b36:	601a      	str	r2, [r3, #0]
  return(result);
 8004b38:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    /* Read yd (real), xd(imag) input */
    U = read_q15x2 (pSi3);
 8004b42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8004b58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b5c:	601a      	str	r2, [r3, #0]
  return (val);
 8004b5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
    U = __SHADD16(U, 0);
 8004b68:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8004b6c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004b7a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8004b84:	6812      	ldr	r2, [r2, #0]
 8004b86:	fa93 f222 	shadd16	r2, r3, r2
 8004b8a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004b8e:	601a      	str	r2, [r3, #0]
  return(result);
 8004b90:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
    U = __SHADD16(U, 0);
 8004b9a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8004b9e:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004bac:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	fa93 f222 	shadd16	r2, r3, r2
 8004bbc:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8004bc0:	601a      	str	r2, [r3, #0]
  return(result);
 8004bc2:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

    /* T = packed((yb + yd), (xb + xd) ) */
    T = __QADD16(T, U);
 8004bcc:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 8004bd0:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8004bd4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004bd8:	6019      	str	r1, [r3, #0]
 8004bda:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8004bde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004be0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	fa93 f212 	qadd16	r2, r3, r2
 8004bf0:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8004bf4:	601a      	str	r2, [r3, #0]
  return(result);
 8004bf6:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&pSi0, __SHADD16(R, T));
 8004c00:	f8d7 13e4 	ldr.w	r1, [r7, #996]	; 0x3e4
 8004c04:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8004c08:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8004c0c:	6019      	str	r1, [r3, #0]
 8004c0e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8004c12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004c14:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	fa93 f222 	shadd16	r2, r3, r2
 8004c24:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8004c28:	601a      	str	r2, [r3, #0]
  return(result);
 8004c2a:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4619      	mov	r1, r3
 8004c32:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8004c36:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8004c40:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8004c42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c46:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8004c4e:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8004c5e:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	1d1a      	adds	r2, r3, #4
 8004c68:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	601a      	str	r2, [r3, #0]
}
 8004c70:	bf00      	nop

    /* R = packed((ya + yc) - (yb + yd), (xa + xc)- (xb + xd)) */
    R = __QSUB16(R, T);
 8004c72:	f8d7 13e4 	ldr.w	r1, [r7, #996]	; 0x3e4
 8004c76:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8004c7a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004c7e:	6019      	str	r1, [r3, #0]
 8004c80:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8004c84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004c86:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	fad3 f212 	qsub16	r2, r3, r2
 8004c96:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8004c9a:	601a      	str	r2, [r3, #0]
  return(result);
 8004c9c:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

    /* co2 & si2 are read from SIMD Coefficient pointer */
    C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8004ca6:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	1d3a      	adds	r2, r7, #4
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8004cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cc6:	601a      	str	r2, [r3, #0]
  return (val);
 8004cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

#ifndef ARM_MATH_BIG_ENDIAN
    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUSD(C2, R) >> 16U;
 8004cd2:	f8d7 13dc 	ldr.w	r1, [r7, #988]	; 0x3dc
 8004cd6:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8004cda:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8004cde:	6019      	str	r1, [r3, #0]
 8004ce0:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8004ce4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004ce6:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 8004cf0:	6812      	ldr	r2, [r2, #0]
 8004cf2:	fb43 f202 	smusd	r2, r3, r2
 8004cf6:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8004cfa:	601a      	str	r2, [r3, #0]
  return(result);
 8004cfc:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	0c1b      	lsrs	r3, r3, #16
 8004d04:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
    /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
    out2 = __SMUADX(C2, R);
 8004d08:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8004d0c:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8004d10:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8004d14:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8004d18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004d1a:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8004d1e:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8004d22:	6812      	ldr	r2, [r2, #0]
 8004d24:	fb23 f212 	smuadx	r2, r3, r2
 8004d28:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8004d2c:	601a      	str	r2, [r3, #0]
  return(result);
 8004d2e:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    out2 = __SMUSD(__QSUB16(0, C2), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /*  Reading i0+fftLen/4 */
    /* T = packed(yb, xb) */
    T = read_q15x2 (pSi1);
 8004d38:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8004d42:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8004d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d4e:	601a      	str	r2, [r3, #0]
  return (val);
 8004d50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    T = __SHADD16(T, 0);
 8004d5a:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8004d5e:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8004d62:	2300      	movs	r3, #0
 8004d64:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004d68:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8004d6c:	f8d7 2318 	ldr.w	r2, [r7, #792]	; 0x318
 8004d70:	fa93 f322 	shadd16	r3, r3, r2
 8004d74:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
  return(result);
 8004d78:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8004d7c:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    T = __SHADD16(T, 0);
 8004d80:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8004d84:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004d8e:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8004d92:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8004d96:	fa93 f322 	shadd16	r3, r3, r2
 8004d9a:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
  return(result);
 8004d9e:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8004da2:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    write_q15x2_ia (&pSi1, (q31_t) __PKHBT( out1, out2, 0 ));
 8004da6:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8004db0:	0c1b      	lsrs	r3, r3, #16
 8004db2:	041b      	lsls	r3, r3, #16
 8004db4:	4313      	orrs	r3, r2
 8004db6:	461a      	mov	r2, r3
 8004db8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004dbc:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 8004dc0:	f8c7 232c 	str.w	r2, [r7, #812]	; 0x32c
  q31_t val = value;
 8004dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dc8:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8004dcc:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8004dce:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8004ddc:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	1d1a      	adds	r2, r3, #4
 8004de4:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8004de8:	601a      	str	r2, [r3, #0]
}
 8004dea:	bf00      	nop

    /*  Butterfly calculations */
    /* U = packed(yd, xd) */
    U = read_q15x2 (pSi3);
 8004dec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8004df6:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8004dfe:	f107 0320 	add.w	r3, r7, #32
 8004e02:	601a      	str	r2, [r3, #0]
  return (val);
 8004e04:	f107 0320 	add.w	r3, r7, #32
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
    U = __SHADD16(U, 0);
 8004e0e:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8004e12:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8004e16:	2300      	movs	r3, #0
 8004e18:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004e1c:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8004e20:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8004e24:	fa93 f322 	shadd16	r3, r3, r2
 8004e28:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
  return(result);
 8004e2c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8004e30:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
    U = __SHADD16(U, 0);
 8004e34:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8004e38:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004e42:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004e46:	f8d7 2348 	ldr.w	r2, [r7, #840]	; 0x348
 8004e4a:	fa93 f322 	shadd16	r3, r3, r2
 8004e4e:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
  return(result);
 8004e52:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8004e56:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

    /* T = packed(yb-yd, xb-xd) */
    T = __QSUB16(T, U);
 8004e5a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8004e5e:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8004e62:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 8004e66:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004e6a:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8004e6e:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8004e72:	fad3 f312 	qsub16	r3, r3, r2
 8004e76:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
  return(result);
 8004e7a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004e7e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
    /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
    R = __QSAX(S, T);
 8004e82:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8004e86:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8004e8a:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 8004e8e:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004e92:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8004e96:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8004e9a:	fae3 f312 	qsax	r3, r3, r2
 8004e9e:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
  return(result);
 8004ea2:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8004ea6:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
    /* S = packed((ya-yc) + (xb- xd),  (xa-xc) - (yb-yd)) */
    S = __QASX(S, T);
 8004eaa:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8004eae:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8004eb2:	f8c7 2370 	str.w	r2, [r7, #880]	; 0x370
 8004eb6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004eba:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8004ebe:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004ec2:	faa3 f312 	qasx	r3, r3, r2
 8004ec6:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
  return(result);
 8004eca:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8004ece:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QSAX(S, T);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* co1 & si1 are read from SIMD Coefficient pointer */
    C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 8004ed2:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	1d3a      	adds	r2, r7, #4
 8004eda:	6812      	ldr	r2, [r2, #0]
 8004edc:	4413      	add	r3, r2
 8004ede:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8004ee2:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8004eea:	f107 031c 	add.w	r3, r7, #28
 8004eee:	601a      	str	r2, [r3, #0]
  return (val);
 8004ef0:	f107 031c 	add.w	r3, r7, #28
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUSD(C1, S) >> 16U;
 8004efa:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8004efe:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8004f02:	f8c7 2380 	str.w	r2, [r7, #896]	; 0x380
 8004f06:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004f0a:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8004f0e:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 8004f12:	fb43 f302 	smusd	r3, r3, r2
 8004f16:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
  return(result);
 8004f1a:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8004f1e:	0c1b      	lsrs	r3, r3, #16
 8004f20:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
    /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
    out2 = __SMUADX(C1, S);
 8004f24:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8004f28:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8004f2c:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 8004f30:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004f34:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8004f38:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8004f3c:	fb23 f312 	smuadx	r3, r3, r2
 8004f40:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
  return(result);
 8004f44:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8004f48:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    /* yb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out2 = __SMUSD(__QSUB16(0, C1), S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xb', yb') in little endian format */
    write_q15x2_ia (&pSi2, __PKHBT( out1, out2, 0 ));
 8004f4c:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	041b      	lsls	r3, r3, #16
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004f62:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8004f66:	f8c7 2390 	str.w	r2, [r7, #912]	; 0x390
  q31_t val = value;
 8004f6a:	f107 0318 	add.w	r3, r7, #24
 8004f6e:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 8004f72:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8004f74:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f107 0218 	add.w	r2, r7, #24
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8004f82:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	1d1a      	adds	r2, r3, #4
 8004f8a:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8004f8e:	601a      	str	r2, [r3, #0]
}
 8004f90:	bf00      	nop

    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 8004f92:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8004f96:	4613      	mov	r3, r2
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	1d3b      	adds	r3, r7, #4
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8004faa:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8004fb2:	f107 0314 	add.w	r3, r7, #20
 8004fb6:	601a      	str	r2, [r3, #0]
  return (val);
 8004fb8:	f107 0314 	add.w	r3, r7, #20
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUSD(C3, R) >> 16U;
 8004fc2:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8004fc6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8004fca:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8004fce:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004fd2:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8004fd6:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8004fda:	fb43 f302 	smusd	r3, r3, r2
 8004fde:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
  return(result);
 8004fe2:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8004fe6:	0c1b      	lsrs	r3, r3, #16
 8004fe8:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
    /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
    out2 = __SMUADX(C3, R);
 8004fec:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8004ff0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8004ff4:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 8004ff8:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004ffc:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8005000:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 8005004:	fb23 f312 	smuadx	r3, r3, r2
 8005008:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
  return(result);
 800500c:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8005010:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    /* yd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out2 = __SMUSD(__QSUB16(0, C3), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xd', yd') in little endian format */
    write_q15x2_ia (&pSi3, __PKHBT( out1, out2, 0 ));
 8005014:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8005018:	b29a      	uxth	r2, r3
 800501a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800501e:	0c1b      	lsrs	r3, r3, #16
 8005020:	041b      	lsls	r3, r3, #16
 8005022:	4313      	orrs	r3, r2
 8005024:	461a      	mov	r2, r3
 8005026:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800502a:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 800502e:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
  q31_t val = value;
 8005032:	f107 0310 	add.w	r3, r7, #16
 8005036:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 800503a:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 800503c:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f107 0210 	add.w	r2, r7, #16
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 800504a:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	1d1a      	adds	r2, r3, #4
 8005052:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8005056:	601a      	str	r2, [r3, #0]
}
 8005058:	bf00      	nop

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 800505a:	463b      	mov	r3, r7
 800505c:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4413      	add	r3, r2
 8005064:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400

  } while (--j);
 8005068:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800506c:	3b01      	subs	r3, #1
 800506e:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8005072:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8005076:	2b00      	cmp	r3, #0
 8005078:	f47f ac60 	bne.w	800493c <arm_radix4_butterfly_inverse_q15+0x8e>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2U;
 800507c:	463b      	mov	r3, r7
 800507e:	463a      	mov	r2, r7
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	0092      	lsls	r2, r2, #2
 8005084:	601a      	str	r2, [r3, #0]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8005086:	f107 0308 	add.w	r3, r7, #8
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	089b      	lsrs	r3, r3, #2
 800508e:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8005092:	e34a      	b.n	800572a <arm_radix4_butterfly_inverse_q15+0xe7c>
  {
    /*  Initializations for the middle stage */
    n1 = n2;
 8005094:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8005098:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    n2 >>= 2U;
 800509c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80050a0:	089b      	lsrs	r3, r3, #2
 80050a2:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
    ic = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400

    for (j = 0U; j <= (n2 - 1U); j++)
 80050ac:	2300      	movs	r3, #0
 80050ae:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 80050b2:	e328      	b.n	8005706 <arm_radix4_butterfly_inverse_q15+0xe58>
    {
      /*  index calculation for the coefficients */
      C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 80050b4:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	1d3a      	adds	r2, r7, #4
 80050bc:	6812      	ldr	r2, [r2, #0]
 80050be:	441a      	add	r2, r3
 80050c0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80050d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80050d4:	601a      	str	r2, [r3, #0]
  return (val);
 80050d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
      C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 80050e0:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	1d3a      	adds	r2, r7, #4
 80050e8:	6812      	ldr	r2, [r2, #0]
 80050ea:	441a      	add	r2, r3
 80050ec:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80050fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005100:	601a      	str	r2, [r3, #0]
  return (val);
 8005102:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
      C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 800510c:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8005110:	4613      	mov	r3, r2
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	461a      	mov	r2, r3
 800511a:	1d3b      	adds	r3, r7, #4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	441a      	add	r2, r3
 8005120:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8005130:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005134:	601a      	str	r2, [r3, #0]
  return (val);
 8005136:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;
 8005140:	463b      	mov	r3, r7
 8005142:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4413      	add	r3, r2
 800514a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400

      pSi0 = pSrc16 + 2 * j;
 800514e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	f107 020c 	add.w	r2, r7, #12
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	441a      	add	r2, r3
 800515c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005160:	601a      	str	r2, [r3, #0]
      pSi1 = pSi0 + 2 * n2;
 8005162:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	441a      	add	r2, r3
 8005170:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005174:	601a      	str	r2, [r3, #0]
      pSi2 = pSi1 + 2 * n2;
 8005176:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	441a      	add	r2, r3
 8005184:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005188:	601a      	str	r2, [r3, #0]
      pSi3 = pSi2 + 2 * n2;
 800518a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800519c:	601a      	str	r2, [r3, #0]

      /*  Butterfly implementation */
      for (i0 = j; i0 < fftLen; i0 += n1)
 800519e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80051a2:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 80051a6:	e2a1      	b.n	80056ec <arm_radix4_butterfly_inverse_q15+0xe3e>
      {
        /*  Reading i0, i0+fftLen/2 inputs */
        /* Read ya (real), xa(imag) input */
        T = read_q15x2 (pSi0);
 80051a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80051be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80051c2:	601a      	str	r2, [r3, #0]
  return (val);
 80051c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

        /* Read yc (real), xc(imag) input */
        S = read_q15x2 (pSi2);
 80051ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80051e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80051e8:	601a      	str	r2, [r3, #0]
  return (val);
 80051ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

        /* R = packed( (ya + yc), (xa + xc)) */
        R = __QADD16(T, S);
 80051f4:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 80051f8:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80051fc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005200:	6019      	str	r1, [r3, #0]
 8005202:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8005206:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8005208:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	fa93 f212 	qadd16	r2, r3, r2
 8005218:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800521c:	601a      	str	r2, [r3, #0]
  return(result);
 800521e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

        /* S = packed((ya - yc), (xa - xc)) */
        S = __QSUB16(T, S);
 8005228:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 800522c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8005230:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8005234:	6019      	str	r1, [r3, #0]
 8005236:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800523a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800523c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	fad3 f212 	qsub16	r2, r3, r2
 800524c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8005250:	601a      	str	r2, [r3, #0]
  return(result);
 8005252:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

        /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 800525c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8005272:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005276:	601a      	str	r2, [r3, #0]
  return (val);
 8005278:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8005282:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8005298:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800529c:	601a      	str	r2, [r3, #0]
  return (val);
 800529e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

        /* T = packed( (yb + yd), (xb + xd)) */
        T = __QADD16(T, U);
 80052a8:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 80052ac:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 80052b0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80052b4:	6019      	str	r1, [r3, #0]
 80052b6:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80052ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80052bc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	fa93 f212 	qadd16	r2, r3, r2
 80052cc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80052d0:	601a      	str	r2, [r3, #0]
  return(result);
 80052d2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

        /*  writing the butterfly processed i0 sample */

        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
 80052dc:	f8d7 13e4 	ldr.w	r1, [r7, #996]	; 0x3e4
 80052e0:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 80052e4:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80052e8:	6019      	str	r1, [r3, #0]
 80052ea:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80052ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80052f0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	fa93 f222 	shadd16	r2, r3, r2
 8005300:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005304:	601a      	str	r2, [r3, #0]
  return(result);
 8005306:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        out1 = __SHADD16(out1, 0);
 8005310:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8005314:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8005322:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	fa93 f222 	shadd16	r2, r3, r2
 8005332:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005336:	601a      	str	r2, [r3, #0]
  return(result);
 8005338:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        write_q15x2 (pSi0, out1);
 8005342:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8005352:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8005356:	601a      	str	r2, [r3, #0]
  q31_t val = value;
 8005358:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800535c:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8005360:	6812      	ldr	r2, [r2, #0]
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005368:	681a      	ldr	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 800536a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	601a      	str	r2, [r3, #0]
}
 8005372:	bf00      	nop
        pSi0 += 2 * n1;
 8005374:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005386:	601a      	str	r2, [r3, #0]

        /* R = packed( (ya + yc) - (yb + yd), (xa + xc) - (xb + xd)) */
        R = __SHSUB16(R, T);
 8005388:	f8d7 13e4 	ldr.w	r1, [r7, #996]	; 0x3e4
 800538c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8005390:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8005394:	6019      	str	r1, [r3, #0]
 8005396:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800539a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800539c:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	fad3 f222 	shsub16	r2, r3, r2
 80053ac:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80053b0:	601a      	str	r2, [r3, #0]
  return(result);
 80053b2:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

#ifndef ARM_MATH_BIG_ENDIAN
        /* (ya-yb+yc-yd)* (si2) + (xa-xb+xc-xd)* co2 */
        out1 = __SMUSD(C2, R) >> 16U;
 80053bc:	f8d7 13dc 	ldr.w	r1, [r7, #988]	; 0x3dc
 80053c0:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 80053c4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80053c8:	6019      	str	r1, [r3, #0]
 80053ca:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80053ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80053d0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 80053da:	6812      	ldr	r2, [r2, #0]
 80053dc:	fb43 f202 	smusd	r2, r3, r2
 80053e0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80053e4:	601a      	str	r2, [r3, #0]
  return(result);
 80053e6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	0c1b      	lsrs	r3, r3, #16
 80053ee:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8

        /* (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        out2 = __SMUADX(C2, R);
 80053f2:	f8d7 13dc 	ldr.w	r1, [r7, #988]	; 0x3dc
 80053f6:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 80053fa:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80053fe:	6019      	str	r1, [r3, #0]
 8005400:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8005404:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8005406:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8005410:	6812      	ldr	r2, [r2, #0]
 8005412:	fb23 f212 	smuadx	r2, r3, r2
 8005416:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800541a:	601a      	str	r2, [r3, #0]
  return(result);
 800541c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        out2 = __SMUSD(__QSUB16(0, C2), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8005426:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 800543c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005440:	601a      	str	r2, [r3, #0]
  return (val);
 8005442:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        write_q15x2 (pSi1, __PKHBT( out1, out2, 0 ));
 800544c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8005456:	b299      	uxth	r1, r3
 8005458:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800545c:	0c1b      	lsrs	r3, r3, #16
 800545e:	041b      	lsls	r3, r3, #16
 8005460:	430b      	orrs	r3, r1
 8005462:	4619      	mov	r1, r3
 8005464:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800546e:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8005470:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005474:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005480:	681a      	ldr	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8005482:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	601a      	str	r2, [r3, #0]
}
 800548a:	bf00      	nop
        pSi1 += 2 * n1;
 800548c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800549e:	601a      	str	r2, [r3, #0]

        /*  Butterfly calculations */

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 80054a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80054b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80054ba:	601a      	str	r2, [r3, #0]
  return (val);
 80054bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

        /* T = packed(yb-yd, xb-xd) */
        T = __QSUB16(T, U);
 80054c6:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 80054ca:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 80054ce:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80054d2:	6019      	str	r1, [r3, #0]
 80054d4:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80054d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80054da:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80054e4:	6812      	ldr	r2, [r2, #0]
 80054e6:	fad3 f212 	qsub16	r2, r3, r2
 80054ea:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80054ee:	601a      	str	r2, [r3, #0]
  return(result);
 80054f0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
        /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
        R = __SHSAX(S, T);
 80054fa:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 80054fe:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8005502:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8005506:	6019      	str	r1, [r3, #0]
 8005508:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800550c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800550e:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8005518:	6812      	ldr	r2, [r2, #0]
 800551a:	fae3 f222 	shsax	r2, r3, r2
 800551e:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8005522:	601a      	str	r2, [r3, #0]
  return(result);
 8005524:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

        /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
        S = __SHASX(S, T);
 800552e:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 8005532:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8005536:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800553a:	6019      	str	r1, [r3, #0]
 800553c:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8005540:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8005542:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 800554c:	6812      	ldr	r2, [r2, #0]
 800554e:	faa3 f222 	shasx	r2, r3, r2
 8005552:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8005556:	601a      	str	r2, [r3, #0]
  return(result);
 8005558:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

        /*  Butterfly process for the i0+fftLen/2 sample */
        out1 = __SMUSD(C1, S) >> 16U;
 8005562:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8005566:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 800556a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800556e:	6019      	str	r1, [r3, #0]
 8005570:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8005574:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8005576:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8005580:	6812      	ldr	r2, [r2, #0]
 8005582:	fb43 f202 	smusd	r2, r3, r2
 8005586:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800558a:	601a      	str	r2, [r3, #0]
  return(result);
 800558c:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	0c1b      	lsrs	r3, r3, #16
 8005594:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        out2 = __SMUADX(C1, S);
 8005598:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 800559c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80055a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055a4:	6019      	str	r1, [r3, #0]
 80055a6:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80055aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80055ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f507 7201 	add.w	r2, r7, #516	; 0x204
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	fb23 f212 	smuadx	r2, r3, r2
 80055bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c0:	601a      	str	r2, [r3, #0]
  return(result);
 80055c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        out2 = __SMUSD(__QSUB16(0, C1), S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        write_q15x2 (pSi2, __PKHBT( out1, out2, 0 ));
 80055cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80055d6:	b299      	uxth	r1, r3
 80055d8:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80055dc:	0c1b      	lsrs	r3, r3, #16
 80055de:	041b      	lsls	r3, r3, #16
 80055e0:	430b      	orrs	r3, r1
 80055e2:	4619      	mov	r1, r3
 80055e4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80055ee:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80055f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055f4:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005600:	681a      	ldr	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8005602:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	601a      	str	r2, [r3, #0]
}
 800560a:	bf00      	nop
        pSi2 += 2 * n1;
 800560c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	441a      	add	r2, r3
 800561a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800561e:	601a      	str	r2, [r3, #0]

        /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
        out1 = __SMUSD(C3, R) >> 16U;
 8005620:	f8d7 13cc 	ldr.w	r1, [r7, #972]	; 0x3cc
 8005624:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8005628:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800562c:	6019      	str	r1, [r3, #0]
 800562e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005632:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8005634:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800563e:	6812      	ldr	r2, [r2, #0]
 8005640:	fb43 f202 	smusd	r2, r3, r2
 8005644:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8005648:	601a      	str	r2, [r3, #0]
  return(result);
 800564a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	0c1b      	lsrs	r3, r3, #16
 8005652:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        out2 = __SMUADX(C3, R);
 8005656:	f8d7 13cc 	ldr.w	r1, [r7, #972]	; 0x3cc
 800565a:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 800565e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8005662:	6019      	str	r1, [r3, #0]
 8005664:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8005668:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800566a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8005674:	6812      	ldr	r2, [r2, #0]
 8005676:	fb23 f212 	smuadx	r2, r3, r2
 800567a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800567e:	601a      	str	r2, [r3, #0]
  return(result);
 8005680:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        out2 = __SMUSD(__QSUB16(0, C3), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        write_q15x2 (pSi3, __PKHBT( out1, out2, 0 ));
 800568a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8005694:	b299      	uxth	r1, r3
 8005696:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800569a:	0c1b      	lsrs	r3, r3, #16
 800569c:	041b      	lsls	r3, r3, #16
 800569e:	430b      	orrs	r3, r1
 80056a0:	4619      	mov	r1, r3
 80056a2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80056ac:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80056ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80056b2:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80056be:	681a      	ldr	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 80056c0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	601a      	str	r2, [r3, #0]
}
 80056c8:	bf00      	nop
        pSi3 += 2 * n1;
 80056ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	441a      	add	r2, r3
 80056d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80056dc:	601a      	str	r2, [r3, #0]
      for (i0 = j; i0 < fftLen; i0 += n1)
 80056de:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 80056e2:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80056e6:	4413      	add	r3, r2
 80056e8:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 80056ec:	f107 0308 	add.w	r3, r7, #8
 80056f0:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	f4ff ad56 	bcc.w	80051a8 <arm_radix4_butterfly_inverse_q15+0x8fa>
    for (j = 0U; j <= (n2 - 1U); j++)
 80056fc:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8005700:	3301      	adds	r3, #1
 8005702:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8005706:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800570a:	3b01      	subs	r3, #1
 800570c:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8005710:	429a      	cmp	r2, r3
 8005712:	f67f accf 	bls.w	80050b4 <arm_radix4_butterfly_inverse_q15+0x806>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2U;
 8005716:	463b      	mov	r3, r7
 8005718:	463a      	mov	r2, r7
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	0092      	lsls	r2, r2, #2
 800571e:	601a      	str	r2, [r3, #0]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8005720:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8005724:	089b      	lsrs	r3, r3, #2
 8005726:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800572a:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800572e:	2b04      	cmp	r3, #4
 8005730:	f63f acb0 	bhi.w	8005094 <arm_radix4_butterfly_inverse_q15+0x7e6>
  /* data is in 8.8(q8) format for the 256 point */
  /* data is in 6.10(q10) format for the 64 point */
  /* data is in 4.12(q12) format for the 16 point */

  /*  Initializations for the last stage */
  j = fftLen >> 2;
 8005734:	f107 0308 	add.w	r3, r7, #8
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	089b      	lsrs	r3, r3, #2
 800573c:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8

  ptr1 = &pSrc16[0];
 8005740:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005744:	f107 020c 	add.w	r2, r7, #12
 8005748:	6812      	ldr	r2, [r2, #0]
 800574a:	601a      	str	r2, [r3, #0]

  /*  Butterfly implementation */
  do
  {
    /* Read xa (real), ya(imag) input */
    xaya = read_q15x2_ia (&ptr1);
 800574c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	1d1a      	adds	r2, r3, #4
 8005754:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	1f1a      	subs	r2, r3, #4
 8005762:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8005772:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005776:	601a      	str	r2, [r3, #0]
  return (val);
 8005778:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8

    /* Read xb (real), yb(imag) input */
    xbyb = read_q15x2_ia (&ptr1);
 8005782:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	1d1a      	adds	r2, r3, #4
 800578a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	1f1a      	subs	r2, r3, #4
 8005798:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80057a8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80057ac:	601a      	str	r2, [r3, #0]
  return (val);
 80057ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4

    /* Read xc (real), yc(imag) input */
    xcyc = read_q15x2_ia (&ptr1);
 80057b8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	1d1a      	adds	r2, r3, #4
 80057c0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	1f1a      	subs	r2, r3, #4
 80057ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 80057de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80057e2:	601a      	str	r2, [r3, #0]
  return (val);
 80057e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

    /* Read xd (real), yd(imag) input */
    xdyd = read_q15x2_ia (&ptr1);
 80057ee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	1d1a      	adds	r2, r3, #4
 80057f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	1f1a      	subs	r2, r3, #4
 8005804:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
  memcpy (&val, pQ15, 4);
 8005814:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005818:	601a      	str	r2, [r3, #0]
  return (val);
 800581a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 8005824:	f8d7 13c8 	ldr.w	r1, [r7, #968]	; 0x3c8
 8005828:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 800582c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005830:	6019      	str	r1, [r3, #0]
 8005832:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005836:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8005838:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	fa93 f212 	qadd16	r2, r3, r2
 8005848:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800584c:	601a      	str	r2, [r3, #0]
  return(result);
 800584e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8005858:	f8d7 13c4 	ldr.w	r1, [r7, #964]	; 0x3c4
 800585c:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 8005860:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005864:	6019      	str	r1, [r3, #0]
 8005866:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800586a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800586c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8005876:	6812      	ldr	r2, [r2, #0]
 8005878:	fa93 f212 	qadd16	r2, r3, r2
 800587c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005880:	601a      	str	r2, [r3, #0]
  return(result);
 8005882:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    /* pointer updation for writing */
    ptr1 = ptr1 - 8U;
 800588c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f1a3 0210 	sub.w	r2, r3, #16
 8005896:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800589a:	601a      	str	r2, [r3, #0]


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&ptr1, __SHADD16(R, T));
 800589c:	f8d7 13e4 	ldr.w	r1, [r7, #996]	; 0x3e4
 80058a0:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 80058a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80058a8:	6019      	str	r1, [r3, #0]
 80058aa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80058ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80058b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	fa93 f222 	shadd16	r2, r3, r2
 80058c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80058c4:	601a      	str	r2, [r3, #0]
  return(result);
 80058c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4619      	mov	r1, r3
 80058ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80058d2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80058dc:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80058de:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80058e2:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80058ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80058fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	1d1a      	adds	r2, r3, #4
 8005904:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	601a      	str	r2, [r3, #0]
}
 800590c:	bf00      	nop

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 800590e:	f8d7 13c4 	ldr.w	r1, [r7, #964]	; 0x3c4
 8005912:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 8005916:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800591a:	6019      	str	r1, [r3, #0]
 800591c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005920:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8005922:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	fa93 f212 	qadd16	r2, r3, r2
 8005932:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005936:	601a      	str	r2, [r3, #0]
  return(result);
 8005938:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    write_q15x2_ia (&ptr1, __SHSUB16(R, T));
 8005942:	f8d7 13e4 	ldr.w	r1, [r7, #996]	; 0x3e4
 8005946:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 800594a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800594e:	6019      	str	r1, [r3, #0]
 8005950:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005954:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8005956:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8005960:	6812      	ldr	r2, [r2, #0]
 8005962:	fad3 f222 	shsub16	r2, r3, r2
 8005966:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800596a:	601a      	str	r2, [r3, #0]
  return(result);
 800596c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4619      	mov	r1, r3
 8005974:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005978:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005982:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8005984:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005988:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800598c:	6812      	ldr	r2, [r2, #0]
 800598e:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8005990:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800599c:	6812      	ldr	r2, [r2, #0]
 800599e:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80059a0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	1d1a      	adds	r2, r3, #4
 80059aa:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	601a      	str	r2, [r3, #0]
}
 80059b2:	bf00      	nop

    /* S = packed((ya - yc), (xa - xc)) */
    S = __QSUB16(xaya, xcyc);
 80059b4:	f8d7 13c8 	ldr.w	r1, [r7, #968]	; 0x3c8
 80059b8:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80059bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059c0:	6019      	str	r1, [r3, #0]
 80059c2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80059c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80059c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	fad3 f212 	qsub16	r2, r3, r2
 80059d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059dc:	601a      	str	r2, [r3, #0]
  return(result);
 80059de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

    /* Read yd (real), xd(imag) input */
    /* T = packed( (yb - yd), (xb - xd))  */
    U = __QSUB16(xbyb, xdyd);
 80059e8:	f8d7 13c4 	ldr.w	r1, [r7, #964]	; 0x3c4
 80059ec:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 80059f0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80059f4:	6019      	str	r1, [r3, #0]
 80059f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80059fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80059fc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	fad3 f212 	qsub16	r2, r3, r2
 8005a0c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005a10:	601a      	str	r2, [r3, #0]
  return(result);
 8005a12:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
 8005a1c:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 8005a20:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8005a24:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005a28:	6019      	str	r1, [r3, #0]
 8005a2a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8005a2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8005a30:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8005a3a:	6812      	ldr	r2, [r2, #0]
 8005a3c:	faa3 f222 	shasx	r2, r3, r2
 8005a40:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005a44:	601a      	str	r2, [r3, #0]
  return(result);
 8005a46:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a52:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8005a5c:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8005a5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005a62:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8005a66:	6812      	ldr	r2, [r2, #0]
 8005a68:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8005a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8005a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	1d1a      	adds	r2, r3, #4
 8005a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	601a      	str	r2, [r3, #0]
}
 8005a8c:	bf00      	nop

    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
 8005a8e:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 8005a92:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8005a96:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8005a9a:	6019      	str	r1, [r3, #0]
 8005a9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005aa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8005aa2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	fae3 f222 	shsax	r2, r3, r2
 8005ab2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8005ab6:	601a      	str	r2, [r3, #0]
  return(result);
 8005ab8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8005ac4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ace:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8005ad0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005ad4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8005adc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8005ae8:	6812      	ldr	r2, [r2, #0]
 8005aea:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8005aec:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	1d1a      	adds	r2, r3, #4
 8005af6:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	601a      	str	r2, [r3, #0]
}
 8005afe:	bf00      	nop
    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

  } while (--j);
 8005b00:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8005b04:	3b01      	subs	r3, #1
 8005b06:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8005b0a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f47f ae1c 	bne.w	800574c <arm_radix4_butterfly_inverse_q15+0xe9e>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #if defined (ARM_MATH_DSP) */

}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc90      	pop	{r4, r7}
 8005b20:	4770      	bx	lr

08005b22 <arm_mfcc_init_q15>:
  const uint32_t *filterPos,
  const uint32_t *filterLengths,
  const q15_t *filterCoefs,
  const q15_t *windowCoefs
  )
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b086      	sub	sp, #24
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	607a      	str	r2, [r7, #4]
 8005b2e:	603b      	str	r3, [r7, #0]
 arm_status status;

 S->fftLen=fftLen;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	615a      	str	r2, [r3, #20]
 S->nbMelFilters=nbMelFilters;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	619a      	str	r2, [r3, #24]
 S->nbDctOutputs=nbDctOutputs;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	61da      	str	r2, [r3, #28]
 S->dctCoefs=dctCoefs;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a3a      	ldr	r2, [r7, #32]
 8005b46:	601a      	str	r2, [r3, #0]
 S->filterPos=filterPos;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4c:	60da      	str	r2, [r3, #12]
 S->filterLengths=filterLengths;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b52:	611a      	str	r2, [r3, #16]
 S->filterCoefs=filterCoefs;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b58:	605a      	str	r2, [r3, #4]
 S->windowCoefs=windowCoefs;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b5e:	609a      	str	r2, [r3, #8]

 #if defined(ARM_MFCC_CFFT_BASED)
 status=arm_cfft_init_q15(&(S->cfft),fftLen);
 #else
 status=arm_rfft_init_q15(&(S->rfft),fftLen,0,1);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f103 0020 	add.w	r0, r3, #32
 8005b66:	2301      	movs	r3, #1
 8005b68:	2200      	movs	r2, #0
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	f000 f914 	bl	8005d98 <arm_rfft_init_q15>
 8005b70:	4603      	mov	r3, r0
 8005b72:	75fb      	strb	r3, [r7, #23]
 #endif
 
 return(status);
 8005b74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <arm_mfcc_q15>:
  const arm_mfcc_instance_q15 * S,
  q15_t *pSrc,
  q15_t *pDst,
  q31_t *pTmp
  )
{
 8005b80:	b5b0      	push	{r4, r5, r7, lr}
 8005b82:	b09a      	sub	sp, #104	; 0x68
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
    q15_t m;
    uint32_t index;
    uint32_t fftShift=0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	653b      	str	r3, [r7, #80]	; 0x50
    q63_t result;
    arm_matrix_instance_q15 pDctMat;
    uint32_t i;
    uint32_t coefsPos;
    uint32_t filterLimit;
    q15_t *pTmp2=(q15_t*)pTmp;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	64fb      	str	r3, [r7, #76]	; 0x4c

    arm_status status = ARM_MATH_SUCCESS;
 8005b96:	2300      	movs	r3, #0
 8005b98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    
    // q15
    arm_absmax_q15(pSrc,S->fftLen,&m,&index);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6959      	ldr	r1, [r3, #20]
 8005ba0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ba4:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8005ba8:	68b8      	ldr	r0, [r7, #8]
 8005baa:	f7fd f88c 	bl	8002cc6 <arm_absmax_q15>

    if (m !=0)
 8005bae:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01f      	beq.n	8005bf6 <arm_mfcc_q15+0x76>
    {
       q15_t quotient;
       int16_t shift;

       status = arm_divide_q15(0x7FFF,m,&quotient,&shift);
 8005bb6:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8005bba:	f107 0314 	add.w	r3, r7, #20
 8005bbe:	f107 0216 	add.w	r2, r7, #22
 8005bc2:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8005bc6:	f7fc f9d7 	bl	8001f78 <arm_divide_q15>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
       if (status != ARM_MATH_SUCCESS)
 8005bd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <arm_mfcc_q15+0x5e>
       {
          return(status);
 8005bd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005bdc:	e0d5      	b.n	8005d8a <arm_mfcc_q15+0x20a>
       }
 
       arm_scale_q15(pSrc,quotient,shift,pSrc,S->fftLen);
 8005bde:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005be2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005be6:	b25a      	sxtb	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	68b8      	ldr	r0, [r7, #8]
 8005bf2:	f7fc f89f 	bl	8001d34 <arm_scale_q15>
    }


    // q15
    arm_mult_q15(pSrc,S->windowCoefs, pSrc, S->fftLen);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6899      	ldr	r1, [r3, #8]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	68b8      	ldr	r0, [r7, #8]
 8005c02:	f7fc f83f 	bl	8001c84 <arm_mult_q15>


    /* Compute spectrum magnitude 
    */
    fftShift = 31 - __CLZ(S->fftLen);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <arm_mfcc_q15+0x96>
    return 32U;
 8005c12:	2320      	movs	r3, #32
 8005c14:	e003      	b.n	8005c1e <arm_mfcc_q15+0x9e>
  return __builtin_clz(value);
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	fab3 f383 	clz	r3, r3
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	f1c3 031f 	rsb	r3, r3, #31
 8005c22:	653b      	str	r3, [r7, #80]	; 0x50
      pTmp2[2*i+1] = 0;
    }
    arm_cfft_q15(&(S->cfft),pTmp2,0,1);
#else
    /* Default RFFT based implementation */
    arm_rfft_q15(&(S->rfft),pSrc,pTmp2);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3320      	adds	r3, #32
 8005c28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 f961 	bl	8005ef4 <arm_rfft_q15>
#endif
    filterLimit = 1 + (S->fftLen >> 1);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	3301      	adds	r3, #1
 8005c3a:	64bb      	str	r3, [r7, #72]	; 0x48


    // q15 - fftShift
    arm_cmplx_mag_q15(pTmp2,pSrc,filterLimit);
 8005c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c3e:	68b9      	ldr	r1, [r7, #8]
 8005c40:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005c42:	f7fc f960 	bl	8001f06 <arm_cmplx_mag_q15>
    // q14 - fftShift

    /* Apply MEL filters */
    coefsPos = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	65bb      	str	r3, [r7, #88]	; 0x58
    for(i=0; i<S->nbMelFilters; i++)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c4e:	e048      	b.n	8005ce2 <arm_mfcc_q15+0x162>
    {
      arm_dot_prod_q15(pSrc+S->filterPos[i],
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	18d0      	adds	r0, r2, r3
        &(S->filterCoefs[coefsPos]),
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c68:	005b      	lsls	r3, r3, #1
      arm_dot_prod_q15(pSrc+S->filterPos[i],
 8005c6a:	18d1      	adds	r1, r2, r3
        S->filterLengths[i],
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
      arm_dot_prod_q15(pSrc+S->filterPos[i],
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	f107 0320 	add.w	r3, r7, #32
 8005c7c:	f7fb ffcb 	bl	8001c16 <arm_dot_prod_q15>
        &result);

      coefsPos += S->filterLengths[i];
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c8e:	4413      	add	r3, r2
 8005c90:	65bb      	str	r3, [r7, #88]	; 0x58

      // q34.29 - fftShift
      result += MICRO_Q15;
 8005c92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c96:	f240 2019 	movw	r0, #537	; 0x219
 8005c9a:	f04f 0100 	mov.w	r1, #0
 8005c9e:	1814      	adds	r4, r2, r0
 8005ca0:	eb43 0501 	adc.w	r5, r3, r1
 8005ca4:	e9c7 4508 	strd	r4, r5, [r7, #32]
      result >>= SHIFT_MELFILTER_SATURATION_Q15;
 8005ca8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005cac:	f04f 0200 	mov.w	r2, #0
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	0a82      	lsrs	r2, r0, #10
 8005cb6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8005cba:	128b      	asrs	r3, r1, #10
 8005cbc:	e9c7 2308 	strd	r2, r3, [r7, #32]
      // q34.29 - fftShift - satShift
      pTmp[i] = __SSAT(result,31) ;
 8005cc0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	f303 031e 	ssat	r3, #31, r3
 8005cce:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	440b      	add	r3, r1
 8005cda:	601a      	str	r2, [r3, #0]
    for(i=0; i<S->nbMelFilters; i++)
 8005cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cde:	3301      	adds	r3, #1
 8005ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d3b1      	bcc.n	8005c50 <arm_mfcc_q15+0xd0>
    }


    // q34.29 - fftShift - satShift
    /* Compute the log */
    arm_vlog_q31(pTmp,pTmp,S->nbMelFilters);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	6838      	ldr	r0, [r7, #0]
 8005cf6:	f7fc fba7 	bl	8002448 <arm_vlog_q31>


    // q5.26
   
    logExponent = fftShift + 2 + SHIFT_MELFILTER_SATURATION_Q15;
 8005cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	647b      	str	r3, [r7, #68]	; 0x44
    logExponent = logExponent * LOG2TOLOG_Q15;
 8005d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d02:	4a24      	ldr	r2, [pc, #144]	; (8005d94 <arm_mfcc_q15+0x214>)
 8005d04:	fb02 f303 	mul.w	r3, r2, r3
 8005d08:	647b      	str	r3, [r7, #68]	; 0x44


    // q8.26
    arm_offset_q31(pTmp,logExponent,pTmp,S->nbMelFilters);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d12:	6838      	ldr	r0, [r7, #0]
 8005d14:	f7fb ffe6 	bl	8001ce4 <arm_offset_q31>
    arm_shift_q31(pTmp,-19,pTmp,S->nbMelFilters);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	f06f 0112 	mvn.w	r1, #18
 8005d22:	6838      	ldr	r0, [r7, #0]
 8005d24:	f7fc f887 	bl	8001e36 <arm_shift_q31>
    for(i=0; i<S->nbMelFilters; i++)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d2c:	e014      	b.n	8005d58 <arm_mfcc_q15+0x1d8>
    { 
      pSrc[i] = __SSAT((q15_t)pTmp[i],16);
 8005d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	4413      	add	r3, r2
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	b21b      	sxth	r3, r3
 8005d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3e:	f303 030f 	ssat	r3, #16, r3
 8005d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	b20a      	sxth	r2, r1
 8005d50:	801a      	strh	r2, [r3, #0]
    for(i=0; i<S->nbMelFilters; i++)
 8005d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d54:	3301      	adds	r3, #1
 8005d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d3e5      	bcc.n	8005d2e <arm_mfcc_q15+0x1ae>
    }

    // q8.7

    pDctMat.numRows=S->nbDctOutputs;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	833b      	strh	r3, [r7, #24]
    pDctMat.numCols=S->nbMelFilters;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	837b      	strh	r3, [r7, #26]
    pDctMat.pData=(q15_t*)S->dctCoefs;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	61fb      	str	r3, [r7, #28]

    arm_mat_vec_mult_q15(&pDctMat, pSrc, pDst);
 8005d78:	f107 0318 	add.w	r3, r7, #24
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	68b9      	ldr	r1, [r7, #8]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fc fb82 	bl	800248a <arm_mat_vec_mult_q15>

    return(status);
 8005d86:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3760      	adds	r7, #96	; 0x60
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bdb0      	pop	{r4, r5, r7, pc}
 8005d92:	bf00      	nop
 8005d94:	02c5c860 	.word	0x02c5c860

08005d98 <arm_rfft_init_q15>:
arm_status arm_rfft_init_q15(
    arm_rfft_instance_q15 * S,
    uint32_t fftLenReal,
    uint32_t ifftFlagR,
    uint32_t bitReverseFlag)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
     /*  Initialise the default arm status */
    arm_status status = ARM_MATH_ARGUMENT_ERROR;
 8005da6:	23ff      	movs	r3, #255	; 0xff
 8005da8:	75fb      	strb	r3, [r7, #23]
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_FFT_ALLOW_TABLES)

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || defined(ARM_TABLE_REALCOEF_Q15)

    /*  Initialise the default arm status */
    status = ARM_MATH_SUCCESS;
 8005daa:	2300      	movs	r3, #0
 8005dac:	75fb      	strb	r3, [r7, #23]

    /*  Initialize the Real FFT length */
    S->fftLenReal = (uint16_t) fftLenReal;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	601a      	str	r2, [r3, #0]

    /*  Initialize the Twiddle coefficientA pointer */
    S->pTwiddleAReal = (q15_t *) realCoefAQ15;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4a43      	ldr	r2, [pc, #268]	; (8005ec8 <arm_rfft_init_q15+0x130>)
 8005dbc:	60da      	str	r2, [r3, #12]

    /*  Initialize the Twiddle coefficientB pointer */
    S->pTwiddleBReal = (q15_t *) realCoefBQ15;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4a42      	ldr	r2, [pc, #264]	; (8005ecc <arm_rfft_init_q15+0x134>)
 8005dc2:	611a      	str	r2, [r3, #16]

    /*  Initialize the Flag for selection of RFFT or RIFFT */
    S->ifftFlagR = (uint8_t) ifftFlagR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	711a      	strb	r2, [r3, #4]

    /*  Initialize the Flag for calculation Bit reversal or not */
    S->bitReverseFlagR = (uint8_t) bitReverseFlag;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	715a      	strb	r2, [r3, #5]

    /*  Initialization of coef modifier depending on the FFT length */
    switch (S->fftLenReal)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ddc:	d029      	beq.n	8005e32 <arm_rfft_init_q15+0x9a>
 8005dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005de2:	d866      	bhi.n	8005eb2 <arm_rfft_init_q15+0x11a>
 8005de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de8:	d02a      	beq.n	8005e40 <arm_rfft_init_q15+0xa8>
 8005dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dee:	d860      	bhi.n	8005eb2 <arm_rfft_init_q15+0x11a>
 8005df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df4:	d02b      	beq.n	8005e4e <arm_rfft_init_q15+0xb6>
 8005df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfa:	d85a      	bhi.n	8005eb2 <arm_rfft_init_q15+0x11a>
 8005dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e00:	d02c      	beq.n	8005e5c <arm_rfft_init_q15+0xc4>
 8005e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e06:	d854      	bhi.n	8005eb2 <arm_rfft_init_q15+0x11a>
 8005e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e0c:	d02d      	beq.n	8005e6a <arm_rfft_init_q15+0xd2>
 8005e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e12:	d84e      	bhi.n	8005eb2 <arm_rfft_init_q15+0x11a>
 8005e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e18:	d02e      	beq.n	8005e78 <arm_rfft_init_q15+0xe0>
 8005e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e1e:	d848      	bhi.n	8005eb2 <arm_rfft_init_q15+0x11a>
 8005e20:	2b80      	cmp	r3, #128	; 0x80
 8005e22:	d030      	beq.n	8005e86 <arm_rfft_init_q15+0xee>
 8005e24:	2b80      	cmp	r3, #128	; 0x80
 8005e26:	d844      	bhi.n	8005eb2 <arm_rfft_init_q15+0x11a>
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	d03a      	beq.n	8005ea2 <arm_rfft_init_q15+0x10a>
 8005e2c:	2b40      	cmp	r3, #64	; 0x40
 8005e2e:	d031      	beq.n	8005e94 <arm_rfft_init_q15+0xfc>
 8005e30:	e03f      	b.n	8005eb2 <arm_rfft_init_q15+0x11a>
    {
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_Q15_4096) && defined(ARM_TABLE_BITREVIDX_FXT_4096))
    case 8192U:
        S->twidCoefRModifier = 1U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	609a      	str	r2, [r3, #8]
           if (status != ARM_MATH_SUCCESS)
           {
               return(status);
           }
        #else
          S->pCfft = &arm_cfft_sR_q15_len4096;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4a25      	ldr	r2, [pc, #148]	; (8005ed0 <arm_rfft_init_q15+0x138>)
 8005e3c:	615a      	str	r2, [r3, #20]
        #endif
        break;
 8005e3e:	e03b      	b.n	8005eb8 <arm_rfft_init_q15+0x120>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_Q15_2048) && defined(ARM_TABLE_BITREVIDX_FXT_2048))
    case 4096U:
        S->twidCoefRModifier = 2U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2202      	movs	r2, #2
 8005e44:	609a      	str	r2, [r3, #8]
           if (status != ARM_MATH_SUCCESS)
           {
               return(status);
           }
        #else
           S->pCfft = &arm_cfft_sR_q15_len2048;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a22      	ldr	r2, [pc, #136]	; (8005ed4 <arm_rfft_init_q15+0x13c>)
 8005e4a:	615a      	str	r2, [r3, #20]
        #endif
        break;
 8005e4c:	e034      	b.n	8005eb8 <arm_rfft_init_q15+0x120>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_Q15_1024) && defined(ARM_TABLE_BITREVIDX_FXT_1024))
    case 2048U:
        S->twidCoefRModifier = 4U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2204      	movs	r2, #4
 8005e52:	609a      	str	r2, [r3, #8]
           if (status != ARM_MATH_SUCCESS)
           {
               return(status);
           }
        #else
           S->pCfft = &arm_cfft_sR_q15_len1024;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4a20      	ldr	r2, [pc, #128]	; (8005ed8 <arm_rfft_init_q15+0x140>)
 8005e58:	615a      	str	r2, [r3, #20]
        #endif
        break;
 8005e5a:	e02d      	b.n	8005eb8 <arm_rfft_init_q15+0x120>
#endif 
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_Q15_512) && defined(ARM_TABLE_BITREVIDX_FXT_512))
    case 1024U:
        S->twidCoefRModifier = 8U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2208      	movs	r2, #8
 8005e60:	609a      	str	r2, [r3, #8]
           if (status != ARM_MATH_SUCCESS)
           {
               return(status);
           }
        #else
          S->pCfft = &arm_cfft_sR_q15_len512;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4a1d      	ldr	r2, [pc, #116]	; (8005edc <arm_rfft_init_q15+0x144>)
 8005e66:	615a      	str	r2, [r3, #20]
        #endif
        break;
 8005e68:	e026      	b.n	8005eb8 <arm_rfft_init_q15+0x120>
#endif 
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_Q15_256) && defined(ARM_TABLE_BITREVIDX_FXT_256))
    case 512U:
        S->twidCoefRModifier = 16U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2210      	movs	r2, #16
 8005e6e:	609a      	str	r2, [r3, #8]
           if (status != ARM_MATH_SUCCESS)
           {
               return(status);
           }
        #else
           S->pCfft = &arm_cfft_sR_q15_len256;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4a1b      	ldr	r2, [pc, #108]	; (8005ee0 <arm_rfft_init_q15+0x148>)
 8005e74:	615a      	str	r2, [r3, #20]
        #endif
        break;
 8005e76:	e01f      	b.n	8005eb8 <arm_rfft_init_q15+0x120>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_Q15_128) && defined(ARM_TABLE_BITREVIDX_FXT_128))
    case 256U:
        S->twidCoefRModifier = 32U;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	609a      	str	r2, [r3, #8]
           if (status != ARM_MATH_SUCCESS)
           {
               return(status);
           }
        #else
           S->pCfft = &arm_cfft_sR_q15_len128;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4a18      	ldr	r2, [pc, #96]	; (8005ee4 <arm_rfft_init_q15+0x14c>)
 8005e82:	615a      	str	r2, [r3, #20]
        #endif
        break;
 8005e84:	e018      	b.n	8005eb8 <arm_rfft_init_q15+0x120>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_Q15_64) && defined(ARM_TABLE_BITREVIDX_FXT_64))
    case 128U:
        S->twidCoefRModifier = 64U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2240      	movs	r2, #64	; 0x40
 8005e8a:	609a      	str	r2, [r3, #8]
           if (status != ARM_MATH_SUCCESS)
           {
               return(status);
           }
        #else
           S->pCfft = &arm_cfft_sR_q15_len64;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4a16      	ldr	r2, [pc, #88]	; (8005ee8 <arm_rfft_init_q15+0x150>)
 8005e90:	615a      	str	r2, [r3, #20]
        #endif
        break;
 8005e92:	e011      	b.n	8005eb8 <arm_rfft_init_q15+0x120>
#endif 
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_Q15_32) && defined(ARM_TABLE_BITREVIDX_FXT_32))
    case 64U:
        S->twidCoefRModifier = 128U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2280      	movs	r2, #128	; 0x80
 8005e98:	609a      	str	r2, [r3, #8]
           if (status != ARM_MATH_SUCCESS)
           {
               return(status);
           }
        #else
          S->pCfft = &arm_cfft_sR_q15_len32;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a13      	ldr	r2, [pc, #76]	; (8005eec <arm_rfft_init_q15+0x154>)
 8005e9e:	615a      	str	r2, [r3, #20]
        #endif
        break;
 8005ea0:	e00a      	b.n	8005eb8 <arm_rfft_init_q15+0x120>
#endif 
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_Q15_16) && defined(ARM_TABLE_BITREVIDX_FXT_16))
    case 32U:
        S->twidCoefRModifier = 256U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ea8:	609a      	str	r2, [r3, #8]
           if (status != ARM_MATH_SUCCESS)
           {
               return(status);
           }
        #else
           S->pCfft = &arm_cfft_sR_q15_len16;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4a10      	ldr	r2, [pc, #64]	; (8005ef0 <arm_rfft_init_q15+0x158>)
 8005eae:	615a      	str	r2, [r3, #20]
        #endif
        break;
 8005eb0:	e002      	b.n	8005eb8 <arm_rfft_init_q15+0x120>
#endif
    default:
        /*  Reporting argument error if rfftSize is not valid value */
        status = ARM_MATH_ARGUMENT_ERROR;
 8005eb2:	23ff      	movs	r3, #255	; 0xff
 8005eb4:	75fb      	strb	r3, [r7, #23]
        break;
 8005eb6:	bf00      	nop
    }

#endif
#endif
    /* return the status of RFFT Init function */
    return (status);
 8005eb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	0801f1f8 	.word	0x0801f1f8
 8005ecc:	080231f8 	.word	0x080231f8
 8005ed0:	080272f8 	.word	0x080272f8
 8005ed4:	080272e8 	.word	0x080272e8
 8005ed8:	080272d8 	.word	0x080272d8
 8005edc:	080272c8 	.word	0x080272c8
 8005ee0:	080272b8 	.word	0x080272b8
 8005ee4:	080272a8 	.word	0x080272a8
 8005ee8:	08027298 	.word	0x08027298
 8005eec:	08027288 	.word	0x08027288
 8005ef0:	08027278 	.word	0x08027278

08005ef4 <arm_rfft_q15>:

void arm_rfft_q15(
  const arm_rfft_instance_q15 * S,
        q15_t * pSrc,
        q15_t * pDst)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
#if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  const arm_cfft_instance_q15 *S_CFFT = &(S->cfftInst);
#else
  const arm_cfft_instance_q15 *S_CFFT = S->pCfft;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	617b      	str	r3, [r7, #20]
#endif
        uint32_t L2 = S->fftLenReal >> 1U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	613b      	str	r3, [r7, #16]

  /* Calculation of RIFFT of input */
  if (S->ifftFlagR == 1U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	791b      	ldrb	r3, [r3, #4]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d11d      	bne.n	8005f52 <arm_rfft_q15+0x5e>
  {
     /*  Real IFFT core process */
     arm_split_rifft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6919      	ldr	r1, [r3, #16]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	6939      	ldr	r1, [r7, #16]
 8005f2c:	68b8      	ldr	r0, [r7, #8]
 8005f2e:	f000 f951 	bl	80061d4 <arm_split_rifft_q15>

     /* Complex IFFT process */
     arm_cfft_q15 (S_CFFT, pDst, S->ifftFlagR, S->bitReverseFlagR);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	791a      	ldrb	r2, [r3, #4]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	795b      	ldrb	r3, [r3, #5]
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	6978      	ldr	r0, [r7, #20]
 8005f3e:	f7fd f830 	bl	8002fa2 <arm_cfft_q15>

     arm_shift_q15(pDst, 1, pDst, S->fftLenReal);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	2101      	movs	r1, #1
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fb ff29 	bl	8001da2 <arm_shift_q15>

     /*  Real FFT core process */
     arm_split_rfft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
  }

}
 8005f50:	e015      	b.n	8005f7e <arm_rfft_q15+0x8a>
     arm_cfft_q15 (S_CFFT, pSrc, S->ifftFlagR, S->bitReverseFlagR);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	791a      	ldrb	r2, [r3, #4]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	795b      	ldrb	r3, [r3, #5]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	6978      	ldr	r0, [r7, #20]
 8005f5e:	f7fd f820 	bl	8002fa2 <arm_cfft_q15>
     arm_split_rfft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6919      	ldr	r1, [r3, #16]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	460b      	mov	r3, r1
 8005f76:	6939      	ldr	r1, [r7, #16]
 8005f78:	68b8      	ldr	r0, [r7, #8]
 8005f7a:	f000 f804 	bl	8005f86 <arm_split_rfft_q15>
}
 8005f7e:	bf00      	nop
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <arm_split_rfft_q15>:
        uint32_t fftLen,
  const q15_t * pATable,
  const q15_t * pBTable,
        q15_t * pDst,
        uint32_t modifier)
{       
 8005f86:	b480      	push	{r7}
 8005f88:	b0ad      	sub	sp, #180	; 0xb4
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	607a      	str	r2, [r7, #4]
 8005f92:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_DSP)
        q15_t *pD1, *pD2;
#endif

  /* Init coefficient pointers */
  pCoefA = &pATable[modifier * 2];
 8005f94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pCoefB = &pBTable[modifier * 2];
 8005fa2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	4413      	add	r3, r2
 8005fac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  pSrc1 = &pSrc[2];
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  pSrc2 = &pSrc[(2U * fftLen) - 2U];
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	637b      	str	r3, [r7, #52]	; 0x34

#if defined (ARM_MATH_DSP)

    i = 1U;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pD1 = pDst + 2;
 8005fcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    pD2 = pDst + (4U * fftLen) - 2;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	3b04      	subs	r3, #4
 8005fdc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    for (i = fftLen - 1; i > 0; i--)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fee:	e0ba      	b.n	8006166 <arm_split_rfft_q15+0x1e0>
         */


#ifndef ARM_MATH_BIG_ENDIAN
        /* pSrc[2 * i] * pATable[2 * i] - pSrc[2 * i + 1] * pATable[2 * i + 1] */
        outR = __SMUSD(read_q15x2 (pSrc1), read_q15x2((q15_t *) pCoefA));
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff6:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 8005ff8:	633b      	str	r3, [r7, #48]	; 0x30
  return (val);
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006002:	643b      	str	r3, [r7, #64]	; 0x40
 8006004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006006:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 8006008:	62fb      	str	r3, [r7, #44]	; 0x2c
  return (val);
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800600e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8006010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006014:	fb43 f302 	smusd	r3, r3, r2
 8006018:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 800601a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800601c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        /* -(pSrc[2 * i + 1] * pATable[2 * i + 1] - pSrc[2 * i] * pATable[2 * i]) */
        outR = -(__SMUSD(read_q15x2 (pSrc1), read_q15x2((q15_t *) pCoefA)));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* pSrc[2 * n - 2 * i] * pBTable[2 * i] + pSrc[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
        outR = __SMLAD(read_q15x2 (pSrc2), read_q15x2((q15_t *) pCoefB), outR) >> 16U;
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	653b      	str	r3, [r7, #80]	; 0x50
 8006024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006026:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 8006028:	62bb      	str	r3, [r7, #40]	; 0x28
  return (val);
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	4619      	mov	r1, r3
 800602e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006032:	657b      	str	r3, [r7, #84]	; 0x54
 8006034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006036:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
  return (val);
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	461a      	mov	r2, r3
 800603e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006042:	6679      	str	r1, [r7, #100]	; 0x64
 8006044:	663a      	str	r2, [r7, #96]	; 0x60
 8006046:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800604a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800604c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800604e:	fb23 1302 	smlad	r3, r3, r2, r1
 8006052:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8006054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006056:	0c1b      	lsrs	r3, r3, #16
 8006058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        /* pIn[2 * n - 2 * i] * pBTable[2 * i + 1] - pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
#ifndef ARM_MATH_BIG_ENDIAN
        outI = __SMUSDX(read_q15x2_da (&pSrc2), read_q15x2((q15_t *) pCoefB));
 800605c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605e:	3b04      	subs	r3, #4
 8006060:	637b      	str	r3, [r7, #52]	; 0x34
 8006062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006064:	3304      	adds	r3, #4
 8006066:	66bb      	str	r3, [r7, #104]	; 0x68
 8006068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800606a:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 800606c:	623b      	str	r3, [r7, #32]
  return (val);
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	461a      	mov	r2, r3
 8006072:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006076:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800607a:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 800607c:	61fb      	str	r3, [r7, #28]
  return (val);
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	67ba      	str	r2, [r7, #120]	; 0x78
 8006082:	677b      	str	r3, [r7, #116]	; 0x74
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8006084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006086:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006088:	fb43 f312 	smusdx	r3, r3, r2
 800608c:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 800608e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006090:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#else
        outI = __SMUSDX(read_q15x2 ((q15_t *) pCoefB), read_q15x2_da (&pSrc2));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* (pIn[2 * i + 1] * pATable[2 * i] + pIn[2 * i] * pATable[2 * i + 1] */
        outI = __SMLADX(read_q15x2_ia (&pSrc1), read_q15x2 ((q15_t *) pCoefA), outI);
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	3304      	adds	r3, #4
 8006098:	63bb      	str	r3, [r7, #56]	; 0x38
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	3b04      	subs	r3, #4
 800609e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060a2:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 80060a4:	61bb      	str	r3, [r7, #24]
  return (val);
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	4619      	mov	r1, r3
 80060aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060b6:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 80060b8:	617b      	str	r3, [r7, #20]
  return (val);
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	461a      	mov	r2, r3
 80060be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060c2:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80060c6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80060ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80060d6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80060da:	fb23 1312 	smladx	r3, r3, r2, r1
 80060de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 80060e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

        /* write output */
        *pD1++ = (q15_t) outR;
 80060ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060ee:	1c9a      	adds	r2, r3, #2
 80060f0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80060f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80060f8:	b212      	sxth	r2, r2
 80060fa:	801a      	strh	r2, [r3, #0]
        *pD1++ = outI >> 16U;
 80060fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006100:	1419      	asrs	r1, r3, #16
 8006102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006106:	1c9a      	adds	r2, r3, #2
 8006108:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800610c:	b20a      	sxth	r2, r1
 800610e:	801a      	strh	r2, [r3, #0]

        /* write complex conjugate output */
        pD2[0] = (q15_t) outR;
 8006110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006114:	b21a      	sxth	r2, r3
 8006116:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800611a:	801a      	strh	r2, [r3, #0]
        pD2[1] = -(outI >> 16U);
 800611c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006120:	141b      	asrs	r3, r3, #16
 8006122:	b29b      	uxth	r3, r3
 8006124:	425b      	negs	r3, r3
 8006126:	b29a      	uxth	r2, r3
 8006128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800612c:	3302      	adds	r3, #2
 800612e:	b212      	sxth	r2, r2
 8006130:	801a      	strh	r2, [r3, #0]
        pD2 -= 2;
 8006132:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006136:	3b04      	subs	r3, #4
 8006138:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        /* update coefficient pointer */
        pCoefB = pCoefB + (2U * modifier);
 800613c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006146:	4413      	add	r3, r2
 8006148:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        pCoefA = pCoefA + (2U * modifier);
 800614c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006156:	4413      	add	r3, r2
 8006158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    for (i = fftLen - 1; i > 0; i--)
 800615c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006160:	3b01      	subs	r3, #1
 8006162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800616a:	2b00      	cmp	r3, #0
 800616c:	f47f af40 	bne.w	8005ff0 <arm_split_rfft_q15+0x6a>
    }

    pDst[2U * fftLen]      = (pSrc[0] - pSrc[1]) >> 1U;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006176:	461a      	mov	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3302      	adds	r3, #2
 800617c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	1059      	asrs	r1, r3, #1
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800618c:	4413      	add	r3, r2
 800618e:	b20a      	sxth	r2, r1
 8006190:	801a      	strh	r2, [r3, #0]
    pDst[2U * fftLen + 1U] = 0;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	3302      	adds	r3, #2
 8006198:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800619c:	4413      	add	r3, r2
 800619e:	2200      	movs	r2, #0
 80061a0:	801a      	strh	r2, [r3, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061a8:	461a      	mov	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3302      	adds	r3, #2
 80061ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061b2:	4413      	add	r3, r2
 80061b4:	105b      	asrs	r3, r3, #1
 80061b6:	b21a      	sxth	r2, r3
 80061b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061bc:	801a      	strh	r2, [r3, #0]
    pDst[1] = 0;
 80061be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061c2:	3302      	adds	r3, #2
 80061c4:	2200      	movs	r2, #0
 80061c6:	801a      	strh	r2, [r3, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
    pDst[1] = 0;

#endif /* #if defined (ARM_MATH_DSP) */
}
 80061c8:	bf00      	nop
 80061ca:	37b4      	adds	r7, #180	; 0xb4
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <arm_split_rifft_q15>:
        uint32_t fftLen,
  const q15_t * pATable,
  const q15_t * pBTable,
        q15_t * pDst,
        uint32_t modifier)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b0af      	sub	sp, #188	; 0xbc
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
        uint32_t i;                                    /* Loop Counter */
        q31_t outR, outI;                              /* Temporary variables for output */
  const q15_t *pCoefA, *pCoefB;                        /* Temporary pointers for twiddle factors */
        q15_t *pSrc1, *pSrc2;
        q15_t *pDst1 = &pDst[0];
 80061e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061e6:	63bb      	str	r3, [r7, #56]	; 0x38

  pCoefA = &pATable[0];
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  pCoefB = &pBTable[0];
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  pSrc1 = &pSrc[0];
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	643b      	str	r3, [r7, #64]	; 0x40
  pSrc2 = &pSrc[2 * fftLen];
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	63fb      	str	r3, [r7, #60]	; 0x3c

  i = fftLen;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  while (i > 0U)
 8006208:	e0b5      	b.n	8006376 <arm_split_rifft_q15+0x1a2>

#if defined (ARM_MATH_DSP)

#ifndef ARM_MATH_BIG_ENDIAN
      /* pIn[2 * n - 2 * i] * pBTable[2 * i] - pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
      outR = __SMUSD(read_q15x2(pSrc2), read_q15x2((q15_t *) pCoefB));
 800620a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620c:	647b      	str	r3, [r7, #68]	; 0x44
 800620e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006210:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
  return (val);
 8006214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006216:	461a      	mov	r2, r3
 8006218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800621c:	64bb      	str	r3, [r7, #72]	; 0x48
 800621e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006220:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 8006222:	633b      	str	r3, [r7, #48]	; 0x30
  return (val);
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	657a      	str	r2, [r7, #84]	; 0x54
 8006228:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800622a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800622c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800622e:	fb43 f302 	smusd	r3, r3, r2
 8006232:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8006234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      /* -(-pIn[2 * n - 2 * i] * pBTable[2 * i] + pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1])) */
      outR = -(__SMUSD(read_q15x2(pSrc2), read_q15x2((q15_t *) pCoefB)));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      /* pIn[2 * i] * pATable[2 * i] + pIn[2 * i + 1] * pATable[2 * i + 1] + pIn[2 * n - 2 * i] * pBTable[2 * i] */
      outR = __SMLAD(read_q15x2(pSrc1), read_q15x2 ((q15_t *) pCoefA), outR) >> 16U;
 800623a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800623c:	65bb      	str	r3, [r7, #88]	; 0x58
 800623e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006240:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 8006242:	62fb      	str	r3, [r7, #44]	; 0x2c
  return (val);
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006246:	4619      	mov	r1, r3
 8006248:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800624c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800624e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006250:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 8006252:	62bb      	str	r3, [r7, #40]	; 0x28
  return (val);
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	461a      	mov	r2, r3
 8006258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800625c:	66f9      	str	r1, [r7, #108]	; 0x6c
 800625e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006260:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006264:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006266:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006268:	fb23 1302 	smlad	r3, r3, r2, r1
 800626c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800626e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006270:	0c1b      	lsrs	r3, r3, #16
 8006272:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      /* -pIn[2 * n - 2 * i] * pBTable[2 * i + 1] + pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
      outI = __SMUADX(read_q15x2_da (&pSrc2), read_q15x2((q15_t *) pCoefB));
 8006276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006278:	3b04      	subs	r3, #4
 800627a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800627c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627e:	3304      	adds	r3, #4
 8006280:	673b      	str	r3, [r7, #112]	; 0x70
 8006282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006284:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
  return (val);
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	461a      	mov	r2, r3
 800628c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006290:	677b      	str	r3, [r7, #116]	; 0x74
 8006292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006294:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 8006296:	623b      	str	r3, [r7, #32]
  return (val);
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800629e:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80062a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80062a6:	fb23 f312 	smuadx	r3, r3, r2
 80062aa:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 80062ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062be:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 80062c0:	61fb      	str	r3, [r7, #28]
  return (val);
 80062c2:	69fb      	ldr	r3, [r7, #28]

      /* pIn[2 * i + 1] * pATable[2 * i] - pIn[2 * i] * pATable[2 * i + 1] */
#ifndef ARM_MATH_BIG_ENDIAN
      outI = __SMLSDX(read_q15x2 ((q15_t *) pCoefA), read_q15x2_ia (&pSrc1), -outI);
 80062c4:	4619      	mov	r1, r3
 80062c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c8:	3304      	adds	r3, #4
 80062ca:	643b      	str	r3, [r7, #64]	; 0x40
 80062cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ce:	3b04      	subs	r3, #4
 80062d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062d8:	681b      	ldr	r3, [r3, #0]
  memcpy (&val, pQ15, 4);
 80062da:	61bb      	str	r3, [r7, #24]
  return (val);
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	461a      	mov	r2, r3
 80062e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062e4:	425b      	negs	r3, r3
 80062e6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80062ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  __ASM volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80062f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062fe:	fb43 1312 	smlsdx	r3, r3, r2, r1
 8006302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8006306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800630a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      outI = __SMLSDX(read_q15x2_ia (&pSrc1), read_q15x2 ((q15_t *) pCoefA), -outI);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      /* write output */
#ifndef ARM_MATH_BIG_ENDIAN
      write_q15x2_ia (&pDst1, __PKHBT(outR, (outI >> 16U), 16));
 800630e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006312:	b29a      	uxth	r2, r3
 8006314:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006318:	141b      	asrs	r3, r3, #16
 800631a:	041b      	lsls	r3, r3, #16
 800631c:	4313      	orrs	r3, r2
 800631e:	461a      	mov	r2, r3
 8006320:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006324:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006328:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
  q31_t val = value;
 800632c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006330:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8006332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 800633c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	1d1a      	adds	r2, r3, #4
 8006344:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006348:	601a      	str	r2, [r3, #0]
}
 800634a:	bf00      	nop
      *pDst1++ = (q15_t) (outI >> 16);

#endif /* #if defined (ARM_MATH_DSP) */

      /* update coefficient pointer */
      pCoefB = pCoefB + (2 * modifier);
 800634c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006356:	4413      	add	r3, r2
 8006358:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      pCoefA = pCoefA + (2 * modifier);
 800635c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006366:	4413      	add	r3, r2
 8006368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

      i--;
 800636c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006370:	3b01      	subs	r3, #1
 8006372:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  while (i > 0U)
 8006376:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800637a:	2b00      	cmp	r3, #0
 800637c:	f47f af45 	bne.w	800620a <arm_split_rifft_q15+0x36>
  }

}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	37bc      	adds	r7, #188	; 0xbc
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b082      	sub	sp, #8
 8006392:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006398:	2003      	movs	r0, #3
 800639a:	f000 f961 	bl	8006660 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800639e:	2000      	movs	r0, #0
 80063a0:	f000 f80e 	bl	80063c0 <HAL_InitTick>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	71fb      	strb	r3, [r7, #7]
 80063ae:	e001      	b.n	80063b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80063b0:	f7fb f96c 	bl	800168c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80063b4:	79fb      	ldrb	r3, [r7, #7]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80063cc:	4b17      	ldr	r3, [pc, #92]	; (800642c <HAL_InitTick+0x6c>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d023      	beq.n	800641c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80063d4:	4b16      	ldr	r3, [pc, #88]	; (8006430 <HAL_InitTick+0x70>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	4b14      	ldr	r3, [pc, #80]	; (800642c <HAL_InitTick+0x6c>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	4619      	mov	r1, r3
 80063de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80063e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 f96d 	bl	80066ca <HAL_SYSTICK_Config>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10f      	bne.n	8006416 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b0f      	cmp	r3, #15
 80063fa:	d809      	bhi.n	8006410 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063fc:	2200      	movs	r2, #0
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	f000 f937 	bl	8006676 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006408:	4a0a      	ldr	r2, [pc, #40]	; (8006434 <HAL_InitTick+0x74>)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	e007      	b.n	8006420 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	73fb      	strb	r3, [r7, #15]
 8006414:	e004      	b.n	8006420 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	73fb      	strb	r3, [r7, #15]
 800641a:	e001      	b.n	8006420 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20000008 	.word	0x20000008
 8006430:	20000000 	.word	0x20000000
 8006434:	20000004 	.word	0x20000004

08006438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800643c:	4b06      	ldr	r3, [pc, #24]	; (8006458 <HAL_IncTick+0x20>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	4b06      	ldr	r3, [pc, #24]	; (800645c <HAL_IncTick+0x24>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4413      	add	r3, r2
 8006448:	4a04      	ldr	r2, [pc, #16]	; (800645c <HAL_IncTick+0x24>)
 800644a:	6013      	str	r3, [r2, #0]
}
 800644c:	bf00      	nop
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	20000008 	.word	0x20000008
 800645c:	2000f5b4 	.word	0x2000f5b4

08006460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  return uwTick;
 8006464:	4b03      	ldr	r3, [pc, #12]	; (8006474 <HAL_GetTick+0x14>)
 8006466:	681b      	ldr	r3, [r3, #0]
}
 8006468:	4618      	mov	r0, r3
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	2000f5b4 	.word	0x2000f5b4

08006478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006480:	f7ff ffee 	bl	8006460 <HAL_GetTick>
 8006484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d005      	beq.n	800649e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006492:	4b0a      	ldr	r3, [pc, #40]	; (80064bc <HAL_Delay+0x44>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800649e:	bf00      	nop
 80064a0:	f7ff ffde 	bl	8006460 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d8f7      	bhi.n	80064a0 <HAL_Delay+0x28>
  {
  }
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000008 	.word	0x20000008

080064c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064d0:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <__NVIC_SetPriorityGrouping+0x44>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064dc:	4013      	ands	r3, r2
 80064de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064f2:	4a04      	ldr	r2, [pc, #16]	; (8006504 <__NVIC_SetPriorityGrouping+0x44>)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	60d3      	str	r3, [r2, #12]
}
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	e000ed00 	.word	0xe000ed00

08006508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800650c:	4b04      	ldr	r3, [pc, #16]	; (8006520 <__NVIC_GetPriorityGrouping+0x18>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	0a1b      	lsrs	r3, r3, #8
 8006512:	f003 0307 	and.w	r3, r3, #7
}
 8006516:	4618      	mov	r0, r3
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	e000ed00 	.word	0xe000ed00

08006524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800652e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006532:	2b00      	cmp	r3, #0
 8006534:	db0b      	blt.n	800654e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	f003 021f 	and.w	r2, r3, #31
 800653c:	4907      	ldr	r1, [pc, #28]	; (800655c <__NVIC_EnableIRQ+0x38>)
 800653e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	2001      	movs	r0, #1
 8006546:	fa00 f202 	lsl.w	r2, r0, r2
 800654a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	e000e100 	.word	0xe000e100

08006560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	6039      	str	r1, [r7, #0]
 800656a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800656c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006570:	2b00      	cmp	r3, #0
 8006572:	db0a      	blt.n	800658a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	b2da      	uxtb	r2, r3
 8006578:	490c      	ldr	r1, [pc, #48]	; (80065ac <__NVIC_SetPriority+0x4c>)
 800657a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800657e:	0112      	lsls	r2, r2, #4
 8006580:	b2d2      	uxtb	r2, r2
 8006582:	440b      	add	r3, r1
 8006584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006588:	e00a      	b.n	80065a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	b2da      	uxtb	r2, r3
 800658e:	4908      	ldr	r1, [pc, #32]	; (80065b0 <__NVIC_SetPriority+0x50>)
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	3b04      	subs	r3, #4
 8006598:	0112      	lsls	r2, r2, #4
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	440b      	add	r3, r1
 800659e:	761a      	strb	r2, [r3, #24]
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	e000e100 	.word	0xe000e100
 80065b0:	e000ed00 	.word	0xe000ed00

080065b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b089      	sub	sp, #36	; 0x24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f1c3 0307 	rsb	r3, r3, #7
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	bf28      	it	cs
 80065d2:	2304      	movcs	r3, #4
 80065d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	3304      	adds	r3, #4
 80065da:	2b06      	cmp	r3, #6
 80065dc:	d902      	bls.n	80065e4 <NVIC_EncodePriority+0x30>
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	3b03      	subs	r3, #3
 80065e2:	e000      	b.n	80065e6 <NVIC_EncodePriority+0x32>
 80065e4:	2300      	movs	r3, #0
 80065e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065e8:	f04f 32ff 	mov.w	r2, #4294967295
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	fa02 f303 	lsl.w	r3, r2, r3
 80065f2:	43da      	mvns	r2, r3
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	401a      	ands	r2, r3
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065fc:	f04f 31ff 	mov.w	r1, #4294967295
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	fa01 f303 	lsl.w	r3, r1, r3
 8006606:	43d9      	mvns	r1, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800660c:	4313      	orrs	r3, r2
         );
}
 800660e:	4618      	mov	r0, r3
 8006610:	3724      	adds	r7, #36	; 0x24
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
	...

0800661c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3b01      	subs	r3, #1
 8006628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800662c:	d301      	bcc.n	8006632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800662e:	2301      	movs	r3, #1
 8006630:	e00f      	b.n	8006652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006632:	4a0a      	ldr	r2, [pc, #40]	; (800665c <SysTick_Config+0x40>)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3b01      	subs	r3, #1
 8006638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800663a:	210f      	movs	r1, #15
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	f7ff ff8e 	bl	8006560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006644:	4b05      	ldr	r3, [pc, #20]	; (800665c <SysTick_Config+0x40>)
 8006646:	2200      	movs	r2, #0
 8006648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800664a:	4b04      	ldr	r3, [pc, #16]	; (800665c <SysTick_Config+0x40>)
 800664c:	2207      	movs	r2, #7
 800664e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	e000e010 	.word	0xe000e010

08006660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff ff29 	bl	80064c0 <__NVIC_SetPriorityGrouping>
}
 800666e:	bf00      	nop
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b086      	sub	sp, #24
 800667a:	af00      	add	r7, sp, #0
 800667c:	4603      	mov	r3, r0
 800667e:	60b9      	str	r1, [r7, #8]
 8006680:	607a      	str	r2, [r7, #4]
 8006682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006684:	2300      	movs	r3, #0
 8006686:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006688:	f7ff ff3e 	bl	8006508 <__NVIC_GetPriorityGrouping>
 800668c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	6978      	ldr	r0, [r7, #20]
 8006694:	f7ff ff8e 	bl	80065b4 <NVIC_EncodePriority>
 8006698:	4602      	mov	r2, r0
 800669a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800669e:	4611      	mov	r1, r2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff ff5d 	bl	8006560 <__NVIC_SetPriority>
}
 80066a6:	bf00      	nop
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b082      	sub	sp, #8
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	4603      	mov	r3, r0
 80066b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff ff31 	bl	8006524 <__NVIC_EnableIRQ>
}
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff ffa2 	bl	800661c <SysTick_Config>
 80066d8:	4603      	mov	r3, r0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e054      	b.n	80067a0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	7f5b      	ldrb	r3, [r3, #29]
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d105      	bne.n	800670c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fa ffe4 	bl	80016d4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	791b      	ldrb	r3, [r3, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10c      	bne.n	8006734 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a22      	ldr	r2, [pc, #136]	; (80067a8 <HAL_CRC_Init+0xc4>)
 8006720:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0218 	bic.w	r2, r2, #24
 8006730:	609a      	str	r2, [r3, #8]
 8006732:	e00c      	b.n	800674e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6899      	ldr	r1, [r3, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	461a      	mov	r2, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f834 	bl	80067ac <HAL_CRCEx_Polynomial_Set>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e028      	b.n	80067a0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	795b      	ldrb	r3, [r3, #5]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d105      	bne.n	8006762 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f04f 32ff 	mov.w	r2, #4294967295
 800675e:	611a      	str	r2, [r3, #16]
 8006760:	e004      	b.n	800676c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6912      	ldr	r2, [r2, #16]
 800676a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695a      	ldr	r2, [r3, #20]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699a      	ldr	r2, [r3, #24]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	04c11db7 	.word	0x04c11db7

080067ac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80067bc:	231f      	movs	r3, #31
 80067be:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80067c0:	bf00      	nop
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1e5a      	subs	r2, r3, #1
 80067c6:	613a      	str	r2, [r7, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d009      	beq.n	80067e0 <HAL_CRCEx_Polynomial_Set+0x34>
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	fa22 f303 	lsr.w	r3, r2, r3
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0f0      	beq.n	80067c2 <HAL_CRCEx_Polynomial_Set+0x16>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b18      	cmp	r3, #24
 80067e4:	d846      	bhi.n	8006874 <HAL_CRCEx_Polynomial_Set+0xc8>
 80067e6:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <HAL_CRCEx_Polynomial_Set+0x40>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	0800687b 	.word	0x0800687b
 80067f0:	08006875 	.word	0x08006875
 80067f4:	08006875 	.word	0x08006875
 80067f8:	08006875 	.word	0x08006875
 80067fc:	08006875 	.word	0x08006875
 8006800:	08006875 	.word	0x08006875
 8006804:	08006875 	.word	0x08006875
 8006808:	08006875 	.word	0x08006875
 800680c:	08006869 	.word	0x08006869
 8006810:	08006875 	.word	0x08006875
 8006814:	08006875 	.word	0x08006875
 8006818:	08006875 	.word	0x08006875
 800681c:	08006875 	.word	0x08006875
 8006820:	08006875 	.word	0x08006875
 8006824:	08006875 	.word	0x08006875
 8006828:	08006875 	.word	0x08006875
 800682c:	0800685d 	.word	0x0800685d
 8006830:	08006875 	.word	0x08006875
 8006834:	08006875 	.word	0x08006875
 8006838:	08006875 	.word	0x08006875
 800683c:	08006875 	.word	0x08006875
 8006840:	08006875 	.word	0x08006875
 8006844:	08006875 	.word	0x08006875
 8006848:	08006875 	.word	0x08006875
 800684c:	08006851 	.word	0x08006851
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2b06      	cmp	r3, #6
 8006854:	d913      	bls.n	800687e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800685a:	e010      	b.n	800687e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	2b07      	cmp	r3, #7
 8006860:	d90f      	bls.n	8006882 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006866:	e00c      	b.n	8006882 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2b0f      	cmp	r3, #15
 800686c:	d90b      	bls.n	8006886 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006872:	e008      	b.n	8006886 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	75fb      	strb	r3, [r7, #23]
      break;
 8006878:	e006      	b.n	8006888 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800687a:	bf00      	nop
 800687c:	e004      	b.n	8006888 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800687e:	bf00      	nop
 8006880:	e002      	b.n	8006888 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006882:	bf00      	nop
 8006884:	e000      	b.n	8006888 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006886:	bf00      	nop
  }
  if (status == HAL_OK)
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10d      	bne.n	80068aa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f023 0118 	bic.w	r1, r3, #24
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e0ac      	b.n	8006a24 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fc1c 	bl	800710c <DFSDM_GetChannelFromInstance>
 80068d4:	4603      	mov	r3, r0
 80068d6:	4a55      	ldr	r2, [pc, #340]	; (8006a2c <HAL_DFSDM_ChannelInit+0x174>)
 80068d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e09f      	b.n	8006a24 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7fa ffc9 	bl	800187c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80068ea:	4b51      	ldr	r3, [pc, #324]	; (8006a30 <HAL_DFSDM_ChannelInit+0x178>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3301      	adds	r3, #1
 80068f0:	4a4f      	ldr	r2, [pc, #316]	; (8006a30 <HAL_DFSDM_ChannelInit+0x178>)
 80068f2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80068f4:	4b4e      	ldr	r3, [pc, #312]	; (8006a30 <HAL_DFSDM_ChannelInit+0x178>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d125      	bne.n	8006948 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80068fc:	4b4d      	ldr	r3, [pc, #308]	; (8006a34 <HAL_DFSDM_ChannelInit+0x17c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a4c      	ldr	r2, [pc, #304]	; (8006a34 <HAL_DFSDM_ChannelInit+0x17c>)
 8006902:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006906:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8006908:	4b4a      	ldr	r3, [pc, #296]	; (8006a34 <HAL_DFSDM_ChannelInit+0x17c>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	4948      	ldr	r1, [pc, #288]	; (8006a34 <HAL_DFSDM_ChannelInit+0x17c>)
 8006912:	4313      	orrs	r3, r2
 8006914:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8006916:	4b47      	ldr	r3, [pc, #284]	; (8006a34 <HAL_DFSDM_ChannelInit+0x17c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a46      	ldr	r2, [pc, #280]	; (8006a34 <HAL_DFSDM_ChannelInit+0x17c>)
 800691c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8006920:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	791b      	ldrb	r3, [r3, #4]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d108      	bne.n	800693c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800692a:	4b42      	ldr	r3, [pc, #264]	; (8006a34 <HAL_DFSDM_ChannelInit+0x17c>)
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	3b01      	subs	r3, #1
 8006934:	041b      	lsls	r3, r3, #16
 8006936:	493f      	ldr	r1, [pc, #252]	; (8006a34 <HAL_DFSDM_ChannelInit+0x17c>)
 8006938:	4313      	orrs	r3, r2
 800693a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800693c:	4b3d      	ldr	r3, [pc, #244]	; (8006a34 <HAL_DFSDM_ChannelInit+0x17c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a3c      	ldr	r2, [pc, #240]	; (8006a34 <HAL_DFSDM_ChannelInit+0x17c>)
 8006942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006946:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8006956:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6819      	ldr	r1, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006966:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800696c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 020f 	bic.w	r2, r2, #15
 8006984:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6819      	ldr	r1, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80069ac:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6899      	ldr	r1, [r3, #8]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	3b01      	subs	r3, #1
 80069be:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80069c0:	431a      	orrs	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f002 0207 	and.w	r2, r2, #7
 80069d8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6859      	ldr	r1, [r3, #4]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a04:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 fb7a 	bl	800710c <DFSDM_GetChannelFromInstance>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	4904      	ldr	r1, [pc, #16]	; (8006a2c <HAL_DFSDM_ChannelInit+0x174>)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	200016b0 	.word	0x200016b0
 8006a30:	200016ac 	.word	0x200016ac
 8006a34:	40016000 	.word	0x40016000

08006a38 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e0ca      	b.n	8006c08 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a66      	ldr	r2, [pc, #408]	; (8006c10 <HAL_DFSDM_FilterInit+0x1b0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d109      	bne.n	8006a90 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d003      	beq.n	8006a8c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d101      	bne.n	8006a90 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0bb      	b.n	8006c08 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7fa fe33 	bl	8001714 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8006abc:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	7a1b      	ldrb	r3, [r3, #8]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d108      	bne.n	8006ad8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	e007      	b.n	8006ae8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006ae6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	7a5b      	ldrb	r3, [r3, #9]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d108      	bne.n	8006b02 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	e007      	b.n	8006b12 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006b10:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8006b20:	f023 0308 	bic.w	r3, r3, #8
 8006b24:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d108      	bne.n	8006b40 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6819      	ldr	r1, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	695a      	ldr	r2, [r3, #20]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	7c1b      	ldrb	r3, [r3, #16]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d108      	bne.n	8006b5a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0210 	orr.w	r2, r2, #16
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	e007      	b.n	8006b6a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0210 	bic.w	r2, r2, #16
 8006b68:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	7c5b      	ldrb	r3, [r3, #17]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d108      	bne.n	8006b84 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0220 	orr.w	r2, r2, #32
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	e007      	b.n	8006b94 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0220 	bic.w	r2, r2, #32
 8006b92:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6812      	ldr	r2, [r2, #0]
 8006b9e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8006ba2:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8006ba6:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6959      	ldr	r1, [r3, #20]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8006bba:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8006bc2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	699a      	ldr	r2, [r3, #24]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7c1a      	ldrb	r2, [r3, #16]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0201 	orr.w	r2, r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40016100 	.word	0x40016100

08006c14 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d02e      	beq.n	8006c8c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8006c34:	2bff      	cmp	r3, #255	; 0xff
 8006c36:	d029      	beq.n	8006c8c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	6812      	ldr	r2, [r2, #0]
 8006c42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c4a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d10d      	bne.n	8006c6e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	021b      	lsls	r3, r3, #8
 8006c5c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006c60:	431a      	orrs	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	e00a      	b.n	8006c84 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6819      	ldr	r1, [r3, #0]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	021b      	lsls	r3, r3, #8
 8006c78:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	631a      	str	r2, [r3, #48]	; 0x30
 8006c8a:	e001      	b.n	8006c90 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
	...

08006ca0 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
 8006cc0:	e064      	b.n	8006d8c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ccc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cd0:	d002      	beq.n	8006cd8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	75fb      	strb	r3, [r7, #23]
 8006cd6:	e059      	b.n	8006d8c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10e      	bne.n	8006cfe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10a      	bne.n	8006cfe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cec:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d105      	bne.n	8006cfe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d002      	beq.n	8006cfe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	75fb      	strb	r3, [r7, #23]
 8006cfc:	e046      	b.n	8006d8c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10b      	bne.n	8006d1e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d107      	bne.n	8006d1e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d12:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	d102      	bne.n	8006d1e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	75fb      	strb	r3, [r7, #23]
 8006d1c:	e036      	b.n	8006d8c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d004      	beq.n	8006d32 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d12a      	bne.n	8006d88 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d36:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8006d38:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3e:	4a17      	ldr	r2, [pc, #92]	; (8006d9c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8006d40:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d101      	bne.n	8006d50 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8006d4c:	4a14      	ldr	r2, [pc, #80]	; (8006da0 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8006d4e:	e000      	b.n	8006d52 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8006d50:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	331c      	adds	r3, #28
 8006d62:	4619      	mov	r1, r3
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f000 fb2a 	bl	80073c0 <HAL_DMA_Start_IT>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d006      	beq.n	8006d80 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	22ff      	movs	r2, #255	; 0xff
 8006d76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8006d7e:	e005      	b.n	8006d8c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 fa0f 	bl	80071a4 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8006d86:	e001      	b.n	8006d8c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	080070cd 	.word	0x080070cd
 8006d9c:	080070e9 	.word	0x080070e9
 8006da0:	080070b1 	.word	0x080070b1

08006da4 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08c      	sub	sp, #48	; 0x30
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00f      	beq.n	8006de6 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f95c 	bl	800709c <HAL_DFSDM_FilterErrorCallback>
 8006de4:	e13b      	b.n	800705e <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00f      	beq.n	8006e10 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2204      	movs	r2, #4
 8006e00:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2202      	movs	r2, #2
 8006e06:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f947 	bl	800709c <HAL_DFSDM_FilterErrorCallback>
 8006e0e:	e126      	b.n	800705e <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d025      	beq.n	8006e66 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d020      	beq.n	8006e66 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7f9 ff13 	bl	8000c50 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f040 8114 	bne.w	800705c <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f040 810f 	bne.w	800705c <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0202 	bic.w	r2, r2, #2
 8006e4c:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d101      	bne.n	8006e5c <HAL_DFSDM_IRQHandler+0xb8>
 8006e58:	2201      	movs	r2, #1
 8006e5a:	e000      	b.n	8006e5e <HAL_DFSDM_IRQHandler+0xba>
 8006e5c:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006e64:	e0fa      	b.n	800705c <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d034      	beq.n	8006eda <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d02f      	beq.n	8006eda <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f8f8 	bl	8007070 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e84:	1e5a      	subs	r2, r3, #1
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f040 80e5 	bne.w	800705e <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d112      	bne.n	8006ec2 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0201 	bic.w	r2, r2, #1
 8006eaa:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d101      	bne.n	8006eba <HAL_DFSDM_IRQHandler+0x116>
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	e000      	b.n	8006ebc <HAL_DFSDM_IRQHandler+0x118>
 8006eba:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d102      	bne.n	8006ed2 <HAL_DFSDM_IRQHandler+0x12e>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed0:	e000      	b.n	8006ed4 <HAL_DFSDM_IRQHandler+0x130>
 8006ed2:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8006ed8:	e0c1      	b.n	800705e <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f003 0310 	and.w	r3, r3, #16
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d03d      	beq.n	8006f60 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d038      	beq.n	8006f60 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8006efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <HAL_DFSDM_IRQHandler+0x162>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e000      	b.n	8006f08 <HAL_DFSDM_IRQHandler+0x164>
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d109      	bne.n	8006f24 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	0a1b      	lsrs	r3, r3, #8
 8006f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8006f16:	e005      	b.n	8006f24 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	085b      	lsrs	r3, r3, #1
 8006f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8006f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <HAL_DFSDM_IRQHandler+0x190>
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	2b06      	cmp	r3, #6
 8006f32:	d9f1      	bls.n	8006f18 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <HAL_DFSDM_IRQHandler+0x1a2>
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	2201      	movs	r2, #1
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	e003      	b.n	8006f4e <HAL_DFSDM_IRQHandler+0x1aa>
 8006f46:	2201      	movs	r2, #1
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	6812      	ldr	r2, [r2, #0]
 8006f52:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f893 	bl	8007084 <HAL_DFSDM_FilterAwdCallback>
  {
 8006f5e:	e07e      	b.n	800705e <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a40      	ldr	r2, [pc, #256]	; (8007068 <HAL_DFSDM_IRQHandler+0x2c4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d141      	bne.n	8006fee <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d03c      	beq.n	8006fee <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d037      	beq.n	8006fee <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	0c1b      	lsrs	r3, r3, #16
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 8006f8e:	e02a      	b.n	8006fe6 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d01f      	beq.n	8006fda <HAL_DFSDM_IRQHandler+0x236>
 8006f9a:	4a34      	ldr	r2, [pc, #208]	; (800706c <HAL_DFSDM_IRQHandler+0x2c8>)
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d019      	beq.n	8006fda <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8006fa6:	4a31      	ldr	r2, [pc, #196]	; (800706c <HAL_DFSDM_IRQHandler+0x2c8>)
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00f      	beq.n	8006fda <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	f103 0210 	add.w	r2, r3, #16
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8006fca:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8006fcc:	4a27      	ldr	r2, [pc, #156]	; (800706c <HAL_DFSDM_IRQHandler+0x2c8>)
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff fd2f 	bl	8006a38 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	085b      	lsrs	r3, r3, #1
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	2b07      	cmp	r3, #7
 8006fea:	d9d1      	bls.n	8006f90 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8006fec:	e037      	b.n	800705e <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a1d      	ldr	r2, [pc, #116]	; (8007068 <HAL_DFSDM_IRQHandler+0x2c4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d132      	bne.n	800705e <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d02d      	beq.n	800705e <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8007008:	2b00      	cmp	r3, #0
 800700a:	d028      	beq.n	800705e <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	0e1b      	lsrs	r3, r3, #24
 8007018:	b2db      	uxtb	r3, r3
 800701a:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800701c:	e005      	b.n	800702a <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	3301      	adds	r3, #1
 8007022:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	085b      	lsrs	r3, r3, #1
 8007028:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d102      	bne.n	800703a <HAL_DFSDM_IRQHandler+0x296>
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	2b06      	cmp	r3, #6
 8007038:	d9f1      	bls.n	800701e <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	f103 0218 	add.w	r2, r3, #24
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2101      	movs	r1, #1
 8007046:	fa01 f202 	lsl.w	r2, r1, r2
 800704a:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 800704c:	4a07      	ldr	r2, [pc, #28]	; (800706c <HAL_DFSDM_IRQHandler+0x2c8>)
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007054:	4618      	mov	r0, r3
 8007056:	f7ff fcf9 	bl	8006a4c <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 800705a:	e000      	b.n	800705e <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800705c:	bf00      	nop
}
 800705e:	bf00      	nop
 8007060:	3730      	adds	r7, #48	; 0x30
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	40016100 	.word	0x40016100
 800706c:	200016b0 	.word	0x200016b0

08007070 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8007090:	bf00      	nop
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f7f9 fdd6 	bl	8000c70 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f7f9 fdb8 	bl	8000c50 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80070e0:	bf00      	nop
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2203      	movs	r2, #3
 80070fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f7ff ffcd 	bl	800709c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8007102:	bf00      	nop
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a1c      	ldr	r2, [pc, #112]	; (8007188 <DFSDM_GetChannelFromInstance+0x7c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d102      	bne.n	8007122 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	e02b      	b.n	800717a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a19      	ldr	r2, [pc, #100]	; (800718c <DFSDM_GetChannelFromInstance+0x80>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d102      	bne.n	8007130 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800712a:	2301      	movs	r3, #1
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	e024      	b.n	800717a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a17      	ldr	r2, [pc, #92]	; (8007190 <DFSDM_GetChannelFromInstance+0x84>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d102      	bne.n	800713e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8007138:	2302      	movs	r3, #2
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	e01d      	b.n	800717a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a14      	ldr	r2, [pc, #80]	; (8007194 <DFSDM_GetChannelFromInstance+0x88>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d102      	bne.n	800714c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8007146:	2304      	movs	r3, #4
 8007148:	60fb      	str	r3, [r7, #12]
 800714a:	e016      	b.n	800717a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a12      	ldr	r2, [pc, #72]	; (8007198 <DFSDM_GetChannelFromInstance+0x8c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d102      	bne.n	800715a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8007154:	2305      	movs	r3, #5
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	e00f      	b.n	800717a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a0f      	ldr	r2, [pc, #60]	; (800719c <DFSDM_GetChannelFromInstance+0x90>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d102      	bne.n	8007168 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8007162:	2306      	movs	r3, #6
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	e008      	b.n	800717a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a0d      	ldr	r2, [pc, #52]	; (80071a0 <DFSDM_GetChannelFromInstance+0x94>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d102      	bne.n	8007176 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8007170:	2307      	movs	r3, #7
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	e001      	b.n	800717a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8007176:	2303      	movs	r3, #3
 8007178:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800717a:	68fb      	ldr	r3, [r7, #12]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	40016000 	.word	0x40016000
 800718c:	40016020 	.word	0x40016020
 8007190:	40016040 	.word	0x40016040
 8007194:	40016080 	.word	0x40016080
 8007198:	400160a0 	.word	0x400160a0
 800719c:	400160c0 	.word	0x400160c0
 80071a0:	400160e0 	.word	0x400160e0

080071a4 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d108      	bne.n	80071c6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	e033      	b.n	800722e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0201 	bic.w	r2, r2, #1
 80071d4:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80071e4:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0201 	orr.w	r2, r2, #1
 80071f4:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d116      	bne.n	800722e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007204:	2b00      	cmp	r3, #0
 8007206:	d107      	bne.n	8007218 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0202 	orr.w	r2, r2, #2
 8007216:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800721e:	2b01      	cmp	r3, #1
 8007220:	d102      	bne.n	8007228 <DFSDM_RegConvStart+0x84>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007226:	e000      	b.n	800722a <DFSDM_RegConvStart+0x86>
 8007228:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <DFSDM_RegConvStart+0x98>
 8007238:	2202      	movs	r2, #2
 800723a:	e000      	b.n	800723e <DFSDM_RegConvStart+0x9a>
 800723c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e098      	b.n	8007394 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	4b4d      	ldr	r3, [pc, #308]	; (80073a0 <HAL_DMA_Init+0x150>)
 800726a:	429a      	cmp	r2, r3
 800726c:	d80f      	bhi.n	800728e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	4b4b      	ldr	r3, [pc, #300]	; (80073a4 <HAL_DMA_Init+0x154>)
 8007276:	4413      	add	r3, r2
 8007278:	4a4b      	ldr	r2, [pc, #300]	; (80073a8 <HAL_DMA_Init+0x158>)
 800727a:	fba2 2303 	umull	r2, r3, r2, r3
 800727e:	091b      	lsrs	r3, r3, #4
 8007280:	009a      	lsls	r2, r3, #2
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a48      	ldr	r2, [pc, #288]	; (80073ac <HAL_DMA_Init+0x15c>)
 800728a:	641a      	str	r2, [r3, #64]	; 0x40
 800728c:	e00e      	b.n	80072ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	4b46      	ldr	r3, [pc, #280]	; (80073b0 <HAL_DMA_Init+0x160>)
 8007296:	4413      	add	r3, r2
 8007298:	4a43      	ldr	r2, [pc, #268]	; (80073a8 <HAL_DMA_Init+0x158>)
 800729a:	fba2 2303 	umull	r2, r3, r2, r3
 800729e:	091b      	lsrs	r3, r3, #4
 80072a0:	009a      	lsls	r2, r3, #2
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a42      	ldr	r2, [pc, #264]	; (80073b4 <HAL_DMA_Init+0x164>)
 80072aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80072c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80072d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007306:	d039      	beq.n	800737c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	4a27      	ldr	r2, [pc, #156]	; (80073ac <HAL_DMA_Init+0x15c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d11a      	bne.n	8007348 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007312:	4b29      	ldr	r3, [pc, #164]	; (80073b8 <HAL_DMA_Init+0x168>)
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	f003 031c 	and.w	r3, r3, #28
 800731e:	210f      	movs	r1, #15
 8007320:	fa01 f303 	lsl.w	r3, r1, r3
 8007324:	43db      	mvns	r3, r3
 8007326:	4924      	ldr	r1, [pc, #144]	; (80073b8 <HAL_DMA_Init+0x168>)
 8007328:	4013      	ands	r3, r2
 800732a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800732c:	4b22      	ldr	r3, [pc, #136]	; (80073b8 <HAL_DMA_Init+0x168>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6859      	ldr	r1, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007338:	f003 031c 	and.w	r3, r3, #28
 800733c:	fa01 f303 	lsl.w	r3, r1, r3
 8007340:	491d      	ldr	r1, [pc, #116]	; (80073b8 <HAL_DMA_Init+0x168>)
 8007342:	4313      	orrs	r3, r2
 8007344:	600b      	str	r3, [r1, #0]
 8007346:	e019      	b.n	800737c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007348:	4b1c      	ldr	r3, [pc, #112]	; (80073bc <HAL_DMA_Init+0x16c>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007350:	f003 031c 	and.w	r3, r3, #28
 8007354:	210f      	movs	r1, #15
 8007356:	fa01 f303 	lsl.w	r3, r1, r3
 800735a:	43db      	mvns	r3, r3
 800735c:	4917      	ldr	r1, [pc, #92]	; (80073bc <HAL_DMA_Init+0x16c>)
 800735e:	4013      	ands	r3, r2
 8007360:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007362:	4b16      	ldr	r3, [pc, #88]	; (80073bc <HAL_DMA_Init+0x16c>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6859      	ldr	r1, [r3, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736e:	f003 031c 	and.w	r3, r3, #28
 8007372:	fa01 f303 	lsl.w	r3, r1, r3
 8007376:	4911      	ldr	r1, [pc, #68]	; (80073bc <HAL_DMA_Init+0x16c>)
 8007378:	4313      	orrs	r3, r2
 800737a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	40020407 	.word	0x40020407
 80073a4:	bffdfff8 	.word	0xbffdfff8
 80073a8:	cccccccd 	.word	0xcccccccd
 80073ac:	40020000 	.word	0x40020000
 80073b0:	bffdfbf8 	.word	0xbffdfbf8
 80073b4:	40020400 	.word	0x40020400
 80073b8:	400200a8 	.word	0x400200a8
 80073bc:	400204a8 	.word	0x400204a8

080073c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_DMA_Start_IT+0x20>
 80073dc:	2302      	movs	r3, #2
 80073de:	e04b      	b.n	8007478 <HAL_DMA_Start_IT+0xb8>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d13a      	bne.n	800746a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0201 	bic.w	r2, r2, #1
 8007410:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 f8e0 	bl	80075de <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007422:	2b00      	cmp	r3, #0
 8007424:	d008      	beq.n	8007438 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f042 020e 	orr.w	r2, r2, #14
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	e00f      	b.n	8007458 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0204 	bic.w	r2, r2, #4
 8007446:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 020a 	orr.w	r2, r2, #10
 8007456:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0201 	orr.w	r2, r2, #1
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	e005      	b.n	8007476 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007472:	2302      	movs	r3, #2
 8007474:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007476:	7dfb      	ldrb	r3, [r7, #23]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749c:	f003 031c 	and.w	r3, r3, #28
 80074a0:	2204      	movs	r2, #4
 80074a2:	409a      	lsls	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4013      	ands	r3, r2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d026      	beq.n	80074fa <HAL_DMA_IRQHandler+0x7a>
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d021      	beq.n	80074fa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d107      	bne.n	80074d4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0204 	bic.w	r2, r2, #4
 80074d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d8:	f003 021c 	and.w	r2, r3, #28
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e0:	2104      	movs	r1, #4
 80074e2:	fa01 f202 	lsl.w	r2, r1, r2
 80074e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d071      	beq.n	80075d4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80074f8:	e06c      	b.n	80075d4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fe:	f003 031c 	and.w	r3, r3, #28
 8007502:	2202      	movs	r2, #2
 8007504:	409a      	lsls	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4013      	ands	r3, r2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d02e      	beq.n	800756c <HAL_DMA_IRQHandler+0xec>
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d029      	beq.n	800756c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10b      	bne.n	800753e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 020a 	bic.w	r2, r2, #10
 8007534:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007542:	f003 021c 	and.w	r2, r3, #28
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	2102      	movs	r1, #2
 800754c:	fa01 f202 	lsl.w	r2, r1, r2
 8007550:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755e:	2b00      	cmp	r3, #0
 8007560:	d038      	beq.n	80075d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800756a:	e033      	b.n	80075d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007570:	f003 031c 	and.w	r3, r3, #28
 8007574:	2208      	movs	r2, #8
 8007576:	409a      	lsls	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4013      	ands	r3, r2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d02a      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x156>
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f003 0308 	and.w	r3, r3, #8
 8007586:	2b00      	cmp	r3, #0
 8007588:	d025      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 020e 	bic.w	r2, r2, #14
 8007598:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759e:	f003 021c 	and.w	r2, r3, #28
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	2101      	movs	r1, #1
 80075a8:	fa01 f202 	lsl.w	r2, r1, r2
 80075ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d004      	beq.n	80075d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
}
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	607a      	str	r2, [r7, #4]
 80075ea:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f0:	f003 021c 	and.w	r2, r3, #28
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f8:	2101      	movs	r1, #1
 80075fa:	fa01 f202 	lsl.w	r2, r1, r2
 80075fe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	2b10      	cmp	r3, #16
 800760e:	d108      	bne.n	8007622 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007620:	e007      	b.n	8007632 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	60da      	str	r2, [r3, #12]
}
 8007632:	bf00      	nop
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
	...

08007640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800764e:	e17f      	b.n	8007950 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	2101      	movs	r1, #1
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	fa01 f303 	lsl.w	r3, r1, r3
 800765c:	4013      	ands	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 8171 	beq.w	800794a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f003 0303 	and.w	r3, r3, #3
 8007670:	2b01      	cmp	r3, #1
 8007672:	d005      	beq.n	8007680 <HAL_GPIO_Init+0x40>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f003 0303 	and.w	r3, r3, #3
 800767c:	2b02      	cmp	r3, #2
 800767e:	d130      	bne.n	80076e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	005b      	lsls	r3, r3, #1
 800768a:	2203      	movs	r2, #3
 800768c:	fa02 f303 	lsl.w	r3, r2, r3
 8007690:	43db      	mvns	r3, r3
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4013      	ands	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	fa02 f303 	lsl.w	r3, r2, r3
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80076b6:	2201      	movs	r2, #1
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	fa02 f303 	lsl.w	r3, r2, r3
 80076be:	43db      	mvns	r3, r3
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4013      	ands	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	091b      	lsrs	r3, r3, #4
 80076cc:	f003 0201 	and.w	r2, r3, #1
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	fa02 f303 	lsl.w	r3, r2, r3
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	4313      	orrs	r3, r2
 80076da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f003 0303 	and.w	r3, r3, #3
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d118      	bne.n	8007720 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80076f4:	2201      	movs	r2, #1
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	fa02 f303 	lsl.w	r3, r2, r3
 80076fc:	43db      	mvns	r3, r3
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4013      	ands	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	08db      	lsrs	r3, r3, #3
 800770a:	f003 0201 	and.w	r2, r3, #1
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	fa02 f303 	lsl.w	r3, r2, r3
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	4313      	orrs	r3, r2
 8007718:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f003 0303 	and.w	r3, r3, #3
 8007728:	2b03      	cmp	r3, #3
 800772a:	d017      	beq.n	800775c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	2203      	movs	r2, #3
 8007738:	fa02 f303 	lsl.w	r3, r2, r3
 800773c:	43db      	mvns	r3, r3
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4013      	ands	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	fa02 f303 	lsl.w	r3, r2, r3
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	4313      	orrs	r3, r2
 8007754:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f003 0303 	and.w	r3, r3, #3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d123      	bne.n	80077b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	08da      	lsrs	r2, r3, #3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	3208      	adds	r2, #8
 8007770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007774:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	220f      	movs	r2, #15
 8007780:	fa02 f303 	lsl.w	r3, r2, r3
 8007784:	43db      	mvns	r3, r3
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	4013      	ands	r3, r2
 800778a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	691a      	ldr	r2, [r3, #16]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	fa02 f303 	lsl.w	r3, r2, r3
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	08da      	lsrs	r2, r3, #3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	3208      	adds	r2, #8
 80077aa:	6939      	ldr	r1, [r7, #16]
 80077ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	2203      	movs	r2, #3
 80077bc:	fa02 f303 	lsl.w	r3, r2, r3
 80077c0:	43db      	mvns	r3, r3
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	4013      	ands	r3, r2
 80077c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f003 0203 	and.w	r2, r3, #3
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	fa02 f303 	lsl.w	r3, r2, r3
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 80ac 	beq.w	800794a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077f2:	4b5f      	ldr	r3, [pc, #380]	; (8007970 <HAL_GPIO_Init+0x330>)
 80077f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f6:	4a5e      	ldr	r2, [pc, #376]	; (8007970 <HAL_GPIO_Init+0x330>)
 80077f8:	f043 0301 	orr.w	r3, r3, #1
 80077fc:	6613      	str	r3, [r2, #96]	; 0x60
 80077fe:	4b5c      	ldr	r3, [pc, #368]	; (8007970 <HAL_GPIO_Init+0x330>)
 8007800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	60bb      	str	r3, [r7, #8]
 8007808:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800780a:	4a5a      	ldr	r2, [pc, #360]	; (8007974 <HAL_GPIO_Init+0x334>)
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	089b      	lsrs	r3, r3, #2
 8007810:	3302      	adds	r3, #2
 8007812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007816:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	220f      	movs	r2, #15
 8007822:	fa02 f303 	lsl.w	r3, r2, r3
 8007826:	43db      	mvns	r3, r3
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	4013      	ands	r3, r2
 800782c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007834:	d025      	beq.n	8007882 <HAL_GPIO_Init+0x242>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a4f      	ldr	r2, [pc, #316]	; (8007978 <HAL_GPIO_Init+0x338>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d01f      	beq.n	800787e <HAL_GPIO_Init+0x23e>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a4e      	ldr	r2, [pc, #312]	; (800797c <HAL_GPIO_Init+0x33c>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d019      	beq.n	800787a <HAL_GPIO_Init+0x23a>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a4d      	ldr	r2, [pc, #308]	; (8007980 <HAL_GPIO_Init+0x340>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d013      	beq.n	8007876 <HAL_GPIO_Init+0x236>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a4c      	ldr	r2, [pc, #304]	; (8007984 <HAL_GPIO_Init+0x344>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d00d      	beq.n	8007872 <HAL_GPIO_Init+0x232>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a4b      	ldr	r2, [pc, #300]	; (8007988 <HAL_GPIO_Init+0x348>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d007      	beq.n	800786e <HAL_GPIO_Init+0x22e>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a4a      	ldr	r2, [pc, #296]	; (800798c <HAL_GPIO_Init+0x34c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d101      	bne.n	800786a <HAL_GPIO_Init+0x22a>
 8007866:	2306      	movs	r3, #6
 8007868:	e00c      	b.n	8007884 <HAL_GPIO_Init+0x244>
 800786a:	2307      	movs	r3, #7
 800786c:	e00a      	b.n	8007884 <HAL_GPIO_Init+0x244>
 800786e:	2305      	movs	r3, #5
 8007870:	e008      	b.n	8007884 <HAL_GPIO_Init+0x244>
 8007872:	2304      	movs	r3, #4
 8007874:	e006      	b.n	8007884 <HAL_GPIO_Init+0x244>
 8007876:	2303      	movs	r3, #3
 8007878:	e004      	b.n	8007884 <HAL_GPIO_Init+0x244>
 800787a:	2302      	movs	r3, #2
 800787c:	e002      	b.n	8007884 <HAL_GPIO_Init+0x244>
 800787e:	2301      	movs	r3, #1
 8007880:	e000      	b.n	8007884 <HAL_GPIO_Init+0x244>
 8007882:	2300      	movs	r3, #0
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	f002 0203 	and.w	r2, r2, #3
 800788a:	0092      	lsls	r2, r2, #2
 800788c:	4093      	lsls	r3, r2
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	4313      	orrs	r3, r2
 8007892:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007894:	4937      	ldr	r1, [pc, #220]	; (8007974 <HAL_GPIO_Init+0x334>)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	089b      	lsrs	r3, r3, #2
 800789a:	3302      	adds	r3, #2
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80078a2:	4b3b      	ldr	r3, [pc, #236]	; (8007990 <HAL_GPIO_Init+0x350>)
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	43db      	mvns	r3, r3
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4013      	ands	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80078c6:	4a32      	ldr	r2, [pc, #200]	; (8007990 <HAL_GPIO_Init+0x350>)
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80078cc:	4b30      	ldr	r3, [pc, #192]	; (8007990 <HAL_GPIO_Init+0x350>)
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	43db      	mvns	r3, r3
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4013      	ands	r3, r2
 80078da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80078f0:	4a27      	ldr	r2, [pc, #156]	; (8007990 <HAL_GPIO_Init+0x350>)
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80078f6:	4b26      	ldr	r3, [pc, #152]	; (8007990 <HAL_GPIO_Init+0x350>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	43db      	mvns	r3, r3
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	4013      	ands	r3, r2
 8007904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800791a:	4a1d      	ldr	r2, [pc, #116]	; (8007990 <HAL_GPIO_Init+0x350>)
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007920:	4b1b      	ldr	r3, [pc, #108]	; (8007990 <HAL_GPIO_Init+0x350>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	43db      	mvns	r3, r3
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4013      	ands	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4313      	orrs	r3, r2
 8007942:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007944:	4a12      	ldr	r2, [pc, #72]	; (8007990 <HAL_GPIO_Init+0x350>)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	3301      	adds	r3, #1
 800794e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	fa22 f303 	lsr.w	r3, r2, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	f47f ae78 	bne.w	8007650 <HAL_GPIO_Init+0x10>
  }
}
 8007960:	bf00      	nop
 8007962:	bf00      	nop
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	40021000 	.word	0x40021000
 8007974:	40010000 	.word	0x40010000
 8007978:	48000400 	.word	0x48000400
 800797c:	48000800 	.word	0x48000800
 8007980:	48000c00 	.word	0x48000c00
 8007984:	48001000 	.word	0x48001000
 8007988:	48001400 	.word	0x48001400
 800798c:	48001800 	.word	0x48001800
 8007990:	40010400 	.word	0x40010400

08007994 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691a      	ldr	r2, [r3, #16]
 80079a4:	887b      	ldrh	r3, [r7, #2]
 80079a6:	4013      	ands	r3, r2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80079ac:	2301      	movs	r3, #1
 80079ae:	73fb      	strb	r3, [r7, #15]
 80079b0:	e001      	b.n	80079b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079b2:	2300      	movs	r3, #0
 80079b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	807b      	strh	r3, [r7, #2]
 80079d0:	4613      	mov	r3, r2
 80079d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80079d4:	787b      	ldrb	r3, [r7, #1]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80079da:	887a      	ldrh	r2, [r7, #2]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80079e0:	e002      	b.n	80079e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80079e2:	887a      	ldrh	r2, [r7, #2]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007a06:	887a      	ldrh	r2, [r7, #2]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	041a      	lsls	r2, r3, #16
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	43d9      	mvns	r1, r3
 8007a12:	887b      	ldrh	r3, [r7, #2]
 8007a14:	400b      	ands	r3, r1
 8007a16:	431a      	orrs	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	619a      	str	r2, [r3, #24]
}
 8007a1c:	bf00      	nop
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007a2c:	4b04      	ldr	r3, [pc, #16]	; (8007a40 <HAL_PWREx_GetVoltageRange+0x18>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	40007000 	.word	0x40007000

08007a44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a52:	d130      	bne.n	8007ab6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a54:	4b23      	ldr	r3, [pc, #140]	; (8007ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a60:	d038      	beq.n	8007ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a62:	4b20      	ldr	r3, [pc, #128]	; (8007ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007a6a:	4a1e      	ldr	r2, [pc, #120]	; (8007ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a72:	4b1d      	ldr	r3, [pc, #116]	; (8007ae8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2232      	movs	r2, #50	; 0x32
 8007a78:	fb02 f303 	mul.w	r3, r2, r3
 8007a7c:	4a1b      	ldr	r2, [pc, #108]	; (8007aec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a82:	0c9b      	lsrs	r3, r3, #18
 8007a84:	3301      	adds	r3, #1
 8007a86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a88:	e002      	b.n	8007a90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a90:	4b14      	ldr	r3, [pc, #80]	; (8007ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a9c:	d102      	bne.n	8007aa4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1f2      	bne.n	8007a8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ab0:	d110      	bne.n	8007ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e00f      	b.n	8007ad6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ac2:	d007      	beq.n	8007ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007ac4:	4b07      	ldr	r3, [pc, #28]	; (8007ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007acc:	4a05      	ldr	r2, [pc, #20]	; (8007ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ad2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	40007000 	.word	0x40007000
 8007ae8:	20000000 	.word	0x20000000
 8007aec:	431bde83 	.word	0x431bde83

08007af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e3d4      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b02:	4ba1      	ldr	r3, [pc, #644]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 030c 	and.w	r3, r3, #12
 8007b0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b0c:	4b9e      	ldr	r3, [pc, #632]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f003 0303 	and.w	r3, r3, #3
 8007b14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0310 	and.w	r3, r3, #16
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 80e4 	beq.w	8007cec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d007      	beq.n	8007b3a <HAL_RCC_OscConfig+0x4a>
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	2b0c      	cmp	r3, #12
 8007b2e:	f040 808b 	bne.w	8007c48 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	f040 8087 	bne.w	8007c48 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007b3a:	4b93      	ldr	r3, [pc, #588]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d005      	beq.n	8007b52 <HAL_RCC_OscConfig+0x62>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e3ac      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1a      	ldr	r2, [r3, #32]
 8007b56:	4b8c      	ldr	r3, [pc, #560]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0308 	and.w	r3, r3, #8
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d004      	beq.n	8007b6c <HAL_RCC_OscConfig+0x7c>
 8007b62:	4b89      	ldr	r3, [pc, #548]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b6a:	e005      	b.n	8007b78 <HAL_RCC_OscConfig+0x88>
 8007b6c:	4b86      	ldr	r3, [pc, #536]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b72:	091b      	lsrs	r3, r3, #4
 8007b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d223      	bcs.n	8007bc4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 fd41 	bl	8008608 <RCC_SetFlashLatencyFromMSIRange>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e38d      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b90:	4b7d      	ldr	r3, [pc, #500]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a7c      	ldr	r2, [pc, #496]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007b96:	f043 0308 	orr.w	r3, r3, #8
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	4b7a      	ldr	r3, [pc, #488]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	4977      	ldr	r1, [pc, #476]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007bae:	4b76      	ldr	r3, [pc, #472]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	4972      	ldr	r1, [pc, #456]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	604b      	str	r3, [r1, #4]
 8007bc2:	e025      	b.n	8007c10 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007bc4:	4b70      	ldr	r3, [pc, #448]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a6f      	ldr	r2, [pc, #444]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007bca:	f043 0308 	orr.w	r3, r3, #8
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	4b6d      	ldr	r3, [pc, #436]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	496a      	ldr	r1, [pc, #424]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007be2:	4b69      	ldr	r3, [pc, #420]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	4965      	ldr	r1, [pc, #404]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d109      	bne.n	8007c10 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 fd01 	bl	8008608 <RCC_SetFlashLatencyFromMSIRange>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e34d      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c10:	f000 fc36 	bl	8008480 <HAL_RCC_GetSysClockFreq>
 8007c14:	4602      	mov	r2, r0
 8007c16:	4b5c      	ldr	r3, [pc, #368]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	091b      	lsrs	r3, r3, #4
 8007c1c:	f003 030f 	and.w	r3, r3, #15
 8007c20:	495a      	ldr	r1, [pc, #360]	; (8007d8c <HAL_RCC_OscConfig+0x29c>)
 8007c22:	5ccb      	ldrb	r3, [r1, r3]
 8007c24:	f003 031f 	and.w	r3, r3, #31
 8007c28:	fa22 f303 	lsr.w	r3, r2, r3
 8007c2c:	4a58      	ldr	r2, [pc, #352]	; (8007d90 <HAL_RCC_OscConfig+0x2a0>)
 8007c2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007c30:	4b58      	ldr	r3, [pc, #352]	; (8007d94 <HAL_RCC_OscConfig+0x2a4>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fe fbc3 	bl	80063c0 <HAL_InitTick>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d052      	beq.n	8007cea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	e331      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d032      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007c50:	4b4d      	ldr	r3, [pc, #308]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a4c      	ldr	r2, [pc, #304]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007c56:	f043 0301 	orr.w	r3, r3, #1
 8007c5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007c5c:	f7fe fc00 	bl	8006460 <HAL_GetTick>
 8007c60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007c64:	f7fe fbfc 	bl	8006460 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e31a      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c76:	4b44      	ldr	r3, [pc, #272]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0f0      	beq.n	8007c64 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c82:	4b41      	ldr	r3, [pc, #260]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a40      	ldr	r2, [pc, #256]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007c88:	f043 0308 	orr.w	r3, r3, #8
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	4b3e      	ldr	r3, [pc, #248]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	493b      	ldr	r1, [pc, #236]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ca0:	4b39      	ldr	r3, [pc, #228]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	4936      	ldr	r1, [pc, #216]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	604b      	str	r3, [r1, #4]
 8007cb4:	e01a      	b.n	8007cec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007cb6:	4b34      	ldr	r3, [pc, #208]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a33      	ldr	r2, [pc, #204]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007cbc:	f023 0301 	bic.w	r3, r3, #1
 8007cc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007cc2:	f7fe fbcd 	bl	8006460 <HAL_GetTick>
 8007cc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007cc8:	e008      	b.n	8007cdc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007cca:	f7fe fbc9 	bl	8006460 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d901      	bls.n	8007cdc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e2e7      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007cdc:	4b2a      	ldr	r3, [pc, #168]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1f0      	bne.n	8007cca <HAL_RCC_OscConfig+0x1da>
 8007ce8:	e000      	b.n	8007cec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007cea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d074      	beq.n	8007de2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	2b08      	cmp	r3, #8
 8007cfc:	d005      	beq.n	8007d0a <HAL_RCC_OscConfig+0x21a>
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	2b0c      	cmp	r3, #12
 8007d02:	d10e      	bne.n	8007d22 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d10b      	bne.n	8007d22 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d0a:	4b1f      	ldr	r3, [pc, #124]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d064      	beq.n	8007de0 <HAL_RCC_OscConfig+0x2f0>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d160      	bne.n	8007de0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e2c4      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d2a:	d106      	bne.n	8007d3a <HAL_RCC_OscConfig+0x24a>
 8007d2c:	4b16      	ldr	r3, [pc, #88]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a15      	ldr	r2, [pc, #84]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	e01d      	b.n	8007d76 <HAL_RCC_OscConfig+0x286>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d42:	d10c      	bne.n	8007d5e <HAL_RCC_OscConfig+0x26e>
 8007d44:	4b10      	ldr	r3, [pc, #64]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a0f      	ldr	r2, [pc, #60]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d4e:	6013      	str	r3, [r2, #0]
 8007d50:	4b0d      	ldr	r3, [pc, #52]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a0c      	ldr	r2, [pc, #48]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	e00b      	b.n	8007d76 <HAL_RCC_OscConfig+0x286>
 8007d5e:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a09      	ldr	r2, [pc, #36]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d68:	6013      	str	r3, [r2, #0]
 8007d6a:	4b07      	ldr	r3, [pc, #28]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a06      	ldr	r2, [pc, #24]	; (8007d88 <HAL_RCC_OscConfig+0x298>)
 8007d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01c      	beq.n	8007db8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7e:	f7fe fb6f 	bl	8006460 <HAL_GetTick>
 8007d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d84:	e011      	b.n	8007daa <HAL_RCC_OscConfig+0x2ba>
 8007d86:	bf00      	nop
 8007d88:	40021000 	.word	0x40021000
 8007d8c:	080153e8 	.word	0x080153e8
 8007d90:	20000000 	.word	0x20000000
 8007d94:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d98:	f7fe fb62 	bl	8006460 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b64      	cmp	r3, #100	; 0x64
 8007da4:	d901      	bls.n	8007daa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e280      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007daa:	4baf      	ldr	r3, [pc, #700]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d0f0      	beq.n	8007d98 <HAL_RCC_OscConfig+0x2a8>
 8007db6:	e014      	b.n	8007de2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db8:	f7fe fb52 	bl	8006460 <HAL_GetTick>
 8007dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007dbe:	e008      	b.n	8007dd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dc0:	f7fe fb4e 	bl	8006460 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b64      	cmp	r3, #100	; 0x64
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e26c      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007dd2:	4ba5      	ldr	r3, [pc, #660]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1f0      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x2d0>
 8007dde:	e000      	b.n	8007de2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d060      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	2b04      	cmp	r3, #4
 8007df2:	d005      	beq.n	8007e00 <HAL_RCC_OscConfig+0x310>
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	2b0c      	cmp	r3, #12
 8007df8:	d119      	bne.n	8007e2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d116      	bne.n	8007e2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e00:	4b99      	ldr	r3, [pc, #612]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <HAL_RCC_OscConfig+0x328>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e249      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e18:	4b93      	ldr	r3, [pc, #588]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	061b      	lsls	r3, r3, #24
 8007e26:	4990      	ldr	r1, [pc, #576]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e2c:	e040      	b.n	8007eb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d023      	beq.n	8007e7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e36:	4b8c      	ldr	r3, [pc, #560]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a8b      	ldr	r2, [pc, #556]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e42:	f7fe fb0d 	bl	8006460 <HAL_GetTick>
 8007e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e48:	e008      	b.n	8007e5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e4a:	f7fe fb09 	bl	8006460 <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d901      	bls.n	8007e5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e227      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e5c:	4b82      	ldr	r3, [pc, #520]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d0f0      	beq.n	8007e4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e68:	4b7f      	ldr	r3, [pc, #508]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	061b      	lsls	r3, r3, #24
 8007e76:	497c      	ldr	r1, [pc, #496]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	604b      	str	r3, [r1, #4]
 8007e7c:	e018      	b.n	8007eb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e7e:	4b7a      	ldr	r3, [pc, #488]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a79      	ldr	r2, [pc, #484]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e8a:	f7fe fae9 	bl	8006460 <HAL_GetTick>
 8007e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e90:	e008      	b.n	8007ea4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e92:	f7fe fae5 	bl	8006460 <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d901      	bls.n	8007ea4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e203      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ea4:	4b70      	ldr	r3, [pc, #448]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1f0      	bne.n	8007e92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0308 	and.w	r3, r3, #8
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d03c      	beq.n	8007f36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d01c      	beq.n	8007efe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ec4:	4b68      	ldr	r3, [pc, #416]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eca:	4a67      	ldr	r2, [pc, #412]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007ecc:	f043 0301 	orr.w	r3, r3, #1
 8007ed0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed4:	f7fe fac4 	bl	8006460 <HAL_GetTick>
 8007ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007eda:	e008      	b.n	8007eee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007edc:	f7fe fac0 	bl	8006460 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d901      	bls.n	8007eee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e1de      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007eee:	4b5e      	ldr	r3, [pc, #376]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ef4:	f003 0302 	and.w	r3, r3, #2
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0ef      	beq.n	8007edc <HAL_RCC_OscConfig+0x3ec>
 8007efc:	e01b      	b.n	8007f36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007efe:	4b5a      	ldr	r3, [pc, #360]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f04:	4a58      	ldr	r2, [pc, #352]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007f06:	f023 0301 	bic.w	r3, r3, #1
 8007f0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f0e:	f7fe faa7 	bl	8006460 <HAL_GetTick>
 8007f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f14:	e008      	b.n	8007f28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f16:	f7fe faa3 	bl	8006460 <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d901      	bls.n	8007f28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e1c1      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f28:	4b4f      	ldr	r3, [pc, #316]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1ef      	bne.n	8007f16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0304 	and.w	r3, r3, #4
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 80a6 	beq.w	8008090 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f44:	2300      	movs	r3, #0
 8007f46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007f48:	4b47      	ldr	r3, [pc, #284]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10d      	bne.n	8007f70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f54:	4b44      	ldr	r3, [pc, #272]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f58:	4a43      	ldr	r2, [pc, #268]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8007f60:	4b41      	ldr	r3, [pc, #260]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f68:	60bb      	str	r3, [r7, #8]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f70:	4b3e      	ldr	r3, [pc, #248]	; (800806c <HAL_RCC_OscConfig+0x57c>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d118      	bne.n	8007fae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f7c:	4b3b      	ldr	r3, [pc, #236]	; (800806c <HAL_RCC_OscConfig+0x57c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a3a      	ldr	r2, [pc, #232]	; (800806c <HAL_RCC_OscConfig+0x57c>)
 8007f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f88:	f7fe fa6a 	bl	8006460 <HAL_GetTick>
 8007f8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f8e:	e008      	b.n	8007fa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f90:	f7fe fa66 	bl	8006460 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e184      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fa2:	4b32      	ldr	r3, [pc, #200]	; (800806c <HAL_RCC_OscConfig+0x57c>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0f0      	beq.n	8007f90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d108      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x4d8>
 8007fb6:	4b2c      	ldr	r3, [pc, #176]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fbc:	4a2a      	ldr	r2, [pc, #168]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007fbe:	f043 0301 	orr.w	r3, r3, #1
 8007fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007fc6:	e024      	b.n	8008012 <HAL_RCC_OscConfig+0x522>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	2b05      	cmp	r3, #5
 8007fce:	d110      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x502>
 8007fd0:	4b25      	ldr	r3, [pc, #148]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd6:	4a24      	ldr	r2, [pc, #144]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007fd8:	f043 0304 	orr.w	r3, r3, #4
 8007fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007fe0:	4b21      	ldr	r3, [pc, #132]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe6:	4a20      	ldr	r2, [pc, #128]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007fe8:	f043 0301 	orr.w	r3, r3, #1
 8007fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ff0:	e00f      	b.n	8008012 <HAL_RCC_OscConfig+0x522>
 8007ff2:	4b1d      	ldr	r3, [pc, #116]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ff8:	4a1b      	ldr	r2, [pc, #108]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8007ffa:	f023 0301 	bic.w	r3, r3, #1
 8007ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008002:	4b19      	ldr	r3, [pc, #100]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 8008004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008008:	4a17      	ldr	r2, [pc, #92]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 800800a:	f023 0304 	bic.w	r3, r3, #4
 800800e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d016      	beq.n	8008048 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800801a:	f7fe fa21 	bl	8006460 <HAL_GetTick>
 800801e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008020:	e00a      	b.n	8008038 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008022:	f7fe fa1d 	bl	8006460 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008030:	4293      	cmp	r3, r2
 8008032:	d901      	bls.n	8008038 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e139      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008038:	4b0b      	ldr	r3, [pc, #44]	; (8008068 <HAL_RCC_OscConfig+0x578>)
 800803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0ed      	beq.n	8008022 <HAL_RCC_OscConfig+0x532>
 8008046:	e01a      	b.n	800807e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008048:	f7fe fa0a 	bl	8006460 <HAL_GetTick>
 800804c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800804e:	e00f      	b.n	8008070 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008050:	f7fe fa06 	bl	8006460 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	f241 3288 	movw	r2, #5000	; 0x1388
 800805e:	4293      	cmp	r3, r2
 8008060:	d906      	bls.n	8008070 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e122      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
 8008066:	bf00      	nop
 8008068:	40021000 	.word	0x40021000
 800806c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008070:	4b90      	ldr	r3, [pc, #576]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e8      	bne.n	8008050 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800807e:	7ffb      	ldrb	r3, [r7, #31]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d105      	bne.n	8008090 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008084:	4b8b      	ldr	r3, [pc, #556]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008088:	4a8a      	ldr	r2, [pc, #552]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 800808a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800808e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 8108 	beq.w	80082aa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809e:	2b02      	cmp	r3, #2
 80080a0:	f040 80d0 	bne.w	8008244 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80080a4:	4b83      	ldr	r3, [pc, #524]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f003 0203 	and.w	r2, r3, #3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d130      	bne.n	800811a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c2:	3b01      	subs	r3, #1
 80080c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d127      	bne.n	800811a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d11f      	bne.n	800811a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080e4:	2a07      	cmp	r2, #7
 80080e6:	bf14      	ite	ne
 80080e8:	2201      	movne	r2, #1
 80080ea:	2200      	moveq	r2, #0
 80080ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d113      	bne.n	800811a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fc:	085b      	lsrs	r3, r3, #1
 80080fe:	3b01      	subs	r3, #1
 8008100:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008102:	429a      	cmp	r2, r3
 8008104:	d109      	bne.n	800811a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008110:	085b      	lsrs	r3, r3, #1
 8008112:	3b01      	subs	r3, #1
 8008114:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008116:	429a      	cmp	r2, r3
 8008118:	d06e      	beq.n	80081f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	2b0c      	cmp	r3, #12
 800811e:	d069      	beq.n	80081f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008120:	4b64      	ldr	r3, [pc, #400]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d105      	bne.n	8008138 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800812c:	4b61      	ldr	r3, [pc, #388]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e0b7      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800813c:	4b5d      	ldr	r3, [pc, #372]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a5c      	ldr	r2, [pc, #368]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008146:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008148:	f7fe f98a 	bl	8006460 <HAL_GetTick>
 800814c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800814e:	e008      	b.n	8008162 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008150:	f7fe f986 	bl	8006460 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	2b02      	cmp	r3, #2
 800815c:	d901      	bls.n	8008162 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e0a4      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008162:	4b54      	ldr	r3, [pc, #336]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1f0      	bne.n	8008150 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800816e:	4b51      	ldr	r3, [pc, #324]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	4b51      	ldr	r3, [pc, #324]	; (80082b8 <HAL_RCC_OscConfig+0x7c8>)
 8008174:	4013      	ands	r3, r2
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800817e:	3a01      	subs	r2, #1
 8008180:	0112      	lsls	r2, r2, #4
 8008182:	4311      	orrs	r1, r2
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008188:	0212      	lsls	r2, r2, #8
 800818a:	4311      	orrs	r1, r2
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008190:	0852      	lsrs	r2, r2, #1
 8008192:	3a01      	subs	r2, #1
 8008194:	0552      	lsls	r2, r2, #21
 8008196:	4311      	orrs	r1, r2
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800819c:	0852      	lsrs	r2, r2, #1
 800819e:	3a01      	subs	r2, #1
 80081a0:	0652      	lsls	r2, r2, #25
 80081a2:	4311      	orrs	r1, r2
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081a8:	0912      	lsrs	r2, r2, #4
 80081aa:	0452      	lsls	r2, r2, #17
 80081ac:	430a      	orrs	r2, r1
 80081ae:	4941      	ldr	r1, [pc, #260]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80081b4:	4b3f      	ldr	r3, [pc, #252]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a3e      	ldr	r2, [pc, #248]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 80081ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80081c0:	4b3c      	ldr	r3, [pc, #240]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	4a3b      	ldr	r2, [pc, #236]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 80081c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80081cc:	f7fe f948 	bl	8006460 <HAL_GetTick>
 80081d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081d2:	e008      	b.n	80081e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081d4:	f7fe f944 	bl	8006460 <HAL_GetTick>
 80081d8:	4602      	mov	r2, r0
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d901      	bls.n	80081e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e062      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081e6:	4b33      	ldr	r3, [pc, #204]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d0f0      	beq.n	80081d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80081f2:	e05a      	b.n	80082aa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e059      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081f8:	4b2e      	ldr	r3, [pc, #184]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d152      	bne.n	80082aa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008204:	4b2b      	ldr	r3, [pc, #172]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a2a      	ldr	r2, [pc, #168]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 800820a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800820e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008210:	4b28      	ldr	r3, [pc, #160]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	4a27      	ldr	r2, [pc, #156]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800821a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800821c:	f7fe f920 	bl	8006460 <HAL_GetTick>
 8008220:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008222:	e008      	b.n	8008236 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008224:	f7fe f91c 	bl	8006460 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	2b02      	cmp	r3, #2
 8008230:	d901      	bls.n	8008236 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e03a      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008236:	4b1f      	ldr	r3, [pc, #124]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0f0      	beq.n	8008224 <HAL_RCC_OscConfig+0x734>
 8008242:	e032      	b.n	80082aa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	2b0c      	cmp	r3, #12
 8008248:	d02d      	beq.n	80082a6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800824a:	4b1a      	ldr	r3, [pc, #104]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a19      	ldr	r2, [pc, #100]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008254:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8008256:	4b17      	ldr	r3, [pc, #92]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d105      	bne.n	800826e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008262:	4b14      	ldr	r3, [pc, #80]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	4a13      	ldr	r2, [pc, #76]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008268:	f023 0303 	bic.w	r3, r3, #3
 800826c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800826e:	4b11      	ldr	r3, [pc, #68]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	4a10      	ldr	r2, [pc, #64]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 8008274:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800827c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800827e:	f7fe f8ef 	bl	8006460 <HAL_GetTick>
 8008282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008284:	e008      	b.n	8008298 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008286:	f7fe f8eb 	bl	8006460 <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	2b02      	cmp	r3, #2
 8008292:	d901      	bls.n	8008298 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e009      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008298:	4b06      	ldr	r3, [pc, #24]	; (80082b4 <HAL_RCC_OscConfig+0x7c4>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1f0      	bne.n	8008286 <HAL_RCC_OscConfig+0x796>
 80082a4:	e001      	b.n	80082aa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e000      	b.n	80082ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3720      	adds	r7, #32
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	40021000 	.word	0x40021000
 80082b8:	f99d808c 	.word	0xf99d808c

080082bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e0c8      	b.n	8008462 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082d0:	4b66      	ldr	r3, [pc, #408]	; (800846c <HAL_RCC_ClockConfig+0x1b0>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0307 	and.w	r3, r3, #7
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d910      	bls.n	8008300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082de:	4b63      	ldr	r3, [pc, #396]	; (800846c <HAL_RCC_ClockConfig+0x1b0>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f023 0207 	bic.w	r2, r3, #7
 80082e6:	4961      	ldr	r1, [pc, #388]	; (800846c <HAL_RCC_ClockConfig+0x1b0>)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ee:	4b5f      	ldr	r3, [pc, #380]	; (800846c <HAL_RCC_ClockConfig+0x1b0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0307 	and.w	r3, r3, #7
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d001      	beq.n	8008300 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e0b0      	b.n	8008462 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	d04c      	beq.n	80083a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2b03      	cmp	r3, #3
 8008312:	d107      	bne.n	8008324 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008314:	4b56      	ldr	r3, [pc, #344]	; (8008470 <HAL_RCC_ClockConfig+0x1b4>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d121      	bne.n	8008364 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e09e      	b.n	8008462 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	2b02      	cmp	r3, #2
 800832a:	d107      	bne.n	800833c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800832c:	4b50      	ldr	r3, [pc, #320]	; (8008470 <HAL_RCC_ClockConfig+0x1b4>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d115      	bne.n	8008364 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e092      	b.n	8008462 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d107      	bne.n	8008354 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008344:	4b4a      	ldr	r3, [pc, #296]	; (8008470 <HAL_RCC_ClockConfig+0x1b4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0302 	and.w	r3, r3, #2
 800834c:	2b00      	cmp	r3, #0
 800834e:	d109      	bne.n	8008364 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e086      	b.n	8008462 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008354:	4b46      	ldr	r3, [pc, #280]	; (8008470 <HAL_RCC_ClockConfig+0x1b4>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e07e      	b.n	8008462 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008364:	4b42      	ldr	r3, [pc, #264]	; (8008470 <HAL_RCC_ClockConfig+0x1b4>)
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f023 0203 	bic.w	r2, r3, #3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	493f      	ldr	r1, [pc, #252]	; (8008470 <HAL_RCC_ClockConfig+0x1b4>)
 8008372:	4313      	orrs	r3, r2
 8008374:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008376:	f7fe f873 	bl	8006460 <HAL_GetTick>
 800837a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800837c:	e00a      	b.n	8008394 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800837e:	f7fe f86f 	bl	8006460 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	f241 3288 	movw	r2, #5000	; 0x1388
 800838c:	4293      	cmp	r3, r2
 800838e:	d901      	bls.n	8008394 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e066      	b.n	8008462 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008394:	4b36      	ldr	r3, [pc, #216]	; (8008470 <HAL_RCC_ClockConfig+0x1b4>)
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f003 020c 	and.w	r2, r3, #12
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d1eb      	bne.n	800837e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d008      	beq.n	80083c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083b2:	4b2f      	ldr	r3, [pc, #188]	; (8008470 <HAL_RCC_ClockConfig+0x1b4>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	492c      	ldr	r1, [pc, #176]	; (8008470 <HAL_RCC_ClockConfig+0x1b4>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083c4:	4b29      	ldr	r3, [pc, #164]	; (800846c <HAL_RCC_ClockConfig+0x1b0>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d210      	bcs.n	80083f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083d2:	4b26      	ldr	r3, [pc, #152]	; (800846c <HAL_RCC_ClockConfig+0x1b0>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f023 0207 	bic.w	r2, r3, #7
 80083da:	4924      	ldr	r1, [pc, #144]	; (800846c <HAL_RCC_ClockConfig+0x1b0>)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	4313      	orrs	r3, r2
 80083e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083e2:	4b22      	ldr	r3, [pc, #136]	; (800846c <HAL_RCC_ClockConfig+0x1b0>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d001      	beq.n	80083f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e036      	b.n	8008462 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d008      	beq.n	8008412 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008400:	4b1b      	ldr	r3, [pc, #108]	; (8008470 <HAL_RCC_ClockConfig+0x1b4>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	4918      	ldr	r1, [pc, #96]	; (8008470 <HAL_RCC_ClockConfig+0x1b4>)
 800840e:	4313      	orrs	r3, r2
 8008410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0308 	and.w	r3, r3, #8
 800841a:	2b00      	cmp	r3, #0
 800841c:	d009      	beq.n	8008432 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800841e:	4b14      	ldr	r3, [pc, #80]	; (8008470 <HAL_RCC_ClockConfig+0x1b4>)
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	4910      	ldr	r1, [pc, #64]	; (8008470 <HAL_RCC_ClockConfig+0x1b4>)
 800842e:	4313      	orrs	r3, r2
 8008430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008432:	f000 f825 	bl	8008480 <HAL_RCC_GetSysClockFreq>
 8008436:	4602      	mov	r2, r0
 8008438:	4b0d      	ldr	r3, [pc, #52]	; (8008470 <HAL_RCC_ClockConfig+0x1b4>)
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	091b      	lsrs	r3, r3, #4
 800843e:	f003 030f 	and.w	r3, r3, #15
 8008442:	490c      	ldr	r1, [pc, #48]	; (8008474 <HAL_RCC_ClockConfig+0x1b8>)
 8008444:	5ccb      	ldrb	r3, [r1, r3]
 8008446:	f003 031f 	and.w	r3, r3, #31
 800844a:	fa22 f303 	lsr.w	r3, r2, r3
 800844e:	4a0a      	ldr	r2, [pc, #40]	; (8008478 <HAL_RCC_ClockConfig+0x1bc>)
 8008450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008452:	4b0a      	ldr	r3, [pc, #40]	; (800847c <HAL_RCC_ClockConfig+0x1c0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f7fd ffb2 	bl	80063c0 <HAL_InitTick>
 800845c:	4603      	mov	r3, r0
 800845e:	72fb      	strb	r3, [r7, #11]

  return status;
 8008460:	7afb      	ldrb	r3, [r7, #11]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	40022000 	.word	0x40022000
 8008470:	40021000 	.word	0x40021000
 8008474:	080153e8 	.word	0x080153e8
 8008478:	20000000 	.word	0x20000000
 800847c:	20000004 	.word	0x20000004

08008480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008480:	b480      	push	{r7}
 8008482:	b089      	sub	sp, #36	; 0x24
 8008484:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	61fb      	str	r3, [r7, #28]
 800848a:	2300      	movs	r3, #0
 800848c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800848e:	4b3e      	ldr	r3, [pc, #248]	; (8008588 <HAL_RCC_GetSysClockFreq+0x108>)
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f003 030c 	and.w	r3, r3, #12
 8008496:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008498:	4b3b      	ldr	r3, [pc, #236]	; (8008588 <HAL_RCC_GetSysClockFreq+0x108>)
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f003 0303 	and.w	r3, r3, #3
 80084a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d005      	beq.n	80084b4 <HAL_RCC_GetSysClockFreq+0x34>
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	2b0c      	cmp	r3, #12
 80084ac:	d121      	bne.n	80084f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d11e      	bne.n	80084f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80084b4:	4b34      	ldr	r3, [pc, #208]	; (8008588 <HAL_RCC_GetSysClockFreq+0x108>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0308 	and.w	r3, r3, #8
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d107      	bne.n	80084d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80084c0:	4b31      	ldr	r3, [pc, #196]	; (8008588 <HAL_RCC_GetSysClockFreq+0x108>)
 80084c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084c6:	0a1b      	lsrs	r3, r3, #8
 80084c8:	f003 030f 	and.w	r3, r3, #15
 80084cc:	61fb      	str	r3, [r7, #28]
 80084ce:	e005      	b.n	80084dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80084d0:	4b2d      	ldr	r3, [pc, #180]	; (8008588 <HAL_RCC_GetSysClockFreq+0x108>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	091b      	lsrs	r3, r3, #4
 80084d6:	f003 030f 	and.w	r3, r3, #15
 80084da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80084dc:	4a2b      	ldr	r2, [pc, #172]	; (800858c <HAL_RCC_GetSysClockFreq+0x10c>)
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10d      	bne.n	8008508 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80084f0:	e00a      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	d102      	bne.n	80084fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80084f8:	4b25      	ldr	r3, [pc, #148]	; (8008590 <HAL_RCC_GetSysClockFreq+0x110>)
 80084fa:	61bb      	str	r3, [r7, #24]
 80084fc:	e004      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2b08      	cmp	r3, #8
 8008502:	d101      	bne.n	8008508 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008504:	4b23      	ldr	r3, [pc, #140]	; (8008594 <HAL_RCC_GetSysClockFreq+0x114>)
 8008506:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2b0c      	cmp	r3, #12
 800850c:	d134      	bne.n	8008578 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800850e:	4b1e      	ldr	r3, [pc, #120]	; (8008588 <HAL_RCC_GetSysClockFreq+0x108>)
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2b02      	cmp	r3, #2
 800851c:	d003      	beq.n	8008526 <HAL_RCC_GetSysClockFreq+0xa6>
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2b03      	cmp	r3, #3
 8008522:	d003      	beq.n	800852c <HAL_RCC_GetSysClockFreq+0xac>
 8008524:	e005      	b.n	8008532 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008526:	4b1a      	ldr	r3, [pc, #104]	; (8008590 <HAL_RCC_GetSysClockFreq+0x110>)
 8008528:	617b      	str	r3, [r7, #20]
      break;
 800852a:	e005      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800852c:	4b19      	ldr	r3, [pc, #100]	; (8008594 <HAL_RCC_GetSysClockFreq+0x114>)
 800852e:	617b      	str	r3, [r7, #20]
      break;
 8008530:	e002      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	617b      	str	r3, [r7, #20]
      break;
 8008536:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008538:	4b13      	ldr	r3, [pc, #76]	; (8008588 <HAL_RCC_GetSysClockFreq+0x108>)
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	091b      	lsrs	r3, r3, #4
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	3301      	adds	r3, #1
 8008544:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008546:	4b10      	ldr	r3, [pc, #64]	; (8008588 <HAL_RCC_GetSysClockFreq+0x108>)
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	0a1b      	lsrs	r3, r3, #8
 800854c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	fb02 f203 	mul.w	r2, r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	fbb2 f3f3 	udiv	r3, r2, r3
 800855c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800855e:	4b0a      	ldr	r3, [pc, #40]	; (8008588 <HAL_RCC_GetSysClockFreq+0x108>)
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	0e5b      	lsrs	r3, r3, #25
 8008564:	f003 0303 	and.w	r3, r3, #3
 8008568:	3301      	adds	r3, #1
 800856a:	005b      	lsls	r3, r3, #1
 800856c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	fbb2 f3f3 	udiv	r3, r2, r3
 8008576:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008578:	69bb      	ldr	r3, [r7, #24]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3724      	adds	r7, #36	; 0x24
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	40021000 	.word	0x40021000
 800858c:	08015400 	.word	0x08015400
 8008590:	00f42400 	.word	0x00f42400
 8008594:	007a1200 	.word	0x007a1200

08008598 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008598:	b480      	push	{r7}
 800859a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800859c:	4b03      	ldr	r3, [pc, #12]	; (80085ac <HAL_RCC_GetHCLKFreq+0x14>)
 800859e:	681b      	ldr	r3, [r3, #0]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	20000000 	.word	0x20000000

080085b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80085b4:	f7ff fff0 	bl	8008598 <HAL_RCC_GetHCLKFreq>
 80085b8:	4602      	mov	r2, r0
 80085ba:	4b06      	ldr	r3, [pc, #24]	; (80085d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	0a1b      	lsrs	r3, r3, #8
 80085c0:	f003 0307 	and.w	r3, r3, #7
 80085c4:	4904      	ldr	r1, [pc, #16]	; (80085d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80085c6:	5ccb      	ldrb	r3, [r1, r3]
 80085c8:	f003 031f 	and.w	r3, r3, #31
 80085cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40021000 	.word	0x40021000
 80085d8:	080153f8 	.word	0x080153f8

080085dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80085e0:	f7ff ffda 	bl	8008598 <HAL_RCC_GetHCLKFreq>
 80085e4:	4602      	mov	r2, r0
 80085e6:	4b06      	ldr	r3, [pc, #24]	; (8008600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	0adb      	lsrs	r3, r3, #11
 80085ec:	f003 0307 	and.w	r3, r3, #7
 80085f0:	4904      	ldr	r1, [pc, #16]	; (8008604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80085f2:	5ccb      	ldrb	r3, [r1, r3]
 80085f4:	f003 031f 	and.w	r3, r3, #31
 80085f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	40021000 	.word	0x40021000
 8008604:	080153f8 	.word	0x080153f8

08008608 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008610:	2300      	movs	r3, #0
 8008612:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008614:	4b2a      	ldr	r3, [pc, #168]	; (80086c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008620:	f7ff fa02 	bl	8007a28 <HAL_PWREx_GetVoltageRange>
 8008624:	6178      	str	r0, [r7, #20]
 8008626:	e014      	b.n	8008652 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008628:	4b25      	ldr	r3, [pc, #148]	; (80086c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800862a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800862c:	4a24      	ldr	r2, [pc, #144]	; (80086c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800862e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008632:	6593      	str	r3, [r2, #88]	; 0x58
 8008634:	4b22      	ldr	r3, [pc, #136]	; (80086c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800863c:	60fb      	str	r3, [r7, #12]
 800863e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008640:	f7ff f9f2 	bl	8007a28 <HAL_PWREx_GetVoltageRange>
 8008644:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008646:	4b1e      	ldr	r3, [pc, #120]	; (80086c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864a:	4a1d      	ldr	r2, [pc, #116]	; (80086c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800864c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008650:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008658:	d10b      	bne.n	8008672 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b80      	cmp	r3, #128	; 0x80
 800865e:	d919      	bls.n	8008694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2ba0      	cmp	r3, #160	; 0xa0
 8008664:	d902      	bls.n	800866c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008666:	2302      	movs	r3, #2
 8008668:	613b      	str	r3, [r7, #16]
 800866a:	e013      	b.n	8008694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800866c:	2301      	movs	r3, #1
 800866e:	613b      	str	r3, [r7, #16]
 8008670:	e010      	b.n	8008694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b80      	cmp	r3, #128	; 0x80
 8008676:	d902      	bls.n	800867e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008678:	2303      	movs	r3, #3
 800867a:	613b      	str	r3, [r7, #16]
 800867c:	e00a      	b.n	8008694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b80      	cmp	r3, #128	; 0x80
 8008682:	d102      	bne.n	800868a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008684:	2302      	movs	r3, #2
 8008686:	613b      	str	r3, [r7, #16]
 8008688:	e004      	b.n	8008694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b70      	cmp	r3, #112	; 0x70
 800868e:	d101      	bne.n	8008694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008690:	2301      	movs	r3, #1
 8008692:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008694:	4b0b      	ldr	r3, [pc, #44]	; (80086c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f023 0207 	bic.w	r2, r3, #7
 800869c:	4909      	ldr	r1, [pc, #36]	; (80086c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80086a4:	4b07      	ldr	r3, [pc, #28]	; (80086c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0307 	and.w	r3, r3, #7
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d001      	beq.n	80086b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e000      	b.n	80086b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3718      	adds	r7, #24
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	40021000 	.word	0x40021000
 80086c4:	40022000 	.word	0x40022000

080086c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086d0:	2300      	movs	r3, #0
 80086d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086d4:	2300      	movs	r3, #0
 80086d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d041      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80086ec:	d02a      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80086ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80086f2:	d824      	bhi.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80086f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086f8:	d008      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80086fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086fe:	d81e      	bhi.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00a      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008708:	d010      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800870a:	e018      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800870c:	4b86      	ldr	r3, [pc, #536]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	4a85      	ldr	r2, [pc, #532]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008716:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008718:	e015      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	3304      	adds	r3, #4
 800871e:	2100      	movs	r1, #0
 8008720:	4618      	mov	r0, r3
 8008722:	f000 fabb 	bl	8008c9c <RCCEx_PLLSAI1_Config>
 8008726:	4603      	mov	r3, r0
 8008728:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800872a:	e00c      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3320      	adds	r3, #32
 8008730:	2100      	movs	r1, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f000 fba6 	bl	8008e84 <RCCEx_PLLSAI2_Config>
 8008738:	4603      	mov	r3, r0
 800873a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800873c:	e003      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	74fb      	strb	r3, [r7, #19]
      break;
 8008742:	e000      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008746:	7cfb      	ldrb	r3, [r7, #19]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10b      	bne.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800874c:	4b76      	ldr	r3, [pc, #472]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800874e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008752:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800875a:	4973      	ldr	r1, [pc, #460]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800875c:	4313      	orrs	r3, r2
 800875e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008762:	e001      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008764:	7cfb      	ldrb	r3, [r7, #19]
 8008766:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d041      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008778:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800877c:	d02a      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800877e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008782:	d824      	bhi.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008784:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008788:	d008      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800878a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800878e:	d81e      	bhi.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00a      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008798:	d010      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800879a:	e018      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800879c:	4b62      	ldr	r3, [pc, #392]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	4a61      	ldr	r2, [pc, #388]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80087a8:	e015      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	3304      	adds	r3, #4
 80087ae:	2100      	movs	r1, #0
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 fa73 	bl	8008c9c <RCCEx_PLLSAI1_Config>
 80087b6:	4603      	mov	r3, r0
 80087b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80087ba:	e00c      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3320      	adds	r3, #32
 80087c0:	2100      	movs	r1, #0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fb5e 	bl	8008e84 <RCCEx_PLLSAI2_Config>
 80087c8:	4603      	mov	r3, r0
 80087ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80087cc:	e003      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	74fb      	strb	r3, [r7, #19]
      break;
 80087d2:	e000      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80087d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087d6:	7cfb      	ldrb	r3, [r7, #19]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10b      	bne.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80087dc:	4b52      	ldr	r3, [pc, #328]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087ea:	494f      	ldr	r1, [pc, #316]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80087f2:	e001      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087f4:	7cfb      	ldrb	r3, [r7, #19]
 80087f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 80a0 	beq.w	8008946 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008806:	2300      	movs	r3, #0
 8008808:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800880a:	4b47      	ldr	r3, [pc, #284]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800880c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800880e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008816:	2301      	movs	r3, #1
 8008818:	e000      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800881a:	2300      	movs	r3, #0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00d      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008820:	4b41      	ldr	r3, [pc, #260]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008824:	4a40      	ldr	r2, [pc, #256]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800882a:	6593      	str	r3, [r2, #88]	; 0x58
 800882c:	4b3e      	ldr	r3, [pc, #248]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800882e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008834:	60bb      	str	r3, [r7, #8]
 8008836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008838:	2301      	movs	r3, #1
 800883a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800883c:	4b3b      	ldr	r3, [pc, #236]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a3a      	ldr	r2, [pc, #232]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008846:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008848:	f7fd fe0a 	bl	8006460 <HAL_GetTick>
 800884c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800884e:	e009      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008850:	f7fd fe06 	bl	8006460 <HAL_GetTick>
 8008854:	4602      	mov	r2, r0
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	2b02      	cmp	r3, #2
 800885c:	d902      	bls.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	74fb      	strb	r3, [r7, #19]
        break;
 8008862:	e005      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008864:	4b31      	ldr	r3, [pc, #196]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800886c:	2b00      	cmp	r3, #0
 800886e:	d0ef      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008870:	7cfb      	ldrb	r3, [r7, #19]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d15c      	bne.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008876:	4b2c      	ldr	r3, [pc, #176]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800887c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008880:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d01f      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	429a      	cmp	r2, r3
 8008892:	d019      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008894:	4b24      	ldr	r3, [pc, #144]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800889a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800889e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80088a0:	4b21      	ldr	r3, [pc, #132]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a6:	4a20      	ldr	r2, [pc, #128]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80088b0:	4b1d      	ldr	r3, [pc, #116]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b6:	4a1c      	ldr	r2, [pc, #112]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80088c0:	4a19      	ldr	r2, [pc, #100]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d016      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088d2:	f7fd fdc5 	bl	8006460 <HAL_GetTick>
 80088d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088d8:	e00b      	b.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088da:	f7fd fdc1 	bl	8006460 <HAL_GetTick>
 80088de:	4602      	mov	r2, r0
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d902      	bls.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	74fb      	strb	r3, [r7, #19]
            break;
 80088f0:	e006      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088f2:	4b0d      	ldr	r3, [pc, #52]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0ec      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008900:	7cfb      	ldrb	r3, [r7, #19]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10c      	bne.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008906:	4b08      	ldr	r3, [pc, #32]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800890c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008916:	4904      	ldr	r1, [pc, #16]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008918:	4313      	orrs	r3, r2
 800891a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800891e:	e009      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008920:	7cfb      	ldrb	r3, [r7, #19]
 8008922:	74bb      	strb	r3, [r7, #18]
 8008924:	e006      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008926:	bf00      	nop
 8008928:	40021000 	.word	0x40021000
 800892c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008930:	7cfb      	ldrb	r3, [r7, #19]
 8008932:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008934:	7c7b      	ldrb	r3, [r7, #17]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d105      	bne.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800893a:	4b9e      	ldr	r3, [pc, #632]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800893c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800893e:	4a9d      	ldr	r2, [pc, #628]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008944:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00a      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008952:	4b98      	ldr	r3, [pc, #608]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008958:	f023 0203 	bic.w	r2, r3, #3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008960:	4994      	ldr	r1, [pc, #592]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008962:	4313      	orrs	r3, r2
 8008964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008974:	4b8f      	ldr	r3, [pc, #572]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800897a:	f023 020c 	bic.w	r2, r3, #12
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008982:	498c      	ldr	r1, [pc, #560]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008984:	4313      	orrs	r3, r2
 8008986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0304 	and.w	r3, r3, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008996:	4b87      	ldr	r3, [pc, #540]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	4983      	ldr	r1, [pc, #524]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0308 	and.w	r3, r3, #8
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00a      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80089b8:	4b7e      	ldr	r3, [pc, #504]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c6:	497b      	ldr	r1, [pc, #492]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0310 	and.w	r3, r3, #16
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80089da:	4b76      	ldr	r3, [pc, #472]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089e8:	4972      	ldr	r1, [pc, #456]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0320 	and.w	r3, r3, #32
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00a      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80089fc:	4b6d      	ldr	r3, [pc, #436]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a0a:	496a      	ldr	r1, [pc, #424]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00a      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a1e:	4b65      	ldr	r3, [pc, #404]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a2c:	4961      	ldr	r1, [pc, #388]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00a      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a40:	4b5c      	ldr	r3, [pc, #368]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a4e:	4959      	ldr	r1, [pc, #356]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00a      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a62:	4b54      	ldr	r3, [pc, #336]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a70:	4950      	ldr	r1, [pc, #320]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00a      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008a84:	4b4b      	ldr	r3, [pc, #300]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a92:	4948      	ldr	r1, [pc, #288]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a94:	4313      	orrs	r3, r2
 8008a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00a      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008aa6:	4b43      	ldr	r3, [pc, #268]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab4:	493f      	ldr	r1, [pc, #252]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d028      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ac8:	4b3a      	ldr	r3, [pc, #232]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ace:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ad6:	4937      	ldr	r1, [pc, #220]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ae6:	d106      	bne.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ae8:	4b32      	ldr	r3, [pc, #200]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	4a31      	ldr	r2, [pc, #196]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008af2:	60d3      	str	r3, [r2, #12]
 8008af4:	e011      	b.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008afa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008afe:	d10c      	bne.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3304      	adds	r3, #4
 8008b04:	2101      	movs	r1, #1
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 f8c8 	bl	8008c9c <RCCEx_PLLSAI1_Config>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008b10:	7cfb      	ldrb	r3, [r7, #19]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008b16:	7cfb      	ldrb	r3, [r7, #19]
 8008b18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d028      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008b26:	4b23      	ldr	r3, [pc, #140]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b34:	491f      	ldr	r1, [pc, #124]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b44:	d106      	bne.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b46:	4b1b      	ldr	r3, [pc, #108]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	4a1a      	ldr	r2, [pc, #104]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b50:	60d3      	str	r3, [r2, #12]
 8008b52:	e011      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b5c:	d10c      	bne.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3304      	adds	r3, #4
 8008b62:	2101      	movs	r1, #1
 8008b64:	4618      	mov	r0, r3
 8008b66:	f000 f899 	bl	8008c9c <RCCEx_PLLSAI1_Config>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008b6e:	7cfb      	ldrb	r3, [r7, #19]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008b74:	7cfb      	ldrb	r3, [r7, #19]
 8008b76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d02b      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b84:	4b0b      	ldr	r3, [pc, #44]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b92:	4908      	ldr	r1, [pc, #32]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b94:	4313      	orrs	r3, r2
 8008b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ba2:	d109      	bne.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ba4:	4b03      	ldr	r3, [pc, #12]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	4a02      	ldr	r2, [pc, #8]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bae:	60d3      	str	r3, [r2, #12]
 8008bb0:	e014      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008bb2:	bf00      	nop
 8008bb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bc0:	d10c      	bne.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 f867 	bl	8008c9c <RCCEx_PLLSAI1_Config>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008bd2:	7cfb      	ldrb	r3, [r7, #19]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008bd8:	7cfb      	ldrb	r3, [r7, #19]
 8008bda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d02f      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008be8:	4b2b      	ldr	r3, [pc, #172]	; (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bf6:	4928      	ldr	r1, [pc, #160]	; (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c06:	d10d      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	2102      	movs	r1, #2
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 f844 	bl	8008c9c <RCCEx_PLLSAI1_Config>
 8008c14:	4603      	mov	r3, r0
 8008c16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008c18:	7cfb      	ldrb	r3, [r7, #19]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d014      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008c1e:	7cfb      	ldrb	r3, [r7, #19]
 8008c20:	74bb      	strb	r3, [r7, #18]
 8008c22:	e011      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c2c:	d10c      	bne.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	3320      	adds	r3, #32
 8008c32:	2102      	movs	r1, #2
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 f925 	bl	8008e84 <RCCEx_PLLSAI2_Config>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008c3e:	7cfb      	ldrb	r3, [r7, #19]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008c44:	7cfb      	ldrb	r3, [r7, #19]
 8008c46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00a      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008c54:	4b10      	ldr	r3, [pc, #64]	; (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c62:	490d      	ldr	r1, [pc, #52]	; (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008c64:	4313      	orrs	r3, r2
 8008c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00b      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c76:	4b08      	ldr	r3, [pc, #32]	; (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c86:	4904      	ldr	r1, [pc, #16]	; (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008c8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	40021000 	.word	0x40021000

08008c9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008caa:	4b75      	ldr	r3, [pc, #468]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	f003 0303 	and.w	r3, r3, #3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d018      	beq.n	8008ce8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008cb6:	4b72      	ldr	r3, [pc, #456]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	f003 0203 	and.w	r2, r3, #3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d10d      	bne.n	8008ce2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d009      	beq.n	8008ce2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008cce:	4b6c      	ldr	r3, [pc, #432]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	091b      	lsrs	r3, r3, #4
 8008cd4:	f003 0307 	and.w	r3, r3, #7
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
       ||
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d047      	beq.n	8008d72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	73fb      	strb	r3, [r7, #15]
 8008ce6:	e044      	b.n	8008d72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d018      	beq.n	8008d22 <RCCEx_PLLSAI1_Config+0x86>
 8008cf0:	2b03      	cmp	r3, #3
 8008cf2:	d825      	bhi.n	8008d40 <RCCEx_PLLSAI1_Config+0xa4>
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d002      	beq.n	8008cfe <RCCEx_PLLSAI1_Config+0x62>
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d009      	beq.n	8008d10 <RCCEx_PLLSAI1_Config+0x74>
 8008cfc:	e020      	b.n	8008d40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008cfe:	4b60      	ldr	r3, [pc, #384]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0302 	and.w	r3, r3, #2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d11d      	bne.n	8008d46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d0e:	e01a      	b.n	8008d46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008d10:	4b5b      	ldr	r3, [pc, #364]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d116      	bne.n	8008d4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d20:	e013      	b.n	8008d4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008d22:	4b57      	ldr	r3, [pc, #348]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10f      	bne.n	8008d4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008d2e:	4b54      	ldr	r3, [pc, #336]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d109      	bne.n	8008d4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008d3e:	e006      	b.n	8008d4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	73fb      	strb	r3, [r7, #15]
      break;
 8008d44:	e004      	b.n	8008d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008d46:	bf00      	nop
 8008d48:	e002      	b.n	8008d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008d4a:	bf00      	nop
 8008d4c:	e000      	b.n	8008d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008d4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10d      	bne.n	8008d72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008d56:	4b4a      	ldr	r3, [pc, #296]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6819      	ldr	r1, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	011b      	lsls	r3, r3, #4
 8008d6a:	430b      	orrs	r3, r1
 8008d6c:	4944      	ldr	r1, [pc, #272]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d17d      	bne.n	8008e74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008d78:	4b41      	ldr	r3, [pc, #260]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a40      	ldr	r2, [pc, #256]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d84:	f7fd fb6c 	bl	8006460 <HAL_GetTick>
 8008d88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008d8a:	e009      	b.n	8008da0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d8c:	f7fd fb68 	bl	8006460 <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d902      	bls.n	8008da0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	73fb      	strb	r3, [r7, #15]
        break;
 8008d9e:	e005      	b.n	8008dac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008da0:	4b37      	ldr	r3, [pc, #220]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1ef      	bne.n	8008d8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d160      	bne.n	8008e74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d111      	bne.n	8008ddc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008db8:	4b31      	ldr	r3, [pc, #196]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	6892      	ldr	r2, [r2, #8]
 8008dc8:	0211      	lsls	r1, r2, #8
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	68d2      	ldr	r2, [r2, #12]
 8008dce:	0912      	lsrs	r2, r2, #4
 8008dd0:	0452      	lsls	r2, r2, #17
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	492a      	ldr	r1, [pc, #168]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	610b      	str	r3, [r1, #16]
 8008dda:	e027      	b.n	8008e2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d112      	bne.n	8008e08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008de2:	4b27      	ldr	r3, [pc, #156]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008dea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	6892      	ldr	r2, [r2, #8]
 8008df2:	0211      	lsls	r1, r2, #8
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	6912      	ldr	r2, [r2, #16]
 8008df8:	0852      	lsrs	r2, r2, #1
 8008dfa:	3a01      	subs	r2, #1
 8008dfc:	0552      	lsls	r2, r2, #21
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	491f      	ldr	r1, [pc, #124]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	610b      	str	r3, [r1, #16]
 8008e06:	e011      	b.n	8008e2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008e08:	4b1d      	ldr	r3, [pc, #116]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008e10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	6892      	ldr	r2, [r2, #8]
 8008e18:	0211      	lsls	r1, r2, #8
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	6952      	ldr	r2, [r2, #20]
 8008e1e:	0852      	lsrs	r2, r2, #1
 8008e20:	3a01      	subs	r2, #1
 8008e22:	0652      	lsls	r2, r2, #25
 8008e24:	430a      	orrs	r2, r1
 8008e26:	4916      	ldr	r1, [pc, #88]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008e2c:	4b14      	ldr	r3, [pc, #80]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a13      	ldr	r2, [pc, #76]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e38:	f7fd fb12 	bl	8006460 <HAL_GetTick>
 8008e3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008e3e:	e009      	b.n	8008e54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e40:	f7fd fb0e 	bl	8006460 <HAL_GetTick>
 8008e44:	4602      	mov	r2, r0
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d902      	bls.n	8008e54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	73fb      	strb	r3, [r7, #15]
          break;
 8008e52:	e005      	b.n	8008e60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008e54:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0ef      	beq.n	8008e40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d106      	bne.n	8008e74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008e66:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e68:	691a      	ldr	r2, [r3, #16]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	4904      	ldr	r1, [pc, #16]	; (8008e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e70:	4313      	orrs	r3, r2
 8008e72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	40021000 	.word	0x40021000

08008e84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008e92:	4b6a      	ldr	r3, [pc, #424]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f003 0303 	and.w	r3, r3, #3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d018      	beq.n	8008ed0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008e9e:	4b67      	ldr	r3, [pc, #412]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	f003 0203 	and.w	r2, r3, #3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d10d      	bne.n	8008eca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
       ||
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d009      	beq.n	8008eca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008eb6:	4b61      	ldr	r3, [pc, #388]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	091b      	lsrs	r3, r3, #4
 8008ebc:	f003 0307 	and.w	r3, r3, #7
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
       ||
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d047      	beq.n	8008f5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	73fb      	strb	r3, [r7, #15]
 8008ece:	e044      	b.n	8008f5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d018      	beq.n	8008f0a <RCCEx_PLLSAI2_Config+0x86>
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d825      	bhi.n	8008f28 <RCCEx_PLLSAI2_Config+0xa4>
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d002      	beq.n	8008ee6 <RCCEx_PLLSAI2_Config+0x62>
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d009      	beq.n	8008ef8 <RCCEx_PLLSAI2_Config+0x74>
 8008ee4:	e020      	b.n	8008f28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008ee6:	4b55      	ldr	r3, [pc, #340]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 0302 	and.w	r3, r3, #2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d11d      	bne.n	8008f2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ef6:	e01a      	b.n	8008f2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008ef8:	4b50      	ldr	r3, [pc, #320]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d116      	bne.n	8008f32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f08:	e013      	b.n	8008f32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008f0a:	4b4c      	ldr	r3, [pc, #304]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10f      	bne.n	8008f36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008f16:	4b49      	ldr	r3, [pc, #292]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d109      	bne.n	8008f36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f26:	e006      	b.n	8008f36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f2c:	e004      	b.n	8008f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008f2e:	bf00      	nop
 8008f30:	e002      	b.n	8008f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008f32:	bf00      	nop
 8008f34:	e000      	b.n	8008f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008f36:	bf00      	nop
    }

    if(status == HAL_OK)
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10d      	bne.n	8008f5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008f3e:	4b3f      	ldr	r3, [pc, #252]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6819      	ldr	r1, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	011b      	lsls	r3, r3, #4
 8008f52:	430b      	orrs	r3, r1
 8008f54:	4939      	ldr	r1, [pc, #228]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d167      	bne.n	8009030 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008f60:	4b36      	ldr	r3, [pc, #216]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a35      	ldr	r2, [pc, #212]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f6c:	f7fd fa78 	bl	8006460 <HAL_GetTick>
 8008f70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f72:	e009      	b.n	8008f88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008f74:	f7fd fa74 	bl	8006460 <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d902      	bls.n	8008f88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	73fb      	strb	r3, [r7, #15]
        break;
 8008f86:	e005      	b.n	8008f94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f88:	4b2c      	ldr	r3, [pc, #176]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1ef      	bne.n	8008f74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d14a      	bne.n	8009030 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d111      	bne.n	8008fc4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008fa0:	4b26      	ldr	r3, [pc, #152]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008fa2:	695b      	ldr	r3, [r3, #20]
 8008fa4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	6892      	ldr	r2, [r2, #8]
 8008fb0:	0211      	lsls	r1, r2, #8
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	68d2      	ldr	r2, [r2, #12]
 8008fb6:	0912      	lsrs	r2, r2, #4
 8008fb8:	0452      	lsls	r2, r2, #17
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	491f      	ldr	r1, [pc, #124]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	614b      	str	r3, [r1, #20]
 8008fc2:	e011      	b.n	8008fe8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008fc4:	4b1d      	ldr	r3, [pc, #116]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008fc6:	695b      	ldr	r3, [r3, #20]
 8008fc8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008fcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	6892      	ldr	r2, [r2, #8]
 8008fd4:	0211      	lsls	r1, r2, #8
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	6912      	ldr	r2, [r2, #16]
 8008fda:	0852      	lsrs	r2, r2, #1
 8008fdc:	3a01      	subs	r2, #1
 8008fde:	0652      	lsls	r2, r2, #25
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	4916      	ldr	r1, [pc, #88]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008fe8:	4b14      	ldr	r3, [pc, #80]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a13      	ldr	r2, [pc, #76]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ff2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ff4:	f7fd fa34 	bl	8006460 <HAL_GetTick>
 8008ff8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008ffa:	e009      	b.n	8009010 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008ffc:	f7fd fa30 	bl	8006460 <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b02      	cmp	r3, #2
 8009008:	d902      	bls.n	8009010 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	73fb      	strb	r3, [r7, #15]
          break;
 800900e:	e005      	b.n	800901c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009010:	4b0a      	ldr	r3, [pc, #40]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0ef      	beq.n	8008ffc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d106      	bne.n	8009030 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009022:	4b06      	ldr	r3, [pc, #24]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009024:	695a      	ldr	r2, [r3, #20]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	4904      	ldr	r1, [pc, #16]	; (800903c <RCCEx_PLLSAI2_Config+0x1b8>)
 800902c:	4313      	orrs	r3, r2
 800902e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009030:	7bfb      	ldrb	r3, [r7, #15]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	40021000 	.word	0x40021000

08009040 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e03c      	b.n	80090cc <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d106      	bne.n	800906c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7f8 fc78 	bl	800195c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2202      	movs	r2, #2
 8009070:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f022 0201 	bic.w	r2, r2, #1
 8009082:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f909 	bl	800929c <USART_SetConfig>
 800908a:	4603      	mov	r3, r0
 800908c:	2b01      	cmp	r3, #1
 800908e:	d101      	bne.n	8009094 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e01b      	b.n	80090cc <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80090a2:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689a      	ldr	r2, [r3, #8]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090b2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0201 	orr.w	r2, r2, #1
 80090c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fa3f 	bl	8009548 <USART_CheckIdleState>
 80090ca:	4603      	mov	r3, r0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b08a      	sub	sp, #40	; 0x28
 80090d8:	af02      	add	r7, sp, #8
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	4613      	mov	r3, r2
 80090e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	f040 809a 	bne.w	8009226 <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <HAL_USART_Transmit+0x2a>
 80090f8:	88fb      	ldrh	r3, [r7, #6]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d101      	bne.n	8009102 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e092      	b.n	8009228 <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009108:	2b01      	cmp	r3, #1
 800910a:	d101      	bne.n	8009110 <HAL_USART_Transmit+0x3c>
 800910c:	2302      	movs	r3, #2
 800910e:	e08b      	b.n	8009228 <HAL_USART_Transmit+0x154>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2212      	movs	r2, #18
 8009122:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009126:	f7fd f99b 	bl	8006460 <HAL_GetTick>
 800912a:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	88fa      	ldrh	r2, [r7, #6]
 8009130:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	88fa      	ldrh	r2, [r7, #6]
 8009136:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009140:	d108      	bne.n	8009154 <HAL_USART_Transmit+0x80>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d104      	bne.n	8009154 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 800914a:	2300      	movs	r3, #0
 800914c:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	61bb      	str	r3, [r7, #24]
 8009152:	e003      	b.n	800915c <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8009158:	2300      	movs	r3, #0
 800915a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800915c:	e02b      	b.n	80091b6 <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2200      	movs	r2, #0
 8009166:	2180      	movs	r1, #128	; 0x80
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 f861 	bl	8009230 <USART_WaitOnFlagUntilTimeout>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e057      	b.n	8009228 <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10b      	bne.n	8009196 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	881a      	ldrh	r2, [r3, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800918a:	b292      	uxth	r2, r2
 800918c:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	3302      	adds	r3, #2
 8009192:	61bb      	str	r3, [r7, #24]
 8009194:	e008      	b.n	80091a8 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	781a      	ldrb	r2, [r3, #0]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	b292      	uxth	r2, r2
 80091a0:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	3301      	adds	r3, #1
 80091a6:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1ce      	bne.n	800915e <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	2200      	movs	r2, #0
 80091c8:	2140      	movs	r1, #64	; 0x40
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 f830 	bl	8009230 <USART_WaitOnFlagUntilTimeout>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e026      	b.n	8009228 <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2240      	movs	r2, #64	; 0x40
 80091e0:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2208      	movs	r2, #8
 80091e8:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	8b1b      	ldrh	r3, [r3, #24]
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f042 0208 	orr.w	r2, r2, #8
 80091fa:	b292      	uxth	r2, r2
 80091fc:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	8b1b      	ldrh	r3, [r3, #24]
 8009204:	b29a      	uxth	r2, r3
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0210 	orr.w	r2, r2, #16
 800920e:	b292      	uxth	r2, r2
 8009210:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	e000      	b.n	8009228 <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 8009226:	2302      	movs	r3, #2
  }
}
 8009228:	4618      	mov	r0, r3
 800922a:	3720      	adds	r7, #32
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	4613      	mov	r3, r2
 800923e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009240:	e018      	b.n	8009274 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009248:	d014      	beq.n	8009274 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800924a:	f7fd f909 	bl	8006460 <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	69ba      	ldr	r2, [r7, #24]
 8009256:	429a      	cmp	r2, r3
 8009258:	d302      	bcc.n	8009260 <USART_WaitOnFlagUntilTimeout+0x30>
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e00f      	b.n	8009294 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	69da      	ldr	r2, [r3, #28]
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	4013      	ands	r3, r2
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	429a      	cmp	r2, r3
 8009282:	bf0c      	ite	eq
 8009284:	2301      	moveq	r3, #1
 8009286:	2300      	movne	r3, #0
 8009288:	b2db      	uxtb	r3, r3
 800928a:	461a      	mov	r2, r3
 800928c:	79fb      	ldrb	r3, [r7, #7]
 800928e:	429a      	cmp	r2, r3
 8009290:	d0d7      	beq.n	8009242 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80092a8:	2300      	movs	r3, #0
 80092aa:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	431a      	orrs	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	4b9a      	ldr	r3, [pc, #616]	; (8009534 <USART_SetConfig+0x298>)
 80092ca:	4013      	ands	r3, r2
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	6812      	ldr	r2, [r2, #0]
 80092d0:	6979      	ldr	r1, [r7, #20]
 80092d2:	430b      	orrs	r3, r1
 80092d4:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80092d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092da:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a1b      	ldr	r3, [r3, #32]
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	699a      	ldr	r2, [r3, #24]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	430a      	orrs	r2, r1
 8009312:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a87      	ldr	r2, [pc, #540]	; (8009538 <USART_SetConfig+0x29c>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d121      	bne.n	8009362 <USART_SetConfig+0xc6>
 800931e:	4b87      	ldr	r3, [pc, #540]	; (800953c <USART_SetConfig+0x2a0>)
 8009320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009324:	f003 0303 	and.w	r3, r3, #3
 8009328:	2b03      	cmp	r3, #3
 800932a:	d817      	bhi.n	800935c <USART_SetConfig+0xc0>
 800932c:	a201      	add	r2, pc, #4	; (adr r2, 8009334 <USART_SetConfig+0x98>)
 800932e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009332:	bf00      	nop
 8009334:	08009345 	.word	0x08009345
 8009338:	08009351 	.word	0x08009351
 800933c:	0800934b 	.word	0x0800934b
 8009340:	08009357 	.word	0x08009357
 8009344:	2301      	movs	r3, #1
 8009346:	77fb      	strb	r3, [r7, #31]
 8009348:	e06b      	b.n	8009422 <USART_SetConfig+0x186>
 800934a:	2302      	movs	r3, #2
 800934c:	77fb      	strb	r3, [r7, #31]
 800934e:	e068      	b.n	8009422 <USART_SetConfig+0x186>
 8009350:	2304      	movs	r3, #4
 8009352:	77fb      	strb	r3, [r7, #31]
 8009354:	e065      	b.n	8009422 <USART_SetConfig+0x186>
 8009356:	2308      	movs	r3, #8
 8009358:	77fb      	strb	r3, [r7, #31]
 800935a:	e062      	b.n	8009422 <USART_SetConfig+0x186>
 800935c:	2310      	movs	r3, #16
 800935e:	77fb      	strb	r3, [r7, #31]
 8009360:	e05f      	b.n	8009422 <USART_SetConfig+0x186>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a76      	ldr	r2, [pc, #472]	; (8009540 <USART_SetConfig+0x2a4>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d132      	bne.n	80093d2 <USART_SetConfig+0x136>
 800936c:	4b73      	ldr	r3, [pc, #460]	; (800953c <USART_SetConfig+0x2a0>)
 800936e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009372:	f003 030c 	and.w	r3, r3, #12
 8009376:	2b0c      	cmp	r3, #12
 8009378:	d828      	bhi.n	80093cc <USART_SetConfig+0x130>
 800937a:	a201      	add	r2, pc, #4	; (adr r2, 8009380 <USART_SetConfig+0xe4>)
 800937c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009380:	080093b5 	.word	0x080093b5
 8009384:	080093cd 	.word	0x080093cd
 8009388:	080093cd 	.word	0x080093cd
 800938c:	080093cd 	.word	0x080093cd
 8009390:	080093c1 	.word	0x080093c1
 8009394:	080093cd 	.word	0x080093cd
 8009398:	080093cd 	.word	0x080093cd
 800939c:	080093cd 	.word	0x080093cd
 80093a0:	080093bb 	.word	0x080093bb
 80093a4:	080093cd 	.word	0x080093cd
 80093a8:	080093cd 	.word	0x080093cd
 80093ac:	080093cd 	.word	0x080093cd
 80093b0:	080093c7 	.word	0x080093c7
 80093b4:	2300      	movs	r3, #0
 80093b6:	77fb      	strb	r3, [r7, #31]
 80093b8:	e033      	b.n	8009422 <USART_SetConfig+0x186>
 80093ba:	2302      	movs	r3, #2
 80093bc:	77fb      	strb	r3, [r7, #31]
 80093be:	e030      	b.n	8009422 <USART_SetConfig+0x186>
 80093c0:	2304      	movs	r3, #4
 80093c2:	77fb      	strb	r3, [r7, #31]
 80093c4:	e02d      	b.n	8009422 <USART_SetConfig+0x186>
 80093c6:	2308      	movs	r3, #8
 80093c8:	77fb      	strb	r3, [r7, #31]
 80093ca:	e02a      	b.n	8009422 <USART_SetConfig+0x186>
 80093cc:	2310      	movs	r3, #16
 80093ce:	77fb      	strb	r3, [r7, #31]
 80093d0:	e027      	b.n	8009422 <USART_SetConfig+0x186>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a5b      	ldr	r2, [pc, #364]	; (8009544 <USART_SetConfig+0x2a8>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d120      	bne.n	800941e <USART_SetConfig+0x182>
 80093dc:	4b57      	ldr	r3, [pc, #348]	; (800953c <USART_SetConfig+0x2a0>)
 80093de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80093e6:	2b30      	cmp	r3, #48	; 0x30
 80093e8:	d013      	beq.n	8009412 <USART_SetConfig+0x176>
 80093ea:	2b30      	cmp	r3, #48	; 0x30
 80093ec:	d814      	bhi.n	8009418 <USART_SetConfig+0x17c>
 80093ee:	2b20      	cmp	r3, #32
 80093f0:	d009      	beq.n	8009406 <USART_SetConfig+0x16a>
 80093f2:	2b20      	cmp	r3, #32
 80093f4:	d810      	bhi.n	8009418 <USART_SetConfig+0x17c>
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d002      	beq.n	8009400 <USART_SetConfig+0x164>
 80093fa:	2b10      	cmp	r3, #16
 80093fc:	d006      	beq.n	800940c <USART_SetConfig+0x170>
 80093fe:	e00b      	b.n	8009418 <USART_SetConfig+0x17c>
 8009400:	2300      	movs	r3, #0
 8009402:	77fb      	strb	r3, [r7, #31]
 8009404:	e00d      	b.n	8009422 <USART_SetConfig+0x186>
 8009406:	2302      	movs	r3, #2
 8009408:	77fb      	strb	r3, [r7, #31]
 800940a:	e00a      	b.n	8009422 <USART_SetConfig+0x186>
 800940c:	2304      	movs	r3, #4
 800940e:	77fb      	strb	r3, [r7, #31]
 8009410:	e007      	b.n	8009422 <USART_SetConfig+0x186>
 8009412:	2308      	movs	r3, #8
 8009414:	77fb      	strb	r3, [r7, #31]
 8009416:	e004      	b.n	8009422 <USART_SetConfig+0x186>
 8009418:	2310      	movs	r3, #16
 800941a:	77fb      	strb	r3, [r7, #31]
 800941c:	e001      	b.n	8009422 <USART_SetConfig+0x186>
 800941e:	2310      	movs	r3, #16
 8009420:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8009422:	7ffb      	ldrb	r3, [r7, #31]
 8009424:	2b08      	cmp	r3, #8
 8009426:	d85a      	bhi.n	80094de <USART_SetConfig+0x242>
 8009428:	a201      	add	r2, pc, #4	; (adr r2, 8009430 <USART_SetConfig+0x194>)
 800942a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942e:	bf00      	nop
 8009430:	08009455 	.word	0x08009455
 8009434:	08009473 	.word	0x08009473
 8009438:	08009491 	.word	0x08009491
 800943c:	080094df 	.word	0x080094df
 8009440:	080094ab 	.word	0x080094ab
 8009444:	080094df 	.word	0x080094df
 8009448:	080094df 	.word	0x080094df
 800944c:	080094df 	.word	0x080094df
 8009450:	080094c9 	.word	0x080094c9
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8009454:	f7ff f8ac 	bl	80085b0 <HAL_RCC_GetPCLK1Freq>
 8009458:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	005a      	lsls	r2, r3, #1
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	085b      	lsrs	r3, r3, #1
 8009464:	441a      	add	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	fbb2 f3f3 	udiv	r3, r2, r3
 800946e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8009470:	e038      	b.n	80094e4 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8009472:	f7ff f8b3 	bl	80085dc <HAL_RCC_GetPCLK2Freq>
 8009476:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	005a      	lsls	r2, r3, #1
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	085b      	lsrs	r3, r3, #1
 8009482:	441a      	add	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	fbb2 f3f3 	udiv	r3, r2, r3
 800948c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800948e:	e029      	b.n	80094e4 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	085b      	lsrs	r3, r3, #1
 8009496:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800949a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	6852      	ldr	r2, [r2, #4]
 80094a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80094a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80094a8:	e01c      	b.n	80094e4 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80094aa:	f7fe ffe9 	bl	8008480 <HAL_RCC_GetSysClockFreq>
 80094ae:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	005a      	lsls	r2, r3, #1
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	085b      	lsrs	r3, r3, #1
 80094ba:	441a      	add	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80094c6:	e00d      	b.n	80094e4 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	085b      	lsrs	r3, r3, #1
 80094ce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80094dc:	e002      	b.n	80094e4 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	77bb      	strb	r3, [r7, #30]
      break;
 80094e2:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	2b0f      	cmp	r3, #15
 80094e8:	d916      	bls.n	8009518 <USART_SetConfig+0x27c>
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094f0:	d212      	bcs.n	8009518 <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	f023 030f 	bic.w	r3, r3, #15
 80094fa:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	085b      	lsrs	r3, r3, #1
 8009500:	b29b      	uxth	r3, r3
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	b29a      	uxth	r2, r3
 8009508:	89fb      	ldrh	r3, [r7, #14]
 800950a:	4313      	orrs	r3, r2
 800950c:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	89fa      	ldrh	r2, [r7, #14]
 8009514:	60da      	str	r2, [r3, #12]
 8009516:	e001      	b.n	800951c <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8009528:	7fbb      	ldrb	r3, [r7, #30]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3720      	adds	r7, #32
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	efff69f3 	.word	0xefff69f3
 8009538:	40013800 	.word	0x40013800
 800953c:	40021000 	.word	0x40021000
 8009540:	40004400 	.word	0x40004400
 8009544:	40004800 	.word	0x40004800

08009548 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af02      	add	r7, sp, #8
 800954e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009556:	f7fc ff83 	bl	8006460 <HAL_GetTick>
 800955a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0308 	and.w	r3, r3, #8
 8009566:	2b08      	cmp	r3, #8
 8009568:	d10e      	bne.n	8009588 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800956a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff fe59 	bl	8009230 <USART_WaitOnFlagUntilTimeout>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009584:	2303      	movs	r3, #3
 8009586:	e01e      	b.n	80095c6 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 0304 	and.w	r3, r3, #4
 8009592:	2b04      	cmp	r3, #4
 8009594:	d10e      	bne.n	80095b4 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7ff fe43 	bl	8009230 <USART_WaitOnFlagUntilTimeout>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	e008      	b.n	80095c6 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d009      	beq.n	80095f4 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 80095e0:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80095e2:	461a      	mov	r2, r3
        err.type, err.code);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80095ea:	6839      	ldr	r1, [r7, #0]
 80095ec:	4806      	ldr	r0, [pc, #24]	; (8009608 <ai_log_err+0x38>)
 80095ee:	f008 fbe9 	bl	8011dc4 <iprintf>
 80095f2:	e008      	b.n	8009606 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80095f4:	793b      	ldrb	r3, [r7, #4]
 80095f6:	4619      	mov	r1, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80095fe:	461a      	mov	r2, r3
 8009600:	4802      	ldr	r0, [pc, #8]	; (800960c <ai_log_err+0x3c>)
 8009602:	f008 fbdf 	bl	8011dc4 <iprintf>

  do {} while (1);
 8009606:	e7fe      	b.n	8009606 <ai_log_err+0x36>
 8009608:	08014c98 	.word	0x08014c98
 800960c:	08014ccc 	.word	0x08014ccc

08009610 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_language_classification_create_and_init(&language_classification, act_addr, NULL);
 8009618:	2200      	movs	r2, #0
 800961a:	6879      	ldr	r1, [r7, #4]
 800961c:	4828      	ldr	r0, [pc, #160]	; (80096c0 <ai_boostrap+0xb0>)
 800961e:	f000 fba7 	bl	8009d70 <ai_language_classification_create_and_init>
 8009622:	4603      	mov	r3, r0
 8009624:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8009626:	7b3b      	ldrb	r3, [r7, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d006      	beq.n	800963a <ai_boostrap+0x2a>
    ai_log_err(err, "ai_language_classification_create_and_init");
 800962c:	4925      	ldr	r1, [pc, #148]	; (80096c4 <ai_boostrap+0xb4>)
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f7ff ffce 	bl	80095d0 <ai_log_err>
    return -1;
 8009634:	f04f 33ff 	mov.w	r3, #4294967295
 8009638:	e03e      	b.n	80096b8 <ai_boostrap+0xa8>
  }

  ai_input = ai_language_classification_inputs_get(language_classification, NULL);
 800963a:	4b21      	ldr	r3, [pc, #132]	; (80096c0 <ai_boostrap+0xb0>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2100      	movs	r1, #0
 8009640:	4618      	mov	r0, r3
 8009642:	f000 fc09 	bl	8009e58 <ai_language_classification_inputs_get>
 8009646:	4603      	mov	r3, r0
 8009648:	4a1f      	ldr	r2, [pc, #124]	; (80096c8 <ai_boostrap+0xb8>)
 800964a:	6013      	str	r3, [r2, #0]
  ai_output = ai_language_classification_outputs_get(language_classification, NULL);
 800964c:	4b1c      	ldr	r3, [pc, #112]	; (80096c0 <ai_boostrap+0xb0>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2100      	movs	r1, #0
 8009652:	4618      	mov	r0, r3
 8009654:	f000 fc1a 	bl	8009e8c <ai_language_classification_outputs_get>
 8009658:	4603      	mov	r3, r0
 800965a:	4a1c      	ldr	r2, [pc, #112]	; (80096cc <ai_boostrap+0xbc>)
 800965c:	6013      	str	r3, [r2, #0]
   */
  for (int idx=0; idx < AI_LANGUAGE_CLASSIFICATION_IN_NUM; idx++) {
	data_ins[idx] = ai_input[idx].data;
  }
#else
  for (int idx=0; idx < AI_LANGUAGE_CLASSIFICATION_IN_NUM; idx++) {
 800965e:	2300      	movs	r3, #0
 8009660:	617b      	str	r3, [r7, #20]
 8009662:	e00f      	b.n	8009684 <ai_boostrap+0x74>
	  ai_input[idx].data = data_ins[idx];
 8009664:	4b18      	ldr	r3, [pc, #96]	; (80096c8 <ai_boostrap+0xb8>)
 8009666:	6819      	ldr	r1, [r3, #0]
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	4613      	mov	r3, r2
 800966c:	00db      	lsls	r3, r3, #3
 800966e:	1a9b      	subs	r3, r3, r2
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	440b      	add	r3, r1
 8009674:	4916      	ldr	r1, [pc, #88]	; (80096d0 <ai_boostrap+0xc0>)
 8009676:	697a      	ldr	r2, [r7, #20]
 8009678:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800967c:	605a      	str	r2, [r3, #4]
  for (int idx=0; idx < AI_LANGUAGE_CLASSIFICATION_IN_NUM; idx++) {
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	3301      	adds	r3, #1
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2b00      	cmp	r3, #0
 8009688:	ddec      	ble.n	8009664 <ai_boostrap+0x54>
   */
  for (int idx=0; idx < AI_LANGUAGE_CLASSIFICATION_OUT_NUM; idx++) {
	data_outs[idx] = ai_output[idx].data;
  }
#else
  for (int idx=0; idx < AI_LANGUAGE_CLASSIFICATION_OUT_NUM; idx++) {
 800968a:	2300      	movs	r3, #0
 800968c:	613b      	str	r3, [r7, #16]
 800968e:	e00f      	b.n	80096b0 <ai_boostrap+0xa0>
	ai_output[idx].data = data_outs[idx];
 8009690:	4b0e      	ldr	r3, [pc, #56]	; (80096cc <ai_boostrap+0xbc>)
 8009692:	6819      	ldr	r1, [r3, #0]
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	4613      	mov	r3, r2
 8009698:	00db      	lsls	r3, r3, #3
 800969a:	1a9b      	subs	r3, r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	440b      	add	r3, r1
 80096a0:	490c      	ldr	r1, [pc, #48]	; (80096d4 <ai_boostrap+0xc4>)
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80096a8:	605a      	str	r2, [r3, #4]
  for (int idx=0; idx < AI_LANGUAGE_CLASSIFICATION_OUT_NUM; idx++) {
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	3301      	adds	r3, #1
 80096ae:	613b      	str	r3, [r7, #16]
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	ddec      	ble.n	8009690 <ai_boostrap+0x80>
  }
#endif

  return 0;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	2000aae0 	.word	0x2000aae0
 80096c4:	08014cfc 	.word	0x08014cfc
 80096c8:	2000aae4 	.word	0x2000aae4
 80096cc:	2000aae8 	.word	0x2000aae8
 80096d0:	2000000c 	.word	0x2000000c
 80096d4:	20000010 	.word	0x20000010

080096d8 <ai_run>:

static int ai_run(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_language_classification_run(language_classification, ai_input, ai_output);
 80096de:	4b0f      	ldr	r3, [pc, #60]	; (800971c <ai_run+0x44>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a0f      	ldr	r2, [pc, #60]	; (8009720 <ai_run+0x48>)
 80096e4:	6811      	ldr	r1, [r2, #0]
 80096e6:	4a0f      	ldr	r2, [pc, #60]	; (8009724 <ai_run+0x4c>)
 80096e8:	6812      	ldr	r2, [r2, #0]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 fc24 	bl	8009f38 <ai_language_classification_run>
 80096f0:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d00c      	beq.n	8009712 <ai_run+0x3a>
    ai_log_err(ai_language_classification_get_error(language_classification),
 80096f8:	4b08      	ldr	r3, [pc, #32]	; (800971c <ai_run+0x44>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 fb15 	bl	8009d2c <ai_language_classification_get_error>
 8009702:	4603      	mov	r3, r0
 8009704:	4908      	ldr	r1, [pc, #32]	; (8009728 <ai_run+0x50>)
 8009706:	4618      	mov	r0, r3
 8009708:	f7ff ff62 	bl	80095d0 <ai_log_err>
        "ai_language_classification_run");
    return -1;
 800970c:	f04f 33ff 	mov.w	r3, #4294967295
 8009710:	e000      	b.n	8009714 <ai_run+0x3c>
  }

  return 0;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	2000aae0 	.word	0x2000aae0
 8009720:	2000aae4 	.word	0x2000aae4
 8009724:	2000aae8 	.word	0x2000aae8
 8009728:	08014d28 	.word	0x08014d28

0800972c <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	set_data_ai_in(data[0]);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4618      	mov	r0, r3
 800973a:	f7f7 fc7d 	bl	8001038 <set_data_ai_in>
    return 0;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <post_process>:

int post_process(ai_i8* data[])
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
	get_data_ai_out(data[0]);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4618      	mov	r0, r3
 8009756:	f7f7 fdff 	bl	8001358 <get_data_ai_out>
  return 0;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  //printf("\r\nTEMPLATE - initialization\r\n");

  ai_boostrap(data_activations0);
 8009768:	4802      	ldr	r0, [pc, #8]	; (8009774 <MX_X_CUBE_AI_Init+0x10>)
 800976a:	f7ff ff51 	bl	8009610 <ai_boostrap>
    /* USER CODE END 5 */
}
 800976e:	bf00      	nop
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20000014 	.word	0x20000014

08009778 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 800977e:	f04f 33ff 	mov.w	r3, #4294967295
 8009782:	607b      	str	r3, [r7, #4]

  //printf("TEMPLATE - run - main loop\r\n");

  if (language_classification) {
 8009784:	4b14      	ldr	r3, [pc, #80]	; (80097d8 <MX_X_CUBE_AI_Process+0x60>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d013      	beq.n	80097b4 <MX_X_CUBE_AI_Process+0x3c>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 800978c:	4813      	ldr	r0, [pc, #76]	; (80097dc <MX_X_CUBE_AI_Process+0x64>)
 800978e:	f7ff ffcd 	bl	800972c <acquire_and_process_data>
 8009792:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d102      	bne.n	80097a0 <MX_X_CUBE_AI_Process+0x28>
        res = ai_run();
 800979a:	f7ff ff9d 	bl	80096d8 <ai_run>
 800979e:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d103      	bne.n	80097ae <MX_X_CUBE_AI_Process+0x36>
        res = post_process(data_outs);
 80097a6:	480e      	ldr	r0, [pc, #56]	; (80097e0 <MX_X_CUBE_AI_Process+0x68>)
 80097a8:	f7ff ffce 	bl	8009748 <post_process>
 80097ac:	6078      	str	r0, [r7, #4]
    } while (res==0);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d0eb      	beq.n	800978c <MX_X_CUBE_AI_Process+0x14>
  }

  if (res) {
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00a      	beq.n	80097d0 <MX_X_CUBE_AI_Process+0x58>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 80097ba:	2311      	movs	r3, #17
 80097bc:	703b      	strb	r3, [r7, #0]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2210      	movs	r2, #16
 80097c2:	f362 231f 	bfi	r3, r2, #8, #24
 80097c6:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 80097c8:	4906      	ldr	r1, [pc, #24]	; (80097e4 <MX_X_CUBE_AI_Process+0x6c>)
 80097ca:	6838      	ldr	r0, [r7, #0]
 80097cc:	f7ff ff00 	bl	80095d0 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	2000aae0 	.word	0x2000aae0
 80097dc:	2000000c 	.word	0x2000000c
 80097e0:	20000010 	.word	0x20000010
 80097e4:	08014d48 	.word	0x08014d48

080097e8 <language_classification_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool language_classification_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 80097f2:	2300      	movs	r3, #0
 80097f4:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 80097f6:	f107 030c 	add.w	r3, r7, #12
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	2101      	movs	r1, #1
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 fc72 	bl	800a0e8 <ai_platform_get_activations_map>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 80ce 	beq.w	80099a8 <language_classification_configure_activations+0x1c0>
    /* Updating activations (byte) offsets */
    conv2d_0_scratch0_array.data = AI_PTR(activations_map[0] + 30400);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f503 43ed 	add.w	r3, r3, #30336	; 0x7680
 8009812:	3340      	adds	r3, #64	; 0x40
 8009814:	4a69      	ldr	r2, [pc, #420]	; (80099bc <language_classification_configure_activations+0x1d4>)
 8009816:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(activations_map[0] + 30400);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f503 43ed 	add.w	r3, r3, #30336	; 0x7680
 800981e:	3340      	adds	r3, #64	; 0x40
 8009820:	4a66      	ldr	r2, [pc, #408]	; (80099bc <language_classification_configure_activations+0x1d4>)
 8009822:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch1_array.data = AI_PTR(activations_map[0] + 30948);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f503 43f1 	add.w	r3, r3, #30848	; 0x7880
 800982a:	3364      	adds	r3, #100	; 0x64
 800982c:	4a64      	ldr	r2, [pc, #400]	; (80099c0 <language_classification_configure_activations+0x1d8>)
 800982e:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch1_array.data_start = AI_PTR(activations_map[0] + 30948);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f503 43f1 	add.w	r3, r3, #30848	; 0x7880
 8009836:	3364      	adds	r3, #100	; 0x64
 8009838:	4a61      	ldr	r2, [pc, #388]	; (80099c0 <language_classification_configure_activations+0x1d8>)
 800983a:	60d3      	str	r3, [r2, #12]
    conv2d_0_output_array.data = AI_PTR(activations_map[0] + 352);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009842:	4a60      	ldr	r2, [pc, #384]	; (80099c4 <language_classification_configure_activations+0x1dc>)
 8009844:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(activations_map[0] + 352);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800984c:	4a5d      	ldr	r2, [pc, #372]	; (80099c4 <language_classification_configure_activations+0x1dc>)
 800984e:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch0_array.data = AI_PTR(activations_map[0] + 30400);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f503 43ed 	add.w	r3, r3, #30336	; 0x7680
 8009856:	3340      	adds	r3, #64	; 0x40
 8009858:	4a5b      	ldr	r2, [pc, #364]	; (80099c8 <language_classification_configure_activations+0x1e0>)
 800985a:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(activations_map[0] + 30400);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f503 43ed 	add.w	r3, r3, #30336	; 0x7680
 8009862:	3340      	adds	r3, #64	; 0x40
 8009864:	4a58      	ldr	r2, [pc, #352]	; (80099c8 <language_classification_configure_activations+0x1e0>)
 8009866:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch1_array.data = AI_PTR(activations_map[0] + 36928);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800986e:	3340      	adds	r3, #64	; 0x40
 8009870:	4a56      	ldr	r2, [pc, #344]	; (80099cc <language_classification_configure_activations+0x1e4>)
 8009872:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch1_array.data_start = AI_PTR(activations_map[0] + 36928);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800987a:	3340      	adds	r3, #64	; 0x40
 800987c:	4a53      	ldr	r2, [pc, #332]	; (80099cc <language_classification_configure_activations+0x1e4>)
 800987e:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(activations_map[0] + 0);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4a53      	ldr	r2, [pc, #332]	; (80099d0 <language_classification_configure_activations+0x1e8>)
 8009884:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	4a51      	ldr	r2, [pc, #324]	; (80099d0 <language_classification_configure_activations+0x1e8>)
 800988a:	60d3      	str	r3, [r2, #12]
    conv2d_4_scratch0_array.data = AI_PTR(activations_map[0] + 15072);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f503 536b 	add.w	r3, r3, #15040	; 0x3ac0
 8009892:	3320      	adds	r3, #32
 8009894:	4a4f      	ldr	r2, [pc, #316]	; (80099d4 <language_classification_configure_activations+0x1ec>)
 8009896:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(activations_map[0] + 15072);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f503 536b 	add.w	r3, r3, #15040	; 0x3ac0
 800989e:	3320      	adds	r3, #32
 80098a0:	4a4c      	ldr	r2, [pc, #304]	; (80099d4 <language_classification_configure_activations+0x1ec>)
 80098a2:	60d3      	str	r3, [r2, #12]
    conv2d_4_scratch1_array.data = AI_PTR(activations_map[0] + 23008);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f503 43b3 	add.w	r3, r3, #22912	; 0x5980
 80098aa:	3360      	adds	r3, #96	; 0x60
 80098ac:	4a4a      	ldr	r2, [pc, #296]	; (80099d8 <language_classification_configure_activations+0x1f0>)
 80098ae:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch1_array.data_start = AI_PTR(activations_map[0] + 23008);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f503 43b3 	add.w	r3, r3, #22912	; 0x5980
 80098b6:	3360      	adds	r3, #96	; 0x60
 80098b8:	4a47      	ldr	r2, [pc, #284]	; (80099d8 <language_classification_configure_activations+0x1f0>)
 80098ba:	60d3      	str	r3, [r2, #12]
    conv2d_4_output_array.data = AI_PTR(activations_map[0] + 23968);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80098c2:	3320      	adds	r3, #32
 80098c4:	4a45      	ldr	r2, [pc, #276]	; (80099dc <language_classification_configure_activations+0x1f4>)
 80098c6:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(activations_map[0] + 23968);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80098ce:	3320      	adds	r3, #32
 80098d0:	4a42      	ldr	r2, [pc, #264]	; (80099dc <language_classification_configure_activations+0x1f4>)
 80098d2:	60d3      	str	r3, [r2, #12]
    conv2d_6_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4a42      	ldr	r2, [pc, #264]	; (80099e0 <language_classification_configure_activations+0x1f8>)
 80098d8:	6093      	str	r3, [r2, #8]
    conv2d_6_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	4a40      	ldr	r2, [pc, #256]	; (80099e0 <language_classification_configure_activations+0x1f8>)
 80098de:	60d3      	str	r3, [r2, #12]
    conv2d_6_scratch1_array.data = AI_PTR(activations_map[0] + 10752);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80098e6:	4a3f      	ldr	r2, [pc, #252]	; (80099e4 <language_classification_configure_activations+0x1fc>)
 80098e8:	6093      	str	r3, [r2, #8]
    conv2d_6_scratch1_array.data_start = AI_PTR(activations_map[0] + 10752);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80098f0:	4a3c      	ldr	r2, [pc, #240]	; (80099e4 <language_classification_configure_activations+0x1fc>)
 80098f2:	60d3      	str	r3, [r2, #12]
    conv2d_6_output_array.data = AI_PTR(activations_map[0] + 12672);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f503 5346 	add.w	r3, r3, #12672	; 0x3180
 80098fa:	4a3b      	ldr	r2, [pc, #236]	; (80099e8 <language_classification_configure_activations+0x200>)
 80098fc:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(activations_map[0] + 12672);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f503 5346 	add.w	r3, r3, #12672	; 0x3180
 8009904:	4a38      	ldr	r2, [pc, #224]	; (80099e8 <language_classification_configure_activations+0x200>)
 8009906:	60d3      	str	r3, [r2, #12]
    conv2d_8_scratch0_array.data = AI_PTR(activations_map[0] + 19584);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f503 4399 	add.w	r3, r3, #19584	; 0x4c80
 800990e:	4a37      	ldr	r2, [pc, #220]	; (80099ec <language_classification_configure_activations+0x204>)
 8009910:	6093      	str	r3, [r2, #8]
    conv2d_8_scratch0_array.data_start = AI_PTR(activations_map[0] + 19584);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f503 4399 	add.w	r3, r3, #19584	; 0x4c80
 8009918:	4a34      	ldr	r2, [pc, #208]	; (80099ec <language_classification_configure_activations+0x204>)
 800991a:	60d3      	str	r3, [r2, #12]
    conv2d_8_scratch1_array.data = AI_PTR(activations_map[0] + 0);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4a34      	ldr	r2, [pc, #208]	; (80099f0 <language_classification_configure_activations+0x208>)
 8009920:	6093      	str	r3, [r2, #8]
    conv2d_8_scratch1_array.data_start = AI_PTR(activations_map[0] + 0);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	4a32      	ldr	r2, [pc, #200]	; (80099f0 <language_classification_configure_activations+0x208>)
 8009926:	60d3      	str	r3, [r2, #12]
    conv2d_8_output_array.data = AI_PTR(activations_map[0] + 3840);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 800992e:	4a31      	ldr	r2, [pc, #196]	; (80099f4 <language_classification_configure_activations+0x20c>)
 8009930:	6093      	str	r3, [r2, #8]
    conv2d_8_output_array.data_start = AI_PTR(activations_map[0] + 3840);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8009938:	4a2e      	ldr	r2, [pc, #184]	; (80099f4 <language_classification_configure_activations+0x20c>)
 800993a:	60d3      	str	r3, [r2, #12]
    pool_10_output_array.data = AI_PTR(activations_map[0] + 0);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	4a2e      	ldr	r2, [pc, #184]	; (80099f8 <language_classification_configure_activations+0x210>)
 8009940:	6093      	str	r3, [r2, #8]
    pool_10_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	4a2c      	ldr	r2, [pc, #176]	; (80099f8 <language_classification_configure_activations+0x210>)
 8009946:	60d3      	str	r3, [r2, #12]
    dense_12_output_array.data = AI_PTR(activations_map[0] + 256);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800994e:	4a2b      	ldr	r2, [pc, #172]	; (80099fc <language_classification_configure_activations+0x214>)
 8009950:	6093      	str	r3, [r2, #8]
    dense_12_output_array.data_start = AI_PTR(activations_map[0] + 256);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009958:	4a28      	ldr	r2, [pc, #160]	; (80099fc <language_classification_configure_activations+0x214>)
 800995a:	60d3      	str	r3, [r2, #12]
    dense_13_output_array.data = AI_PTR(activations_map[0] + 0);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4a28      	ldr	r2, [pc, #160]	; (8009a00 <language_classification_configure_activations+0x218>)
 8009960:	6093      	str	r3, [r2, #8]
    dense_13_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	4a26      	ldr	r2, [pc, #152]	; (8009a00 <language_classification_configure_activations+0x218>)
 8009966:	60d3      	str	r3, [r2, #12]
    dense_14_output_array.data = AI_PTR(activations_map[0] + 16);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3310      	adds	r3, #16
 800996c:	4a25      	ldr	r2, [pc, #148]	; (8009a04 <language_classification_configure_activations+0x21c>)
 800996e:	6093      	str	r3, [r2, #8]
    dense_14_output_array.data_start = AI_PTR(activations_map[0] + 16);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	3310      	adds	r3, #16
 8009974:	4a23      	ldr	r2, [pc, #140]	; (8009a04 <language_classification_configure_activations+0x21c>)
 8009976:	60d3      	str	r3, [r2, #12]
    dense_15_output_array.data = AI_PTR(activations_map[0] + 0);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4a23      	ldr	r2, [pc, #140]	; (8009a08 <language_classification_configure_activations+0x220>)
 800997c:	6093      	str	r3, [r2, #8]
    dense_15_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	4a21      	ldr	r2, [pc, #132]	; (8009a08 <language_classification_configure_activations+0x220>)
 8009982:	60d3      	str	r3, [r2, #12]
    dense_15_0_conversion_output_array.data = AI_PTR(activations_map[0] + 4);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3304      	adds	r3, #4
 8009988:	4a20      	ldr	r2, [pc, #128]	; (8009a0c <language_classification_configure_activations+0x224>)
 800998a:	6093      	str	r3, [r2, #8]
    dense_15_0_conversion_output_array.data_start = AI_PTR(activations_map[0] + 4);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3304      	adds	r3, #4
 8009990:	4a1e      	ldr	r2, [pc, #120]	; (8009a0c <language_classification_configure_activations+0x224>)
 8009992:	60d3      	str	r3, [r2, #12]
    nl_16_output_array.data = AI_PTR(activations_map[0] + 16);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	3310      	adds	r3, #16
 8009998:	4a1d      	ldr	r2, [pc, #116]	; (8009a10 <language_classification_configure_activations+0x228>)
 800999a:	6093      	str	r3, [r2, #8]
    nl_16_output_array.data_start = AI_PTR(activations_map[0] + 16);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	3310      	adds	r3, #16
 80099a0:	4a1b      	ldr	r2, [pc, #108]	; (8009a10 <language_classification_configure_activations+0x228>)
 80099a2:	60d3      	str	r3, [r2, #12]
    
    return true;
 80099a4:	2301      	movs	r3, #1
 80099a6:	e005      	b.n	80099b4 <language_classification_configure_activations+0x1cc>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80099a8:	2213      	movs	r2, #19
 80099aa:	2130      	movs	r1, #48	; 0x30
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fc83 	bl	800a2b8 <ai_platform_network_set_error>
  return false;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	20000218 	.word	0x20000218
 80099c0:	20000228 	.word	0x20000228
 80099c4:	20000028 	.word	0x20000028
 80099c8:	20000238 	.word	0x20000238
 80099cc:	20000248 	.word	0x20000248
 80099d0:	20000038 	.word	0x20000038
 80099d4:	20000258 	.word	0x20000258
 80099d8:	20000268 	.word	0x20000268
 80099dc:	20000048 	.word	0x20000048
 80099e0:	20000278 	.word	0x20000278
 80099e4:	20000288 	.word	0x20000288
 80099e8:	20000058 	.word	0x20000058
 80099ec:	20000298 	.word	0x20000298
 80099f0:	200002a8 	.word	0x200002a8
 80099f4:	20000068 	.word	0x20000068
 80099f8:	20000078 	.word	0x20000078
 80099fc:	20000088 	.word	0x20000088
 8009a00:	20000098 	.word	0x20000098
 8009a04:	200000a8 	.word	0x200000a8
 8009a08:	200000b8 	.word	0x200000b8
 8009a0c:	200000c8 	.word	0x200000c8
 8009a10:	200000d8 	.word	0x200000d8

08009a14 <language_classification_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool language_classification_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8009a22:	f107 030c 	add.w	r3, r7, #12
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	2101      	movs	r1, #1
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 fb0c 	bl	800a048 <ai_platform_get_weights_map>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 8170 	beq.w	8009d18 <language_classification_configure_weights+0x304>
    /* Updating weights (byte) offsets */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8009a38:	4ba4      	ldr	r3, [pc, #656]	; (8009ccc <language_classification_configure_weights+0x2b8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a40:	4aa2      	ldr	r2, [pc, #648]	; (8009ccc <language_classification_configure_weights+0x2b8>)
 8009a42:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4aa1      	ldr	r2, [pc, #644]	; (8009ccc <language_classification_configure_weights+0x2b8>)
 8009a48:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	4a9f      	ldr	r2, [pc, #636]	; (8009ccc <language_classification_configure_weights+0x2b8>)
 8009a4e:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8009a50:	4b9f      	ldr	r3, [pc, #636]	; (8009cd0 <language_classification_configure_weights+0x2bc>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a58:	4a9d      	ldr	r2, [pc, #628]	; (8009cd0 <language_classification_configure_weights+0x2bc>)
 8009a5a:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(weights_map[0] + 144);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3390      	adds	r3, #144	; 0x90
 8009a60:	4a9b      	ldr	r2, [pc, #620]	; (8009cd0 <language_classification_configure_weights+0x2bc>)
 8009a62:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(weights_map[0] + 144);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	3390      	adds	r3, #144	; 0x90
 8009a68:	4a99      	ldr	r2, [pc, #612]	; (8009cd0 <language_classification_configure_weights+0x2bc>)
 8009a6a:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8009a6c:	4b99      	ldr	r3, [pc, #612]	; (8009cd4 <language_classification_configure_weights+0x2c0>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a74:	4a97      	ldr	r2, [pc, #604]	; (8009cd4 <language_classification_configure_weights+0x2c0>)
 8009a76:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(weights_map[0] + 208);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	33d0      	adds	r3, #208	; 0xd0
 8009a7c:	4a95      	ldr	r2, [pc, #596]	; (8009cd4 <language_classification_configure_weights+0x2c0>)
 8009a7e:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(weights_map[0] + 208);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	33d0      	adds	r3, #208	; 0xd0
 8009a84:	4a93      	ldr	r2, [pc, #588]	; (8009cd4 <language_classification_configure_weights+0x2c0>)
 8009a86:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8009a88:	4b93      	ldr	r3, [pc, #588]	; (8009cd8 <language_classification_configure_weights+0x2c4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a90:	4a91      	ldr	r2, [pc, #580]	; (8009cd8 <language_classification_configure_weights+0x2c4>)
 8009a92:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights_map[0] + 7888);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f503 53f6 	add.w	r3, r3, #7872	; 0x1ec0
 8009a9a:	3310      	adds	r3, #16
 8009a9c:	4a8e      	ldr	r2, [pc, #568]	; (8009cd8 <language_classification_configure_weights+0x2c4>)
 8009a9e:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(weights_map[0] + 7888);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f503 53f6 	add.w	r3, r3, #7872	; 0x1ec0
 8009aa6:	3310      	adds	r3, #16
 8009aa8:	4a8b      	ldr	r2, [pc, #556]	; (8009cd8 <language_classification_configure_weights+0x2c4>)
 8009aaa:	60d3      	str	r3, [r2, #12]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8009aac:	4b8b      	ldr	r3, [pc, #556]	; (8009cdc <language_classification_configure_weights+0x2c8>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ab4:	4a89      	ldr	r2, [pc, #548]	; (8009cdc <language_classification_configure_weights+0x2c8>)
 8009ab6:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(weights_map[0] + 8016);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8009abe:	3310      	adds	r3, #16
 8009ac0:	4a86      	ldr	r2, [pc, #536]	; (8009cdc <language_classification_configure_weights+0x2c8>)
 8009ac2:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(weights_map[0] + 8016);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8009aca:	3310      	adds	r3, #16
 8009acc:	4a83      	ldr	r2, [pc, #524]	; (8009cdc <language_classification_configure_weights+0x2c8>)
 8009ace:	60d3      	str	r3, [r2, #12]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8009ad0:	4b83      	ldr	r3, [pc, #524]	; (8009ce0 <language_classification_configure_weights+0x2cc>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ad8:	4a81      	ldr	r2, [pc, #516]	; (8009ce0 <language_classification_configure_weights+0x2cc>)
 8009ada:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(weights_map[0] + 38736);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f503 4317 	add.w	r3, r3, #38656	; 0x9700
 8009ae2:	3350      	adds	r3, #80	; 0x50
 8009ae4:	4a7e      	ldr	r2, [pc, #504]	; (8009ce0 <language_classification_configure_weights+0x2cc>)
 8009ae6:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(weights_map[0] + 38736);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f503 4317 	add.w	r3, r3, #38656	; 0x9700
 8009aee:	3350      	adds	r3, #80	; 0x50
 8009af0:	4a7b      	ldr	r2, [pc, #492]	; (8009ce0 <language_classification_configure_weights+0x2cc>)
 8009af2:	60d3      	str	r3, [r2, #12]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8009af4:	4b7b      	ldr	r3, [pc, #492]	; (8009ce4 <language_classification_configure_weights+0x2d0>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009afc:	4a79      	ldr	r2, [pc, #484]	; (8009ce4 <language_classification_configure_weights+0x2d0>)
 8009afe:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(weights_map[0] + 38992);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f503 4318 	add.w	r3, r3, #38912	; 0x9800
 8009b06:	3350      	adds	r3, #80	; 0x50
 8009b08:	4a76      	ldr	r2, [pc, #472]	; (8009ce4 <language_classification_configure_weights+0x2d0>)
 8009b0a:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(weights_map[0] + 38992);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f503 4318 	add.w	r3, r3, #38912	; 0x9800
 8009b12:	3350      	adds	r3, #80	; 0x50
 8009b14:	4a73      	ldr	r2, [pc, #460]	; (8009ce4 <language_classification_configure_weights+0x2d0>)
 8009b16:	60d3      	str	r3, [r2, #12]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8009b18:	4b73      	ldr	r3, [pc, #460]	; (8009ce8 <language_classification_configure_weights+0x2d4>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b20:	4a71      	ldr	r2, [pc, #452]	; (8009ce8 <language_classification_configure_weights+0x2d4>)
 8009b22:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(weights_map[0] + 161872);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f503 331e 	add.w	r3, r3, #161792	; 0x27800
 8009b2a:	3350      	adds	r3, #80	; 0x50
 8009b2c:	4a6e      	ldr	r2, [pc, #440]	; (8009ce8 <language_classification_configure_weights+0x2d4>)
 8009b2e:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(weights_map[0] + 161872);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f503 331e 	add.w	r3, r3, #161792	; 0x27800
 8009b36:	3350      	adds	r3, #80	; 0x50
 8009b38:	4a6b      	ldr	r2, [pc, #428]	; (8009ce8 <language_classification_configure_weights+0x2d4>)
 8009b3a:	60d3      	str	r3, [r2, #12]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8009b3c:	4b6b      	ldr	r3, [pc, #428]	; (8009cec <language_classification_configure_weights+0x2d8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b44:	4a69      	ldr	r2, [pc, #420]	; (8009cec <language_classification_configure_weights+0x2d8>)
 8009b46:	6013      	str	r3, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(weights_map[0] + 162384);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f503 331e 	add.w	r3, r3, #161792	; 0x27800
 8009b4e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009b52:	4a66      	ldr	r2, [pc, #408]	; (8009cec <language_classification_configure_weights+0x2d8>)
 8009b54:	6093      	str	r3, [r2, #8]
    conv2d_8_weights_array.data_start = AI_PTR(weights_map[0] + 162384);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f503 331e 	add.w	r3, r3, #161792	; 0x27800
 8009b5c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009b60:	4a62      	ldr	r2, [pc, #392]	; (8009cec <language_classification_configure_weights+0x2d8>)
 8009b62:	60d3      	str	r3, [r2, #12]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8009b64:	4b62      	ldr	r3, [pc, #392]	; (8009cf0 <language_classification_configure_weights+0x2dc>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b6c:	4a60      	ldr	r2, [pc, #384]	; (8009cf0 <language_classification_configure_weights+0x2dc>)
 8009b6e:	6013      	str	r3, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(weights_map[0] + 653904);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f503 231f 	add.w	r3, r3, #651264	; 0x9f000
 8009b76:	f503 6325 	add.w	r3, r3, #2640	; 0xa50
 8009b7a:	4a5d      	ldr	r2, [pc, #372]	; (8009cf0 <language_classification_configure_weights+0x2dc>)
 8009b7c:	6093      	str	r3, [r2, #8]
    conv2d_8_bias_array.data_start = AI_PTR(weights_map[0] + 653904);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f503 231f 	add.w	r3, r3, #651264	; 0x9f000
 8009b84:	f503 6325 	add.w	r3, r3, #2640	; 0xa50
 8009b88:	4a59      	ldr	r2, [pc, #356]	; (8009cf0 <language_classification_configure_weights+0x2dc>)
 8009b8a:	60d3      	str	r3, [r2, #12]
    dense_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8009b8c:	4b59      	ldr	r3, [pc, #356]	; (8009cf4 <language_classification_configure_weights+0x2e0>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b94:	4a57      	ldr	r2, [pc, #348]	; (8009cf4 <language_classification_configure_weights+0x2e0>)
 8009b96:	6013      	str	r3, [r2, #0]
    dense_12_weights_array.data = AI_PTR(weights_map[0] + 654928);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f503 231f 	add.w	r3, r3, #651264	; 0x9f000
 8009b9e:	f503 6365 	add.w	r3, r3, #3664	; 0xe50
 8009ba2:	4a54      	ldr	r2, [pc, #336]	; (8009cf4 <language_classification_configure_weights+0x2e0>)
 8009ba4:	6093      	str	r3, [r2, #8]
    dense_12_weights_array.data_start = AI_PTR(weights_map[0] + 654928);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f503 231f 	add.w	r3, r3, #651264	; 0x9f000
 8009bac:	f503 6365 	add.w	r3, r3, #3664	; 0xe50
 8009bb0:	4a50      	ldr	r2, [pc, #320]	; (8009cf4 <language_classification_configure_weights+0x2e0>)
 8009bb2:	60d3      	str	r3, [r2, #12]
    dense_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8009bb4:	4b50      	ldr	r3, [pc, #320]	; (8009cf8 <language_classification_configure_weights+0x2e4>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bbc:	4a4e      	ldr	r2, [pc, #312]	; (8009cf8 <language_classification_configure_weights+0x2e4>)
 8009bbe:	6013      	str	r3, [r2, #0]
    dense_12_bias_array.data = AI_PTR(weights_map[0] + 663120);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f503 2321 	add.w	r3, r3, #659456	; 0xa1000
 8009bc6:	f503 6365 	add.w	r3, r3, #3664	; 0xe50
 8009bca:	4a4b      	ldr	r2, [pc, #300]	; (8009cf8 <language_classification_configure_weights+0x2e4>)
 8009bcc:	6093      	str	r3, [r2, #8]
    dense_12_bias_array.data_start = AI_PTR(weights_map[0] + 663120);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f503 2321 	add.w	r3, r3, #659456	; 0xa1000
 8009bd4:	f503 6365 	add.w	r3, r3, #3664	; 0xe50
 8009bd8:	4a47      	ldr	r2, [pc, #284]	; (8009cf8 <language_classification_configure_weights+0x2e4>)
 8009bda:	60d3      	str	r3, [r2, #12]
    dense_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8009bdc:	4b47      	ldr	r3, [pc, #284]	; (8009cfc <language_classification_configure_weights+0x2e8>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009be4:	4a45      	ldr	r2, [pc, #276]	; (8009cfc <language_classification_configure_weights+0x2e8>)
 8009be6:	6013      	str	r3, [r2, #0]
    dense_13_weights_array.data = AI_PTR(weights_map[0] + 663248);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f503 2321 	add.w	r3, r3, #659456	; 0xa1000
 8009bee:	f503 636d 	add.w	r3, r3, #3792	; 0xed0
 8009bf2:	4a42      	ldr	r2, [pc, #264]	; (8009cfc <language_classification_configure_weights+0x2e8>)
 8009bf4:	6093      	str	r3, [r2, #8]
    dense_13_weights_array.data_start = AI_PTR(weights_map[0] + 663248);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f503 2321 	add.w	r3, r3, #659456	; 0xa1000
 8009bfc:	f503 636d 	add.w	r3, r3, #3792	; 0xed0
 8009c00:	4a3e      	ldr	r2, [pc, #248]	; (8009cfc <language_classification_configure_weights+0x2e8>)
 8009c02:	60d3      	str	r3, [r2, #12]
    dense_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8009c04:	4b3e      	ldr	r3, [pc, #248]	; (8009d00 <language_classification_configure_weights+0x2ec>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c0c:	4a3c      	ldr	r2, [pc, #240]	; (8009d00 <language_classification_configure_weights+0x2ec>)
 8009c0e:	6013      	str	r3, [r2, #0]
    dense_13_bias_array.data = AI_PTR(weights_map[0] + 663760);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
 8009c16:	33d0      	adds	r3, #208	; 0xd0
 8009c18:	4a39      	ldr	r2, [pc, #228]	; (8009d00 <language_classification_configure_weights+0x2ec>)
 8009c1a:	6093      	str	r3, [r2, #8]
    dense_13_bias_array.data_start = AI_PTR(weights_map[0] + 663760);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
 8009c22:	33d0      	adds	r3, #208	; 0xd0
 8009c24:	4a36      	ldr	r2, [pc, #216]	; (8009d00 <language_classification_configure_weights+0x2ec>)
 8009c26:	60d3      	str	r3, [r2, #12]
    dense_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8009c28:	4b36      	ldr	r3, [pc, #216]	; (8009d04 <language_classification_configure_weights+0x2f0>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c30:	4a34      	ldr	r2, [pc, #208]	; (8009d04 <language_classification_configure_weights+0x2f0>)
 8009c32:	6013      	str	r3, [r2, #0]
    dense_14_weights_array.data = AI_PTR(weights_map[0] + 663824);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
 8009c3a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009c3e:	4a31      	ldr	r2, [pc, #196]	; (8009d04 <language_classification_configure_weights+0x2f0>)
 8009c40:	6093      	str	r3, [r2, #8]
    dense_14_weights_array.data_start = AI_PTR(weights_map[0] + 663824);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
 8009c48:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009c4c:	4a2d      	ldr	r2, [pc, #180]	; (8009d04 <language_classification_configure_weights+0x2f0>)
 8009c4e:	60d3      	str	r3, [r2, #12]
    dense_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8009c50:	4b2d      	ldr	r3, [pc, #180]	; (8009d08 <language_classification_configure_weights+0x2f4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c58:	4a2b      	ldr	r2, [pc, #172]	; (8009d08 <language_classification_configure_weights+0x2f4>)
 8009c5a:	6013      	str	r3, [r2, #0]
    dense_14_bias_array.data = AI_PTR(weights_map[0] + 663952);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
 8009c62:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009c66:	4a28      	ldr	r2, [pc, #160]	; (8009d08 <language_classification_configure_weights+0x2f4>)
 8009c68:	6093      	str	r3, [r2, #8]
    dense_14_bias_array.data_start = AI_PTR(weights_map[0] + 663952);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
 8009c70:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009c74:	4a24      	ldr	r2, [pc, #144]	; (8009d08 <language_classification_configure_weights+0x2f4>)
 8009c76:	60d3      	str	r3, [r2, #12]
    dense_15_weights_array.format |= AI_FMT_FLAG_CONST;
 8009c78:	4b24      	ldr	r3, [pc, #144]	; (8009d0c <language_classification_configure_weights+0x2f8>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c80:	4a22      	ldr	r2, [pc, #136]	; (8009d0c <language_classification_configure_weights+0x2f8>)
 8009c82:	6013      	str	r3, [r2, #0]
    dense_15_weights_array.data = AI_PTR(weights_map[0] + 663984);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
 8009c8a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8009c8e:	4a1f      	ldr	r2, [pc, #124]	; (8009d0c <language_classification_configure_weights+0x2f8>)
 8009c90:	6093      	str	r3, [r2, #8]
    dense_15_weights_array.data_start = AI_PTR(weights_map[0] + 663984);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
 8009c98:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8009c9c:	4a1b      	ldr	r2, [pc, #108]	; (8009d0c <language_classification_configure_weights+0x2f8>)
 8009c9e:	60d3      	str	r3, [r2, #12]
    dense_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8009ca0:	4b1b      	ldr	r3, [pc, #108]	; (8009d10 <language_classification_configure_weights+0x2fc>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ca8:	4a19      	ldr	r2, [pc, #100]	; (8009d10 <language_classification_configure_weights+0x2fc>)
 8009caa:	6013      	str	r3, [r2, #0]
    dense_15_bias_array.data = AI_PTR(weights_map[0] + 664008);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
 8009cb2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009cb6:	4a16      	ldr	r2, [pc, #88]	; (8009d10 <language_classification_configure_weights+0x2fc>)
 8009cb8:	6093      	str	r3, [r2, #8]
    dense_15_bias_array.data_start = AI_PTR(weights_map[0] + 664008);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
 8009cc0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009cc4:	4a12      	ldr	r2, [pc, #72]	; (8009d10 <language_classification_configure_weights+0x2fc>)
 8009cc6:	60d3      	str	r3, [r2, #12]
 8009cc8:	e024      	b.n	8009d14 <language_classification_configure_weights+0x300>
 8009cca:	bf00      	nop
 8009ccc:	200000f8 	.word	0x200000f8
 8009cd0:	20000108 	.word	0x20000108
 8009cd4:	20000118 	.word	0x20000118
 8009cd8:	20000128 	.word	0x20000128
 8009cdc:	20000138 	.word	0x20000138
 8009ce0:	20000148 	.word	0x20000148
 8009ce4:	20000158 	.word	0x20000158
 8009ce8:	20000168 	.word	0x20000168
 8009cec:	20000178 	.word	0x20000178
 8009cf0:	20000188 	.word	0x20000188
 8009cf4:	20000198 	.word	0x20000198
 8009cf8:	200001a8 	.word	0x200001a8
 8009cfc:	200001b8 	.word	0x200001b8
 8009d00:	200001c8 	.word	0x200001c8
 8009d04:	200001d8 	.word	0x200001d8
 8009d08:	200001e8 	.word	0x200001e8
 8009d0c:	200001f8 	.word	0x200001f8
 8009d10:	20000208 	.word	0x20000208
    return true;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e005      	b.n	8009d24 <language_classification_configure_weights+0x310>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8009d18:	2212      	movs	r2, #18
 8009d1a:	2130      	movs	r1, #48	; 0x30
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 facb 	bl	800a2b8 <ai_platform_network_set_error>
  return false;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <ai_language_classification_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_language_classification_get_error(ai_handle network)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fa45 	bl	800a1c4 <ai_platform_network_get_error>
 8009d3a:	4603      	mov	r3, r0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <ai_language_classification_create>:

AI_API_ENTRY
ai_error ai_language_classification_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af02      	add	r7, sp, #8
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8009d4e:	2300      	movs	r3, #0
 8009d50:	9301      	str	r3, [sp, #4]
 8009d52:	2305      	movs	r3, #5
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	2301      	movs	r3, #1
 8009d58:	4a04      	ldr	r2, [pc, #16]	; (8009d6c <ai_language_classification_create+0x28>)
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fc9f 	bl	800a6a0 <ai_platform_network_create>
 8009d62:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	200013f0 	.word	0x200013f0

08009d70 <ai_language_classification_create_and_init>:

AI_API_ENTRY
ai_error ai_language_classification_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b096      	sub	sp, #88	; 0x58
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_language_classification_create(network, AI_LANGUAGE_CLASSIFICATION_DATA_CONFIG);
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f7ff ffe0 	bl	8009d44 <ai_language_classification_create>
 8009d84:	4603      	mov	r3, r0
 8009d86:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8009d88:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <ai_language_classification_create_and_init+0x24>
        return err;
 8009d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d92:	e05d      	b.n	8009e50 <ai_language_classification_create_and_init+0xe0>
    if (ai_language_classification_data_params_get(&params) != true) {
 8009d94:	f107 0314 	add.w	r3, r7, #20
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 f8dd 	bl	8009f58 <ai_language_classification_data_params_get>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	f083 0301 	eor.w	r3, r3, #1
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d008      	beq.n	8009dbc <ai_language_classification_create_and_init+0x4c>
        err = ai_language_classification_get_error(*network);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7ff ffbc 	bl	8009d2c <ai_language_classification_get_error>
 8009db4:	4603      	mov	r3, r0
 8009db6:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8009db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dba:	e049      	b.n	8009e50 <ai_language_classification_create_and_init+0xe0>
    }
#if defined(AI_LANGUAGE_CLASSIFICATION_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d016      	beq.n	8009df0 <ai_language_classification_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	657b      	str	r3, [r7, #84]	; 0x54
 8009dc6:	e00e      	b.n	8009de6 <ai_language_classification_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8009dc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	f107 0314 	add.w	r3, r7, #20
 8009dd8:	330c      	adds	r3, #12
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 f91e 	bl	800a01c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8009de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009de2:	3301      	adds	r3, #1
 8009de4:	657b      	str	r3, [r7, #84]	; 0x54
 8009de6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009de8:	461a      	mov	r2, r3
 8009dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dec:	4293      	cmp	r3, r2
 8009dee:	dbeb      	blt.n	8009dc8 <ai_language_classification_create_and_init+0x58>
    }
#endif
#if defined(AI_LANGUAGE_CLASSIFICATION_DATA_WEIGHTS_COUNT)
    if (weights) {
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d016      	beq.n	8009e24 <ai_language_classification_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8009df6:	2300      	movs	r3, #0
 8009df8:	653b      	str	r3, [r7, #80]	; 0x50
 8009dfa:	e00e      	b.n	8009e1a <ai_language_classification_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8009dfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	4413      	add	r3, r2
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	f107 0314 	add.w	r3, r7, #20
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 f904 	bl	800a01c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8009e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e16:	3301      	adds	r3, #1
 8009e18:	653b      	str	r3, [r7, #80]	; 0x50
 8009e1a:	8b7b      	ldrh	r3, [r7, #26]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e20:	4293      	cmp	r3, r2
 8009e22:	dbeb      	blt.n	8009dfc <ai_language_classification_create_and_init+0x8c>
    }
#endif
    if (ai_language_classification_init(*network, &params) != true) {
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f107 0214 	add.w	r2, r7, #20
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 f846 	bl	8009ec0 <ai_language_classification_init>
 8009e34:	4603      	mov	r3, r0
 8009e36:	f083 0301 	eor.w	r3, r3, #1
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d006      	beq.n	8009e4e <ai_language_classification_create_and_init+0xde>
        err = ai_language_classification_get_error(*network);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7ff ff71 	bl	8009d2c <ai_language_classification_get_error>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8009e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3758      	adds	r7, #88	; 0x58
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <ai_language_classification_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_language_classification_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d104      	bne.n	8009e72 <ai_language_classification_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8009e68:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <ai_language_classification_inputs_get+0x2c>)
 8009e6a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a06      	ldr	r2, [pc, #24]	; (8009e88 <ai_language_classification_inputs_get+0x30>)
 8009e70:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8009e72:	6839      	ldr	r1, [r7, #0]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fa25 	bl	800a2c4 <ai_platform_inputs_get>
 8009e7a:	4603      	mov	r3, r0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	200013f0 	.word	0x200013f0
 8009e88:	a1c00100 	.word	0xa1c00100

08009e8c <ai_language_classification_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_language_classification_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d104      	bne.n	8009ea6 <ai_language_classification_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8009e9c:	4b06      	ldr	r3, [pc, #24]	; (8009eb8 <ai_language_classification_outputs_get+0x2c>)
 8009e9e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a06      	ldr	r2, [pc, #24]	; (8009ebc <ai_language_classification_outputs_get+0x30>)
 8009ea4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 faff 	bl	800a4ac <ai_platform_outputs_get>
 8009eae:	4603      	mov	r3, r0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	200013f0 	.word	0x200013f0
 8009ebc:	a1c00100 	.word	0xa1c00100

08009ec0 <ai_language_classification_init>:
}

AI_API_ENTRY
ai_bool ai_language_classification_init(
  ai_handle network, const ai_network_params* params)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fcc7 	bl	800a860 <ai_platform_network_init>
 8009ed2:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <ai_language_classification_init+0x1e>
 8009eda:	2300      	movs	r3, #0
 8009edc:	e028      	b.n	8009f30 <ai_language_classification_init+0x70>

  ai_bool ok = true;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	72fb      	strb	r3, [r7, #11]
  ok &= language_classification_configure_weights(net_ctx, params);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f7ff fd95 	bl	8009a14 <language_classification_configure_weights>
 8009eea:	4603      	mov	r3, r0
 8009eec:	461a      	mov	r2, r3
 8009eee:	7afb      	ldrb	r3, [r7, #11]
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	bf14      	ite	ne
 8009ef6:	2301      	movne	r3, #1
 8009ef8:	2300      	moveq	r3, #0
 8009efa:	72fb      	strb	r3, [r7, #11]
  ok &= language_classification_configure_activations(net_ctx, params);
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f7ff fc72 	bl	80097e8 <language_classification_configure_activations>
 8009f04:	4603      	mov	r3, r0
 8009f06:	461a      	mov	r2, r3
 8009f08:	7afb      	ldrb	r3, [r7, #11]
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	bf14      	ite	ne
 8009f10:	2301      	movne	r3, #1
 8009f12:	2300      	moveq	r3, #0
 8009f14:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fdae 	bl	800aa78 <ai_platform_network_post_init>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	461a      	mov	r2, r3
 8009f20:	7afb      	ldrb	r3, [r7, #11]
 8009f22:	4013      	ands	r3, r2
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	bf14      	ite	ne
 8009f28:	2301      	movne	r3, #1
 8009f2a:	2300      	moveq	r3, #0
 8009f2c:	72fb      	strb	r3, [r7, #11]

  return ok;
 8009f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <ai_language_classification_run>:


AI_API_ENTRY
ai_i32 ai_language_classification_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	68b9      	ldr	r1, [r7, #8]
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f000 fe29 	bl	800aba0 <ai_platform_network_process>
 8009f4e:	4603      	mov	r3, r0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <ai_language_classification_data_params_get>:
 * @ingroup language_classification_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_language_classification_data_params_get(ai_network_params* params)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <ai_language_classification_data_params_get+0x12>
 8009f66:	2300      	movs	r3, #0
 8009f68:	e016      	b.n	8009f98 <ai_language_classification_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8009f6a:	4a0d      	ldr	r2, [pc, #52]	; (8009fa0 <ai_language_classification_data_params_get+0x48>)
 8009f6c:	f107 0310 	add.w	r3, r7, #16
 8009f70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f74:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_LANGUAGE_CLASSIFICATION_DATA_ACTIVATIONS_COUNT, g_language_classification_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8009f78:	4a0a      	ldr	r2, [pc, #40]	; (8009fa4 <ai_language_classification_data_params_get+0x4c>)
 8009f7a:	f107 0308 	add.w	r3, r7, #8
 8009f7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f82:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_LANGUAGE_CLASSIFICATION_DATA_WEIGHTS_COUNT, g_language_classification_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8009f86:	f107 0210 	add.w	r2, r7, #16
 8009f8a:	f107 0308 	add.w	r3, r7, #8
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f8fb 	bl	800a18c <ai_platform_bind_network_params>
 8009f96:	4603      	mov	r3, r0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	08014d7c 	.word	0x08014d7c
 8009fa4:	08014d84 	.word	0x08014d84

08009fa8 <ai_buffer_get_size>:
 8009fa8:	b358      	cbz	r0, 800a002 <ai_buffer_get_size+0x5a>
 8009faa:	b430      	push	{r4, r5}
 8009fac:	6803      	ldr	r3, [r0, #0]
 8009fae:	4d15      	ldr	r5, [pc, #84]	; (800a004 <ai_buffer_get_size+0x5c>)
 8009fb0:	6984      	ldr	r4, [r0, #24]
 8009fb2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8009fb6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009fba:	42ab      	cmp	r3, r5
 8009fbc:	6862      	ldr	r2, [r4, #4]
 8009fbe:	d01a      	beq.n	8009ff6 <ai_buffer_get_size+0x4e>
 8009fc0:	7d03      	ldrb	r3, [r0, #20]
 8009fc2:	6941      	ldr	r1, [r0, #20]
 8009fc4:	f1a3 0301 	sub.w	r3, r3, #1
 8009fc8:	fab3 f383 	clz	r3, r3
 8009fcc:	095b      	lsrs	r3, r3, #5
 8009fce:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8009fd2:	428b      	cmp	r3, r1
 8009fd4:	da0b      	bge.n	8009fee <ai_buffer_get_size+0x46>
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d102      	bne.n	8009fe0 <ai_buffer_get_size+0x38>
 8009fda:	2902      	cmp	r1, #2
 8009fdc:	d007      	beq.n	8009fee <ai_buffer_get_size+0x46>
 8009fde:	2302      	movs	r3, #2
 8009fe0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	428b      	cmp	r3, r1
 8009fe8:	fb00 f202 	mul.w	r2, r0, r2
 8009fec:	d1f3      	bne.n	8009fd6 <ai_buffer_get_size+0x2e>
 8009fee:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8009ff2:	bc30      	pop	{r4, r5}
 8009ff4:	4770      	bx	lr
 8009ff6:	2900      	cmp	r1, #0
 8009ff8:	d0e2      	beq.n	8009fc0 <ai_buffer_get_size+0x18>
 8009ffa:	321f      	adds	r2, #31
 8009ffc:	f022 021f 	bic.w	r2, r2, #31
 800a000:	e7de      	b.n	8009fc0 <ai_buffer_get_size+0x18>
 800a002:	4770      	bx	lr
 800a004:	000400c0 	.word	0x000400c0

0800a008 <ai_buffer_array_sane>:
 800a008:	b138      	cbz	r0, 800a01a <ai_buffer_array_sane+0x12>
 800a00a:	6843      	ldr	r3, [r0, #4]
 800a00c:	b123      	cbz	r3, 800a018 <ai_buffer_array_sane+0x10>
 800a00e:	8840      	ldrh	r0, [r0, #2]
 800a010:	3000      	adds	r0, #0
 800a012:	bf18      	it	ne
 800a014:	2001      	movne	r0, #1
 800a016:	4770      	bx	lr
 800a018:	4618      	mov	r0, r3
 800a01a:	4770      	bx	lr

0800a01c <ai_buffer_array_item_set_address>:
 800a01c:	b120      	cbz	r0, 800a028 <ai_buffer_array_item_set_address+0xc>
 800a01e:	6843      	ldr	r3, [r0, #4]
 800a020:	b11b      	cbz	r3, 800a02a <ai_buffer_array_item_set_address+0xe>
 800a022:	8840      	ldrh	r0, [r0, #2]
 800a024:	b918      	cbnz	r0, 800a02e <ai_buffer_array_item_set_address+0x12>
 800a026:	4770      	bx	lr
 800a028:	4770      	bx	lr
 800a02a:	4618      	mov	r0, r3
 800a02c:	4770      	bx	lr
 800a02e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a032:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 800a036:	d0f7      	beq.n	800a028 <ai_buffer_array_item_set_address+0xc>
 800a038:	6042      	str	r2, [r0, #4]
 800a03a:	2001      	movs	r0, #1
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop

0800a040 <_ai_platform_acquire_crc>:
 800a040:	2001      	movs	r0, #1
 800a042:	4770      	bx	lr

0800a044 <_ai_platform_release_crc>:
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop

0800a048 <ai_platform_get_weights_map>:
 800a048:	b192      	cbz	r2, 800a070 <ai_platform_get_weights_map+0x28>
 800a04a:	b188      	cbz	r0, 800a070 <ai_platform_get_weights_map+0x28>
 800a04c:	b181      	cbz	r1, 800a070 <ai_platform_get_weights_map+0x28>
 800a04e:	b570      	push	{r4, r5, r6, lr}
 800a050:	4b24      	ldr	r3, [pc, #144]	; (800a0e4 <ai_platform_get_weights_map+0x9c>)
 800a052:	6814      	ldr	r4, [r2, #0]
 800a054:	429c      	cmp	r4, r3
 800a056:	d00d      	beq.n	800a074 <ai_platform_get_weights_map+0x2c>
 800a058:	6854      	ldr	r4, [r2, #4]
 800a05a:	b194      	cbz	r4, 800a082 <ai_platform_get_weights_map+0x3a>
 800a05c:	6825      	ldr	r5, [r4, #0]
 800a05e:	429d      	cmp	r5, r3
 800a060:	d027      	beq.n	800a0b2 <ai_platform_get_weights_map+0x6a>
 800a062:	6004      	str	r4, [r0, #0]
 800a064:	f1a1 0001 	sub.w	r0, r1, #1
 800a068:	fab0 f080 	clz	r0, r0
 800a06c:	0940      	lsrs	r0, r0, #5
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
 800a070:	2000      	movs	r0, #0
 800a072:	4770      	bx	lr
 800a074:	4605      	mov	r5, r0
 800a076:	1d10      	adds	r0, r2, #4
 800a078:	4616      	mov	r6, r2
 800a07a:	460c      	mov	r4, r1
 800a07c:	f7ff ffc4 	bl	800a008 <ai_buffer_array_sane>
 800a080:	b908      	cbnz	r0, 800a086 <ai_platform_get_weights_map+0x3e>
 800a082:	2000      	movs	r0, #0
 800a084:	bd70      	pop	{r4, r5, r6, pc}
 800a086:	88f3      	ldrh	r3, [r6, #6]
 800a088:	429c      	cmp	r4, r3
 800a08a:	d1fa      	bne.n	800a082 <ai_platform_get_weights_map+0x3a>
 800a08c:	2100      	movs	r1, #0
 800a08e:	1f2b      	subs	r3, r5, #4
 800a090:	4608      	mov	r0, r1
 800a092:	68b2      	ldr	r2, [r6, #8]
 800a094:	440a      	add	r2, r1
 800a096:	311c      	adds	r1, #28
 800a098:	6852      	ldr	r2, [r2, #4]
 800a09a:	b12a      	cbz	r2, 800a0a8 <ai_platform_get_weights_map+0x60>
 800a09c:	3001      	adds	r0, #1
 800a09e:	4284      	cmp	r4, r0
 800a0a0:	f843 2f04 	str.w	r2, [r3, #4]!
 800a0a4:	d1f5      	bne.n	800a092 <ai_platform_get_weights_map+0x4a>
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	1a20      	subs	r0, r4, r0
 800a0aa:	fab0 f080 	clz	r0, r0
 800a0ae:	0940      	lsrs	r0, r0, #5
 800a0b0:	bd70      	pop	{r4, r5, r6, pc}
 800a0b2:	6863      	ldr	r3, [r4, #4]
 800a0b4:	42ab      	cmp	r3, r5
 800a0b6:	f104 0404 	add.w	r4, r4, #4
 800a0ba:	d0e2      	beq.n	800a082 <ai_platform_get_weights_map+0x3a>
 800a0bc:	3804      	subs	r0, #4
 800a0be:	4626      	mov	r6, r4
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	e003      	b.n	800a0cc <ai_platform_get_weights_map+0x84>
 800a0c4:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800a0c8:	42ab      	cmp	r3, r5
 800a0ca:	d0da      	beq.n	800a082 <ai_platform_get_weights_map+0x3a>
 800a0cc:	3201      	adds	r2, #1
 800a0ce:	4291      	cmp	r1, r2
 800a0d0:	f840 3f04 	str.w	r3, [r0, #4]!
 800a0d4:	d1f6      	bne.n	800a0c4 <ai_platform_get_weights_map+0x7c>
 800a0d6:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 800a0da:	4b02      	ldr	r3, [pc, #8]	; (800a0e4 <ai_platform_get_weights_map+0x9c>)
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d1d0      	bne.n	800a082 <ai_platform_get_weights_map+0x3a>
 800a0e0:	2001      	movs	r0, #1
 800a0e2:	bd70      	pop	{r4, r5, r6, pc}
 800a0e4:	a1facade 	.word	0xa1facade

0800a0e8 <ai_platform_get_activations_map>:
 800a0e8:	b192      	cbz	r2, 800a110 <ai_platform_get_activations_map+0x28>
 800a0ea:	b188      	cbz	r0, 800a110 <ai_platform_get_activations_map+0x28>
 800a0ec:	b181      	cbz	r1, 800a110 <ai_platform_get_activations_map+0x28>
 800a0ee:	b570      	push	{r4, r5, r6, lr}
 800a0f0:	4b25      	ldr	r3, [pc, #148]	; (800a188 <ai_platform_get_activations_map+0xa0>)
 800a0f2:	6814      	ldr	r4, [r2, #0]
 800a0f4:	429c      	cmp	r4, r3
 800a0f6:	d00d      	beq.n	800a114 <ai_platform_get_activations_map+0x2c>
 800a0f8:	6a14      	ldr	r4, [r2, #32]
 800a0fa:	b19c      	cbz	r4, 800a124 <ai_platform_get_activations_map+0x3c>
 800a0fc:	6825      	ldr	r5, [r4, #0]
 800a0fe:	429d      	cmp	r5, r3
 800a100:	d028      	beq.n	800a154 <ai_platform_get_activations_map+0x6c>
 800a102:	6004      	str	r4, [r0, #0]
 800a104:	f1a1 0001 	sub.w	r0, r1, #1
 800a108:	fab0 f080 	clz	r0, r0
 800a10c:	0940      	lsrs	r0, r0, #5
 800a10e:	bd70      	pop	{r4, r5, r6, pc}
 800a110:	2000      	movs	r0, #0
 800a112:	4770      	bx	lr
 800a114:	4605      	mov	r5, r0
 800a116:	f102 000c 	add.w	r0, r2, #12
 800a11a:	4616      	mov	r6, r2
 800a11c:	460c      	mov	r4, r1
 800a11e:	f7ff ff73 	bl	800a008 <ai_buffer_array_sane>
 800a122:	b908      	cbnz	r0, 800a128 <ai_platform_get_activations_map+0x40>
 800a124:	2000      	movs	r0, #0
 800a126:	bd70      	pop	{r4, r5, r6, pc}
 800a128:	89f3      	ldrh	r3, [r6, #14]
 800a12a:	429c      	cmp	r4, r3
 800a12c:	d1fa      	bne.n	800a124 <ai_platform_get_activations_map+0x3c>
 800a12e:	2100      	movs	r1, #0
 800a130:	1f2b      	subs	r3, r5, #4
 800a132:	4608      	mov	r0, r1
 800a134:	6932      	ldr	r2, [r6, #16]
 800a136:	440a      	add	r2, r1
 800a138:	311c      	adds	r1, #28
 800a13a:	6852      	ldr	r2, [r2, #4]
 800a13c:	b12a      	cbz	r2, 800a14a <ai_platform_get_activations_map+0x62>
 800a13e:	3001      	adds	r0, #1
 800a140:	4284      	cmp	r4, r0
 800a142:	f843 2f04 	str.w	r2, [r3, #4]!
 800a146:	d1f5      	bne.n	800a134 <ai_platform_get_activations_map+0x4c>
 800a148:	4620      	mov	r0, r4
 800a14a:	1a20      	subs	r0, r4, r0
 800a14c:	fab0 f080 	clz	r0, r0
 800a150:	0940      	lsrs	r0, r0, #5
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	6863      	ldr	r3, [r4, #4]
 800a156:	42ab      	cmp	r3, r5
 800a158:	f104 0404 	add.w	r4, r4, #4
 800a15c:	d0e2      	beq.n	800a124 <ai_platform_get_activations_map+0x3c>
 800a15e:	3804      	subs	r0, #4
 800a160:	4626      	mov	r6, r4
 800a162:	2200      	movs	r2, #0
 800a164:	e003      	b.n	800a16e <ai_platform_get_activations_map+0x86>
 800a166:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800a16a:	42ab      	cmp	r3, r5
 800a16c:	d0da      	beq.n	800a124 <ai_platform_get_activations_map+0x3c>
 800a16e:	3201      	adds	r2, #1
 800a170:	4291      	cmp	r1, r2
 800a172:	f840 3f04 	str.w	r3, [r0, #4]!
 800a176:	d1f6      	bne.n	800a166 <ai_platform_get_activations_map+0x7e>
 800a178:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 800a17c:	4b02      	ldr	r3, [pc, #8]	; (800a188 <ai_platform_get_activations_map+0xa0>)
 800a17e:	429a      	cmp	r2, r3
 800a180:	d1d0      	bne.n	800a124 <ai_platform_get_activations_map+0x3c>
 800a182:	2001      	movs	r0, #1
 800a184:	bd70      	pop	{r4, r5, r6, pc}
 800a186:	bf00      	nop
 800a188:	a1facade 	.word	0xa1facade

0800a18c <ai_platform_bind_network_params>:
 800a18c:	4603      	mov	r3, r0
 800a18e:	b190      	cbz	r0, 800a1b6 <ai_platform_bind_network_params+0x2a>
 800a190:	b1a1      	cbz	r1, 800a1bc <ai_platform_bind_network_params+0x30>
 800a192:	b18a      	cbz	r2, 800a1b8 <ai_platform_bind_network_params+0x2c>
 800a194:	b410      	push	{r4}
 800a196:	4604      	mov	r4, r0
 800a198:	4809      	ldr	r0, [pc, #36]	; (800a1c0 <ai_platform_bind_network_params+0x34>)
 800a19a:	f844 0b04 	str.w	r0, [r4], #4
 800a19e:	c903      	ldmia	r1, {r0, r1}
 800a1a0:	e884 0003 	stmia.w	r4, {r0, r1}
 800a1a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1a8:	330c      	adds	r3, #12
 800a1aa:	e883 0003 	stmia.w	r3, {r0, r1}
 800a1ae:	2001      	movs	r0, #1
 800a1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1b4:	4770      	bx	lr
 800a1b6:	4770      	bx	lr
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	4770      	bx	lr
 800a1bc:	4608      	mov	r0, r1
 800a1be:	4770      	bx	lr
 800a1c0:	a1facade 	.word	0xa1facade

0800a1c4 <ai_platform_network_get_error>:
 800a1c4:	b510      	push	{r4, lr}
 800a1c6:	b120      	cbz	r0, 800a1d2 <ai_platform_network_get_error+0xe>
 800a1c8:	4b32      	ldr	r3, [pc, #200]	; (800a294 <ai_platform_network_get_error+0xd0>)
 800a1ca:	6802      	ldr	r2, [r0, #0]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	d02e      	beq.n	800a230 <ai_platform_network_get_error+0x6c>
 800a1d2:	4a31      	ldr	r2, [pc, #196]	; (800a298 <ai_platform_network_get_error+0xd4>)
 800a1d4:	6813      	ldr	r3, [r2, #0]
 800a1d6:	f023 0301 	bic.w	r3, r3, #1
 800a1da:	6013      	str	r3, [r2, #0]
 800a1dc:	f7ff ff30 	bl	800a040 <_ai_platform_acquire_crc>
 800a1e0:	4b2e      	ldr	r3, [pc, #184]	; (800a29c <ai_platform_network_get_error+0xd8>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1ec:	d00d      	beq.n	800a20a <ai_platform_network_get_error+0x46>
 800a1ee:	4b2c      	ldr	r3, [pc, #176]	; (800a2a0 <ai_platform_network_get_error+0xdc>)
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	2a00      	cmp	r2, #0
 800a1f8:	d1fc      	bne.n	800a1f4 <ai_platform_network_get_error+0x30>
 800a1fa:	4b2a      	ldr	r3, [pc, #168]	; (800a2a4 <ai_platform_network_get_error+0xe0>)
 800a1fc:	4a2a      	ldr	r2, [pc, #168]	; (800a2a8 <ai_platform_network_get_error+0xe4>)
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	4b2a      	ldr	r3, [pc, #168]	; (800a2ac <ai_platform_network_get_error+0xe8>)
 800a204:	429a      	cmp	r2, r3
 800a206:	d00d      	beq.n	800a224 <ai_platform_network_get_error+0x60>
 800a208:	e7fe      	b.n	800a208 <ai_platform_network_get_error+0x44>
 800a20a:	4b29      	ldr	r3, [pc, #164]	; (800a2b0 <ai_platform_network_get_error+0xec>)
 800a20c:	2201      	movs	r2, #1
 800a20e:	601a      	str	r2, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	2a00      	cmp	r2, #0
 800a214:	d1fc      	bne.n	800a210 <ai_platform_network_get_error+0x4c>
 800a216:	4b27      	ldr	r3, [pc, #156]	; (800a2b4 <ai_platform_network_get_error+0xf0>)
 800a218:	4a23      	ldr	r2, [pc, #140]	; (800a2a8 <ai_platform_network_get_error+0xe4>)
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	4b23      	ldr	r3, [pc, #140]	; (800a2ac <ai_platform_network_get_error+0xe8>)
 800a220:	429a      	cmp	r2, r3
 800a222:	d104      	bne.n	800a22e <ai_platform_network_get_error+0x6a>
 800a224:	f7ff ff0e 	bl	800a044 <_ai_platform_release_crc>
 800a228:	f241 0010 	movw	r0, #4112	; 0x1010
 800a22c:	bd10      	pop	{r4, pc}
 800a22e:	e7fe      	b.n	800a22e <ai_platform_network_get_error+0x6a>
 800a230:	4a19      	ldr	r2, [pc, #100]	; (800a298 <ai_platform_network_get_error+0xd4>)
 800a232:	6813      	ldr	r3, [r2, #0]
 800a234:	f023 0301 	bic.w	r3, r3, #1
 800a238:	6013      	str	r3, [r2, #0]
 800a23a:	f7ff ff01 	bl	800a040 <_ai_platform_acquire_crc>
 800a23e:	4b17      	ldr	r3, [pc, #92]	; (800a29c <ai_platform_network_get_error+0xd8>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a24a:	d00d      	beq.n	800a268 <ai_platform_network_get_error+0xa4>
 800a24c:	4b14      	ldr	r3, [pc, #80]	; (800a2a0 <ai_platform_network_get_error+0xdc>)
 800a24e:	2201      	movs	r2, #1
 800a250:	601a      	str	r2, [r3, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	2a00      	cmp	r2, #0
 800a256:	d1fc      	bne.n	800a252 <ai_platform_network_get_error+0x8e>
 800a258:	4b12      	ldr	r3, [pc, #72]	; (800a2a4 <ai_platform_network_get_error+0xe0>)
 800a25a:	4a13      	ldr	r2, [pc, #76]	; (800a2a8 <ai_platform_network_get_error+0xe4>)
 800a25c:	601a      	str	r2, [r3, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	4b12      	ldr	r3, [pc, #72]	; (800a2ac <ai_platform_network_get_error+0xe8>)
 800a262:	429a      	cmp	r2, r3
 800a264:	d00e      	beq.n	800a284 <ai_platform_network_get_error+0xc0>
 800a266:	e7fe      	b.n	800a266 <ai_platform_network_get_error+0xa2>
 800a268:	4b11      	ldr	r3, [pc, #68]	; (800a2b0 <ai_platform_network_get_error+0xec>)
 800a26a:	2201      	movs	r2, #1
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	2a00      	cmp	r2, #0
 800a272:	d1fc      	bne.n	800a26e <ai_platform_network_get_error+0xaa>
 800a274:	4b0f      	ldr	r3, [pc, #60]	; (800a2b4 <ai_platform_network_get_error+0xf0>)
 800a276:	4a0c      	ldr	r2, [pc, #48]	; (800a2a8 <ai_platform_network_get_error+0xe4>)
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	4b0b      	ldr	r3, [pc, #44]	; (800a2ac <ai_platform_network_get_error+0xe8>)
 800a27e:	429a      	cmp	r2, r3
 800a280:	d000      	beq.n	800a284 <ai_platform_network_get_error+0xc0>
 800a282:	e7fe      	b.n	800a282 <ai_platform_network_get_error+0xbe>
 800a284:	f7ff fede 	bl	800a044 <_ai_platform_release_crc>
 800a288:	f104 0010 	add.w	r0, r4, #16
 800a28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a290:	f001 b846 	b.w	800b320 <core_get_error>
 800a294:	a1c00100 	.word	0xa1c00100
 800a298:	e0002000 	.word	0xe0002000
 800a29c:	e0042000 	.word	0xe0042000
 800a2a0:	58024c08 	.word	0x58024c08
 800a2a4:	58024c00 	.word	0x58024c00
 800a2a8:	f407a5c2 	.word	0xf407a5c2
 800a2ac:	b5e8b5cd 	.word	0xb5e8b5cd
 800a2b0:	40023008 	.word	0x40023008
 800a2b4:	40023000 	.word	0x40023000

0800a2b8 <ai_platform_network_set_error>:
 800a2b8:	b110      	cbz	r0, 800a2c0 <ai_platform_network_set_error+0x8>
 800a2ba:	3010      	adds	r0, #16
 800a2bc:	f001 b836 	b.w	800b32c <core_set_error>
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop

0800a2c4 <ai_platform_inputs_get>:
 800a2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c8:	b085      	sub	sp, #20
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	f000 80a1 	beq.w	800a412 <ai_platform_inputs_get+0x14e>
 800a2d0:	4b6d      	ldr	r3, [pc, #436]	; (800a488 <ai_platform_inputs_get+0x1c4>)
 800a2d2:	6802      	ldr	r2, [r0, #0]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	4607      	mov	r7, r0
 800a2d8:	f040 809b 	bne.w	800a412 <ai_platform_inputs_get+0x14e>
 800a2dc:	4a6b      	ldr	r2, [pc, #428]	; (800a48c <ai_platform_inputs_get+0x1c8>)
 800a2de:	6813      	ldr	r3, [r2, #0]
 800a2e0:	f023 0301 	bic.w	r3, r3, #1
 800a2e4:	6013      	str	r3, [r2, #0]
 800a2e6:	468b      	mov	fp, r1
 800a2e8:	f7ff feaa 	bl	800a040 <_ai_platform_acquire_crc>
 800a2ec:	4b68      	ldr	r3, [pc, #416]	; (800a490 <ai_platform_inputs_get+0x1cc>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2f8:	d00d      	beq.n	800a316 <ai_platform_inputs_get+0x52>
 800a2fa:	4b66      	ldr	r3, [pc, #408]	; (800a494 <ai_platform_inputs_get+0x1d0>)
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	601a      	str	r2, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	2a00      	cmp	r2, #0
 800a304:	d1fc      	bne.n	800a300 <ai_platform_inputs_get+0x3c>
 800a306:	4b64      	ldr	r3, [pc, #400]	; (800a498 <ai_platform_inputs_get+0x1d4>)
 800a308:	4a64      	ldr	r2, [pc, #400]	; (800a49c <ai_platform_inputs_get+0x1d8>)
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	4b64      	ldr	r3, [pc, #400]	; (800a4a0 <ai_platform_inputs_get+0x1dc>)
 800a310:	429a      	cmp	r2, r3
 800a312:	d00d      	beq.n	800a330 <ai_platform_inputs_get+0x6c>
 800a314:	e7fe      	b.n	800a314 <ai_platform_inputs_get+0x50>
 800a316:	4b63      	ldr	r3, [pc, #396]	; (800a4a4 <ai_platform_inputs_get+0x1e0>)
 800a318:	2201      	movs	r2, #1
 800a31a:	601a      	str	r2, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	2a00      	cmp	r2, #0
 800a320:	d1fc      	bne.n	800a31c <ai_platform_inputs_get+0x58>
 800a322:	4b61      	ldr	r3, [pc, #388]	; (800a4a8 <ai_platform_inputs_get+0x1e4>)
 800a324:	4a5d      	ldr	r2, [pc, #372]	; (800a49c <ai_platform_inputs_get+0x1d8>)
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	4b5d      	ldr	r3, [pc, #372]	; (800a4a0 <ai_platform_inputs_get+0x1dc>)
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d16f      	bne.n	800a410 <ai_platform_inputs_get+0x14c>
 800a330:	f7ff fe88 	bl	800a044 <_ai_platform_release_crc>
 800a334:	f1bb 0f00 	cmp.w	fp, #0
 800a338:	d002      	beq.n	800a340 <ai_platform_inputs_get+0x7c>
 800a33a:	2300      	movs	r3, #0
 800a33c:	f8ab 3000 	strh.w	r3, [fp]
 800a340:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a342:	2b00      	cmp	r3, #0
 800a344:	f000 8081 	beq.w	800a44a <ai_platform_inputs_get+0x186>
 800a348:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800a34a:	2e00      	cmp	r6, #0
 800a34c:	d07d      	beq.n	800a44a <ai_platform_inputs_get+0x186>
 800a34e:	8833      	ldrh	r3, [r6, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d07a      	beq.n	800a44a <ai_platform_inputs_get+0x186>
 800a354:	6873      	ldr	r3, [r6, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d077      	beq.n	800a44a <ai_platform_inputs_get+0x186>
 800a35a:	681d      	ldr	r5, [r3, #0]
 800a35c:	2d00      	cmp	r5, #0
 800a35e:	d074      	beq.n	800a44a <ai_platform_inputs_get+0x186>
 800a360:	f04f 0800 	mov.w	r8, #0
 800a364:	f8cd b008 	str.w	fp, [sp, #8]
 800a368:	46c1      	mov	r9, r8
 800a36a:	46bb      	mov	fp, r7
 800a36c:	68b0      	ldr	r0, [r6, #8]
 800a36e:	69aa      	ldr	r2, [r5, #24]
 800a370:	68ab      	ldr	r3, [r5, #8]
 800a372:	6844      	ldr	r4, [r0, #4]
 800a374:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800a378:	6810      	ldr	r0, [r2, #0]
 800a37a:	68ef      	ldr	r7, [r5, #12]
 800a37c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800a380:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a384:	9301      	str	r3, [sp, #4]
 800a386:	9203      	str	r2, [sp, #12]
 800a388:	f006 ff20 	bl	80111cc <ai_array_to_buffer_fmt>
 800a38c:	9a03      	ldr	r2, [sp, #12]
 800a38e:	4601      	mov	r1, r0
 800a390:	69a8      	ldr	r0, [r5, #24]
 800a392:	eb0a 0302 	add.w	r3, sl, r2
 800a396:	4444      	add	r4, r8
 800a398:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800a39c:	b16b      	cbz	r3, 800a3ba <ai_platform_inputs_get+0xf6>
 800a39e:	2000      	movs	r0, #0
 800a3a0:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 800a3a4:	6828      	ldr	r0, [r5, #0]
 800a3a6:	6058      	str	r0, [r3, #4]
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d058      	beq.n	800a45e <ai_platform_inputs_get+0x19a>
 800a3ac:	8840      	ldrh	r0, [r0, #2]
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d055      	beq.n	800a45e <ai_platform_inputs_get+0x19a>
 800a3b2:	2001      	movs	r0, #1
 800a3b4:	f84a 0002 	str.w	r0, [sl, r2]
 800a3b8:	69a8      	ldr	r0, [r5, #24]
 800a3ba:	6842      	ldr	r2, [r0, #4]
 800a3bc:	6122      	str	r2, [r4, #16]
 800a3be:	f04f 0001 	mov.w	r0, #1
 800a3c2:	7520      	strb	r0, [r4, #20]
 800a3c4:	9a01      	ldr	r2, [sp, #4]
 800a3c6:	6960      	ldr	r0, [r4, #20]
 800a3c8:	60a3      	str	r3, [r4, #8]
 800a3ca:	f362 201f 	bfi	r0, r2, #8, #24
 800a3ce:	e9c4 1e00 	strd	r1, lr, [r4]
 800a3d2:	e9c4 0705 	strd	r0, r7, [r4, #20]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	60e3      	str	r3, [r4, #12]
 800a3da:	8830      	ldrh	r0, [r6, #0]
 800a3dc:	f109 0301 	add.w	r3, r9, #1
 800a3e0:	4283      	cmp	r3, r0
 800a3e2:	4699      	mov	r9, r3
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	d207      	bcs.n	800a3f8 <ai_platform_inputs_get+0x134>
 800a3e8:	6870      	ldr	r0, [r6, #4]
 800a3ea:	b128      	cbz	r0, 800a3f8 <ai_platform_inputs_get+0x134>
 800a3ec:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800a3f0:	f108 081c 	add.w	r8, r8, #28
 800a3f4:	2d00      	cmp	r5, #0
 800a3f6:	d1b9      	bne.n	800a36c <ai_platform_inputs_get+0xa8>
 800a3f8:	465f      	mov	r7, fp
 800a3fa:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a3fe:	b322      	cbz	r2, 800a44a <ai_platform_inputs_get+0x186>
 800a400:	68b3      	ldr	r3, [r6, #8]
 800a402:	6858      	ldr	r0, [r3, #4]
 800a404:	f1bb 0f00 	cmp.w	fp, #0
 800a408:	d026      	beq.n	800a458 <ai_platform_inputs_get+0x194>
 800a40a:	f8ab 2000 	strh.w	r2, [fp]
 800a40e:	e023      	b.n	800a458 <ai_platform_inputs_get+0x194>
 800a410:	e7fe      	b.n	800a410 <ai_platform_inputs_get+0x14c>
 800a412:	4a1e      	ldr	r2, [pc, #120]	; (800a48c <ai_platform_inputs_get+0x1c8>)
 800a414:	6813      	ldr	r3, [r2, #0]
 800a416:	f023 0301 	bic.w	r3, r3, #1
 800a41a:	6013      	str	r3, [r2, #0]
 800a41c:	f7ff fe10 	bl	800a040 <_ai_platform_acquire_crc>
 800a420:	4b1b      	ldr	r3, [pc, #108]	; (800a490 <ai_platform_inputs_get+0x1cc>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a42c:	d01a      	beq.n	800a464 <ai_platform_inputs_get+0x1a0>
 800a42e:	4b19      	ldr	r3, [pc, #100]	; (800a494 <ai_platform_inputs_get+0x1d0>)
 800a430:	2201      	movs	r2, #1
 800a432:	601a      	str	r2, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	2a00      	cmp	r2, #0
 800a438:	d1fc      	bne.n	800a434 <ai_platform_inputs_get+0x170>
 800a43a:	4b17      	ldr	r3, [pc, #92]	; (800a498 <ai_platform_inputs_get+0x1d4>)
 800a43c:	4a17      	ldr	r2, [pc, #92]	; (800a49c <ai_platform_inputs_get+0x1d8>)
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	4b17      	ldr	r3, [pc, #92]	; (800a4a0 <ai_platform_inputs_get+0x1dc>)
 800a444:	429a      	cmp	r2, r3
 800a446:	d01b      	beq.n	800a480 <ai_platform_inputs_get+0x1bc>
 800a448:	e7fe      	b.n	800a448 <ai_platform_inputs_get+0x184>
 800a44a:	f107 0010 	add.w	r0, r7, #16
 800a44e:	2218      	movs	r2, #24
 800a450:	2111      	movs	r1, #17
 800a452:	f000 ff6b 	bl	800b32c <core_set_error>
 800a456:	2000      	movs	r0, #0
 800a458:	b005      	add	sp, #20
 800a45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a45e:	69a8      	ldr	r0, [r5, #24]
 800a460:	2300      	movs	r3, #0
 800a462:	e7aa      	b.n	800a3ba <ai_platform_inputs_get+0xf6>
 800a464:	4b0f      	ldr	r3, [pc, #60]	; (800a4a4 <ai_platform_inputs_get+0x1e0>)
 800a466:	2201      	movs	r2, #1
 800a468:	601a      	str	r2, [r3, #0]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	2a00      	cmp	r2, #0
 800a46e:	d1fc      	bne.n	800a46a <ai_platform_inputs_get+0x1a6>
 800a470:	4b0d      	ldr	r3, [pc, #52]	; (800a4a8 <ai_platform_inputs_get+0x1e4>)
 800a472:	4a0a      	ldr	r2, [pc, #40]	; (800a49c <ai_platform_inputs_get+0x1d8>)
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	4b09      	ldr	r3, [pc, #36]	; (800a4a0 <ai_platform_inputs_get+0x1dc>)
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d000      	beq.n	800a480 <ai_platform_inputs_get+0x1bc>
 800a47e:	e7fe      	b.n	800a47e <ai_platform_inputs_get+0x1ba>
 800a480:	f7ff fde0 	bl	800a044 <_ai_platform_release_crc>
 800a484:	2000      	movs	r0, #0
 800a486:	e7e7      	b.n	800a458 <ai_platform_inputs_get+0x194>
 800a488:	a1c00100 	.word	0xa1c00100
 800a48c:	e0002000 	.word	0xe0002000
 800a490:	e0042000 	.word	0xe0042000
 800a494:	58024c08 	.word	0x58024c08
 800a498:	58024c00 	.word	0x58024c00
 800a49c:	f407a5c2 	.word	0xf407a5c2
 800a4a0:	b5e8b5cd 	.word	0xb5e8b5cd
 800a4a4:	40023008 	.word	0x40023008
 800a4a8:	40023000 	.word	0x40023000

0800a4ac <ai_platform_outputs_get>:
 800a4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b0:	b085      	sub	sp, #20
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	f000 80a9 	beq.w	800a60a <ai_platform_outputs_get+0x15e>
 800a4b8:	4b70      	ldr	r3, [pc, #448]	; (800a67c <ai_platform_outputs_get+0x1d0>)
 800a4ba:	6802      	ldr	r2, [r0, #0]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	4607      	mov	r7, r0
 800a4c0:	f040 80a3 	bne.w	800a60a <ai_platform_outputs_get+0x15e>
 800a4c4:	4a6e      	ldr	r2, [pc, #440]	; (800a680 <ai_platform_outputs_get+0x1d4>)
 800a4c6:	6813      	ldr	r3, [r2, #0]
 800a4c8:	f023 0301 	bic.w	r3, r3, #1
 800a4cc:	6013      	str	r3, [r2, #0]
 800a4ce:	468b      	mov	fp, r1
 800a4d0:	f7ff fdb6 	bl	800a040 <_ai_platform_acquire_crc>
 800a4d4:	4b6b      	ldr	r3, [pc, #428]	; (800a684 <ai_platform_outputs_get+0x1d8>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4e0:	d00d      	beq.n	800a4fe <ai_platform_outputs_get+0x52>
 800a4e2:	4b69      	ldr	r3, [pc, #420]	; (800a688 <ai_platform_outputs_get+0x1dc>)
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	601a      	str	r2, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	2a00      	cmp	r2, #0
 800a4ec:	d1fc      	bne.n	800a4e8 <ai_platform_outputs_get+0x3c>
 800a4ee:	4b67      	ldr	r3, [pc, #412]	; (800a68c <ai_platform_outputs_get+0x1e0>)
 800a4f0:	4a67      	ldr	r2, [pc, #412]	; (800a690 <ai_platform_outputs_get+0x1e4>)
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	4b67      	ldr	r3, [pc, #412]	; (800a694 <ai_platform_outputs_get+0x1e8>)
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d00d      	beq.n	800a518 <ai_platform_outputs_get+0x6c>
 800a4fc:	e7fe      	b.n	800a4fc <ai_platform_outputs_get+0x50>
 800a4fe:	4b66      	ldr	r3, [pc, #408]	; (800a698 <ai_platform_outputs_get+0x1ec>)
 800a500:	2201      	movs	r2, #1
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	2a00      	cmp	r2, #0
 800a508:	d1fc      	bne.n	800a504 <ai_platform_outputs_get+0x58>
 800a50a:	4b64      	ldr	r3, [pc, #400]	; (800a69c <ai_platform_outputs_get+0x1f0>)
 800a50c:	4a60      	ldr	r2, [pc, #384]	; (800a690 <ai_platform_outputs_get+0x1e4>)
 800a50e:	601a      	str	r2, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	4b60      	ldr	r3, [pc, #384]	; (800a694 <ai_platform_outputs_get+0x1e8>)
 800a514:	429a      	cmp	r2, r3
 800a516:	d177      	bne.n	800a608 <ai_platform_outputs_get+0x15c>
 800a518:	f7ff fd94 	bl	800a044 <_ai_platform_release_crc>
 800a51c:	f1bb 0f00 	cmp.w	fp, #0
 800a520:	d002      	beq.n	800a528 <ai_platform_outputs_get+0x7c>
 800a522:	2300      	movs	r3, #0
 800a524:	f8ab 3000 	strh.w	r3, [fp]
 800a528:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	f240 809a 	bls.w	800a664 <ai_platform_outputs_get+0x1b8>
 800a530:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800a532:	f116 0f0c 	cmn.w	r6, #12
 800a536:	f000 8095 	beq.w	800a664 <ai_platform_outputs_get+0x1b8>
 800a53a:	89b3      	ldrh	r3, [r6, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 8091 	beq.w	800a664 <ai_platform_outputs_get+0x1b8>
 800a542:	6933      	ldr	r3, [r6, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 808d 	beq.w	800a664 <ai_platform_outputs_get+0x1b8>
 800a54a:	681d      	ldr	r5, [r3, #0]
 800a54c:	2d00      	cmp	r5, #0
 800a54e:	f000 8089 	beq.w	800a664 <ai_platform_outputs_get+0x1b8>
 800a552:	f04f 0800 	mov.w	r8, #0
 800a556:	f8cd b008 	str.w	fp, [sp, #8]
 800a55a:	46c1      	mov	r9, r8
 800a55c:	46bb      	mov	fp, r7
 800a55e:	6970      	ldr	r0, [r6, #20]
 800a560:	69aa      	ldr	r2, [r5, #24]
 800a562:	68ab      	ldr	r3, [r5, #8]
 800a564:	6844      	ldr	r4, [r0, #4]
 800a566:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800a56a:	6810      	ldr	r0, [r2, #0]
 800a56c:	68ef      	ldr	r7, [r5, #12]
 800a56e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800a572:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a576:	9301      	str	r3, [sp, #4]
 800a578:	9203      	str	r2, [sp, #12]
 800a57a:	f006 fe27 	bl	80111cc <ai_array_to_buffer_fmt>
 800a57e:	9a03      	ldr	r2, [sp, #12]
 800a580:	4601      	mov	r1, r0
 800a582:	69a8      	ldr	r0, [r5, #24]
 800a584:	eb0a 0302 	add.w	r3, sl, r2
 800a588:	4444      	add	r4, r8
 800a58a:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800a58e:	b16b      	cbz	r3, 800a5ac <ai_platform_outputs_get+0x100>
 800a590:	2000      	movs	r0, #0
 800a592:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 800a596:	6828      	ldr	r0, [r5, #0]
 800a598:	6058      	str	r0, [r3, #4]
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d051      	beq.n	800a642 <ai_platform_outputs_get+0x196>
 800a59e:	8840      	ldrh	r0, [r0, #2]
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d04e      	beq.n	800a642 <ai_platform_outputs_get+0x196>
 800a5a4:	2001      	movs	r0, #1
 800a5a6:	f84a 0002 	str.w	r0, [sl, r2]
 800a5aa:	69a8      	ldr	r0, [r5, #24]
 800a5ac:	6842      	ldr	r2, [r0, #4]
 800a5ae:	6122      	str	r2, [r4, #16]
 800a5b0:	f04f 0001 	mov.w	r0, #1
 800a5b4:	7520      	strb	r0, [r4, #20]
 800a5b6:	9a01      	ldr	r2, [sp, #4]
 800a5b8:	6960      	ldr	r0, [r4, #20]
 800a5ba:	60a3      	str	r3, [r4, #8]
 800a5bc:	f362 201f 	bfi	r0, r2, #8, #24
 800a5c0:	e9c4 1e00 	strd	r1, lr, [r4]
 800a5c4:	e9c4 0705 	strd	r0, r7, [r4, #20]
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	60e3      	str	r3, [r4, #12]
 800a5cc:	89b0      	ldrh	r0, [r6, #12]
 800a5ce:	f109 0301 	add.w	r3, r9, #1
 800a5d2:	4283      	cmp	r3, r0
 800a5d4:	4699      	mov	r9, r3
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	d207      	bcs.n	800a5ea <ai_platform_outputs_get+0x13e>
 800a5da:	6930      	ldr	r0, [r6, #16]
 800a5dc:	b128      	cbz	r0, 800a5ea <ai_platform_outputs_get+0x13e>
 800a5de:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800a5e2:	f108 081c 	add.w	r8, r8, #28
 800a5e6:	2d00      	cmp	r5, #0
 800a5e8:	d1b9      	bne.n	800a55e <ai_platform_outputs_get+0xb2>
 800a5ea:	465f      	mov	r7, fp
 800a5ec:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a5f0:	2a00      	cmp	r2, #0
 800a5f2:	d037      	beq.n	800a664 <ai_platform_outputs_get+0x1b8>
 800a5f4:	6973      	ldr	r3, [r6, #20]
 800a5f6:	6858      	ldr	r0, [r3, #4]
 800a5f8:	f1bb 0f00 	cmp.w	fp, #0
 800a5fc:	d001      	beq.n	800a602 <ai_platform_outputs_get+0x156>
 800a5fe:	f8ab 2000 	strh.w	r2, [fp]
 800a602:	b005      	add	sp, #20
 800a604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a608:	e7fe      	b.n	800a608 <ai_platform_outputs_get+0x15c>
 800a60a:	4a1d      	ldr	r2, [pc, #116]	; (800a680 <ai_platform_outputs_get+0x1d4>)
 800a60c:	6813      	ldr	r3, [r2, #0]
 800a60e:	f023 0301 	bic.w	r3, r3, #1
 800a612:	6013      	str	r3, [r2, #0]
 800a614:	f7ff fd14 	bl	800a040 <_ai_platform_acquire_crc>
 800a618:	4b1a      	ldr	r3, [pc, #104]	; (800a684 <ai_platform_outputs_get+0x1d8>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a624:	d010      	beq.n	800a648 <ai_platform_outputs_get+0x19c>
 800a626:	4b18      	ldr	r3, [pc, #96]	; (800a688 <ai_platform_outputs_get+0x1dc>)
 800a628:	2201      	movs	r2, #1
 800a62a:	601a      	str	r2, [r3, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	2a00      	cmp	r2, #0
 800a630:	d1fc      	bne.n	800a62c <ai_platform_outputs_get+0x180>
 800a632:	4b16      	ldr	r3, [pc, #88]	; (800a68c <ai_platform_outputs_get+0x1e0>)
 800a634:	4a16      	ldr	r2, [pc, #88]	; (800a690 <ai_platform_outputs_get+0x1e4>)
 800a636:	601a      	str	r2, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	4b16      	ldr	r3, [pc, #88]	; (800a694 <ai_platform_outputs_get+0x1e8>)
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d019      	beq.n	800a674 <ai_platform_outputs_get+0x1c8>
 800a640:	e7fe      	b.n	800a640 <ai_platform_outputs_get+0x194>
 800a642:	69a8      	ldr	r0, [r5, #24]
 800a644:	2300      	movs	r3, #0
 800a646:	e7b1      	b.n	800a5ac <ai_platform_outputs_get+0x100>
 800a648:	4b13      	ldr	r3, [pc, #76]	; (800a698 <ai_platform_outputs_get+0x1ec>)
 800a64a:	2201      	movs	r2, #1
 800a64c:	601a      	str	r2, [r3, #0]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	2a00      	cmp	r2, #0
 800a652:	d1fc      	bne.n	800a64e <ai_platform_outputs_get+0x1a2>
 800a654:	4b11      	ldr	r3, [pc, #68]	; (800a69c <ai_platform_outputs_get+0x1f0>)
 800a656:	4a0e      	ldr	r2, [pc, #56]	; (800a690 <ai_platform_outputs_get+0x1e4>)
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	4b0d      	ldr	r3, [pc, #52]	; (800a694 <ai_platform_outputs_get+0x1e8>)
 800a65e:	429a      	cmp	r2, r3
 800a660:	d008      	beq.n	800a674 <ai_platform_outputs_get+0x1c8>
 800a662:	e7fe      	b.n	800a662 <ai_platform_outputs_get+0x1b6>
 800a664:	f107 0010 	add.w	r0, r7, #16
 800a668:	2218      	movs	r2, #24
 800a66a:	2111      	movs	r1, #17
 800a66c:	f000 fe5e 	bl	800b32c <core_set_error>
 800a670:	2000      	movs	r0, #0
 800a672:	e7c6      	b.n	800a602 <ai_platform_outputs_get+0x156>
 800a674:	f7ff fce6 	bl	800a044 <_ai_platform_release_crc>
 800a678:	2000      	movs	r0, #0
 800a67a:	e7c2      	b.n	800a602 <ai_platform_outputs_get+0x156>
 800a67c:	a1c00100 	.word	0xa1c00100
 800a680:	e0002000 	.word	0xe0002000
 800a684:	e0042000 	.word	0xe0042000
 800a688:	58024c08 	.word	0x58024c08
 800a68c:	58024c00 	.word	0x58024c00
 800a690:	f407a5c2 	.word	0xf407a5c2
 800a694:	b5e8b5cd 	.word	0xb5e8b5cd
 800a698:	40023008 	.word	0x40023008
 800a69c:	40023000 	.word	0x40023000

0800a6a0 <ai_platform_network_create>:
 800a6a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6a4:	b083      	sub	sp, #12
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	4615      	mov	r5, r2
 800a6aa:	461f      	mov	r7, r3
 800a6ac:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800a6b0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800a6b4:	f7ff fcc4 	bl	800a040 <_ai_platform_acquire_crc>
 800a6b8:	b178      	cbz	r0, 800a6da <ai_platform_network_create+0x3a>
 800a6ba:	4b5f      	ldr	r3, [pc, #380]	; (800a838 <ai_platform_network_create+0x198>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	d00d      	beq.n	800a6e6 <ai_platform_network_create+0x46>
 800a6ca:	4b5c      	ldr	r3, [pc, #368]	; (800a83c <ai_platform_network_create+0x19c>)
 800a6cc:	2118      	movs	r1, #24
 800a6ce:	6019      	str	r1, [r3, #0]
 800a6d0:	6819      	ldr	r1, [r3, #0]
 800a6d2:	2918      	cmp	r1, #24
 800a6d4:	d01a      	beq.n	800a70c <ai_platform_network_create+0x6c>
 800a6d6:	f7ff fcb5 	bl	800a044 <_ai_platform_release_crc>
 800a6da:	f244 1333 	movw	r3, #16691	; 0x4133
 800a6de:	4618      	mov	r0, r3
 800a6e0:	b003      	add	sp, #12
 800a6e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6e6:	4b56      	ldr	r3, [pc, #344]	; (800a840 <ai_platform_network_create+0x1a0>)
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	6019      	str	r1, [r3, #0]
 800a6ec:	2114      	movs	r1, #20
 800a6ee:	e001      	b.n	800a6f4 <ai_platform_network_create+0x54>
 800a6f0:	3901      	subs	r1, #1
 800a6f2:	d002      	beq.n	800a6fa <ai_platform_network_create+0x5a>
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d1fa      	bne.n	800a6f0 <ai_platform_network_create+0x50>
 800a6fa:	4b51      	ldr	r3, [pc, #324]	; (800a840 <ai_platform_network_create+0x1a0>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	b91b      	cbnz	r3, 800a708 <ai_platform_network_create+0x68>
 800a700:	4b50      	ldr	r3, [pc, #320]	; (800a844 <ai_platform_network_create+0x1a4>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	3301      	adds	r3, #1
 800a706:	d006      	beq.n	800a716 <ai_platform_network_create+0x76>
 800a708:	4610      	mov	r0, r2
 800a70a:	e7e4      	b.n	800a6d6 <ai_platform_network_create+0x36>
 800a70c:	2101      	movs	r1, #1
 800a70e:	6019      	str	r1, [r3, #0]
 800a710:	6819      	ldr	r1, [r3, #0]
 800a712:	2900      	cmp	r1, #0
 800a714:	d1fc      	bne.n	800a710 <ai_platform_network_create+0x70>
 800a716:	4610      	mov	r0, r2
 800a718:	f7ff fc94 	bl	800a044 <_ai_platform_release_crc>
 800a71c:	4a4a      	ldr	r2, [pc, #296]	; (800a848 <ai_platform_network_create+0x1a8>)
 800a71e:	6813      	ldr	r3, [r2, #0]
 800a720:	f023 0301 	bic.w	r3, r3, #1
 800a724:	6013      	str	r3, [r2, #0]
 800a726:	f7ff fc8b 	bl	800a040 <_ai_platform_acquire_crc>
 800a72a:	4b43      	ldr	r3, [pc, #268]	; (800a838 <ai_platform_network_create+0x198>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a736:	d00d      	beq.n	800a754 <ai_platform_network_create+0xb4>
 800a738:	4b40      	ldr	r3, [pc, #256]	; (800a83c <ai_platform_network_create+0x19c>)
 800a73a:	2201      	movs	r2, #1
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	2a00      	cmp	r2, #0
 800a742:	d1fc      	bne.n	800a73e <ai_platform_network_create+0x9e>
 800a744:	4b41      	ldr	r3, [pc, #260]	; (800a84c <ai_platform_network_create+0x1ac>)
 800a746:	4a42      	ldr	r2, [pc, #264]	; (800a850 <ai_platform_network_create+0x1b0>)
 800a748:	601a      	str	r2, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	4b41      	ldr	r3, [pc, #260]	; (800a854 <ai_platform_network_create+0x1b4>)
 800a74e:	429a      	cmp	r2, r3
 800a750:	d00e      	beq.n	800a770 <ai_platform_network_create+0xd0>
 800a752:	e7fe      	b.n	800a752 <ai_platform_network_create+0xb2>
 800a754:	4b3a      	ldr	r3, [pc, #232]	; (800a840 <ai_platform_network_create+0x1a0>)
 800a756:	2201      	movs	r2, #1
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	2a00      	cmp	r2, #0
 800a75e:	d1fc      	bne.n	800a75a <ai_platform_network_create+0xba>
 800a760:	4b38      	ldr	r3, [pc, #224]	; (800a844 <ai_platform_network_create+0x1a4>)
 800a762:	4a3b      	ldr	r2, [pc, #236]	; (800a850 <ai_platform_network_create+0x1b0>)
 800a764:	601a      	str	r2, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	4b3a      	ldr	r3, [pc, #232]	; (800a854 <ai_platform_network_create+0x1b4>)
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d000      	beq.n	800a770 <ai_platform_network_create+0xd0>
 800a76e:	e7fe      	b.n	800a76e <ai_platform_network_create+0xce>
 800a770:	f7ff fc68 	bl	800a044 <_ai_platform_release_crc>
 800a774:	b1ae      	cbz	r6, 800a7a2 <ai_platform_network_create+0x102>
 800a776:	4b38      	ldr	r3, [pc, #224]	; (800a858 <ai_platform_network_create+0x1b8>)
 800a778:	602b      	str	r3, [r5, #0]
 800a77a:	6035      	str	r5, [r6, #0]
 800a77c:	f000 fdce 	bl	800b31c <core_init>
 800a780:	b990      	cbnz	r0, 800a7a8 <ai_platform_network_create+0x108>
 800a782:	2430      	movs	r4, #48	; 0x30
 800a784:	2300      	movs	r3, #0
 800a786:	6033      	str	r3, [r6, #0]
 800a788:	2610      	movs	r6, #16
 800a78a:	464a      	mov	r2, r9
 800a78c:	4641      	mov	r1, r8
 800a78e:	4638      	mov	r0, r7
 800a790:	f006 fd02 	bl	8011198 <ai_version_get>
 800a794:	2300      	movs	r3, #0
 800a796:	f364 0307 	bfi	r3, r4, #0, #8
 800a79a:	6468      	str	r0, [r5, #68]	; 0x44
 800a79c:	f366 231f 	bfi	r3, r6, #8, #24
 800a7a0:	e79d      	b.n	800a6de <ai_platform_network_create+0x3e>
 800a7a2:	f241 0310 	movw	r3, #4112	; 0x1010
 800a7a6:	e79a      	b.n	800a6de <ai_platform_network_create+0x3e>
 800a7a8:	4a27      	ldr	r2, [pc, #156]	; (800a848 <ai_platform_network_create+0x1a8>)
 800a7aa:	6813      	ldr	r3, [r2, #0]
 800a7ac:	f023 0301 	bic.w	r3, r3, #1
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	f7ff fc45 	bl	800a040 <_ai_platform_acquire_crc>
 800a7b6:	4b20      	ldr	r3, [pc, #128]	; (800a838 <ai_platform_network_create+0x198>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7c2:	d00d      	beq.n	800a7e0 <ai_platform_network_create+0x140>
 800a7c4:	4b1d      	ldr	r3, [pc, #116]	; (800a83c <ai_platform_network_create+0x19c>)
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	601a      	str	r2, [r3, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	2a00      	cmp	r2, #0
 800a7ce:	d1fc      	bne.n	800a7ca <ai_platform_network_create+0x12a>
 800a7d0:	4b1e      	ldr	r3, [pc, #120]	; (800a84c <ai_platform_network_create+0x1ac>)
 800a7d2:	4a1f      	ldr	r2, [pc, #124]	; (800a850 <ai_platform_network_create+0x1b0>)
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	4b1e      	ldr	r3, [pc, #120]	; (800a854 <ai_platform_network_create+0x1b4>)
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d00e      	beq.n	800a7fc <ai_platform_network_create+0x15c>
 800a7de:	e7fe      	b.n	800a7de <ai_platform_network_create+0x13e>
 800a7e0:	4b17      	ldr	r3, [pc, #92]	; (800a840 <ai_platform_network_create+0x1a0>)
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	2a00      	cmp	r2, #0
 800a7ea:	d1fc      	bne.n	800a7e6 <ai_platform_network_create+0x146>
 800a7ec:	4b15      	ldr	r3, [pc, #84]	; (800a844 <ai_platform_network_create+0x1a4>)
 800a7ee:	4a18      	ldr	r2, [pc, #96]	; (800a850 <ai_platform_network_create+0x1b0>)
 800a7f0:	601a      	str	r2, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	4b17      	ldr	r3, [pc, #92]	; (800a854 <ai_platform_network_create+0x1b4>)
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d000      	beq.n	800a7fc <ai_platform_network_create+0x15c>
 800a7fa:	e7fe      	b.n	800a7fa <ai_platform_network_create+0x15a>
 800a7fc:	f7ff fc22 	bl	800a044 <_ai_platform_release_crc>
 800a800:	2200      	movs	r2, #0
 800a802:	4641      	mov	r1, r8
 800a804:	4638      	mov	r0, r7
 800a806:	f006 fcc7 	bl	8011198 <ai_version_get>
 800a80a:	2200      	movs	r2, #0
 800a80c:	4604      	mov	r4, r0
 800a80e:	2105      	movs	r1, #5
 800a810:	2001      	movs	r0, #1
 800a812:	f006 fcc1 	bl	8011198 <ai_version_get>
 800a816:	4284      	cmp	r4, r0
 800a818:	d001      	beq.n	800a81e <ai_platform_network_create+0x17e>
 800a81a:	2401      	movs	r4, #1
 800a81c:	e7b2      	b.n	800a784 <ai_platform_network_create+0xe4>
 800a81e:	a802      	add	r0, sp, #8
 800a820:	4b0e      	ldr	r3, [pc, #56]	; (800a85c <ai_platform_network_create+0x1bc>)
 800a822:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a826:	f001 fafd 	bl	800be24 <ai_check_custom_types>
 800a82a:	b110      	cbz	r0, 800a832 <ai_platform_network_create+0x192>
 800a82c:	2600      	movs	r6, #0
 800a82e:	4634      	mov	r4, r6
 800a830:	e7ab      	b.n	800a78a <ai_platform_network_create+0xea>
 800a832:	2402      	movs	r4, #2
 800a834:	e7a6      	b.n	800a784 <ai_platform_network_create+0xe4>
 800a836:	bf00      	nop
 800a838:	e0042000 	.word	0xe0042000
 800a83c:	58024c08 	.word	0x58024c08
 800a840:	40023008 	.word	0x40023008
 800a844:	40023000 	.word	0x40023000
 800a848:	e0002000 	.word	0xe0002000
 800a84c:	58024c00 	.word	0x58024c00
 800a850:	f407a5c2 	.word	0xf407a5c2
 800a854:	b5e8b5cd 	.word	0xb5e8b5cd
 800a858:	a1c00100 	.word	0xa1c00100
 800a85c:	84048403 	.word	0x84048403

0800a860 <ai_platform_network_init>:
 800a860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a864:	2800      	cmp	r0, #0
 800a866:	d04b      	beq.n	800a900 <ai_platform_network_init+0xa0>
 800a868:	4b79      	ldr	r3, [pc, #484]	; (800aa50 <ai_platform_network_init+0x1f0>)
 800a86a:	6802      	ldr	r2, [r0, #0]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	4604      	mov	r4, r0
 800a870:	d146      	bne.n	800a900 <ai_platform_network_init+0xa0>
 800a872:	4a78      	ldr	r2, [pc, #480]	; (800aa54 <ai_platform_network_init+0x1f4>)
 800a874:	6813      	ldr	r3, [r2, #0]
 800a876:	f023 0301 	bic.w	r3, r3, #1
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	460e      	mov	r6, r1
 800a87e:	f7ff fbdf 	bl	800a040 <_ai_platform_acquire_crc>
 800a882:	4b75      	ldr	r3, [pc, #468]	; (800aa58 <ai_platform_network_init+0x1f8>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a88a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a88e:	d00d      	beq.n	800a8ac <ai_platform_network_init+0x4c>
 800a890:	4b72      	ldr	r3, [pc, #456]	; (800aa5c <ai_platform_network_init+0x1fc>)
 800a892:	2201      	movs	r2, #1
 800a894:	601a      	str	r2, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	2a00      	cmp	r2, #0
 800a89a:	d1fc      	bne.n	800a896 <ai_platform_network_init+0x36>
 800a89c:	4b70      	ldr	r3, [pc, #448]	; (800aa60 <ai_platform_network_init+0x200>)
 800a89e:	4a71      	ldr	r2, [pc, #452]	; (800aa64 <ai_platform_network_init+0x204>)
 800a8a0:	601a      	str	r2, [r3, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	4b70      	ldr	r3, [pc, #448]	; (800aa68 <ai_platform_network_init+0x208>)
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d00d      	beq.n	800a8c6 <ai_platform_network_init+0x66>
 800a8aa:	e7fe      	b.n	800a8aa <ai_platform_network_init+0x4a>
 800a8ac:	4b6f      	ldr	r3, [pc, #444]	; (800aa6c <ai_platform_network_init+0x20c>)
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	2a00      	cmp	r2, #0
 800a8b6:	d1fc      	bne.n	800a8b2 <ai_platform_network_init+0x52>
 800a8b8:	4b6d      	ldr	r3, [pc, #436]	; (800aa70 <ai_platform_network_init+0x210>)
 800a8ba:	4a6a      	ldr	r2, [pc, #424]	; (800aa64 <ai_platform_network_init+0x204>)
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	4b69      	ldr	r3, [pc, #420]	; (800aa68 <ai_platform_network_init+0x208>)
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d11b      	bne.n	800a8fe <ai_platform_network_init+0x9e>
 800a8c6:	f7ff fbbd 	bl	800a044 <_ai_platform_release_crc>
 800a8ca:	2e00      	cmp	r6, #0
 800a8cc:	d034      	beq.n	800a938 <ai_platform_network_init+0xd8>
 800a8ce:	4b69      	ldr	r3, [pc, #420]	; (800aa74 <ai_platform_network_init+0x214>)
 800a8d0:	6832      	ldr	r2, [r6, #0]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d149      	bne.n	800a96a <ai_platform_network_init+0x10a>
 800a8d6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800a8da:	6930      	ldr	r0, [r6, #16]
 800a8dc:	89b3      	ldrh	r3, [r6, #12]
 800a8de:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 800a8e2:	62a0      	str	r0, [r4, #40]	; 0x28
 800a8e4:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800a8e8:	2203      	movs	r2, #3
 800a8ea:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800a8ee:	84a3      	strh	r3, [r4, #36]	; 0x24
 800a8f0:	60e2      	str	r2, [r4, #12]
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f001 fac0 	bl	800be78 <ai_layers_init_all>
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8fe:	e7fe      	b.n	800a8fe <ai_platform_network_init+0x9e>
 800a900:	4a54      	ldr	r2, [pc, #336]	; (800aa54 <ai_platform_network_init+0x1f4>)
 800a902:	6813      	ldr	r3, [r2, #0]
 800a904:	f023 0301 	bic.w	r3, r3, #1
 800a908:	6013      	str	r3, [r2, #0]
 800a90a:	f7ff fb99 	bl	800a040 <_ai_platform_acquire_crc>
 800a90e:	4b52      	ldr	r3, [pc, #328]	; (800aa58 <ai_platform_network_init+0x1f8>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a91a:	d015      	beq.n	800a948 <ai_platform_network_init+0xe8>
 800a91c:	4b4f      	ldr	r3, [pc, #316]	; (800aa5c <ai_platform_network_init+0x1fc>)
 800a91e:	2201      	movs	r2, #1
 800a920:	601a      	str	r2, [r3, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	2a00      	cmp	r2, #0
 800a926:	d1fc      	bne.n	800a922 <ai_platform_network_init+0xc2>
 800a928:	4b4d      	ldr	r3, [pc, #308]	; (800aa60 <ai_platform_network_init+0x200>)
 800a92a:	4a4e      	ldr	r2, [pc, #312]	; (800aa64 <ai_platform_network_init+0x204>)
 800a92c:	601a      	str	r2, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	4b4d      	ldr	r3, [pc, #308]	; (800aa68 <ai_platform_network_init+0x208>)
 800a932:	429a      	cmp	r2, r3
 800a934:	d015      	beq.n	800a962 <ai_platform_network_init+0x102>
 800a936:	e7fe      	b.n	800a936 <ai_platform_network_init+0xd6>
 800a938:	f104 0010 	add.w	r0, r4, #16
 800a93c:	2211      	movs	r2, #17
 800a93e:	2110      	movs	r1, #16
 800a940:	4634      	mov	r4, r6
 800a942:	f000 fcf3 	bl	800b32c <core_set_error>
 800a946:	e7d7      	b.n	800a8f8 <ai_platform_network_init+0x98>
 800a948:	4b48      	ldr	r3, [pc, #288]	; (800aa6c <ai_platform_network_init+0x20c>)
 800a94a:	2201      	movs	r2, #1
 800a94c:	601a      	str	r2, [r3, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	2a00      	cmp	r2, #0
 800a952:	d1fc      	bne.n	800a94e <ai_platform_network_init+0xee>
 800a954:	4b46      	ldr	r3, [pc, #280]	; (800aa70 <ai_platform_network_init+0x210>)
 800a956:	4a43      	ldr	r2, [pc, #268]	; (800aa64 <ai_platform_network_init+0x204>)
 800a958:	601a      	str	r2, [r3, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	4b42      	ldr	r3, [pc, #264]	; (800aa68 <ai_platform_network_init+0x208>)
 800a95e:	429a      	cmp	r2, r3
 800a960:	d16d      	bne.n	800aa3e <ai_platform_network_init+0x1de>
 800a962:	f7ff fb6f 	bl	800a044 <_ai_platform_release_crc>
 800a966:	2400      	movs	r4, #0
 800a968:	e7c6      	b.n	800a8f8 <ai_platform_network_init+0x98>
 800a96a:	4630      	mov	r0, r6
 800a96c:	2101      	movs	r1, #1
 800a96e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800a972:	f7ff fb19 	bl	8009fa8 <ai_buffer_get_size>
 800a976:	4635      	mov	r5, r6
 800a978:	f106 071c 	add.w	r7, r6, #28
 800a97c:	2101      	movs	r1, #1
 800a97e:	4606      	mov	r6, r0
 800a980:	4638      	mov	r0, r7
 800a982:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800a986:	f7ff fb0f 	bl	8009fa8 <ai_buffer_get_size>
 800a98a:	2e00      	cmp	r6, #0
 800a98c:	bf0a      	itet	eq
 800a98e:	46b6      	moveq	lr, r6
 800a990:	f04f 0e01 	movne.w	lr, #1
 800a994:	4635      	moveq	r5, r6
 800a996:	2800      	cmp	r0, #0
 800a998:	d14b      	bne.n	800aa32 <ai_platform_network_init+0x1d2>
 800a99a:	4607      	mov	r7, r0
 800a99c:	4684      	mov	ip, r0
 800a99e:	f1b8 0f00 	cmp.w	r8, #0
 800a9a2:	d023      	beq.n	800a9ec <ai_platform_network_init+0x18c>
 800a9a4:	8be3      	ldrh	r3, [r4, #30]
 800a9a6:	4573      	cmp	r3, lr
 800a9a8:	d207      	bcs.n	800a9ba <ai_platform_network_init+0x15a>
 800a9aa:	f104 0010 	add.w	r0, r4, #16
 800a9ae:	2212      	movs	r2, #18
 800a9b0:	2116      	movs	r1, #22
 800a9b2:	f000 fcbb 	bl	800b32c <core_set_error>
 800a9b6:	2400      	movs	r4, #0
 800a9b8:	e79e      	b.n	800a8f8 <ai_platform_network_init+0x98>
 800a9ba:	f1be 0f00 	cmp.w	lr, #0
 800a9be:	d006      	beq.n	800a9ce <ai_platform_network_init+0x16e>
 800a9c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9c2:	6a26      	ldr	r6, [r4, #32]
 800a9c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a9c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a9ca:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800a9ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a9d0:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800a9d4:	2600      	movs	r6, #0
 800a9d6:	4563      	cmp	r3, ip
 800a9d8:	83a6      	strh	r6, [r4, #28]
 800a9da:	d211      	bcs.n	800aa00 <ai_platform_network_init+0x1a0>
 800a9dc:	f104 0010 	add.w	r0, r4, #16
 800a9e0:	2213      	movs	r2, #19
 800a9e2:	2116      	movs	r1, #22
 800a9e4:	f000 fca2 	bl	800b32c <core_set_error>
 800a9e8:	4634      	mov	r4, r6
 800a9ea:	e785      	b.n	800a8f8 <ai_platform_network_init+0x98>
 800a9ec:	2e00      	cmp	r6, #0
 800a9ee:	d0d9      	beq.n	800a9a4 <ai_platform_network_init+0x144>
 800a9f0:	f104 0010 	add.w	r0, r4, #16
 800a9f4:	2212      	movs	r2, #18
 800a9f6:	2110      	movs	r1, #16
 800a9f8:	4644      	mov	r4, r8
 800a9fa:	f000 fc97 	bl	800b32c <core_set_error>
 800a9fe:	e77b      	b.n	800a8f8 <ai_platform_network_init+0x98>
 800aa00:	f1bc 0f00 	cmp.w	ip, #0
 800aa04:	d013      	beq.n	800aa2e <ai_platform_network_init+0x1ce>
 800aa06:	f04f 081c 	mov.w	r8, #28
 800aa0a:	fb08 f80c 	mul.w	r8, r8, ip
 800aa0e:	eb07 0e06 	add.w	lr, r7, r6
 800aa12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aa16:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800aa18:	4435      	add	r5, r6
 800aa1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa1c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800aa20:	361c      	adds	r6, #28
 800aa22:	4546      	cmp	r6, r8
 800aa24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800aa28:	d1f1      	bne.n	800aa0e <ai_platform_network_init+0x1ae>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	e75c      	b.n	800a8e8 <ai_platform_network_init+0x88>
 800aa2e:	4663      	mov	r3, ip
 800aa30:	e75a      	b.n	800a8e8 <ai_platform_network_init+0x88>
 800aa32:	f1b9 0f00 	cmp.w	r9, #0
 800aa36:	d003      	beq.n	800aa40 <ai_platform_network_init+0x1e0>
 800aa38:	f04f 0c01 	mov.w	ip, #1
 800aa3c:	e7af      	b.n	800a99e <ai_platform_network_init+0x13e>
 800aa3e:	e7fe      	b.n	800aa3e <ai_platform_network_init+0x1de>
 800aa40:	f104 0010 	add.w	r0, r4, #16
 800aa44:	2213      	movs	r2, #19
 800aa46:	2110      	movs	r1, #16
 800aa48:	464c      	mov	r4, r9
 800aa4a:	f000 fc6f 	bl	800b32c <core_set_error>
 800aa4e:	e753      	b.n	800a8f8 <ai_platform_network_init+0x98>
 800aa50:	a1c00100 	.word	0xa1c00100
 800aa54:	e0002000 	.word	0xe0002000
 800aa58:	e0042000 	.word	0xe0042000
 800aa5c:	58024c08 	.word	0x58024c08
 800aa60:	58024c00 	.word	0x58024c00
 800aa64:	f407a5c2 	.word	0xf407a5c2
 800aa68:	b5e8b5cd 	.word	0xb5e8b5cd
 800aa6c:	40023008 	.word	0x40023008
 800aa70:	40023000 	.word	0x40023000
 800aa74:	a1facade 	.word	0xa1facade

0800aa78 <ai_platform_network_post_init>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	b120      	cbz	r0, 800aa86 <ai_platform_network_post_init+0xe>
 800aa7c:	4b3f      	ldr	r3, [pc, #252]	; (800ab7c <ai_platform_network_post_init+0x104>)
 800aa7e:	6802      	ldr	r2, [r0, #0]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	4604      	mov	r4, r0
 800aa84:	d02d      	beq.n	800aae2 <ai_platform_network_post_init+0x6a>
 800aa86:	4a3e      	ldr	r2, [pc, #248]	; (800ab80 <ai_platform_network_post_init+0x108>)
 800aa88:	6813      	ldr	r3, [r2, #0]
 800aa8a:	f023 0301 	bic.w	r3, r3, #1
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	f7ff fad6 	bl	800a040 <_ai_platform_acquire_crc>
 800aa94:	4b3b      	ldr	r3, [pc, #236]	; (800ab84 <ai_platform_network_post_init+0x10c>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaa0:	d00d      	beq.n	800aabe <ai_platform_network_post_init+0x46>
 800aaa2:	4b39      	ldr	r3, [pc, #228]	; (800ab88 <ai_platform_network_post_init+0x110>)
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	601a      	str	r2, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	2a00      	cmp	r2, #0
 800aaac:	d1fc      	bne.n	800aaa8 <ai_platform_network_post_init+0x30>
 800aaae:	4b37      	ldr	r3, [pc, #220]	; (800ab8c <ai_platform_network_post_init+0x114>)
 800aab0:	4a37      	ldr	r2, [pc, #220]	; (800ab90 <ai_platform_network_post_init+0x118>)
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	4b37      	ldr	r3, [pc, #220]	; (800ab94 <ai_platform_network_post_init+0x11c>)
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d00d      	beq.n	800aad8 <ai_platform_network_post_init+0x60>
 800aabc:	e7fe      	b.n	800aabc <ai_platform_network_post_init+0x44>
 800aabe:	4b36      	ldr	r3, [pc, #216]	; (800ab98 <ai_platform_network_post_init+0x120>)
 800aac0:	2201      	movs	r2, #1
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	2a00      	cmp	r2, #0
 800aac8:	d1fc      	bne.n	800aac4 <ai_platform_network_post_init+0x4c>
 800aaca:	4b34      	ldr	r3, [pc, #208]	; (800ab9c <ai_platform_network_post_init+0x124>)
 800aacc:	4a30      	ldr	r2, [pc, #192]	; (800ab90 <ai_platform_network_post_init+0x118>)
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	4b30      	ldr	r3, [pc, #192]	; (800ab94 <ai_platform_network_post_init+0x11c>)
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d103      	bne.n	800aae0 <ai_platform_network_post_init+0x68>
 800aad8:	f7ff fab4 	bl	800a044 <_ai_platform_release_crc>
 800aadc:	2000      	movs	r0, #0
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	e7fe      	b.n	800aae0 <ai_platform_network_post_init+0x68>
 800aae2:	4a27      	ldr	r2, [pc, #156]	; (800ab80 <ai_platform_network_post_init+0x108>)
 800aae4:	6813      	ldr	r3, [r2, #0]
 800aae6:	f023 0301 	bic.w	r3, r3, #1
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	f7ff faa8 	bl	800a040 <_ai_platform_acquire_crc>
 800aaf0:	4b24      	ldr	r3, [pc, #144]	; (800ab84 <ai_platform_network_post_init+0x10c>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aaf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aafc:	d00d      	beq.n	800ab1a <ai_platform_network_post_init+0xa2>
 800aafe:	4b22      	ldr	r3, [pc, #136]	; (800ab88 <ai_platform_network_post_init+0x110>)
 800ab00:	2201      	movs	r2, #1
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	2a00      	cmp	r2, #0
 800ab08:	d1fc      	bne.n	800ab04 <ai_platform_network_post_init+0x8c>
 800ab0a:	4b20      	ldr	r3, [pc, #128]	; (800ab8c <ai_platform_network_post_init+0x114>)
 800ab0c:	4a20      	ldr	r2, [pc, #128]	; (800ab90 <ai_platform_network_post_init+0x118>)
 800ab0e:	601a      	str	r2, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	4b20      	ldr	r3, [pc, #128]	; (800ab94 <ai_platform_network_post_init+0x11c>)
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d00e      	beq.n	800ab36 <ai_platform_network_post_init+0xbe>
 800ab18:	e7fe      	b.n	800ab18 <ai_platform_network_post_init+0xa0>
 800ab1a:	4b1f      	ldr	r3, [pc, #124]	; (800ab98 <ai_platform_network_post_init+0x120>)
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	601a      	str	r2, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	2a00      	cmp	r2, #0
 800ab24:	d1fc      	bne.n	800ab20 <ai_platform_network_post_init+0xa8>
 800ab26:	4b1d      	ldr	r3, [pc, #116]	; (800ab9c <ai_platform_network_post_init+0x124>)
 800ab28:	4a19      	ldr	r2, [pc, #100]	; (800ab90 <ai_platform_network_post_init+0x118>)
 800ab2a:	601a      	str	r2, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	4b19      	ldr	r3, [pc, #100]	; (800ab94 <ai_platform_network_post_init+0x11c>)
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d000      	beq.n	800ab36 <ai_platform_network_post_init+0xbe>
 800ab34:	e7fe      	b.n	800ab34 <ai_platform_network_post_init+0xbc>
 800ab36:	f7ff fa85 	bl	800a044 <_ai_platform_release_crc>
 800ab3a:	68e3      	ldr	r3, [r4, #12]
 800ab3c:	f013 0502 	ands.w	r5, r3, #2
 800ab40:	d011      	beq.n	800ab66 <ai_platform_network_post_init+0xee>
 800ab42:	4620      	mov	r0, r4
 800ab44:	f001 f9ac 	bl	800bea0 <ai_layers_post_init_all>
 800ab48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ab4a:	b1a3      	cbz	r3, 800ab76 <ai_platform_network_post_init+0xfe>
 800ab4c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800ab4e:	b195      	cbz	r5, 800ab76 <ai_platform_network_post_init+0xfe>
 800ab50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ab52:	4629      	mov	r1, r5
 800ab54:	2000      	movs	r0, #0
 800ab56:	4798      	blx	r3
 800ab58:	692b      	ldr	r3, [r5, #16]
 800ab5a:	42ab      	cmp	r3, r5
 800ab5c:	d00b      	beq.n	800ab76 <ai_platform_network_post_init+0xfe>
 800ab5e:	461d      	mov	r5, r3
 800ab60:	b14b      	cbz	r3, 800ab76 <ai_platform_network_post_init+0xfe>
 800ab62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ab64:	e7f4      	b.n	800ab50 <ai_platform_network_post_init+0xd8>
 800ab66:	f104 0010 	add.w	r0, r4, #16
 800ab6a:	2210      	movs	r2, #16
 800ab6c:	2111      	movs	r1, #17
 800ab6e:	f000 fbdd 	bl	800b32c <core_set_error>
 800ab72:	4628      	mov	r0, r5
 800ab74:	bd38      	pop	{r3, r4, r5, pc}
 800ab76:	2001      	movs	r0, #1
 800ab78:	bd38      	pop	{r3, r4, r5, pc}
 800ab7a:	bf00      	nop
 800ab7c:	a1c00100 	.word	0xa1c00100
 800ab80:	e0002000 	.word	0xe0002000
 800ab84:	e0042000 	.word	0xe0042000
 800ab88:	58024c08 	.word	0x58024c08
 800ab8c:	58024c00 	.word	0x58024c00
 800ab90:	f407a5c2 	.word	0xf407a5c2
 800ab94:	b5e8b5cd 	.word	0xb5e8b5cd
 800ab98:	40023008 	.word	0x40023008
 800ab9c:	40023000 	.word	0x40023000

0800aba0 <ai_platform_network_process>:
 800aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba4:	b085      	sub	sp, #20
 800aba6:	460d      	mov	r5, r1
 800aba8:	9202      	str	r2, [sp, #8]
 800abaa:	4604      	mov	r4, r0
 800abac:	b120      	cbz	r0, 800abb8 <ai_platform_network_process+0x18>
 800abae:	4b73      	ldr	r3, [pc, #460]	; (800ad7c <ai_platform_network_process+0x1dc>)
 800abb0:	6802      	ldr	r2, [r0, #0]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	bf18      	it	ne
 800abb6:	2400      	movne	r4, #0
 800abb8:	4a71      	ldr	r2, [pc, #452]	; (800ad80 <ai_platform_network_process+0x1e0>)
 800abba:	6813      	ldr	r3, [r2, #0]
 800abbc:	f023 0301 	bic.w	r3, r3, #1
 800abc0:	6013      	str	r3, [r2, #0]
 800abc2:	f7ff fa3d 	bl	800a040 <_ai_platform_acquire_crc>
 800abc6:	4b6f      	ldr	r3, [pc, #444]	; (800ad84 <ai_platform_network_process+0x1e4>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abd2:	d00d      	beq.n	800abf0 <ai_platform_network_process+0x50>
 800abd4:	4b6c      	ldr	r3, [pc, #432]	; (800ad88 <ai_platform_network_process+0x1e8>)
 800abd6:	2201      	movs	r2, #1
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	2a00      	cmp	r2, #0
 800abde:	d1fc      	bne.n	800abda <ai_platform_network_process+0x3a>
 800abe0:	4b6a      	ldr	r3, [pc, #424]	; (800ad8c <ai_platform_network_process+0x1ec>)
 800abe2:	4a6b      	ldr	r2, [pc, #428]	; (800ad90 <ai_platform_network_process+0x1f0>)
 800abe4:	601a      	str	r2, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	4b6a      	ldr	r3, [pc, #424]	; (800ad94 <ai_platform_network_process+0x1f4>)
 800abea:	429a      	cmp	r2, r3
 800abec:	d00e      	beq.n	800ac0c <ai_platform_network_process+0x6c>
 800abee:	e7fe      	b.n	800abee <ai_platform_network_process+0x4e>
 800abf0:	4b69      	ldr	r3, [pc, #420]	; (800ad98 <ai_platform_network_process+0x1f8>)
 800abf2:	2201      	movs	r2, #1
 800abf4:	601a      	str	r2, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	2a00      	cmp	r2, #0
 800abfa:	d1fc      	bne.n	800abf6 <ai_platform_network_process+0x56>
 800abfc:	4b67      	ldr	r3, [pc, #412]	; (800ad9c <ai_platform_network_process+0x1fc>)
 800abfe:	4a64      	ldr	r2, [pc, #400]	; (800ad90 <ai_platform_network_process+0x1f0>)
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	4b63      	ldr	r3, [pc, #396]	; (800ad94 <ai_platform_network_process+0x1f4>)
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d000      	beq.n	800ac0c <ai_platform_network_process+0x6c>
 800ac0a:	e7fe      	b.n	800ac0a <ai_platform_network_process+0x6a>
 800ac0c:	f7ff fa1a 	bl	800a044 <_ai_platform_release_crc>
 800ac10:	2c00      	cmp	r4, #0
 800ac12:	f000 8089 	beq.w	800ad28 <ai_platform_network_process+0x188>
 800ac16:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800ac18:	2f00      	cmp	r7, #0
 800ac1a:	f040 822b 	bne.w	800b074 <ai_platform_network_process+0x4d4>
 800ac1e:	68e3      	ldr	r3, [r4, #12]
 800ac20:	f003 0303 	and.w	r3, r3, #3
 800ac24:	2600      	movs	r6, #0
 800ac26:	2b03      	cmp	r3, #3
 800ac28:	6166      	str	r6, [r4, #20]
 800ac2a:	f040 821b 	bne.w	800b064 <ai_platform_network_process+0x4c4>
 800ac2e:	2d00      	cmp	r5, #0
 800ac30:	f000 809c 	beq.w	800ad6c <ai_platform_network_process+0x1cc>
 800ac34:	2f00      	cmp	r7, #0
 800ac36:	f000 8099 	beq.w	800ad6c <ai_platform_network_process+0x1cc>
 800ac3a:	883b      	ldrh	r3, [r7, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f000 8095 	beq.w	800ad6c <ai_platform_network_process+0x1cc>
 800ac42:	69aa      	ldr	r2, [r5, #24]
 800ac44:	9401      	str	r4, [sp, #4]
 800ac46:	f8d2 8000 	ldr.w	r8, [r2]
 800ac4a:	429e      	cmp	r6, r3
 800ac4c:	f080 80a8 	bcs.w	800ada0 <ai_platform_network_process+0x200>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f000 80a4 	beq.w	800ada0 <ai_platform_network_process+0x200>
 800ac58:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800ac5c:	2c00      	cmp	r4, #0
 800ac5e:	f000 809f 	beq.w	800ada0 <ai_platform_network_process+0x200>
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	f8d3 b000 	ldr.w	fp, [r3]
 800ac68:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800ac6c:	eb1b 0a09 	adds.w	sl, fp, r9
 800ac70:	d07b      	beq.n	800ad6a <ai_platform_network_process+0x1ca>
 800ac72:	69a3      	ldr	r3, [r4, #24]
 800ac74:	2101      	movs	r1, #1
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	9303      	str	r3, [sp, #12]
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	f7ff f994 	bl	8009fa8 <ai_buffer_get_size>
 800ac80:	9b03      	ldr	r3, [sp, #12]
 800ac82:	4283      	cmp	r3, r0
 800ac84:	d368      	bcc.n	800ad58 <ai_platform_network_process+0x1b8>
 800ac86:	68e0      	ldr	r0, [r4, #12]
 800ac88:	69a9      	ldr	r1, [r5, #24]
 800ac8a:	68c2      	ldr	r2, [r0, #12]
 800ac8c:	68cb      	ldr	r3, [r1, #12]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d162      	bne.n	800ad58 <ai_platform_network_process+0x1b8>
 800ac92:	6882      	ldr	r2, [r0, #8]
 800ac94:	688b      	ldr	r3, [r1, #8]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d15e      	bne.n	800ad58 <ai_platform_network_process+0x1b8>
 800ac9a:	6842      	ldr	r2, [r0, #4]
 800ac9c:	684b      	ldr	r3, [r1, #4]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d15a      	bne.n	800ad58 <ai_platform_network_process+0x1b8>
 800aca2:	69a3      	ldr	r3, [r4, #24]
 800aca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aca8:	f006 fae6 	bl	8011278 <ai_array_get_data_byte_size>
 800acac:	9003      	str	r0, [sp, #12]
 800acae:	4620      	mov	r0, r4
 800acb0:	f006 fa78 	bl	80111a4 <get_tensor_byte_size>
 800acb4:	9b03      	ldr	r3, [sp, #12]
 800acb6:	4283      	cmp	r3, r0
 800acb8:	d34e      	bcc.n	800ad58 <ai_platform_network_process+0x1b8>
 800acba:	69a3      	ldr	r3, [r4, #24]
 800acbc:	6818      	ldr	r0, [r3, #0]
 800acbe:	f006 fa85 	bl	80111cc <ai_array_to_buffer_fmt>
 800acc2:	682b      	ldr	r3, [r5, #0]
 800acc4:	4043      	eors	r3, r0
 800acc6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800acca:	d13c      	bne.n	800ad46 <ai_platform_network_process+0x1a6>
 800accc:	686b      	ldr	r3, [r5, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d04b      	beq.n	800ad6a <ai_platform_network_process+0x1ca>
 800acd2:	69ab      	ldr	r3, [r5, #24]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	b362      	cbz	r2, 800ad32 <ai_platform_network_process+0x192>
 800acd8:	4620      	mov	r0, r4
 800acda:	9203      	str	r2, [sp, #12]
 800acdc:	f006 fa62 	bl	80111a4 <get_tensor_byte_size>
 800ace0:	f8ca 0008 	str.w	r0, [sl, #8]
 800ace4:	69ab      	ldr	r3, [r5, #24]
 800ace6:	9a03      	ldr	r2, [sp, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	fb03 f000 	mul.w	r0, r3, r0
 800acee:	f8ca 000c 	str.w	r0, [sl, #12]
 800acf2:	6869      	ldr	r1, [r5, #4]
 800acf4:	f8ca 1004 	str.w	r1, [sl, #4]
 800acf8:	686b      	ldr	r3, [r5, #4]
 800acfa:	4403      	add	r3, r0
 800acfc:	f84b 3009 	str.w	r3, [fp, r9]
 800ad00:	69a0      	ldr	r0, [r4, #24]
 800ad02:	6803      	ldr	r3, [r0, #0]
 800ad04:	4590      	cmp	r8, r2
 800ad06:	bf38      	it	cc
 800ad08:	4690      	movcc	r8, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	d408      	bmi.n	800ad20 <ai_platform_network_process+0x180>
 800ad0e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ad12:	1a9b      	subs	r3, r3, r2
 800ad14:	4419      	add	r1, r3
 800ad16:	6081      	str	r1, [r0, #8]
 800ad18:	69a3      	ldr	r3, [r4, #24]
 800ad1a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800ad1e:	60da      	str	r2, [r3, #12]
 800ad20:	883b      	ldrh	r3, [r7, #0]
 800ad22:	3601      	adds	r6, #1
 800ad24:	351c      	adds	r5, #28
 800ad26:	e790      	b.n	800ac4a <ai_platform_network_process+0xaa>
 800ad28:	4623      	mov	r3, r4
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	b005      	add	sp, #20
 800ad2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad32:	9c01      	ldr	r4, [sp, #4]
 800ad34:	4692      	mov	sl, r2
 800ad36:	f104 0010 	add.w	r0, r4, #16
 800ad3a:	2221      	movs	r2, #33	; 0x21
 800ad3c:	2112      	movs	r1, #18
 800ad3e:	f000 faf5 	bl	800b32c <core_set_error>
 800ad42:	4653      	mov	r3, sl
 800ad44:	e7f1      	b.n	800ad2a <ai_platform_network_process+0x18a>
 800ad46:	9c01      	ldr	r4, [sp, #4]
 800ad48:	2219      	movs	r2, #25
 800ad4a:	f104 0010 	add.w	r0, r4, #16
 800ad4e:	2112      	movs	r1, #18
 800ad50:	f000 faec 	bl	800b32c <core_set_error>
 800ad54:	2300      	movs	r3, #0
 800ad56:	e7e8      	b.n	800ad2a <ai_platform_network_process+0x18a>
 800ad58:	9c01      	ldr	r4, [sp, #4]
 800ad5a:	2218      	movs	r2, #24
 800ad5c:	f104 0010 	add.w	r0, r4, #16
 800ad60:	2112      	movs	r1, #18
 800ad62:	f000 fae3 	bl	800b32c <core_set_error>
 800ad66:	2300      	movs	r3, #0
 800ad68:	e7df      	b.n	800ad2a <ai_platform_network_process+0x18a>
 800ad6a:	9c01      	ldr	r4, [sp, #4]
 800ad6c:	f104 0010 	add.w	r0, r4, #16
 800ad70:	2217      	movs	r2, #23
 800ad72:	2112      	movs	r1, #18
 800ad74:	f000 fada 	bl	800b32c <core_set_error>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	e7d6      	b.n	800ad2a <ai_platform_network_process+0x18a>
 800ad7c:	a1c00100 	.word	0xa1c00100
 800ad80:	e0002000 	.word	0xe0002000
 800ad84:	e0042000 	.word	0xe0042000
 800ad88:	58024c08 	.word	0x58024c08
 800ad8c:	58024c00 	.word	0x58024c00
 800ad90:	f407a5c2 	.word	0xf407a5c2
 800ad94:	b5e8b5cd 	.word	0xb5e8b5cd
 800ad98:	40023008 	.word	0x40023008
 800ad9c:	40023000 	.word	0x40023000
 800ada0:	9c01      	ldr	r4, [sp, #4]
 800ada2:	9a02      	ldr	r2, [sp, #8]
 800ada4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800ada6:	2a00      	cmp	r2, #0
 800ada8:	f000 80ab 	beq.w	800af02 <ai_platform_network_process+0x362>
 800adac:	2b01      	cmp	r3, #1
 800adae:	f240 809e 	bls.w	800aeee <ai_platform_network_process+0x34e>
 800adb2:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 800adb6:	f119 0f0c 	cmn.w	r9, #12
 800adba:	f000 8098 	beq.w	800aeee <ai_platform_network_process+0x34e>
 800adbe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 8093 	beq.w	800aeee <ai_platform_network_process+0x34e>
 800adc8:	9d02      	ldr	r5, [sp, #8]
 800adca:	9401      	str	r4, [sp, #4]
 800adcc:	2700      	movs	r7, #0
 800adce:	429f      	cmp	r7, r3
 800add0:	f080 8095 	bcs.w	800aefe <ai_platform_network_process+0x35e>
 800add4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 8090 	beq.w	800aefe <ai_platform_network_process+0x35e>
 800adde:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800ade2:	2c00      	cmp	r4, #0
 800ade4:	f000 808b 	beq.w	800aefe <ai_platform_network_process+0x35e>
 800ade8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800adec:	f8d3 b000 	ldr.w	fp, [r3]
 800adf0:	013e      	lsls	r6, r7, #4
 800adf2:	eb1b 0a06 	adds.w	sl, fp, r6
 800adf6:	f000 812c 	beq.w	800b052 <ai_platform_network_process+0x4b2>
 800adfa:	69a3      	ldr	r3, [r4, #24]
 800adfc:	2101      	movs	r1, #1
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	9302      	str	r3, [sp, #8]
 800ae02:	4628      	mov	r0, r5
 800ae04:	f7ff f8d0 	bl	8009fa8 <ai_buffer_get_size>
 800ae08:	9b02      	ldr	r3, [sp, #8]
 800ae0a:	4283      	cmp	r3, r0
 800ae0c:	d36e      	bcc.n	800aeec <ai_platform_network_process+0x34c>
 800ae0e:	68e0      	ldr	r0, [r4, #12]
 800ae10:	69a9      	ldr	r1, [r5, #24]
 800ae12:	68c2      	ldr	r2, [r0, #12]
 800ae14:	68cb      	ldr	r3, [r1, #12]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d168      	bne.n	800aeec <ai_platform_network_process+0x34c>
 800ae1a:	6882      	ldr	r2, [r0, #8]
 800ae1c:	688b      	ldr	r3, [r1, #8]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d164      	bne.n	800aeec <ai_platform_network_process+0x34c>
 800ae22:	6842      	ldr	r2, [r0, #4]
 800ae24:	684b      	ldr	r3, [r1, #4]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d160      	bne.n	800aeec <ai_platform_network_process+0x34c>
 800ae2a:	69a3      	ldr	r3, [r4, #24]
 800ae2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae30:	f006 fa22 	bl	8011278 <ai_array_get_data_byte_size>
 800ae34:	9002      	str	r0, [sp, #8]
 800ae36:	4620      	mov	r0, r4
 800ae38:	f006 f9b4 	bl	80111a4 <get_tensor_byte_size>
 800ae3c:	9b02      	ldr	r3, [sp, #8]
 800ae3e:	4283      	cmp	r3, r0
 800ae40:	d354      	bcc.n	800aeec <ai_platform_network_process+0x34c>
 800ae42:	69a3      	ldr	r3, [r4, #24]
 800ae44:	6818      	ldr	r0, [r3, #0]
 800ae46:	f006 f9c1 	bl	80111cc <ai_array_to_buffer_fmt>
 800ae4a:	682b      	ldr	r3, [r5, #0]
 800ae4c:	4043      	eors	r3, r0
 800ae4e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800ae52:	d142      	bne.n	800aeda <ai_platform_network_process+0x33a>
 800ae54:	686b      	ldr	r3, [r5, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d035      	beq.n	800aec6 <ai_platform_network_process+0x326>
 800ae5a:	69ab      	ldr	r3, [r5, #24]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	b342      	cbz	r2, 800aeb2 <ai_platform_network_process+0x312>
 800ae60:	4620      	mov	r0, r4
 800ae62:	9202      	str	r2, [sp, #8]
 800ae64:	f006 f99e 	bl	80111a4 <get_tensor_byte_size>
 800ae68:	f8ca 0008 	str.w	r0, [sl, #8]
 800ae6c:	69ab      	ldr	r3, [r5, #24]
 800ae6e:	9a02      	ldr	r2, [sp, #8]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	fb03 f000 	mul.w	r0, r3, r0
 800ae76:	f8ca 000c 	str.w	r0, [sl, #12]
 800ae7a:	6869      	ldr	r1, [r5, #4]
 800ae7c:	f8ca 1004 	str.w	r1, [sl, #4]
 800ae80:	686b      	ldr	r3, [r5, #4]
 800ae82:	4403      	add	r3, r0
 800ae84:	f84b 3006 	str.w	r3, [fp, r6]
 800ae88:	69a0      	ldr	r0, [r4, #24]
 800ae8a:	6803      	ldr	r3, [r0, #0]
 800ae8c:	4590      	cmp	r8, r2
 800ae8e:	bf38      	it	cc
 800ae90:	4690      	movcc	r8, r2
 800ae92:	009e      	lsls	r6, r3, #2
 800ae94:	d408      	bmi.n	800aea8 <ai_platform_network_process+0x308>
 800ae96:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ae9a:	1a9b      	subs	r3, r3, r2
 800ae9c:	4419      	add	r1, r3
 800ae9e:	6081      	str	r1, [r0, #8]
 800aea0:	69a3      	ldr	r3, [r4, #24]
 800aea2:	f8da 2004 	ldr.w	r2, [sl, #4]
 800aea6:	60da      	str	r2, [r3, #12]
 800aea8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800aeac:	3701      	adds	r7, #1
 800aeae:	351c      	adds	r5, #28
 800aeb0:	e78d      	b.n	800adce <ai_platform_network_process+0x22e>
 800aeb2:	9c01      	ldr	r4, [sp, #4]
 800aeb4:	4692      	mov	sl, r2
 800aeb6:	f104 0010 	add.w	r0, r4, #16
 800aeba:	2221      	movs	r2, #33	; 0x21
 800aebc:	2113      	movs	r1, #19
 800aebe:	f000 fa35 	bl	800b32c <core_set_error>
 800aec2:	4653      	mov	r3, sl
 800aec4:	e731      	b.n	800ad2a <ai_platform_network_process+0x18a>
 800aec6:	9c01      	ldr	r4, [sp, #4]
 800aec8:	469a      	mov	sl, r3
 800aeca:	f104 0010 	add.w	r0, r4, #16
 800aece:	2217      	movs	r2, #23
 800aed0:	2113      	movs	r1, #19
 800aed2:	f000 fa2b 	bl	800b32c <core_set_error>
 800aed6:	4653      	mov	r3, sl
 800aed8:	e727      	b.n	800ad2a <ai_platform_network_process+0x18a>
 800aeda:	9c01      	ldr	r4, [sp, #4]
 800aedc:	2219      	movs	r2, #25
 800aede:	f104 0010 	add.w	r0, r4, #16
 800aee2:	2113      	movs	r1, #19
 800aee4:	f000 fa22 	bl	800b32c <core_set_error>
 800aee8:	2300      	movs	r3, #0
 800aeea:	e71e      	b.n	800ad2a <ai_platform_network_process+0x18a>
 800aeec:	9c01      	ldr	r4, [sp, #4]
 800aeee:	f104 0010 	add.w	r0, r4, #16
 800aef2:	2218      	movs	r2, #24
 800aef4:	2113      	movs	r1, #19
 800aef6:	f000 fa19 	bl	800b32c <core_set_error>
 800aefa:	2300      	movs	r3, #0
 800aefc:	e715      	b.n	800ad2a <ai_platform_network_process+0x18a>
 800aefe:	9c01      	ldr	r4, [sp, #4]
 800af00:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800af02:	f8a4 8014 	strh.w	r8, [r4, #20]
 800af06:	2b00      	cmp	r3, #0
 800af08:	f000 80a0 	beq.w	800b04c <ai_platform_network_process+0x4ac>
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800af10:	f240 809a 	bls.w	800b048 <ai_platform_network_process+0x4a8>
 800af14:	f105 070c 	add.w	r7, r5, #12
 800af18:	8ae3      	ldrh	r3, [r4, #22]
 800af1a:	8aa2      	ldrh	r2, [r4, #20]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	f67f af04 	bls.w	800ad2a <ai_platform_network_process+0x18a>
 800af22:	46a3      	mov	fp, r4
 800af24:	2d00      	cmp	r5, #0
 800af26:	d036      	beq.n	800af96 <ai_platform_network_process+0x3f6>
 800af28:	882b      	ldrh	r3, [r5, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d033      	beq.n	800af96 <ai_platform_network_process+0x3f6>
 800af2e:	686b      	ldr	r3, [r5, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d030      	beq.n	800af96 <ai_platform_network_process+0x3f6>
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f04f 0800 	mov.w	r8, #0
 800af3a:	b9db      	cbnz	r3, 800af74 <ai_platform_network_process+0x3d4>
 800af3c:	e02b      	b.n	800af96 <ai_platform_network_process+0x3f6>
 800af3e:	68d4      	ldr	r4, [r2, #12]
 800af40:	1b00      	subs	r0, r0, r4
 800af42:	4401      	add	r1, r0
 800af44:	6091      	str	r1, [r2, #8]
 800af46:	699b      	ldr	r3, [r3, #24]
 800af48:	6872      	ldr	r2, [r6, #4]
 800af4a:	60da      	str	r2, [r3, #12]
 800af4c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800af50:	f85a 2009 	ldr.w	r2, [sl, r9]
 800af54:	440b      	add	r3, r1
 800af56:	4293      	cmp	r3, r2
 800af58:	bf24      	itt	cs
 800af5a:	68f3      	ldrcs	r3, [r6, #12]
 800af5c:	1ad3      	subcs	r3, r2, r3
 800af5e:	6073      	str	r3, [r6, #4]
 800af60:	882b      	ldrh	r3, [r5, #0]
 800af62:	f108 0801 	add.w	r8, r8, #1
 800af66:	4598      	cmp	r8, r3
 800af68:	d215      	bcs.n	800af96 <ai_platform_network_process+0x3f6>
 800af6a:	686b      	ldr	r3, [r5, #4]
 800af6c:	b19b      	cbz	r3, 800af96 <ai_platform_network_process+0x3f6>
 800af6e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800af72:	b183      	cbz	r3, 800af96 <ai_platform_network_process+0x3f6>
 800af74:	68a9      	ldr	r1, [r5, #8]
 800af76:	699a      	ldr	r2, [r3, #24]
 800af78:	f8d1 a000 	ldr.w	sl, [r1]
 800af7c:	6814      	ldr	r4, [r2, #0]
 800af7e:	6890      	ldr	r0, [r2, #8]
 800af80:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800af84:	eb0a 0609 	add.w	r6, sl, r9
 800af88:	00a4      	lsls	r4, r4, #2
 800af8a:	6871      	ldr	r1, [r6, #4]
 800af8c:	d5d7      	bpl.n	800af3e <ai_platform_network_process+0x39e>
 800af8e:	68b2      	ldr	r2, [r6, #8]
 800af90:	f006 f9ee 	bl	8011370 <memcpy>
 800af94:	e7da      	b.n	800af4c <ai_platform_network_process+0x3ac>
 800af96:	4658      	mov	r0, fp
 800af98:	f000 ff9a 	bl	800bed0 <ai_layers_forward_all>
 800af9c:	2f00      	cmp	r7, #0
 800af9e:	d047      	beq.n	800b030 <ai_platform_network_process+0x490>
 800afa0:	883b      	ldrh	r3, [r7, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d044      	beq.n	800b030 <ai_platform_network_process+0x490>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d041      	beq.n	800b030 <ai_platform_network_process+0x490>
 800afac:	6818      	ldr	r0, [r3, #0]
 800afae:	2800      	cmp	r0, #0
 800afb0:	d03e      	beq.n	800b030 <ai_platform_network_process+0x490>
 800afb2:	f04f 0800 	mov.w	r8, #0
 800afb6:	e019      	b.n	800afec <ai_platform_network_process+0x44c>
 800afb8:	f85a 2009 	ldr.w	r2, [sl, r9]
 800afbc:	4293      	cmp	r3, r2
 800afbe:	bf24      	itt	cs
 800afc0:	68f3      	ldrcs	r3, [r6, #12]
 800afc2:	1ad3      	subcs	r3, r2, r3
 800afc4:	6073      	str	r3, [r6, #4]
 800afc6:	6981      	ldr	r1, [r0, #24]
 800afc8:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800afcc:	1b12      	subs	r2, r2, r4
 800afce:	4413      	add	r3, r2
 800afd0:	608b      	str	r3, [r1, #8]
 800afd2:	6983      	ldr	r3, [r0, #24]
 800afd4:	6872      	ldr	r2, [r6, #4]
 800afd6:	60da      	str	r2, [r3, #12]
 800afd8:	883b      	ldrh	r3, [r7, #0]
 800afda:	f108 0801 	add.w	r8, r8, #1
 800afde:	4598      	cmp	r8, r3
 800afe0:	d226      	bcs.n	800b030 <ai_platform_network_process+0x490>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	b323      	cbz	r3, 800b030 <ai_platform_network_process+0x490>
 800afe6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800afea:	b308      	cbz	r0, 800b030 <ai_platform_network_process+0x490>
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	6981      	ldr	r1, [r0, #24]
 800aff0:	f8d3 a000 	ldr.w	sl, [r3]
 800aff4:	680c      	ldr	r4, [r1, #0]
 800aff6:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800affa:	eb0a 0609 	add.w	r6, sl, r9
 800affe:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800b002:	00a4      	lsls	r4, r4, #2
 800b004:	eb0c 0302 	add.w	r3, ip, r2
 800b008:	d5d6      	bpl.n	800afb8 <ai_platform_network_process+0x418>
 800b00a:	6889      	ldr	r1, [r1, #8]
 800b00c:	4660      	mov	r0, ip
 800b00e:	f006 f9af 	bl	8011370 <memcpy>
 800b012:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800b016:	f85a 2009 	ldr.w	r2, [sl, r9]
 800b01a:	440b      	add	r3, r1
 800b01c:	4293      	cmp	r3, r2
 800b01e:	bf24      	itt	cs
 800b020:	68f3      	ldrcs	r3, [r6, #12]
 800b022:	1ad3      	subcs	r3, r2, r3
 800b024:	6073      	str	r3, [r6, #4]
 800b026:	883b      	ldrh	r3, [r7, #0]
 800b028:	f108 0801 	add.w	r8, r8, #1
 800b02c:	4598      	cmp	r8, r3
 800b02e:	d3d8      	bcc.n	800afe2 <ai_platform_network_process+0x442>
 800b030:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 800b034:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 800b038:	3301      	adds	r3, #1
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	429a      	cmp	r2, r3
 800b03e:	f8ab 3016 	strh.w	r3, [fp, #22]
 800b042:	f63f af6f 	bhi.w	800af24 <ai_platform_network_process+0x384>
 800b046:	e670      	b.n	800ad2a <ai_platform_network_process+0x18a>
 800b048:	2700      	movs	r7, #0
 800b04a:	e765      	b.n	800af18 <ai_platform_network_process+0x378>
 800b04c:	461d      	mov	r5, r3
 800b04e:	461f      	mov	r7, r3
 800b050:	e762      	b.n	800af18 <ai_platform_network_process+0x378>
 800b052:	9c01      	ldr	r4, [sp, #4]
 800b054:	2217      	movs	r2, #23
 800b056:	f104 0010 	add.w	r0, r4, #16
 800b05a:	2113      	movs	r1, #19
 800b05c:	f000 f966 	bl	800b32c <core_set_error>
 800b060:	4653      	mov	r3, sl
 800b062:	e662      	b.n	800ad2a <ai_platform_network_process+0x18a>
 800b064:	f104 0010 	add.w	r0, r4, #16
 800b068:	2230      	movs	r2, #48	; 0x30
 800b06a:	2111      	movs	r1, #17
 800b06c:	f000 f95e 	bl	800b32c <core_set_error>
 800b070:	4633      	mov	r3, r6
 800b072:	e65a      	b.n	800ad2a <ai_platform_network_process+0x18a>
 800b074:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800b076:	e5d2      	b.n	800ac1e <ai_platform_network_process+0x7e>

0800b078 <node_convert>:
 800b078:	6982      	ldr	r2, [r0, #24]
 800b07a:	8813      	ldrh	r3, [r2, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d04b      	beq.n	800b118 <node_convert+0xa0>
 800b080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b082:	6852      	ldr	r2, [r2, #4]
 800b084:	6855      	ldr	r5, [r2, #4]
 800b086:	b083      	sub	sp, #12
 800b088:	b105      	cbz	r5, 800b08c <node_convert+0x14>
 800b08a:	682d      	ldr	r5, [r5, #0]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d940      	bls.n	800b112 <node_convert+0x9a>
 800b090:	6916      	ldr	r6, [r2, #16]
 800b092:	b106      	cbz	r6, 800b096 <node_convert+0x1e>
 800b094:	6836      	ldr	r6, [r6, #0]
 800b096:	68ab      	ldr	r3, [r5, #8]
 800b098:	0a1b      	lsrs	r3, r3, #8
 800b09a:	f000 80e2 	beq.w	800b262 <node_convert+0x1ea>
 800b09e:	68e9      	ldr	r1, [r5, #12]
 800b0a0:	2401      	movs	r4, #1
 800b0a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b0a6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b0aa:	428b      	cmp	r3, r1
 800b0ac:	fb02 f404 	mul.w	r4, r2, r4
 800b0b0:	d1f9      	bne.n	800b0a6 <node_convert+0x2e>
 800b0b2:	69aa      	ldr	r2, [r5, #24]
 800b0b4:	69b7      	ldr	r7, [r6, #24]
 800b0b6:	6813      	ldr	r3, [r2, #0]
 800b0b8:	6890      	ldr	r0, [r2, #8]
 800b0ba:	f3c3 4243 	ubfx	r2, r3, #17, #4
 800b0be:	2a01      	cmp	r2, #1
 800b0c0:	d054      	beq.n	800b16c <node_convert+0xf4>
 800b0c2:	6829      	ldr	r1, [r5, #0]
 800b0c4:	68bd      	ldr	r5, [r7, #8]
 800b0c6:	15da      	asrs	r2, r3, #23
 800b0c8:	b341      	cbz	r1, 800b11c <node_convert+0xa4>
 800b0ca:	684e      	ldr	r6, [r1, #4]
 800b0cc:	f002 0201 	and.w	r2, r2, #1
 800b0d0:	2e00      	cmp	r6, #0
 800b0d2:	f000 80c8 	beq.w	800b266 <node_convert+0x1ee>
 800b0d6:	884b      	ldrh	r3, [r1, #2]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 8086 	beq.w	800b1ea <node_convert+0x172>
 800b0de:	6833      	ldr	r3, [r6, #0]
 800b0e0:	ed93 7a00 	vldr	s14, [r3]
 800b0e4:	6873      	ldr	r3, [r6, #4]
 800b0e6:	2a00      	cmp	r2, #0
 800b0e8:	f000 80d4 	beq.w	800b294 <node_convert+0x21c>
 800b0ec:	f993 2000 	ldrsb.w	r2, [r3]
 800b0f0:	b16c      	cbz	r4, 800b10e <node_convert+0x96>
 800b0f2:	4404      	add	r4, r0
 800b0f4:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800b0f8:	1a9b      	subs	r3, r3, r2
 800b0fa:	ee07 3a90 	vmov	s15, r3
 800b0fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b102:	42a0      	cmp	r0, r4
 800b104:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b108:	ece5 7a01 	vstmia	r5!, {s15}
 800b10c:	d1f2      	bne.n	800b0f4 <node_convert+0x7c>
 800b10e:	b003      	add	sp, #12
 800b110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b112:	2300      	movs	r3, #0
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	deff      	udf	#255	; 0xff
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	deff      	udf	#255	; 0xff
 800b11c:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 800b120:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 800b124:	1b8e      	subs	r6, r1, r6
 800b126:	f002 0201 	and.w	r2, r2, #1
 800b12a:	3640      	adds	r6, #64	; 0x40
 800b12c:	2908      	cmp	r1, #8
 800b12e:	eba6 0602 	sub.w	r6, r6, r2
 800b132:	4629      	mov	r1, r5
 800b134:	4622      	mov	r2, r4
 800b136:	d05e      	beq.n	800b1f6 <node_convert+0x17e>
 800b138:	f005 ff60 	bl	8010ffc <st_dsp_arm_q15_to_float>
 800b13c:	2e00      	cmp	r6, #0
 800b13e:	d0e6      	beq.n	800b10e <node_convert+0x96>
 800b140:	ee07 6a90 	vmov	s15, r6
 800b144:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b148:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800b14c:	f009 f802 	bl	8014154 <powf>
 800b150:	2c00      	cmp	r4, #0
 800b152:	d0dc      	beq.n	800b10e <node_convert+0x96>
 800b154:	2300      	movs	r3, #0
 800b156:	ecf5 7a01 	vldmia	r5!, {s15}
 800b15a:	3301      	adds	r3, #1
 800b15c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b160:	429c      	cmp	r4, r3
 800b162:	ed45 7a01 	vstr	s15, [r5, #-4]
 800b166:	d1f6      	bne.n	800b156 <node_convert+0xde>
 800b168:	b003      	add	sp, #12
 800b16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	6835      	ldr	r5, [r6, #0]
 800b170:	15d9      	asrs	r1, r3, #23
 800b172:	2d00      	cmp	r5, #0
 800b174:	f000 8090 	beq.w	800b298 <node_convert+0x220>
 800b178:	686b      	ldr	r3, [r5, #4]
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	f001 0101 	and.w	r1, r1, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	d03b      	beq.n	800b1fc <node_convert+0x184>
 800b184:	886d      	ldrh	r5, [r5, #2]
 800b186:	2d00      	cmp	r5, #0
 800b188:	d03e      	beq.n	800b208 <node_convert+0x190>
 800b18a:	681d      	ldr	r5, [r3, #0]
 800b18c:	edd5 7a00 	vldr	s15, [r5]
 800b190:	2900      	cmp	r1, #0
 800b192:	f000 80b3 	beq.w	800b2fc <node_convert+0x284>
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f993 3000 	ldrsb.w	r3, [r3]
 800b19c:	ee07 3a10 	vmov	s14, r3
 800b1a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b1a4:	2c00      	cmp	r4, #0
 800b1a6:	d0b2      	beq.n	800b10e <node_convert+0x96>
 800b1a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b1ac:	eddf 5a59 	vldr	s11, [pc, #356]	; 800b314 <node_convert+0x29c>
 800b1b0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800b1b4:	4414      	add	r4, r2
 800b1b6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b1ba:	ecf0 7a01 	vldmia	r0!, {s15}
 800b1be:	eeb0 5a47 	vmov.f32	s10, s14
 800b1c2:	eea7 5aa6 	vfma.f32	s10, s15, s13
 800b1c6:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800b1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ce:	db3b      	blt.n	800b248 <node_convert+0x1d0>
 800b1d0:	ee75 7a06 	vadd.f32	s15, s10, s12
 800b1d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1d8:	ee17 3a90 	vmov	r3, s15
 800b1dc:	f303 0307 	ssat	r3, #8, r3
 800b1e0:	f802 3b01 	strb.w	r3, [r2], #1
 800b1e4:	42a2      	cmp	r2, r4
 800b1e6:	d1e8      	bne.n	800b1ba <node_convert+0x142>
 800b1e8:	e791      	b.n	800b10e <node_convert+0x96>
 800b1ea:	2a00      	cmp	r2, #0
 800b1ec:	d03d      	beq.n	800b26a <node_convert+0x1f2>
 800b1ee:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b318 <node_convert+0x2a0>
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	e77c      	b.n	800b0f0 <node_convert+0x78>
 800b1f6:	f005 ff69 	bl	80110cc <st_dsp_arm_q7_to_float>
 800b1fa:	e79f      	b.n	800b13c <node_convert+0xc4>
 800b1fc:	b131      	cbz	r1, 800b20c <node_convert+0x194>
 800b1fe:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b318 <node_convert+0x2a0>
 800b202:	eef0 7a47 	vmov.f32	s15, s14
 800b206:	e7cd      	b.n	800b1a4 <node_convert+0x12c>
 800b208:	2900      	cmp	r1, #0
 800b20a:	d1f8      	bne.n	800b1fe <node_convert+0x186>
 800b20c:	eddf 7a42 	vldr	s15, [pc, #264]	; 800b318 <node_convert+0x2a0>
 800b210:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b214:	2c00      	cmp	r4, #0
 800b216:	f43f af7a 	beq.w	800b10e <node_convert+0x96>
 800b21a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b21e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800b222:	4414      	add	r4, r2
 800b224:	ecf0 7a01 	vldmia	r0!, {s15}
 800b228:	eeb0 6a47 	vmov.f32	s12, s14
 800b22c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800b230:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 800b234:	ee17 3a90 	vmov	r3, s15
 800b238:	f383 0308 	usat	r3, #8, r3
 800b23c:	f802 3b01 	strb.w	r3, [r2], #1
 800b240:	42a2      	cmp	r2, r4
 800b242:	d1ef      	bne.n	800b224 <node_convert+0x1ac>
 800b244:	b003      	add	sp, #12
 800b246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b248:	ee75 7a65 	vsub.f32	s15, s10, s11
 800b24c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b250:	ee17 3a90 	vmov	r3, s15
 800b254:	f303 0307 	ssat	r3, #8, r3
 800b258:	f802 3b01 	strb.w	r3, [r2], #1
 800b25c:	4294      	cmp	r4, r2
 800b25e:	d1ac      	bne.n	800b1ba <node_convert+0x142>
 800b260:	e755      	b.n	800b10e <node_convert+0x96>
 800b262:	2401      	movs	r4, #1
 800b264:	e725      	b.n	800b0b2 <node_convert+0x3a>
 800b266:	2a00      	cmp	r2, #0
 800b268:	d13f      	bne.n	800b2ea <node_convert+0x272>
 800b26a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800b318 <node_convert+0x2a0>
 800b26e:	2c00      	cmp	r4, #0
 800b270:	f43f af4d 	beq.w	800b10e <node_convert+0x96>
 800b274:	4404      	add	r4, r0
 800b276:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b27a:	1a9b      	subs	r3, r3, r2
 800b27c:	ee07 3a90 	vmov	s15, r3
 800b280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b284:	42a0      	cmp	r0, r4
 800b286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b28a:	ece5 7a01 	vstmia	r5!, {s15}
 800b28e:	d1f2      	bne.n	800b276 <node_convert+0x1fe>
 800b290:	b003      	add	sp, #12
 800b292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b294:	781a      	ldrb	r2, [r3, #0]
 800b296:	e7ea      	b.n	800b26e <node_convert+0x1f6>
 800b298:	f3c3 16c6 	ubfx	r6, r3, #7, #7
 800b29c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2a0:	1af3      	subs	r3, r6, r3
 800b2a2:	f001 0101 	and.w	r1, r1, #1
 800b2a6:	3340      	adds	r3, #64	; 0x40
 800b2a8:	1a5b      	subs	r3, r3, r1
 800b2aa:	d015      	beq.n	800b2d8 <node_convert+0x260>
 800b2ac:	425b      	negs	r3, r3
 800b2ae:	ee00 3a90 	vmov	s1, r3
 800b2b2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b2b6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800b2ba:	9001      	str	r0, [sp, #4]
 800b2bc:	f008 ff4a 	bl	8014154 <powf>
 800b2c0:	9801      	ldr	r0, [sp, #4]
 800b2c2:	b14c      	cbz	r4, 800b2d8 <node_convert+0x260>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	ecf3 7a01 	vldmia	r3!, {s15}
 800b2ca:	3501      	adds	r5, #1
 800b2cc:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b2d0:	42ac      	cmp	r4, r5
 800b2d2:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b2d6:	d1f6      	bne.n	800b2c6 <node_convert+0x24e>
 800b2d8:	2e08      	cmp	r6, #8
 800b2da:	68b9      	ldr	r1, [r7, #8]
 800b2dc:	4622      	mov	r2, r4
 800b2de:	d008      	beq.n	800b2f2 <node_convert+0x27a>
 800b2e0:	b003      	add	sp, #12
 800b2e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b2e6:	f005 bce5 	b.w	8010cb4 <st_dsp_arm_float_to_q15>
 800b2ea:	4632      	mov	r2, r6
 800b2ec:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800b318 <node_convert+0x2a0>
 800b2f0:	e6fe      	b.n	800b0f0 <node_convert+0x78>
 800b2f2:	b003      	add	sp, #12
 800b2f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b2f8:	f005 bda4 	b.w	8010e44 <st_dsp_arm_float_to_q7>
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	ee07 3a10 	vmov	s14, r3
 800b304:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b308:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b30c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b310:	e780      	b.n	800b214 <node_convert+0x19c>
 800b312:	bf00      	nop
 800b314:	3efffffc 	.word	0x3efffffc
 800b318:	00000000 	.word	0x00000000

0800b31c <core_init>:
 800b31c:	2001      	movs	r0, #1
 800b31e:	4770      	bx	lr

0800b320 <core_get_error>:
 800b320:	4603      	mov	r3, r0
 800b322:	2200      	movs	r2, #0
 800b324:	6800      	ldr	r0, [r0, #0]
 800b326:	601a      	str	r2, [r3, #0]
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop

0800b32c <core_set_error>:
 800b32c:	7803      	ldrb	r3, [r0, #0]
 800b32e:	b933      	cbnz	r3, 800b33e <core_set_error+0x12>
 800b330:	7001      	strb	r1, [r0, #0]
 800b332:	6803      	ldr	r3, [r0, #0]
 800b334:	f362 231f 	bfi	r3, r2, #8, #24
 800b338:	6003      	str	r3, [r0, #0]
 800b33a:	2001      	movs	r0, #1
 800b33c:	4770      	bx	lr
 800b33e:	2000      	movs	r0, #0
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop

0800b344 <func_dummy>:
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop

0800b348 <forward_conv2d_nl_pool_integer_SSSA_ch>:
 800b348:	6983      	ldr	r3, [r0, #24]
 800b34a:	8819      	ldrh	r1, [r3, #0]
 800b34c:	b309      	cbz	r1, 800b392 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4a>
 800b34e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	685d      	ldr	r5, [r3, #4]
 800b356:	b0d5      	sub	sp, #340	; 0x154
 800b358:	b32d      	cbz	r5, 800b3a6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5e>
 800b35a:	682a      	ldr	r2, [r5, #0]
 800b35c:	9214      	str	r2, [sp, #80]	; 0x50
 800b35e:	2901      	cmp	r1, #1
 800b360:	d914      	bls.n	800b38c <forward_conv2d_nl_pool_integer_SSSA_ch+0x44>
 800b362:	691a      	ldr	r2, [r3, #16]
 800b364:	b1ea      	cbz	r2, 800b3a2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5a>
 800b366:	6812      	ldr	r2, [r2, #0]
 800b368:	921b      	str	r2, [sp, #108]	; 0x6c
 800b36a:	2902      	cmp	r1, #2
 800b36c:	d016      	beq.n	800b39c <forward_conv2d_nl_pool_integer_SSSA_ch+0x54>
 800b36e:	69da      	ldr	r2, [r3, #28]
 800b370:	b98a      	cbnz	r2, 800b396 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4e>
 800b372:	9216      	str	r2, [sp, #88]	; 0x58
 800b374:	f113 0418 	adds.w	r4, r3, #24
 800b378:	f000 837b 	beq.w	800ba72 <forward_conv2d_nl_pool_integer_SSSA_ch+0x72a>
 800b37c:	8b1c      	ldrh	r4, [r3, #24]
 800b37e:	2c01      	cmp	r4, #1
 800b380:	f240 8376 	bls.w	800ba70 <forward_conv2d_nl_pool_integer_SSSA_ch+0x728>
 800b384:	b18a      	cbz	r2, 800b3aa <forward_conv2d_nl_pool_integer_SSSA_ch+0x62>
 800b386:	6854      	ldr	r4, [r2, #4]
 800b388:	9415      	str	r4, [sp, #84]	; 0x54
 800b38a:	e00f      	b.n	800b3ac <forward_conv2d_nl_pool_integer_SSSA_ch+0x64>
 800b38c:	2300      	movs	r3, #0
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	deff      	udf	#255	; 0xff
 800b392:	684b      	ldr	r3, [r1, #4]
 800b394:	deff      	udf	#255	; 0xff
 800b396:	6814      	ldr	r4, [r2, #0]
 800b398:	9416      	str	r4, [sp, #88]	; 0x58
 800b39a:	e7eb      	b.n	800b374 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2c>
 800b39c:	2300      	movs	r3, #0
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	deff      	udf	#255	; 0xff
 800b3a2:	921b      	str	r2, [sp, #108]	; 0x6c
 800b3a4:	e7e1      	b.n	800b36a <forward_conv2d_nl_pool_integer_SSSA_ch+0x22>
 800b3a6:	9514      	str	r5, [sp, #80]	; 0x50
 800b3a8:	e7d9      	b.n	800b35e <forward_conv2d_nl_pool_integer_SSSA_ch+0x16>
 800b3aa:	9215      	str	r2, [sp, #84]	; 0x54
 800b3ac:	2903      	cmp	r1, #3
 800b3ae:	f000 8173 	beq.w	800b698 <forward_conv2d_nl_pool_integer_SSSA_ch+0x350>
 800b3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f000 818f 	beq.w	800b6d8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x390>
 800b3ba:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800b3bc:	912f      	str	r1, [sp, #188]	; 0xbc
 800b3be:	e9d3 9b00 	ldrd	r9, fp, [r3]
 800b3c2:	2900      	cmp	r1, #0
 800b3c4:	f000 8357 	beq.w	800ba76 <forward_conv2d_nl_pool_integer_SSSA_ch+0x72e>
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	931a      	str	r3, [sp, #104]	; 0x68
 800b3cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3ce:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b3d0:	68de      	ldr	r6, [r3, #12]
 800b3d2:	f8db 300c 	ldr.w	r3, [fp, #12]
 800b3d6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	68f5      	ldr	r5, [r6, #12]
 800b3dc:	9325      	str	r3, [sp, #148]	; 0x94
 800b3de:	9517      	str	r5, [sp, #92]	; 0x5c
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	68b5      	ldr	r5, [r6, #8]
 800b3e4:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800b3e6:	952d      	str	r5, [sp, #180]	; 0xb4
 800b3e8:	88a5      	ldrh	r5, [r4, #4]
 800b3ea:	68ff      	ldr	r7, [r7, #12]
 800b3ec:	951d      	str	r5, [sp, #116]	; 0x74
 800b3ee:	68dd      	ldr	r5, [r3, #12]
 800b3f0:	9531      	str	r5, [sp, #196]	; 0xc4
 800b3f2:	689d      	ldr	r5, [r3, #8]
 800b3f4:	9538      	str	r5, [sp, #224]	; 0xe0
 800b3f6:	e9d7 5801 	ldrd	r5, r8, [r7, #4]
 800b3fa:	f8d0 e054 	ldr.w	lr, [r0, #84]	; 0x54
 800b3fe:	9519      	str	r5, [sp, #100]	; 0x64
 800b400:	f8de 5000 	ldr.w	r5, [lr]
 800b404:	6871      	ldr	r1, [r6, #4]
 800b406:	9522      	str	r5, [sp, #136]	; 0x88
 800b408:	f8de 5004 	ldr.w	r5, [lr, #4]
 800b40c:	9124      	str	r1, [sp, #144]	; 0x90
 800b40e:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
 800b412:	6821      	ldr	r1, [r4, #0]
 800b414:	68a4      	ldr	r4, [r4, #8]
 800b416:	953b      	str	r5, [sp, #236]	; 0xec
 800b418:	8d05      	ldrh	r5, [r0, #40]	; 0x28
 800b41a:	9520      	str	r5, [sp, #128]	; 0x80
 800b41c:	69c5      	ldr	r5, [r0, #28]
 800b41e:	952b      	str	r5, [sp, #172]	; 0xac
 800b420:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800b422:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 800b426:	9539      	str	r5, [sp, #228]	; 0xe4
 800b428:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800b42a:	953a      	str	r5, [sp, #232]	; 0xe8
 800b42c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b42e:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800b430:	9527      	str	r5, [sp, #156]	; 0x9c
 800b432:	b28b      	uxth	r3, r1
 800b434:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 800b438:	9312      	str	r3, [sp, #72]	; 0x48
 800b43a:	fa1f f38c 	uxth.w	r3, ip
 800b43e:	951c      	str	r5, [sp, #112]	; 0x70
 800b440:	9321      	str	r3, [sp, #132]	; 0x84
 800b442:	2a00      	cmp	r2, #0
 800b444:	f000 82b2 	beq.w	800b9ac <forward_conv2d_nl_pool_integer_SSSA_ch+0x664>
 800b448:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800b44c:	f1ba 0f00 	cmp.w	sl, #0
 800b450:	f000 82ac 	beq.w	800b9ac <forward_conv2d_nl_pool_integer_SSSA_ch+0x664>
 800b454:	f8da 3018 	ldr.w	r3, [sl, #24]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	bf08      	it	eq
 800b45c:	f04f 0a00 	moveq.w	sl, #0
 800b460:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b462:	9034      	str	r0, [sp, #208]	; 0xd0
 800b464:	4602      	mov	r2, r0
 800b466:	699e      	ldr	r6, [r3, #24]
 800b468:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800b46a:	f8db 3018 	ldr.w	r3, [fp, #24]
 800b46e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b470:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b472:	9329      	str	r3, [sp, #164]	; 0xa4
 800b474:	9028      	str	r0, [sp, #160]	; 0xa0
 800b476:	b28b      	uxth	r3, r1
 800b478:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b47a:	69ad      	ldr	r5, [r5, #24]
 800b47c:	923c      	str	r2, [sp, #240]	; 0xf0
 800b47e:	fa13 f284 	uxtah	r2, r3, r4
 800b482:	9532      	str	r5, [sp, #200]	; 0xc8
 800b484:	9318      	str	r3, [sp, #96]	; 0x60
 800b486:	ac41      	add	r4, sp, #260	; 0x104
 800b488:	2300      	movs	r3, #0
 800b48a:	a945      	add	r1, sp, #276	; 0x114
 800b48c:	4402      	add	r2, r0
 800b48e:	ad4d      	add	r5, sp, #308	; 0x134
 800b490:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
 800b494:	fa1f f78c 	uxth.w	r7, ip
 800b498:	4628      	mov	r0, r5
 800b49a:	9450      	str	r4, [sp, #320]	; 0x140
 800b49c:	9342      	str	r3, [sp, #264]	; 0x108
 800b49e:	ac49      	add	r4, sp, #292	; 0x124
 800b4a0:	934d      	str	r3, [sp, #308]	; 0x134
 800b4a2:	9341      	str	r3, [sp, #260]	; 0x104
 800b4a4:	9343      	str	r3, [sp, #268]	; 0x10c
 800b4a6:	9345      	str	r3, [sp, #276]	; 0x114
 800b4a8:	9344      	str	r3, [sp, #272]	; 0x110
 800b4aa:	9353      	str	r3, [sp, #332]	; 0x14c
 800b4ac:	9346      	str	r3, [sp, #280]	; 0x118
 800b4ae:	9347      	str	r3, [sp, #284]	; 0x11c
 800b4b0:	9348      	str	r3, [sp, #288]	; 0x120
 800b4b2:	9152      	str	r1, [sp, #328]	; 0x148
 800b4b4:	f240 4302 	movw	r3, #1026	; 0x402
 800b4b8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b4ba:	f8cd e138 	str.w	lr, [sp, #312]	; 0x138
 800b4be:	eba2 0208 	sub.w	r2, r2, r8
 800b4c2:	fbb2 f2f7 	udiv	r2, r2, r7
 800b4c6:	1c55      	adds	r5, r2, #1
 800b4c8:	f240 4201 	movw	r2, #1025	; 0x401
 800b4cc:	924f      	str	r2, [sp, #316]	; 0x13c
 800b4ce:	9351      	str	r3, [sp, #324]	; 0x144
 800b4d0:	971f      	str	r7, [sp, #124]	; 0x7c
 800b4d2:	952a      	str	r5, [sp, #168]	; 0xa8
 800b4d4:	f005 fee0 	bl	8011298 <core_tensor_clone>
 800b4d8:	4620      	mov	r0, r4
 800b4da:	4631      	mov	r1, r6
 800b4dc:	f005 ff0e 	bl	80112fc <core_array_clone>
 800b4e0:	9453      	str	r4, [sp, #332]	; 0x14c
 800b4e2:	f8db 300c 	ldr.w	r3, [fp, #12]
 800b4e6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b4e8:	689c      	ldr	r4, [r3, #8]
 800b4ea:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800b4ee:	942e      	str	r4, [sp, #184]	; 0xb8
 800b4f0:	e9dd 0317 	ldrd	r0, r3, [sp, #92]	; 0x5c
 800b4f4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800b4f6:	6809      	ldr	r1, [r1, #0]
 800b4f8:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800b4fc:	f8d4 e000 	ldr.w	lr, [r4]
 800b500:	f8db 2000 	ldr.w	r2, [fp]
 800b504:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 800b508:	4403      	add	r3, r0
 800b50a:	9326      	str	r3, [sp, #152]	; 0x98
 800b50c:	2900      	cmp	r1, #0
 800b50e:	f000 80c6 	beq.w	800b69e <forward_conv2d_nl_pool_integer_SSSA_ch+0x356>
 800b512:	684b      	ldr	r3, [r1, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 80c2 	beq.w	800b69e <forward_conv2d_nl_pool_integer_SSSA_ch+0x356>
 800b51a:	8848      	ldrh	r0, [r1, #2]
 800b51c:	2800      	cmp	r0, #0
 800b51e:	f000 80be 	beq.w	800b69e <forward_conv2d_nl_pool_integer_SSSA_ch+0x356>
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	ed93 0a00 	vldr	s0, [r3]
 800b528:	2a00      	cmp	r2, #0
 800b52a:	f000 80bd 	beq.w	800b6a8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x360>
 800b52e:	6853      	ldr	r3, [r2, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	f000 80b9 	beq.w	800b6a8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x360>
 800b536:	8850      	ldrh	r0, [r2, #2]
 800b538:	2800      	cmp	r0, #0
 800b53a:	f000 80b5 	beq.w	800b6a8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x360>
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	edd3 0a00 	vldr	s1, [r3]
 800b544:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b546:	2b01      	cmp	r3, #1
 800b548:	f000 80b4 	beq.w	800b6b4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x36c>
 800b54c:	2300      	movs	r3, #0
 800b54e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b550:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800b552:	6980      	ldr	r0, [r0, #24]
 800b554:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800b556:	69ad      	ldr	r5, [r5, #24]
 800b558:	6880      	ldr	r0, [r0, #8]
 800b55a:	f8d7 c018 	ldr.w	ip, [r7, #24]
 800b55e:	9035      	str	r0, [sp, #212]	; 0xd4
 800b560:	68a8      	ldr	r0, [r5, #8]
 800b562:	9018      	str	r0, [sp, #96]	; 0x60
 800b564:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800b568:	9023      	str	r0, [sp, #140]	; 0x8c
 800b56a:	2900      	cmp	r1, #0
 800b56c:	f000 80b6 	beq.w	800b6dc <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 800b570:	6848      	ldr	r0, [r1, #4]
 800b572:	2800      	cmp	r0, #0
 800b574:	f000 825a 	beq.w	800ba2c <forward_conv2d_nl_pool_integer_SSSA_ch+0x6e4>
 800b578:	8849      	ldrh	r1, [r1, #2]
 800b57a:	2900      	cmp	r1, #0
 800b57c:	f000 80ae 	beq.w	800b6dc <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 800b580:	6841      	ldr	r1, [r0, #4]
 800b582:	f991 1000 	ldrsb.w	r1, [r1]
 800b586:	9114      	str	r1, [sp, #80]	; 0x50
 800b588:	2a00      	cmp	r2, #0
 800b58a:	f000 80ab 	beq.w	800b6e4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x39c>
 800b58e:	6851      	ldr	r1, [r2, #4]
 800b590:	2900      	cmp	r1, #0
 800b592:	f000 823c 	beq.w	800ba0e <forward_conv2d_nl_pool_integer_SSSA_ch+0x6c6>
 800b596:	8852      	ldrh	r2, [r2, #2]
 800b598:	2a00      	cmp	r2, #0
 800b59a:	f000 80a3 	beq.w	800b6e4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x39c>
 800b59e:	684a      	ldr	r2, [r1, #4]
 800b5a0:	f992 2000 	ldrsb.w	r2, [r2]
 800b5a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b5a6:	f1be 0f00 	cmp.w	lr, #0
 800b5aa:	f000 80a0 	beq.w	800b6ee <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a6>
 800b5ae:	f8de 0004 	ldr.w	r0, [lr, #4]
 800b5b2:	b100      	cbz	r0, 800b5b6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 800b5b4:	6800      	ldr	r0, [r0, #0]
 800b5b6:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 800b5ba:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 800b5be:	9515      	str	r5, [sp, #84]	; 0x54
 800b5c0:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800b5c2:	9219      	str	r2, [sp, #100]	; 0x64
 800b5c4:	fa1f f188 	uxth.w	r1, r8
 800b5c8:	fb12 f201 	smulbb	r2, r2, r1
 800b5cc:	911e      	str	r1, [sp, #120]	; 0x78
 800b5ce:	2d01      	cmp	r5, #1
 800b5d0:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 800b5d4:	9124      	str	r1, [sp, #144]	; 0x90
 800b5d6:	b292      	uxth	r2, r2
 800b5d8:	f8be 1002 	ldrh.w	r1, [lr, #2]
 800b5dc:	f000 81f8 	beq.w	800b9d0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x688>
 800b5e0:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800b5e2:	42bd      	cmp	r5, r7
 800b5e4:	f000 81eb 	beq.w	800b9be <forward_conv2d_nl_pool_integer_SSSA_ch+0x676>
 800b5e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b5ea:	fb02 f207 	mul.w	r2, r2, r7
 800b5ee:	fb02 f505 	mul.w	r5, r2, r5
 800b5f2:	006d      	lsls	r5, r5, #1
 800b5f4:	f5b5 5fa0 	cmp.w	r5, #5120	; 0x1400
 800b5f8:	f04f 0700 	mov.w	r7, #0
 800b5fc:	bfa8      	it	ge
 800b5fe:	f44f 55a0 	movge.w	r5, #5120	; 0x1400
 800b602:	972c      	str	r7, [sp, #176]	; 0xb0
 800b604:	2b00      	cmp	r3, #0
 800b606:	f000 81f8 	beq.w	800b9fa <forward_conv2d_nl_pool_integer_SSSA_ch+0x6b2>
 800b60a:	0095      	lsls	r5, r2, #2
 800b60c:	2901      	cmp	r1, #1
 800b60e:	f240 81ca 	bls.w	800b9a6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x65e>
 800b612:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b614:	0093      	lsls	r3, r2, #2
 800b616:	189a      	adds	r2, r3, r2
 800b618:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 800b61c:	444b      	add	r3, r9
 800b61e:	464a      	mov	r2, r9
 800b620:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b622:	932b      	str	r3, [sp, #172]	; 0xac
 800b624:	f000 fe76 	bl	800c314 <align_factor_ch>
 800b628:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800b62a:	f8cd 90fc 	str.w	r9, [sp, #252]	; 0xfc
 800b62e:	9540      	str	r5, [sp, #256]	; 0x100
 800b630:	2b00      	cmp	r3, #0
 800b632:	f000 810f 	beq.w	800b854 <forward_conv2d_nl_pool_integer_SSSA_ch+0x50c>
 800b636:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 800b638:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b63a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800b63c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800b63e:	f8cd a0f4 	str.w	sl, [sp, #244]	; 0xf4
 800b642:	fb05 f000 	mul.w	r0, r5, r0
 800b646:	902e      	str	r0, [sp, #184]	; 0xb8
 800b648:	b2a8      	uxth	r0, r5
 800b64a:	4613      	mov	r3, r2
 800b64c:	9025      	str	r0, [sp, #148]	; 0x94
 800b64e:	9824      	ldr	r0, [sp, #144]	; 0x90
 800b650:	f8dd a0d4 	ldr.w	sl, [sp, #212]	; 0xd4
 800b654:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 800b656:	9430      	str	r4, [sp, #192]	; 0xc0
 800b658:	fb03 f301 	mul.w	r3, r3, r1
 800b65c:	fb00 f303 	mul.w	r3, r0, r3
 800b660:	9336      	str	r3, [sp, #216]	; 0xd8
 800b662:	4613      	mov	r3, r2
 800b664:	b29b      	uxth	r3, r3
 800b666:	2100      	movs	r1, #0
 800b668:	fb00 f202 	mul.w	r2, r0, r2
 800b66c:	932d      	str	r3, [sp, #180]	; 0xb4
 800b66e:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 800b672:	9116      	str	r1, [sp, #88]	; 0x58
 800b674:	9237      	str	r2, [sp, #220]	; 0xdc
 800b676:	9124      	str	r1, [sp, #144]	; 0x90
 800b678:	9333      	str	r3, [sp, #204]	; 0xcc
 800b67a:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 800b67e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b680:	2b00      	cmp	r3, #0
 800b682:	dd7e      	ble.n	800b782 <forward_conv2d_nl_pool_integer_SSSA_ch+0x43a>
 800b684:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800b686:	2b17      	cmp	r3, #23
 800b688:	f000 8160 	beq.w	800b94c <forward_conv2d_nl_pool_integer_SSSA_ch+0x604>
 800b68c:	2b18      	cmp	r3, #24
 800b68e:	f000 8117 	beq.w	800b8c0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x578>
 800b692:	2b16      	cmp	r3, #22
 800b694:	d02d      	beq.n	800b6f2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3aa>
 800b696:	e7fe      	b.n	800b696 <forward_conv2d_nl_pool_integer_SSSA_ch+0x34e>
 800b698:	2300      	movs	r3, #0
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	deff      	udf	#255	; 0xff
 800b69e:	ed9f 0a87 	vldr	s0, [pc, #540]	; 800b8bc <forward_conv2d_nl_pool_integer_SSSA_ch+0x574>
 800b6a2:	2a00      	cmp	r2, #0
 800b6a4:	f47f af43 	bne.w	800b52e <forward_conv2d_nl_pool_integer_SSSA_ch+0x1e6>
 800b6a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b6aa:	eddf 0a84 	vldr	s1, [pc, #528]	; 800b8bc <forward_conv2d_nl_pool_integer_SSSA_ch+0x574>
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	f47f af4c 	bne.w	800b54c <forward_conv2d_nl_pool_integer_SSSA_ch+0x204>
 800b6b4:	f1b8 0f01 	cmp.w	r8, #1
 800b6b8:	f47f af48 	bne.w	800b54c <forward_conv2d_nl_pool_integer_SSSA_ch+0x204>
 800b6bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f47f af44 	bne.w	800b54c <forward_conv2d_nl_pool_integer_SSSA_ch+0x204>
 800b6c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f47f af40 	bne.w	800b54c <forward_conv2d_nl_pool_integer_SSSA_ch+0x204>
 800b6cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	f000 8198 	beq.w	800ba04 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6bc>
 800b6d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6d6:	e73a      	b.n	800b54e <forward_conv2d_nl_pool_integer_SSSA_ch+0x206>
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	deff      	udf	#255	; 0xff
 800b6dc:	9114      	str	r1, [sp, #80]	; 0x50
 800b6de:	2a00      	cmp	r2, #0
 800b6e0:	f47f af55 	bne.w	800b58e <forward_conv2d_nl_pool_integer_SSSA_ch+0x246>
 800b6e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6e6:	f1be 0f00 	cmp.w	lr, #0
 800b6ea:	f47f af60 	bne.w	800b5ae <forward_conv2d_nl_pool_integer_SSSA_ch+0x266>
 800b6ee:	4670      	mov	r0, lr
 800b6f0:	e761      	b.n	800b5b6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 800b6f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6f4:	429c      	cmp	r4, r3
 800b6f6:	f000 818c 	beq.w	800ba12 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6ca>
 800b6fa:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 800b6fe:	2301      	movs	r3, #1
 800b700:	930f      	str	r3, [sp, #60]	; 0x3c
 800b702:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b704:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800b708:	930e      	str	r3, [sp, #56]	; 0x38
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	930d      	str	r3, [sp, #52]	; 0x34
 800b70e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b710:	930c      	str	r3, [sp, #48]	; 0x30
 800b712:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b714:	930b      	str	r3, [sp, #44]	; 0x2c
 800b716:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b718:	930a      	str	r3, [sp, #40]	; 0x28
 800b71a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b71c:	9309      	str	r3, [sp, #36]	; 0x24
 800b71e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b720:	9308      	str	r3, [sp, #32]
 800b722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b724:	9307      	str	r3, [sp, #28]
 800b726:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b728:	9306      	str	r3, [sp, #24]
 800b72a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b72c:	9305      	str	r3, [sp, #20]
 800b72e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b730:	9304      	str	r3, [sp, #16]
 800b732:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b734:	9303      	str	r3, [sp, #12]
 800b736:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b738:	9302      	str	r3, [sp, #8]
 800b73a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	fa1f f288 	uxth.w	r2, r8
 800b746:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b748:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800b74a:	4650      	mov	r0, sl
 800b74c:	f002 fa9a 	bl	800dc84 <st_sssa8_ch_convolve_1x1>
 800b750:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b752:	9926      	ldr	r1, [sp, #152]	; 0x98
 800b754:	428b      	cmp	r3, r1
 800b756:	f000 80e4 	beq.w	800b922 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5da>
 800b75a:	1acb      	subs	r3, r1, r3
 800b75c:	4598      	cmp	r8, r3
 800b75e:	9326      	str	r3, [sp, #152]	; 0x98
 800b760:	bf28      	it	cs
 800b762:	4698      	movcs	r8, r3
 800b764:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b766:	2b00      	cmp	r3, #0
 800b768:	f040 80e3 	bne.w	800b932 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5ea>
 800b76c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800b76e:	449a      	add	sl, r3
 800b770:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800b772:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b774:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b776:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 800b778:	4659      	mov	r1, fp
 800b77a:	47a8      	blx	r5
 800b77c:	3401      	adds	r4, #1
 800b77e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b780:	b224      	sxth	r4, r4
 800b782:	3b01      	subs	r3, #1
 800b784:	932a      	str	r3, [sp, #168]	; 0xa8
 800b786:	d470      	bmi.n	800b86a <forward_conv2d_nl_pool_integer_SSSA_ch+0x522>
 800b788:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800b78a:	429c      	cmp	r4, r3
 800b78c:	db39      	blt.n	800b802 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4ba>
 800b78e:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 800b792:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b794:	f8dd 90c0 	ldr.w	r9, [sp, #192]	; 0xc0
 800b798:	f8bd c0e0 	ldrh.w	ip, [sp, #224]	; 0xe0
 800b79c:	f8bd e0e8 	ldrh.w	lr, [sp, #232]	; 0xe8
 800b7a0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b7a2:	9101      	str	r1, [sp, #4]
 800b7a4:	1aca      	subs	r2, r1, r3
 800b7a6:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 800b7aa:	9305      	str	r3, [sp, #20]
 800b7ac:	2501      	movs	r5, #1
 800b7ae:	9507      	str	r5, [sp, #28]
 800b7b0:	fa1f f189 	uxth.w	r1, r9
 800b7b4:	1ae4      	subs	r4, r4, r3
 800b7b6:	f8cd c018 	str.w	ip, [sp, #24]
 800b7ba:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
 800b7be:	f8bd c0e4 	ldrh.w	ip, [sp, #228]	; 0xe4
 800b7c2:	9008      	str	r0, [sp, #32]
 800b7c4:	ad4d      	add	r5, sp, #308	; 0x134
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	b292      	uxth	r2, r2
 800b7ca:	e9cd 1e03 	strd	r1, lr, [sp, #12]
 800b7ce:	9302      	str	r3, [sp, #8]
 800b7d0:	9925      	ldr	r1, [sp, #148]	; 0x94
 800b7d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b7d4:	9d3c      	ldr	r5, [sp, #240]	; 0xf0
 800b7d6:	f8cd c000 	str.w	ip, [sp]
 800b7da:	47a8      	blx	r5
 800b7dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b7de:	6943      	ldr	r3, [r0, #20]
 800b7e0:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800b7e2:	68d9      	ldr	r1, [r3, #12]
 800b7e4:	6882      	ldr	r2, [r0, #8]
 800b7e6:	f9bd 309c 	ldrsh.w	r3, [sp, #156]	; 0x9c
 800b7ea:	464d      	mov	r5, r9
 800b7ec:	440a      	add	r2, r1
 800b7ee:	1aeb      	subs	r3, r5, r3
 800b7f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b7f2:	6082      	str	r2, [r0, #8]
 800b7f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b7f8:	3101      	adds	r1, #1
 800b7fa:	b21b      	sxth	r3, r3
 800b7fc:	b224      	sxth	r4, r4
 800b7fe:	9116      	str	r1, [sp, #88]	; 0x58
 800b800:	9330      	str	r3, [sp, #192]	; 0xc0
 800b802:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	eb02 0903 	add.w	r9, r2, r3
 800b80e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800b810:	f8c7 9008 	str.w	r9, [r7, #8]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	b13b      	cbz	r3, 800b828 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4e0>
 800b818:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b81a:	695a      	ldr	r2, [r3, #20]
 800b81c:	68b3      	ldr	r3, [r6, #8]
 800b81e:	68d2      	ldr	r2, [r2, #12]
 800b820:	4413      	add	r3, r2
 800b822:	60b3      	str	r3, [r6, #8]
 800b824:	f8d7 9008 	ldr.w	r9, [r7, #8]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	9329      	str	r3, [sp, #164]	; 0xa4
 800b82c:	4658      	mov	r0, fp
 800b82e:	f005 fcb9 	bl	80111a4 <get_tensor_byte_size>
 800b832:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b834:	4403      	add	r3, r0
 800b836:	4599      	cmp	r9, r3
 800b838:	d306      	bcc.n	800b848 <forward_conv2d_nl_pool_integer_SSSA_ch+0x500>
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	60bb      	str	r3, [r7, #8]
 800b83e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800b840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b842:	b10b      	cbz	r3, 800b848 <forward_conv2d_nl_pool_integer_SSSA_ch+0x500>
 800b844:	68f3      	ldr	r3, [r6, #12]
 800b846:	60b3      	str	r3, [r6, #8]
 800b848:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b84a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800b84c:	4293      	cmp	r3, r2
 800b84e:	f4ff af16 	bcc.w	800b67e <forward_conv2d_nl_pool_integer_SSSA_ch+0x336>
 800b852:	9729      	str	r7, [sp, #164]	; 0xa4
 800b854:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800b856:	68d3      	ldr	r3, [r2, #12]
 800b858:	6093      	str	r3, [r2, #8]
 800b85a:	68f3      	ldr	r3, [r6, #12]
 800b85c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800b85e:	60b3      	str	r3, [r6, #8]
 800b860:	68d3      	ldr	r3, [r2, #12]
 800b862:	6093      	str	r3, [r2, #8]
 800b864:	b055      	add	sp, #340	; 0x154
 800b866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86a:	e9d6 2102 	ldrd	r2, r1, [r6, #8]
 800b86e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b870:	fb03 2314 	mls	r3, r3, r4, r2
 800b874:	4299      	cmp	r1, r3
 800b876:	bf84      	itt	hi
 800b878:	6870      	ldrhi	r0, [r6, #4]
 800b87a:	181b      	addhi	r3, r3, r0
 800b87c:	4299      	cmp	r1, r3
 800b87e:	d212      	bcs.n	800b8a6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x55e>
 800b880:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800b882:	4284      	cmp	r4, r0
 800b884:	d00f      	beq.n	800b8a6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x55e>
 800b886:	6870      	ldr	r0, [r6, #4]
 800b888:	4401      	add	r1, r0
 800b88a:	428b      	cmp	r3, r1
 800b88c:	d20b      	bcs.n	800b8a6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x55e>
 800b88e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b890:	3a01      	subs	r2, #1
 800b892:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b896:	f802 1f01 	strb.w	r1, [r2, #1]!
 800b89a:	68f1      	ldr	r1, [r6, #12]
 800b89c:	6870      	ldr	r0, [r6, #4]
 800b89e:	4401      	add	r1, r0
 800b8a0:	428b      	cmp	r3, r1
 800b8a2:	d3f6      	bcc.n	800b892 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54a>
 800b8a4:	9515      	str	r5, [sp, #84]	; 0x54
 800b8a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b8a8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800b8aa:	b2a4      	uxth	r4, r4
 800b8ac:	4413      	add	r3, r2
 800b8ae:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800b8b0:	1b1b      	subs	r3, r3, r4
 800b8b2:	b21b      	sxth	r3, r3
 800b8b4:	4414      	add	r4, r2
 800b8b6:	9324      	str	r3, [sp, #144]	; 0x90
 800b8b8:	b224      	sxth	r4, r4
 800b8ba:	e765      	b.n	800b788 <forward_conv2d_nl_pool_integer_SSSA_ch+0x440>
 800b8bc:	00000000 	.word	0x00000000
 800b8c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b8c2:	429c      	cmp	r4, r3
 800b8c4:	f000 80b4 	beq.w	800ba30 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6e8>
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b8cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b8d0:	9210      	str	r2, [sp, #64]	; 0x40
 800b8d2:	930e      	str	r3, [sp, #56]	; 0x38
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	930d      	str	r3, [sp, #52]	; 0x34
 800b8d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8da:	930c      	str	r3, [sp, #48]	; 0x30
 800b8dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8de:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8e0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b8e2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 800b8e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b8e8:	9308      	str	r3, [sp, #32]
 800b8ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8ec:	9307      	str	r3, [sp, #28]
 800b8ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b8f0:	9306      	str	r3, [sp, #24]
 800b8f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8f4:	9305      	str	r3, [sp, #20]
 800b8f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8f8:	9304      	str	r3, [sp, #16]
 800b8fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b8fc:	9303      	str	r3, [sp, #12]
 800b8fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b900:	9302      	str	r3, [sp, #8]
 800b902:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b904:	9301      	str	r3, [sp, #4]
 800b906:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	fa1f f288 	uxth.w	r2, r8
 800b90e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b910:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800b912:	4650      	mov	r0, sl
 800b914:	f001 fc14 	bl	800d140 <st_sssa8_ch_convolve>
 800b918:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b91a:	9926      	ldr	r1, [sp, #152]	; 0x98
 800b91c:	428b      	cmp	r3, r1
 800b91e:	f47f af1c 	bne.w	800b75a <forward_conv2d_nl_pool_integer_SSSA_ch+0x412>
 800b922:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b924:	f04f 0800 	mov.w	r8, #0
 800b928:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f43f af1d 	beq.w	800b76c <forward_conv2d_nl_pool_integer_SSSA_ch+0x424>
 800b932:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b934:	1a9b      	subs	r3, r3, r2
 800b936:	d504      	bpl.n	800b942 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5fa>
 800b938:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b93a:	1a52      	subs	r2, r2, r1
 800b93c:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800b93e:	fb01 aa02 	mla	sl, r1, r2, sl
 800b942:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b946:	b29b      	uxth	r3, r3
 800b948:	9312      	str	r3, [sp, #72]	; 0x48
 800b94a:	e711      	b.n	800b770 <forward_conv2d_nl_pool_integer_SSSA_ch+0x428>
 800b94c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b94e:	429c      	cmp	r4, r3
 800b950:	f000 8081 	beq.w	800ba56 <forward_conv2d_nl_pool_integer_SSSA_ch+0x70e>
 800b954:	2301      	movs	r3, #1
 800b956:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b958:	930f      	str	r3, [sp, #60]	; 0x3c
 800b95a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b95c:	9210      	str	r2, [sp, #64]	; 0x40
 800b95e:	930e      	str	r3, [sp, #56]	; 0x38
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	930d      	str	r3, [sp, #52]	; 0x34
 800b964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b966:	930c      	str	r3, [sp, #48]	; 0x30
 800b968:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b96a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b96c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b96e:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 800b972:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b974:	9308      	str	r3, [sp, #32]
 800b976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b978:	9307      	str	r3, [sp, #28]
 800b97a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b97c:	9306      	str	r3, [sp, #24]
 800b97e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b980:	9305      	str	r3, [sp, #20]
 800b982:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b984:	9304      	str	r3, [sp, #16]
 800b986:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b988:	9303      	str	r3, [sp, #12]
 800b98a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b98c:	9302      	str	r3, [sp, #8]
 800b98e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b990:	9301      	str	r3, [sp, #4]
 800b992:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	fa1f f288 	uxth.w	r2, r8
 800b99a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b99c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800b99e:	4650      	mov	r0, sl
 800b9a0:	f000 fde6 	bl	800c570 <st_sssa8_ch_convolve_dw>
 800b9a4:	e6d4      	b.n	800b750 <forward_conv2d_nl_pool_integer_SSSA_ch+0x408>
 800b9a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	e637      	b.n	800b61c <forward_conv2d_nl_pool_integer_SSSA_ch+0x2d4>
 800b9ac:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800b9b0:	f1ba 0f00 	cmp.w	sl, #0
 800b9b4:	f43f ad54 	beq.w	800b460 <forward_conv2d_nl_pool_integer_SSSA_ch+0x118>
 800b9b8:	f8da a008 	ldr.w	sl, [sl, #8]
 800b9bc:	e550      	b.n	800b460 <forward_conv2d_nl_pool_integer_SSSA_ch+0x118>
 800b9be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9c0:	fb02 f203 	mul.w	r2, r2, r3
 800b9c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b9c8:	2317      	movs	r3, #23
 800b9ca:	1c55      	adds	r5, r2, #1
 800b9cc:	932c      	str	r3, [sp, #176]	; 0xb0
 800b9ce:	e61d      	b.n	800b60c <forward_conv2d_nl_pool_integer_SSSA_ch+0x2c4>
 800b9d0:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800b9d2:	fb02 f205 	mul.w	r2, r2, r5
 800b9d6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b9d8:	fb02 f505 	mul.w	r5, r2, r5
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	ea4f 0545 	mov.w	r5, r5, lsl #1
 800b9e2:	bf14      	ite	ne
 800b9e4:	2716      	movne	r7, #22
 800b9e6:	2718      	moveq	r7, #24
 800b9e8:	f5b5 5fa0 	cmp.w	r5, #5120	; 0x1400
 800b9ec:	972c      	str	r7, [sp, #176]	; 0xb0
 800b9ee:	bfa8      	it	ge
 800b9f0:	f44f 55a0 	movge.w	r5, #5120	; 0x1400
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f47f ae08 	bne.w	800b60a <forward_conv2d_nl_pool_integer_SSSA_ch+0x2c2>
 800b9fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9fc:	441a      	add	r2, r3
 800b9fe:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800ba02:	e603      	b.n	800b60c <forward_conv2d_nl_pool_integer_SSSA_ch+0x2c4>
 800ba04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba06:	1e58      	subs	r0, r3, #1
 800ba08:	4243      	negs	r3, r0
 800ba0a:	4143      	adcs	r3, r0
 800ba0c:	e59f      	b.n	800b54e <forward_conv2d_nl_pool_integer_SSSA_ch+0x206>
 800ba0e:	9117      	str	r1, [sp, #92]	; 0x5c
 800ba10:	e5c9      	b.n	800b5a6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x25e>
 800ba12:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ba14:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f47f ae70 	bne.w	800b6fe <forward_conv2d_nl_pool_integer_SSSA_ch+0x3b6>
 800ba1e:	464b      	mov	r3, r9
 800ba20:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ba22:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ba24:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ba26:	f002 f919 	bl	800dc5c <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 800ba2a:	e668      	b.n	800b6fe <forward_conv2d_nl_pool_integer_SSSA_ch+0x3b6>
 800ba2c:	9014      	str	r0, [sp, #80]	; 0x50
 800ba2e:	e5ab      	b.n	800b588 <forward_conv2d_nl_pool_integer_SSSA_ch+0x240>
 800ba30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f47f af48 	bne.w	800b8c8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x580>
 800ba38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba3a:	9303      	str	r3, [sp, #12]
 800ba3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba3e:	9302      	str	r3, [sp, #8]
 800ba40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba42:	9301      	str	r3, [sp, #4]
 800ba44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba4e:	981c      	ldr	r0, [sp, #112]	; 0x70
 800ba50:	f001 faee 	bl	800d030 <st_sssa8_ch_convolve_rank1upd>
 800ba54:	e738      	b.n	800b8c8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x580>
 800ba56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	f47f af7b 	bne.w	800b954 <forward_conv2d_nl_pool_integer_SSSA_ch+0x60c>
 800ba5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba60:	9300      	str	r3, [sp, #0]
 800ba62:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ba64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ba66:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ba68:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ba6a:	f000 fcc7 	bl	800c3fc <st_sssa8_ch_conv_dw_Wadapt>
 800ba6e:	e771      	b.n	800b954 <forward_conv2d_nl_pool_integer_SSSA_ch+0x60c>
 800ba70:	2400      	movs	r4, #0
 800ba72:	9415      	str	r4, [sp, #84]	; 0x54
 800ba74:	e49a      	b.n	800b3ac <forward_conv2d_nl_pool_integer_SSSA_ch+0x64>
 800ba76:	4b02      	ldr	r3, [pc, #8]	; (800ba80 <forward_conv2d_nl_pool_integer_SSSA_ch+0x738>)
 800ba78:	932f      	str	r3, [sp, #188]	; 0xbc
 800ba7a:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
 800ba7e:	e4a5      	b.n	800b3cc <forward_conv2d_nl_pool_integer_SSSA_ch+0x84>
 800ba80:	0800b345 	.word	0x0800b345

0800ba84 <forward_dense_integer_SSSA>:
 800ba84:	6983      	ldr	r3, [r0, #24]
 800ba86:	8818      	ldrh	r0, [r3, #0]
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	f000 80b5 	beq.w	800bbf8 <forward_dense_integer_SSSA+0x174>
 800ba8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba92:	685c      	ldr	r4, [r3, #4]
 800ba94:	6863      	ldr	r3, [r4, #4]
 800ba96:	b091      	sub	sp, #68	; 0x44
 800ba98:	b103      	cbz	r3, 800ba9c <forward_dense_integer_SSSA+0x18>
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2801      	cmp	r0, #1
 800ba9e:	f240 80a2 	bls.w	800bbe6 <forward_dense_integer_SSSA+0x162>
 800baa2:	6922      	ldr	r2, [r4, #16]
 800baa4:	b102      	cbz	r2, 800baa8 <forward_dense_integer_SSSA+0x24>
 800baa6:	6812      	ldr	r2, [r2, #0]
 800baa8:	2802      	cmp	r0, #2
 800baaa:	f000 80a2 	beq.w	800bbf2 <forward_dense_integer_SSSA+0x16e>
 800baae:	69e5      	ldr	r5, [r4, #28]
 800bab0:	2d00      	cmp	r5, #0
 800bab2:	f000 80fa 	beq.w	800bcaa <forward_dense_integer_SSSA+0x226>
 800bab6:	6829      	ldr	r1, [r5, #0]
 800bab8:	f114 0618 	adds.w	r6, r4, #24
 800babc:	d007      	beq.n	800bace <forward_dense_integer_SSSA+0x4a>
 800babe:	8b26      	ldrh	r6, [r4, #24]
 800bac0:	2e01      	cmp	r6, #1
 800bac2:	f240 80e0 	bls.w	800bc86 <forward_dense_integer_SSSA+0x202>
 800bac6:	2d00      	cmp	r5, #0
 800bac8:	f000 80d4 	beq.w	800bc74 <forward_dense_integer_SSSA+0x1f0>
 800bacc:	686e      	ldr	r6, [r5, #4]
 800bace:	2803      	cmp	r0, #3
 800bad0:	f000 808c 	beq.w	800bbec <forward_dense_integer_SSSA+0x168>
 800bad4:	68d0      	ldr	r0, [r2, #12]
 800bad6:	f8d6 e018 	ldr.w	lr, [r6, #24]
 800bada:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800bade:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800bae0:	699c      	ldr	r4, [r3, #24]
 800bae2:	e9d0 c702 	ldrd	ip, r7, [r0, #8]
 800bae6:	68d8      	ldr	r0, [r3, #12]
 800bae8:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800baec:	f8de 0008 	ldr.w	r0, [lr, #8]
 800baf0:	900c      	str	r0, [sp, #48]	; 0x30
 800baf2:	fa1f f68a 	uxth.w	r6, sl
 800baf6:	960d      	str	r6, [sp, #52]	; 0x34
 800baf8:	fa1f f68b 	uxth.w	r6, fp
 800bafc:	6990      	ldr	r0, [r2, #24]
 800bafe:	960b      	str	r6, [sp, #44]	; 0x2c
 800bb00:	fb0c f807 	mul.w	r8, ip, r7
 800bb04:	2d00      	cmp	r5, #0
 800bb06:	f000 80a7 	beq.w	800bc58 <forward_dense_integer_SSSA+0x1d4>
 800bb0a:	682d      	ldr	r5, [r5, #0]
 800bb0c:	2d00      	cmp	r5, #0
 800bb0e:	f000 80a3 	beq.w	800bc58 <forward_dense_integer_SSSA+0x1d4>
 800bb12:	69ad      	ldr	r5, [r5, #24]
 800bb14:	68ad      	ldr	r5, [r5, #8]
 800bb16:	9508      	str	r5, [sp, #32]
 800bb18:	681f      	ldr	r7, [r3, #0]
 800bb1a:	698b      	ldr	r3, [r1, #24]
 800bb1c:	6812      	ldr	r2, [r2, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	68a5      	ldr	r5, [r4, #8]
 800bb22:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800bb26:	9309      	str	r3, [sp, #36]	; 0x24
 800bb28:	f8d1 c000 	ldr.w	ip, [r1]
 800bb2c:	2f00      	cmp	r7, #0
 800bb2e:	d072      	beq.n	800bc16 <forward_dense_integer_SSSA+0x192>
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	4604      	mov	r4, r0
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d061      	beq.n	800bbfc <forward_dense_integer_SSSA+0x178>
 800bb38:	887b      	ldrh	r3, [r7, #2]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f000 808e 	beq.w	800bc5c <forward_dense_integer_SSSA+0x1d8>
 800bb40:	6801      	ldr	r1, [r0, #0]
 800bb42:	edd1 7a00 	vldr	s15, [r1]
 800bb46:	2a00      	cmp	r2, #0
 800bb48:	f000 80aa 	beq.w	800bca0 <forward_dense_integer_SSSA+0x21c>
 800bb4c:	6856      	ldr	r6, [r2, #4]
 800bb4e:	2e00      	cmp	r6, #0
 800bb50:	f000 8089 	beq.w	800bc66 <forward_dense_integer_SSSA+0x1e2>
 800bb54:	8851      	ldrh	r1, [r2, #2]
 800bb56:	2900      	cmp	r1, #0
 800bb58:	d067      	beq.n	800bc2a <forward_dense_integer_SSSA+0x1a6>
 800bb5a:	6833      	ldr	r3, [r6, #0]
 800bb5c:	ed93 0a00 	vldr	s0, [r3]
 800bb60:	2f00      	cmp	r7, #0
 800bb62:	f040 8092 	bne.w	800bc8a <forward_dense_integer_SSSA+0x206>
 800bb66:	6873      	ldr	r3, [r6, #4]
 800bb68:	f993 3000 	ldrsb.w	r3, [r3]
 800bb6c:	930a      	str	r3, [sp, #40]	; 0x28
 800bb6e:	f1bc 0f00 	cmp.w	ip, #0
 800bb72:	d04a      	beq.n	800bc0a <forward_dense_integer_SSSA+0x186>
 800bb74:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d046      	beq.n	800bc0a <forward_dense_integer_SSSA+0x186>
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2400      	movs	r4, #0
 800bb80:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a
 800bb84:	940f      	str	r4, [sp, #60]	; 0x3c
 800bb86:	ed93 7a00 	vldr	s14, [r3]
 800bb8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb8e:	f10d 063a 	add.w	r6, sp, #58	; 0x3a
 800bb92:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800bb96:	4630      	mov	r0, r6
 800bb98:	f000 fb54 	bl	800c244 <align_factor>
 800bb9c:	900f      	str	r0, [sp, #60]	; 0x3c
 800bb9e:	f1b8 0f00 	cmp.w	r8, #0
 800bba2:	d01d      	beq.n	800bbe0 <forward_dense_integer_SSSA+0x15c>
 800bba4:	4623      	mov	r3, r4
 800bba6:	fa1f fb8b 	uxth.w	fp, fp
 800bbaa:	464c      	mov	r4, r9
 800bbac:	fa1f fa8a 	uxth.w	sl, sl
 800bbb0:	4699      	mov	r9, r3
 800bbb2:	9b08      	ldr	r3, [sp, #32]
 800bbb4:	9601      	str	r6, [sp, #4]
 800bbb6:	e9cd 4305 	strd	r4, r3, [sp, #20]
 800bbba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbbc:	9304      	str	r3, [sp, #16]
 800bbbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbc4:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800bbc8:	ab0f      	add	r3, sp, #60	; 0x3c
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	4628      	mov	r0, r5
 800bbce:	f109 0901 	add.w	r9, r9, #1
 800bbd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbd4:	f002 f8e0 	bl	800dd98 <st_sssa8_fully_connected>
 800bbd8:	45c1      	cmp	r9, r8
 800bbda:	4454      	add	r4, sl
 800bbdc:	445d      	add	r5, fp
 800bbde:	d1e8      	bne.n	800bbb2 <forward_dense_integer_SSSA+0x12e>
 800bbe0:	b011      	add	sp, #68	; 0x44
 800bbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	deff      	udf	#255	; 0xff
 800bbec:	2300      	movs	r3, #0
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	deff      	udf	#255	; 0xff
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	deff      	udf	#255	; 0xff
 800bbf8:	6843      	ldr	r3, [r0, #4]
 800bbfa:	deff      	udf	#255	; 0xff
 800bbfc:	2a00      	cmp	r2, #0
 800bbfe:	d03b      	beq.n	800bc78 <forward_dense_integer_SSSA+0x1f4>
 800bc00:	6856      	ldr	r6, [r2, #4]
 800bc02:	b96e      	cbnz	r6, 800bc20 <forward_dense_integer_SSSA+0x19c>
 800bc04:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800bcbc <forward_dense_integer_SSSA+0x238>
 800bc08:	e012      	b.n	800bc30 <forward_dense_integer_SSSA+0x1ac>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800bc10:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	deff      	udf	#255	; 0xff
 800bc16:	2a00      	cmp	r2, #0
 800bc18:	d02e      	beq.n	800bc78 <forward_dense_integer_SSSA+0x1f4>
 800bc1a:	6856      	ldr	r6, [r2, #4]
 800bc1c:	2e00      	cmp	r6, #0
 800bc1e:	d039      	beq.n	800bc94 <forward_dense_integer_SSSA+0x210>
 800bc20:	8851      	ldrh	r1, [r2, #2]
 800bc22:	eddf 7a26 	vldr	s15, [pc, #152]	; 800bcbc <forward_dense_integer_SSSA+0x238>
 800bc26:	2900      	cmp	r1, #0
 800bc28:	d197      	bne.n	800bb5a <forward_dense_integer_SSSA+0xd6>
 800bc2a:	2f00      	cmp	r7, #0
 800bc2c:	d035      	beq.n	800bc9a <forward_dense_integer_SSSA+0x216>
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	4604      	mov	r4, r0
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d03b      	beq.n	800bcae <forward_dense_integer_SSSA+0x22a>
 800bc36:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800bcbc <forward_dense_integer_SSSA+0x238>
 800bc3a:	887f      	ldrh	r7, [r7, #2]
 800bc3c:	b12f      	cbz	r7, 800bc4a <forward_dense_integer_SSSA+0x1c6>
 800bc3e:	6863      	ldr	r3, [r4, #4]
 800bc40:	f993 7000 	ldrsb.w	r7, [r3]
 800bc44:	2a00      	cmp	r2, #0
 800bc46:	d036      	beq.n	800bcb6 <forward_dense_integer_SSSA+0x232>
 800bc48:	6856      	ldr	r6, [r2, #4]
 800bc4a:	b156      	cbz	r6, 800bc62 <forward_dense_integer_SSSA+0x1de>
 800bc4c:	8851      	ldrh	r1, [r2, #2]
 800bc4e:	2900      	cmp	r1, #0
 800bc50:	d189      	bne.n	800bb66 <forward_dense_integer_SSSA+0xe2>
 800bc52:	2300      	movs	r3, #0
 800bc54:	930a      	str	r3, [sp, #40]	; 0x28
 800bc56:	e78a      	b.n	800bb6e <forward_dense_integer_SSSA+0xea>
 800bc58:	9508      	str	r5, [sp, #32]
 800bc5a:	e75d      	b.n	800bb18 <forward_dense_integer_SSSA+0x94>
 800bc5c:	eddf 7a17 	vldr	s15, [pc, #92]	; 800bcbc <forward_dense_integer_SSSA+0x238>
 800bc60:	e771      	b.n	800bb46 <forward_dense_integer_SSSA+0xc2>
 800bc62:	960a      	str	r6, [sp, #40]	; 0x28
 800bc64:	e783      	b.n	800bb6e <forward_dense_integer_SSSA+0xea>
 800bc66:	2f00      	cmp	r7, #0
 800bc68:	d1e2      	bne.n	800bc30 <forward_dense_integer_SSSA+0x1ac>
 800bc6a:	2700      	movs	r7, #0
 800bc6c:	970a      	str	r7, [sp, #40]	; 0x28
 800bc6e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800bcbc <forward_dense_integer_SSSA+0x238>
 800bc72:	e77c      	b.n	800bb6e <forward_dense_integer_SSSA+0xea>
 800bc74:	462e      	mov	r6, r5
 800bc76:	e72a      	b.n	800bace <forward_dense_integer_SSSA+0x4a>
 800bc78:	eddf 7a10 	vldr	s15, [pc, #64]	; 800bcbc <forward_dense_integer_SSSA+0x238>
 800bc7c:	920a      	str	r2, [sp, #40]	; 0x28
 800bc7e:	4617      	mov	r7, r2
 800bc80:	eeb0 0a67 	vmov.f32	s0, s15
 800bc84:	e773      	b.n	800bb6e <forward_dense_integer_SSSA+0xea>
 800bc86:	2600      	movs	r6, #0
 800bc88:	e721      	b.n	800bace <forward_dense_integer_SSSA+0x4a>
 800bc8a:	687c      	ldr	r4, [r7, #4]
 800bc8c:	2c00      	cmp	r4, #0
 800bc8e:	d1d4      	bne.n	800bc3a <forward_dense_integer_SSSA+0x1b6>
 800bc90:	4627      	mov	r7, r4
 800bc92:	e7dc      	b.n	800bc4e <forward_dense_integer_SSSA+0x1ca>
 800bc94:	eddf 7a09 	vldr	s15, [pc, #36]	; 800bcbc <forward_dense_integer_SSSA+0x238>
 800bc98:	e7e7      	b.n	800bc6a <forward_dense_integer_SSSA+0x1e6>
 800bc9a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800bcbc <forward_dense_integer_SSSA+0x238>
 800bc9e:	e7d8      	b.n	800bc52 <forward_dense_integer_SSSA+0x1ce>
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d0e2      	beq.n	800bc6a <forward_dense_integer_SSSA+0x1e6>
 800bca4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800bcbc <forward_dense_integer_SSSA+0x238>
 800bca8:	e7c9      	b.n	800bc3e <forward_dense_integer_SSSA+0x1ba>
 800bcaa:	4629      	mov	r1, r5
 800bcac:	e704      	b.n	800bab8 <forward_dense_integer_SSSA+0x34>
 800bcae:	4607      	mov	r7, r0
 800bcb0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800bcbc <forward_dense_integer_SSSA+0x238>
 800bcb4:	e7c9      	b.n	800bc4a <forward_dense_integer_SSSA+0x1c6>
 800bcb6:	920a      	str	r2, [sp, #40]	; 0x28
 800bcb8:	e759      	b.n	800bb6e <forward_dense_integer_SSSA+0xea>
 800bcba:	bf00      	nop
 800bcbc:	00000000 	.word	0x00000000

0800bcc0 <nl_func_sm_array_f32>:
 800bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc4:	ed2d 8b04 	vpush	{d8-d9}
 800bcc8:	b089      	sub	sp, #36	; 0x24
 800bcca:	698f      	ldr	r7, [r1, #24]
 800bccc:	6984      	ldr	r4, [r0, #24]
 800bcce:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800bcd2:	68bd      	ldr	r5, [r7, #8]
 800bcd4:	9402      	str	r4, [sp, #8]
 800bcd6:	4626      	mov	r6, r4
 800bcd8:	4696      	mov	lr, r2
 800bcda:	eba2 020c 	sub.w	r2, r2, ip
 800bcde:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800bce2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800bce4:	68fa      	ldr	r2, [r7, #12]
 800bce6:	68b6      	ldr	r6, [r6, #8]
 800bce8:	ebae 0e04 	sub.w	lr, lr, r4
 800bcec:	4295      	cmp	r5, r2
 800bcee:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800bcf2:	d354      	bcc.n	800bd9e <nl_func_sm_array_f32+0xde>
 800bcf4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800bcf8:	f1cc 0200 	rsb	r2, ip, #0
 800bcfc:	00a4      	lsls	r4, r4, #2
 800bcfe:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800bd02:	9303      	str	r3, [sp, #12]
 800bd04:	9204      	str	r2, [sp, #16]
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	4262      	negs	r2, r4
 800bd0a:	9205      	str	r2, [sp, #20]
 800bd0c:	9301      	str	r3, [sp, #4]
 800bd0e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800bd12:	9b02      	ldr	r3, [sp, #8]
 800bd14:	9a07      	ldr	r2, [sp, #28]
 800bd16:	60bd      	str	r5, [r7, #8]
 800bd18:	609e      	str	r6, [r3, #8]
 800bd1a:	9b06      	ldr	r3, [sp, #24]
 800bd1c:	6992      	ldr	r2, [r2, #24]
 800bd1e:	699b      	ldr	r3, [r3, #24]
 800bd20:	6894      	ldr	r4, [r2, #8]
 800bd22:	9a03      	ldr	r2, [sp, #12]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	2a01      	cmp	r2, #1
 800bd28:	ed93 8a00 	vldr	s16, [r3]
 800bd2c:	d940      	bls.n	800bdb0 <nl_func_sm_array_f32+0xf0>
 800bd2e:	9901      	ldr	r1, [sp, #4]
 800bd30:	1d1a      	adds	r2, r3, #4
 800bd32:	eb03 0b01 	add.w	fp, r3, r1
 800bd36:	ecf2 7a01 	vldmia	r2!, {s15}
 800bd3a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd42:	bfb8      	it	lt
 800bd44:	eeb0 8a67 	vmovlt.f32	s16, s15
 800bd48:	4593      	cmp	fp, r2
 800bd4a:	d1f4      	bne.n	800bd36 <nl_func_sm_array_f32+0x76>
 800bd4c:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800bdbc <nl_func_sm_array_f32+0xfc>
 800bd50:	469a      	mov	sl, r3
 800bd52:	46a1      	mov	r9, r4
 800bd54:	46a0      	mov	r8, r4
 800bd56:	ecba 0a01 	vldmia	sl!, {s0}
 800bd5a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800bd5e:	f008 f9bb 	bl	80140d8 <expf>
 800bd62:	45d3      	cmp	fp, sl
 800bd64:	eca8 0a01 	vstmia	r8!, {s0}
 800bd68:	ee78 8a80 	vadd.f32	s17, s17, s0
 800bd6c:	d1f3      	bne.n	800bd56 <nl_func_sm_array_f32+0x96>
 800bd6e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bd72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd76:	d00b      	beq.n	800bd90 <nl_func_sm_array_f32+0xd0>
 800bd78:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800bd7c:	9b01      	ldr	r3, [sp, #4]
 800bd7e:	441c      	add	r4, r3
 800bd80:	edd9 7a00 	vldr	s15, [r9]
 800bd84:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd88:	ece9 7a01 	vstmia	r9!, {s15}
 800bd8c:	454c      	cmp	r4, r9
 800bd8e:	d1f7      	bne.n	800bd80 <nl_func_sm_array_f32+0xc0>
 800bd90:	9b04      	ldr	r3, [sp, #16]
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	441d      	add	r5, r3
 800bd96:	9b05      	ldr	r3, [sp, #20]
 800bd98:	42aa      	cmp	r2, r5
 800bd9a:	441e      	add	r6, r3
 800bd9c:	d9b9      	bls.n	800bd12 <nl_func_sm_array_f32+0x52>
 800bd9e:	60ba      	str	r2, [r7, #8]
 800bda0:	9a02      	ldr	r2, [sp, #8]
 800bda2:	68d3      	ldr	r3, [r2, #12]
 800bda4:	6093      	str	r3, [r2, #8]
 800bda6:	b009      	add	sp, #36	; 0x24
 800bda8:	ecbd 8b04 	vpop	{d8-d9}
 800bdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb0:	2a00      	cmp	r2, #0
 800bdb2:	d0ed      	beq.n	800bd90 <nl_func_sm_array_f32+0xd0>
 800bdb4:	9a01      	ldr	r2, [sp, #4]
 800bdb6:	eb03 0b02 	add.w	fp, r3, r2
 800bdba:	e7c7      	b.n	800bd4c <nl_func_sm_array_f32+0x8c>
 800bdbc:	00000000 	.word	0x00000000

0800bdc0 <forward_sm>:
 800bdc0:	6982      	ldr	r2, [r0, #24]
 800bdc2:	8813      	ldrh	r3, [r2, #0]
 800bdc4:	b32b      	cbz	r3, 800be12 <forward_sm+0x52>
 800bdc6:	6852      	ldr	r2, [r2, #4]
 800bdc8:	6851      	ldr	r1, [r2, #4]
 800bdca:	b101      	cbz	r1, 800bdce <forward_sm+0xe>
 800bdcc:	6809      	ldr	r1, [r1, #0]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d91c      	bls.n	800be0c <forward_sm+0x4c>
 800bdd2:	6913      	ldr	r3, [r2, #16]
 800bdd4:	b1c3      	cbz	r3, 800be08 <forward_sm+0x48>
 800bdd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdd8:	6818      	ldr	r0, [r3, #0]
 800bdda:	688c      	ldr	r4, [r1, #8]
 800bddc:	68c3      	ldr	r3, [r0, #12]
 800bdde:	68ce      	ldr	r6, [r1, #12]
 800bde0:	685f      	ldr	r7, [r3, #4]
 800bde2:	6873      	ldr	r3, [r6, #4]
 800bde4:	0a24      	lsrs	r4, r4, #8
 800bde6:	b083      	sub	sp, #12
 800bde8:	d015      	beq.n	800be16 <forward_sm+0x56>
 800bdea:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bdf4:	42a6      	cmp	r6, r4
 800bdf6:	fb05 f202 	mul.w	r2, r5, r2
 800bdfa:	d1f9      	bne.n	800bdf0 <forward_sm+0x30>
 800bdfc:	e9cd 3700 	strd	r3, r7, [sp]
 800be00:	f7ff ff5e 	bl	800bcc0 <nl_func_sm_array_f32>
 800be04:	b003      	add	sp, #12
 800be06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	deff      	udf	#255	; 0xff
 800be0c:	2300      	movs	r3, #0
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	deff      	udf	#255	; 0xff
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	deff      	udf	#255	; 0xff
 800be16:	2201      	movs	r2, #1
 800be18:	e9cd 3700 	strd	r3, r7, [sp]
 800be1c:	f7ff ff50 	bl	800bcc0 <nl_func_sm_array_f32>
 800be20:	b003      	add	sp, #12
 800be22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be24 <ai_check_custom_types>:
 800be24:	4b13      	ldr	r3, [pc, #76]	; (800be74 <ai_check_custom_types+0x50>)
 800be26:	b082      	sub	sp, #8
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	9301      	str	r3, [sp, #4]
 800be2c:	b118      	cbz	r0, 800be36 <ai_check_custom_types+0x12>
 800be2e:	7803      	ldrb	r3, [r0, #0]
 800be30:	2b03      	cmp	r3, #3
 800be32:	d002      	beq.n	800be3a <ai_check_custom_types+0x16>
 800be34:	2000      	movs	r0, #0
 800be36:	b002      	add	sp, #8
 800be38:	4770      	bx	lr
 800be3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800be3e:	4293      	cmp	r3, r2
 800be40:	d004      	beq.n	800be4c <ai_check_custom_types+0x28>
 800be42:	2001      	movs	r0, #1
 800be44:	f080 0001 	eor.w	r0, r0, #1
 800be48:	b002      	add	sp, #8
 800be4a:	4770      	bx	lr
 800be4c:	7842      	ldrb	r2, [r0, #1]
 800be4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800be52:	429a      	cmp	r2, r3
 800be54:	f100 0001 	add.w	r0, r0, #1
 800be58:	d1f3      	bne.n	800be42 <ai_check_custom_types+0x1e>
 800be5a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800be5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be62:	429a      	cmp	r2, r3
 800be64:	d1ed      	bne.n	800be42 <ai_check_custom_types+0x1e>
 800be66:	7842      	ldrb	r2, [r0, #1]
 800be68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d1e8      	bne.n	800be42 <ai_check_custom_types+0x1e>
 800be70:	2000      	movs	r0, #0
 800be72:	e7e7      	b.n	800be44 <ai_check_custom_types+0x20>
 800be74:	08014d8c 	.word	0x08014d8c

0800be78 <ai_layers_init_all>:
 800be78:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800be7a:	b17a      	cbz	r2, 800be9c <ai_layers_init_all+0x24>
 800be7c:	6913      	ldr	r3, [r2, #16]
 800be7e:	60d0      	str	r0, [r2, #12]
 800be80:	429a      	cmp	r2, r3
 800be82:	f04f 0201 	mov.w	r2, #1
 800be86:	d009      	beq.n	800be9c <ai_layers_init_all+0x24>
 800be88:	b143      	cbz	r3, 800be9c <ai_layers_init_all+0x24>
 800be8a:	6919      	ldr	r1, [r3, #16]
 800be8c:	60d8      	str	r0, [r3, #12]
 800be8e:	4299      	cmp	r1, r3
 800be90:	f102 0201 	add.w	r2, r2, #1
 800be94:	d002      	beq.n	800be9c <ai_layers_init_all+0x24>
 800be96:	460b      	mov	r3, r1
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1f6      	bne.n	800be8a <ai_layers_init_all+0x12>
 800be9c:	4610      	mov	r0, r2
 800be9e:	4770      	bx	lr

0800bea0 <ai_layers_post_init_all>:
 800bea0:	b538      	push	{r3, r4, r5, lr}
 800bea2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800bea4:	b18c      	cbz	r4, 800beca <ai_layers_post_init_all+0x2a>
 800bea6:	2500      	movs	r5, #0
 800bea8:	6863      	ldr	r3, [r4, #4]
 800beaa:	f013 0f01 	tst.w	r3, #1
 800beae:	4620      	mov	r0, r4
 800beb0:	d003      	beq.n	800beba <ai_layers_post_init_all+0x1a>
 800beb2:	6a23      	ldr	r3, [r4, #32]
 800beb4:	b10b      	cbz	r3, 800beba <ai_layers_post_init_all+0x1a>
 800beb6:	4798      	blx	r3
 800beb8:	3501      	adds	r5, #1
 800beba:	6923      	ldr	r3, [r4, #16]
 800bebc:	42a3      	cmp	r3, r4
 800bebe:	d002      	beq.n	800bec6 <ai_layers_post_init_all+0x26>
 800bec0:	461c      	mov	r4, r3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1f0      	bne.n	800bea8 <ai_layers_post_init_all+0x8>
 800bec6:	4628      	mov	r0, r5
 800bec8:	bd38      	pop	{r3, r4, r5, pc}
 800beca:	4625      	mov	r5, r4
 800becc:	e7fb      	b.n	800bec6 <ai_layers_post_init_all+0x26>
 800bece:	bf00      	nop

0800bed0 <ai_layers_forward_all>:
 800bed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed4:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800bed6:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800bed8:	4604      	mov	r4, r0
 800beda:	2f00      	cmp	r7, #0
 800bedc:	d02c      	beq.n	800bf38 <ai_layers_forward_all+0x68>
 800bede:	2d00      	cmp	r5, #0
 800bee0:	d03f      	beq.n	800bf62 <ai_layers_forward_all+0x92>
 800bee2:	6385      	str	r5, [r0, #56]	; 0x38
 800bee4:	4629      	mov	r1, r5
 800bee6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800bee8:	2001      	movs	r0, #1
 800beea:	47b8      	blx	r7
 800beec:	2600      	movs	r6, #0
 800beee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bef0:	46b0      	mov	r8, r6
 800bef2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bef4:	2002      	movs	r0, #2
 800bef6:	47b8      	blx	r7
 800bef8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800befa:	696b      	ldr	r3, [r5, #20]
 800befc:	4628      	mov	r0, r5
 800befe:	4798      	blx	r3
 800bf00:	692b      	ldr	r3, [r5, #16]
 800bf02:	429d      	cmp	r5, r3
 800bf04:	f04f 0003 	mov.w	r0, #3
 800bf08:	4619      	mov	r1, r3
 800bf0a:	d009      	beq.n	800bf20 <ai_layers_forward_all+0x50>
 800bf0c:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bf10:	47b8      	blx	r7
 800bf12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bf14:	3601      	adds	r6, #1
 800bf16:	2900      	cmp	r1, #0
 800bf18:	d1eb      	bne.n	800bef2 <ai_layers_forward_all+0x22>
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf20:	2100      	movs	r1, #0
 800bf22:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800bf26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bf28:	47b8      	blx	r7
 800bf2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bf2c:	3601      	adds	r6, #1
 800bf2e:	2900      	cmp	r1, #0
 800bf30:	d1df      	bne.n	800bef2 <ai_layers_forward_all+0x22>
 800bf32:	4630      	mov	r0, r6
 800bf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf38:	b19d      	cbz	r5, 800bf62 <ai_layers_forward_all+0x92>
 800bf3a:	6385      	str	r5, [r0, #56]	; 0x38
 800bf3c:	463e      	mov	r6, r7
 800bf3e:	696b      	ldr	r3, [r5, #20]
 800bf40:	4628      	mov	r0, r5
 800bf42:	4798      	blx	r3
 800bf44:	692b      	ldr	r3, [r5, #16]
 800bf46:	42ab      	cmp	r3, r5
 800bf48:	f106 0601 	add.w	r6, r6, #1
 800bf4c:	d004      	beq.n	800bf58 <ai_layers_forward_all+0x88>
 800bf4e:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf50:	461d      	mov	r5, r3
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1f3      	bne.n	800bf3e <ai_layers_forward_all+0x6e>
 800bf56:	e7e0      	b.n	800bf1a <ai_layers_forward_all+0x4a>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf62:	462e      	mov	r6, r5
 800bf64:	4630      	mov	r0, r6
 800bf66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf6a:	bf00      	nop

0800bf6c <pool_func_mp_array_integer_INT8>:
 800bf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf70:	b093      	sub	sp, #76	; 0x4c
 800bf72:	6987      	ldr	r7, [r0, #24]
 800bf74:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800bf76:	6804      	ldr	r4, [r0, #0]
 800bf78:	69ae      	ldr	r6, [r5, #24]
 800bf7a:	68b8      	ldr	r0, [r7, #8]
 800bf7c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800bf80:	682e      	ldr	r6, [r5, #0]
 800bf82:	f8bd 5074 	ldrh.w	r5, [sp, #116]	; 0x74
 800bf86:	950d      	str	r5, [sp, #52]	; 0x34
 800bf88:	f8bd 5078 	ldrh.w	r5, [sp, #120]	; 0x78
 800bf8c:	950e      	str	r5, [sp, #56]	; 0x38
 800bf8e:	f8bd 507c 	ldrh.w	r5, [sp, #124]	; 0x7c
 800bf92:	950f      	str	r5, [sp, #60]	; 0x3c
 800bf94:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 800bf98:	f8bd a070 	ldrh.w	sl, [sp, #112]	; 0x70
 800bf9c:	9510      	str	r5, [sp, #64]	; 0x40
 800bf9e:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 800bfa2:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800bfa6:	f8bd 908c 	ldrh.w	r9, [sp, #140]	; 0x8c
 800bfaa:	2c00      	cmp	r4, #0
 800bfac:	d03a      	beq.n	800c024 <pool_func_mp_array_integer_INT8+0xb8>
 800bfae:	6867      	ldr	r7, [r4, #4]
 800bfb0:	46bb      	mov	fp, r7
 800bfb2:	2f00      	cmp	r7, #0
 800bfb4:	d02f      	beq.n	800c016 <pool_func_mp_array_integer_INT8+0xaa>
 800bfb6:	8865      	ldrh	r5, [r4, #2]
 800bfb8:	9511      	str	r5, [sp, #68]	; 0x44
 800bfba:	2d00      	cmp	r5, #0
 800bfbc:	d04e      	beq.n	800c05c <pool_func_mp_array_integer_INT8+0xf0>
 800bfbe:	683d      	ldr	r5, [r7, #0]
 800bfc0:	ed95 0a00 	vldr	s0, [r5]
 800bfc4:	2e00      	cmp	r6, #0
 800bfc6:	d04c      	beq.n	800c062 <pool_func_mp_array_integer_INT8+0xf6>
 800bfc8:	6875      	ldr	r5, [r6, #4]
 800bfca:	2d00      	cmp	r5, #0
 800bfcc:	d055      	beq.n	800c07a <pool_func_mp_array_integer_INT8+0x10e>
 800bfce:	8877      	ldrh	r7, [r6, #2]
 800bfd0:	9711      	str	r7, [sp, #68]	; 0x44
 800bfd2:	2f00      	cmp	r7, #0
 800bfd4:	d031      	beq.n	800c03a <pool_func_mp_array_integer_INT8+0xce>
 800bfd6:	682f      	ldr	r7, [r5, #0]
 800bfd8:	edd7 0a00 	vldr	s1, [r7]
 800bfdc:	2c00      	cmp	r4, #0
 800bfde:	d15a      	bne.n	800c096 <pool_func_mp_array_integer_INT8+0x12a>
 800bfe0:	686d      	ldr	r5, [r5, #4]
 800bfe2:	f995 5000 	ldrsb.w	r5, [r5]
 800bfe6:	9300      	str	r3, [sp, #0]
 800bfe8:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 800bfec:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800bfee:	9405      	str	r4, [sp, #20]
 800bff0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800bff2:	9404      	str	r4, [sp, #16]
 800bff4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800bff6:	9403      	str	r4, [sp, #12]
 800bff8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bffa:	f8cd e018 	str.w	lr, [sp, #24]
 800bffe:	4613      	mov	r3, r2
 800c000:	e9cd 8907 	strd	r8, r9, [sp, #28]
 800c004:	460a      	mov	r2, r1
 800c006:	e9cd a401 	strd	sl, r4, [sp, #4]
 800c00a:	4661      	mov	r1, ip
 800c00c:	f004 fc56 	bl	80108bc <st_int8_maxpool>
 800c010:	b013      	add	sp, #76	; 0x4c
 800c012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c016:	2e00      	cmp	r6, #0
 800c018:	d036      	beq.n	800c088 <pool_func_mp_array_integer_INT8+0x11c>
 800c01a:	6875      	ldr	r5, [r6, #4]
 800c01c:	b93d      	cbnz	r5, 800c02e <pool_func_mp_array_integer_INT8+0xc2>
 800c01e:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800c0c4 <pool_func_mp_array_integer_INT8+0x158>
 800c022:	e00d      	b.n	800c040 <pool_func_mp_array_integer_INT8+0xd4>
 800c024:	2e00      	cmp	r6, #0
 800c026:	d02f      	beq.n	800c088 <pool_func_mp_array_integer_INT8+0x11c>
 800c028:	6875      	ldr	r5, [r6, #4]
 800c02a:	2d00      	cmp	r5, #0
 800c02c:	d042      	beq.n	800c0b4 <pool_func_mp_array_integer_INT8+0x148>
 800c02e:	8877      	ldrh	r7, [r6, #2]
 800c030:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800c0c4 <pool_func_mp_array_integer_INT8+0x158>
 800c034:	9711      	str	r7, [sp, #68]	; 0x44
 800c036:	2f00      	cmp	r7, #0
 800c038:	d1cd      	bne.n	800bfd6 <pool_func_mp_array_integer_INT8+0x6a>
 800c03a:	2c00      	cmp	r4, #0
 800c03c:	d037      	beq.n	800c0ae <pool_func_mp_array_integer_INT8+0x142>
 800c03e:	6867      	ldr	r7, [r4, #4]
 800c040:	46bb      	mov	fp, r7
 800c042:	b387      	cbz	r7, 800c0a6 <pool_func_mp_array_integer_INT8+0x13a>
 800c044:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800c0c4 <pool_func_mp_array_integer_INT8+0x158>
 800c048:	8864      	ldrh	r4, [r4, #2]
 800c04a:	b974      	cbnz	r4, 800c06a <pool_func_mp_array_integer_INT8+0xfe>
 800c04c:	2d00      	cmp	r5, #0
 800c04e:	d0ca      	beq.n	800bfe6 <pool_func_mp_array_integer_INT8+0x7a>
 800c050:	8876      	ldrh	r6, [r6, #2]
 800c052:	9611      	str	r6, [sp, #68]	; 0x44
 800c054:	2e00      	cmp	r6, #0
 800c056:	d1c3      	bne.n	800bfe0 <pool_func_mp_array_integer_INT8+0x74>
 800c058:	2500      	movs	r5, #0
 800c05a:	e7c4      	b.n	800bfe6 <pool_func_mp_array_integer_INT8+0x7a>
 800c05c:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800c0c4 <pool_func_mp_array_integer_INT8+0x158>
 800c060:	e7b0      	b.n	800bfc4 <pool_func_mp_array_integer_INT8+0x58>
 800c062:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800c064:	b34c      	cbz	r4, 800c0ba <pool_func_mp_array_integer_INT8+0x14e>
 800c066:	eddf 0a17 	vldr	s1, [pc, #92]	; 800c0c4 <pool_func_mp_array_integer_INT8+0x158>
 800c06a:	f8db 4004 	ldr.w	r4, [fp, #4]
 800c06e:	f994 4000 	ldrsb.w	r4, [r4]
 800c072:	2e00      	cmp	r6, #0
 800c074:	d0f0      	beq.n	800c058 <pool_func_mp_array_integer_INT8+0xec>
 800c076:	6875      	ldr	r5, [r6, #4]
 800c078:	e7e8      	b.n	800c04c <pool_func_mp_array_integer_INT8+0xe0>
 800c07a:	2c00      	cmp	r4, #0
 800c07c:	d1e0      	bne.n	800c040 <pool_func_mp_array_integer_INT8+0xd4>
 800c07e:	2400      	movs	r4, #0
 800c080:	4625      	mov	r5, r4
 800c082:	eddf 0a10 	vldr	s1, [pc, #64]	; 800c0c4 <pool_func_mp_array_integer_INT8+0x158>
 800c086:	e7ae      	b.n	800bfe6 <pool_func_mp_array_integer_INT8+0x7a>
 800c088:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c0c4 <pool_func_mp_array_integer_INT8+0x158>
 800c08c:	4634      	mov	r4, r6
 800c08e:	4635      	mov	r5, r6
 800c090:	eef0 0a40 	vmov.f32	s1, s0
 800c094:	e7a7      	b.n	800bfe6 <pool_func_mp_array_integer_INT8+0x7a>
 800c096:	f8d4 b004 	ldr.w	fp, [r4, #4]
 800c09a:	f1bb 0f00 	cmp.w	fp, #0
 800c09e:	d1d3      	bne.n	800c048 <pool_func_mp_array_integer_INT8+0xdc>
 800c0a0:	465c      	mov	r4, fp
 800c0a2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c0a4:	e7d6      	b.n	800c054 <pool_func_mp_array_integer_INT8+0xe8>
 800c0a6:	463c      	mov	r4, r7
 800c0a8:	eddf 0a06 	vldr	s1, [pc, #24]	; 800c0c4 <pool_func_mp_array_integer_INT8+0x158>
 800c0ac:	e7ce      	b.n	800c04c <pool_func_mp_array_integer_INT8+0xe0>
 800c0ae:	eddf 0a05 	vldr	s1, [pc, #20]	; 800c0c4 <pool_func_mp_array_integer_INT8+0x158>
 800c0b2:	e7d1      	b.n	800c058 <pool_func_mp_array_integer_INT8+0xec>
 800c0b4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c0c4 <pool_func_mp_array_integer_INT8+0x158>
 800c0b8:	e7e1      	b.n	800c07e <pool_func_mp_array_integer_INT8+0x112>
 800c0ba:	4625      	mov	r5, r4
 800c0bc:	eddf 0a01 	vldr	s1, [pc, #4]	; 800c0c4 <pool_func_mp_array_integer_INT8+0x158>
 800c0c0:	e791      	b.n	800bfe6 <pool_func_mp_array_integer_INT8+0x7a>
 800c0c2:	bf00      	nop
 800c0c4:	00000000 	.word	0x00000000

0800c0c8 <forward_ap_integer_INT8>:
 800c0c8:	6983      	ldr	r3, [r0, #24]
 800c0ca:	881a      	ldrh	r2, [r3, #0]
 800c0cc:	2a00      	cmp	r2, #0
 800c0ce:	d066      	beq.n	800c19e <forward_ap_integer_INT8+0xd6>
 800c0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d4:	6859      	ldr	r1, [r3, #4]
 800c0d6:	684b      	ldr	r3, [r1, #4]
 800c0d8:	b093      	sub	sp, #76	; 0x4c
 800c0da:	4604      	mov	r4, r0
 800c0dc:	b103      	cbz	r3, 800c0e0 <forward_ap_integer_INT8+0x18>
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2a01      	cmp	r2, #1
 800c0e2:	d957      	bls.n	800c194 <forward_ap_integer_INT8+0xcc>
 800c0e4:	690a      	ldr	r2, [r1, #16]
 800c0e6:	2a00      	cmp	r2, #0
 800c0e8:	d057      	beq.n	800c19a <forward_ap_integer_INT8+0xd2>
 800c0ea:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800c0ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c0f0:	699f      	ldr	r7, [r3, #24]
 800c0f2:	681d      	ldr	r5, [r3, #0]
 800c0f4:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 800c0f8:	6816      	ldr	r6, [r2, #0]
 800c0fa:	930d      	str	r3, [sp, #52]	; 0x34
 800c0fc:	8883      	ldrh	r3, [r0, #4]
 800c0fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800c100:	8803      	ldrh	r3, [r0, #0]
 800c102:	68f1      	ldr	r1, [r6, #12]
 800c104:	69b2      	ldr	r2, [r6, #24]
 800c106:	9310      	str	r3, [sp, #64]	; 0x40
 800c108:	8c23      	ldrh	r3, [r4, #32]
 800c10a:	930e      	str	r3, [sp, #56]	; 0x38
 800c10c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800c10e:	f8b1 e008 	ldrh.w	lr, [r1, #8]
 800c112:	f8b1 800c 	ldrh.w	r8, [r1, #12]
 800c116:	f8bc 9004 	ldrh.w	r9, [ip, #4]
 800c11a:	6891      	ldr	r1, [r2, #8]
 800c11c:	6836      	ldr	r6, [r6, #0]
 800c11e:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 800c122:	68b8      	ldr	r0, [r7, #8]
 800c124:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
 800c128:	9311      	str	r3, [sp, #68]	; 0x44
 800c12a:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800c12e:	2d00      	cmp	r5, #0
 800c130:	d03e      	beq.n	800c1b0 <forward_ap_integer_INT8+0xe8>
 800c132:	686f      	ldr	r7, [r5, #4]
 800c134:	46bb      	mov	fp, r7
 800c136:	2f00      	cmp	r7, #0
 800c138:	d033      	beq.n	800c1a2 <forward_ap_integer_INT8+0xda>
 800c13a:	886c      	ldrh	r4, [r5, #2]
 800c13c:	2c00      	cmp	r4, #0
 800c13e:	d051      	beq.n	800c1e4 <forward_ap_integer_INT8+0x11c>
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	ed93 0a00 	vldr	s0, [r3]
 800c146:	2e00      	cmp	r6, #0
 800c148:	d04f      	beq.n	800c1ea <forward_ap_integer_INT8+0x122>
 800c14a:	6874      	ldr	r4, [r6, #4]
 800c14c:	2c00      	cmp	r4, #0
 800c14e:	d057      	beq.n	800c200 <forward_ap_integer_INT8+0x138>
 800c150:	8877      	ldrh	r7, [r6, #2]
 800c152:	2f00      	cmp	r7, #0
 800c154:	d036      	beq.n	800c1c4 <forward_ap_integer_INT8+0xfc>
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	edd3 0a00 	vldr	s1, [r3]
 800c15c:	2d00      	cmp	r5, #0
 800c15e:	d15d      	bne.n	800c21c <forward_ap_integer_INT8+0x154>
 800c160:	6864      	ldr	r4, [r4, #4]
 800c162:	f994 4000 	ldrsb.w	r4, [r4]
 800c166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c168:	9305      	str	r3, [sp, #20]
 800c16a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c16c:	9304      	str	r3, [sp, #16]
 800c16e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c170:	9303      	str	r3, [sp, #12]
 800c172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c174:	f8cd c018 	str.w	ip, [sp, #24]
 800c178:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c17c:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
 800c180:	e9cd e807 	strd	lr, r8, [sp, #28]
 800c184:	f8cd 9000 	str.w	r9, [sp]
 800c188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c18a:	f004 fa81 	bl	8010690 <st_int8_avepool>
 800c18e:	b013      	add	sp, #76	; 0x4c
 800c190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c194:	2300      	movs	r3, #0
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	deff      	udf	#255	; 0xff
 800c19a:	68d3      	ldr	r3, [r2, #12]
 800c19c:	deff      	udf	#255	; 0xff
 800c19e:	6853      	ldr	r3, [r2, #4]
 800c1a0:	deff      	udf	#255	; 0xff
 800c1a2:	2e00      	cmp	r6, #0
 800c1a4:	d033      	beq.n	800c20e <forward_ap_integer_INT8+0x146>
 800c1a6:	6874      	ldr	r4, [r6, #4]
 800c1a8:	b93c      	cbnz	r4, 800c1ba <forward_ap_integer_INT8+0xf2>
 800c1aa:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800c240 <forward_ap_integer_INT8+0x178>
 800c1ae:	e00c      	b.n	800c1ca <forward_ap_integer_INT8+0x102>
 800c1b0:	2e00      	cmp	r6, #0
 800c1b2:	d02c      	beq.n	800c20e <forward_ap_integer_INT8+0x146>
 800c1b4:	6874      	ldr	r4, [r6, #4]
 800c1b6:	2c00      	cmp	r4, #0
 800c1b8:	d03b      	beq.n	800c232 <forward_ap_integer_INT8+0x16a>
 800c1ba:	8877      	ldrh	r7, [r6, #2]
 800c1bc:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800c240 <forward_ap_integer_INT8+0x178>
 800c1c0:	2f00      	cmp	r7, #0
 800c1c2:	d1c8      	bne.n	800c156 <forward_ap_integer_INT8+0x8e>
 800c1c4:	2d00      	cmp	r5, #0
 800c1c6:	d037      	beq.n	800c238 <forward_ap_integer_INT8+0x170>
 800c1c8:	686f      	ldr	r7, [r5, #4]
 800c1ca:	46bb      	mov	fp, r7
 800c1cc:	b36f      	cbz	r7, 800c22a <forward_ap_integer_INT8+0x162>
 800c1ce:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800c240 <forward_ap_integer_INT8+0x178>
 800c1d2:	886d      	ldrh	r5, [r5, #2]
 800c1d4:	b965      	cbnz	r5, 800c1f0 <forward_ap_integer_INT8+0x128>
 800c1d6:	2c00      	cmp	r4, #0
 800c1d8:	d0c5      	beq.n	800c166 <forward_ap_integer_INT8+0x9e>
 800c1da:	8877      	ldrh	r7, [r6, #2]
 800c1dc:	2f00      	cmp	r7, #0
 800c1de:	d1bf      	bne.n	800c160 <forward_ap_integer_INT8+0x98>
 800c1e0:	2400      	movs	r4, #0
 800c1e2:	e7c0      	b.n	800c166 <forward_ap_integer_INT8+0x9e>
 800c1e4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800c240 <forward_ap_integer_INT8+0x178>
 800c1e8:	e7ad      	b.n	800c146 <forward_ap_integer_INT8+0x7e>
 800c1ea:	b15c      	cbz	r4, 800c204 <forward_ap_integer_INT8+0x13c>
 800c1ec:	eddf 0a14 	vldr	s1, [pc, #80]	; 800c240 <forward_ap_integer_INT8+0x178>
 800c1f0:	f8db 4004 	ldr.w	r4, [fp, #4]
 800c1f4:	f994 5000 	ldrsb.w	r5, [r4]
 800c1f8:	2e00      	cmp	r6, #0
 800c1fa:	d0f1      	beq.n	800c1e0 <forward_ap_integer_INT8+0x118>
 800c1fc:	6874      	ldr	r4, [r6, #4]
 800c1fe:	e7ea      	b.n	800c1d6 <forward_ap_integer_INT8+0x10e>
 800c200:	2d00      	cmp	r5, #0
 800c202:	d1e2      	bne.n	800c1ca <forward_ap_integer_INT8+0x102>
 800c204:	2500      	movs	r5, #0
 800c206:	462c      	mov	r4, r5
 800c208:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800c240 <forward_ap_integer_INT8+0x178>
 800c20c:	e7ab      	b.n	800c166 <forward_ap_integer_INT8+0x9e>
 800c20e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c240 <forward_ap_integer_INT8+0x178>
 800c212:	4635      	mov	r5, r6
 800c214:	4634      	mov	r4, r6
 800c216:	eef0 0a40 	vmov.f32	s1, s0
 800c21a:	e7a4      	b.n	800c166 <forward_ap_integer_INT8+0x9e>
 800c21c:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800c220:	f1bb 0f00 	cmp.w	fp, #0
 800c224:	d1d5      	bne.n	800c1d2 <forward_ap_integer_INT8+0x10a>
 800c226:	465d      	mov	r5, fp
 800c228:	e7d8      	b.n	800c1dc <forward_ap_integer_INT8+0x114>
 800c22a:	463d      	mov	r5, r7
 800c22c:	eddf 0a04 	vldr	s1, [pc, #16]	; 800c240 <forward_ap_integer_INT8+0x178>
 800c230:	e7d1      	b.n	800c1d6 <forward_ap_integer_INT8+0x10e>
 800c232:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c240 <forward_ap_integer_INT8+0x178>
 800c236:	e7e5      	b.n	800c204 <forward_ap_integer_INT8+0x13c>
 800c238:	eddf 0a01 	vldr	s1, [pc, #4]	; 800c240 <forward_ap_integer_INT8+0x178>
 800c23c:	e7d0      	b.n	800c1e0 <forward_ap_integer_INT8+0x118>
 800c23e:	bf00      	nop
 800c240:	00000000 	.word	0x00000000

0800c244 <align_factor>:
 800c244:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c248:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c24c:	b508      	push	{r3, lr}
 800c24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c252:	f04f 0300 	mov.w	r3, #0
 800c256:	8003      	strh	r3, [r0, #0]
 800c258:	d435      	bmi.n	800c2c6 <align_factor+0x82>
 800c25a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c25e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c266:	dd18      	ble.n	800c29a <align_factor+0x56>
 800c268:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c26c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c270:	8003      	strh	r3, [r0, #0]
 800c272:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c276:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800c27a:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800c27e:	e005      	b.n	800c28c <align_factor+0x48>
 800c280:	8003      	strh	r3, [r0, #0]
 800c282:	b293      	uxth	r3, r2
 800c284:	428b      	cmp	r3, r1
 800c286:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c28a:	d016      	beq.n	800c2ba <align_factor+0x76>
 800c28c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c294:	f103 32ff 	add.w	r2, r3, #4294967295
 800c298:	dcf2      	bgt.n	800c280 <align_factor+0x3c>
 800c29a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800c310 <align_factor+0xcc>
 800c29e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c2a2:	ee17 0a90 	vmov	r0, s15
 800c2a6:	f7f4 fc7f 	bl	8000ba8 <__aeabi_f2lz>
 800c2aa:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800c2ae:	bf1c      	itt	ne
 800c2b0:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
 800c2b4:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 800c2b8:	bd08      	pop	{r3, pc}
 800c2ba:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 800c2be:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2c2:	8003      	strh	r3, [r0, #0]
 800c2c4:	e7e9      	b.n	800c29a <align_factor+0x56>
 800c2c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ce:	ddc4      	ble.n	800c25a <align_factor+0x16>
 800c2d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c2d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2dc:	d5dd      	bpl.n	800c29a <align_factor+0x56>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	8003      	strh	r3, [r0, #0]
 800c2e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2e6:	2302      	movs	r3, #2
 800c2e8:	e005      	b.n	800c2f6 <align_factor+0xb2>
 800c2ea:	8003      	strh	r3, [r0, #0]
 800c2ec:	b293      	uxth	r3, r2
 800c2ee:	2b21      	cmp	r3, #33	; 0x21
 800c2f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2f4:	d007      	beq.n	800c306 <align_factor+0xc2>
 800c2f6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2fe:	f103 0201 	add.w	r2, r3, #1
 800c302:	d4f2      	bmi.n	800c2ea <align_factor+0xa6>
 800c304:	e7c9      	b.n	800c29a <align_factor+0x56>
 800c306:	2300      	movs	r3, #0
 800c308:	8003      	strh	r3, [r0, #0]
 800c30a:	4618      	mov	r0, r3
 800c30c:	bd08      	pop	{r3, pc}
 800c30e:	bf00      	nop
 800c310:	4f000000 	.word	0x4f000000

0800c314 <align_factor_ch>:
 800c314:	2900      	cmp	r1, #0
 800c316:	d06d      	beq.n	800c3f4 <align_factor_ch+0xe0>
 800c318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c31c:	ed2d 8b04 	vpush	{d8-d9}
 800c320:	ee80 9a20 	vdiv.f32	s18, s0, s1
 800c324:	461c      	mov	r4, r3
 800c326:	eb03 0541 	add.w	r5, r3, r1, lsl #1
 800c32a:	4681      	mov	r9, r0
 800c32c:	4690      	mov	r8, r2
 800c32e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800c332:	2700      	movs	r7, #0
 800c334:	eddf 9a30 	vldr	s19, [pc, #192]	; 800c3f8 <align_factor_ch+0xe4>
 800c338:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c33c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800c340:	ecf9 7a01 	vldmia	r9!, {s15}
 800c344:	ee69 7a27 	vmul.f32	s15, s18, s15
 800c348:	eef4 7ae8 	vcmpe.f32	s15, s17
 800c34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c350:	d52e      	bpl.n	800c3b0 <align_factor_ch+0x9c>
 800c352:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c35a:	dd29      	ble.n	800c3b0 <align_factor_ch+0x9c>
 800c35c:	eef4 7ac8 	vcmpe.f32	s15, s16
 800c360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c364:	d544      	bpl.n	800c3f0 <align_factor_ch+0xdc>
 800c366:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c36a:	2301      	movs	r3, #1
 800c36c:	e004      	b.n	800c378 <align_factor_ch+0x64>
 800c36e:	2a20      	cmp	r2, #32
 800c370:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c374:	b213      	sxth	r3, r2
 800c376:	d038      	beq.n	800c3ea <align_factor_ch+0xd6>
 800c378:	eef4 7ac8 	vcmpe.f32	s15, s16
 800c37c:	1c5a      	adds	r2, r3, #1
 800c37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c382:	b292      	uxth	r2, r2
 800c384:	d4f3      	bmi.n	800c36e <align_factor_ch+0x5a>
 800c386:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c38a:	8023      	strh	r3, [r4, #0]
 800c38c:	ee17 0a90 	vmov	r0, s15
 800c390:	f7f4 fc0a 	bl	8000ba8 <__aeabi_f2lz>
 800c394:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800c398:	bf18      	it	ne
 800c39a:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 800c39e:	3402      	adds	r4, #2
 800c3a0:	42a5      	cmp	r5, r4
 800c3a2:	f848 0b04 	str.w	r0, [r8], #4
 800c3a6:	d1cb      	bne.n	800c340 <align_factor_ch+0x2c>
 800c3a8:	ecbd 8b04 	vpop	{d8-d9}
 800c3ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3b0:	eef4 7ae8 	vcmpe.f32	s15, s17
 800c3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3b8:	dd1a      	ble.n	800c3f0 <align_factor_ch+0xdc>
 800c3ba:	ee67 7a88 	vmul.f32	s15, s15, s16
 800c3be:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c2:	e005      	b.n	800c3d0 <align_factor_ch+0xbc>
 800c3c4:	b213      	sxth	r3, r2
 800c3c6:	f113 0f1f 	cmn.w	r3, #31
 800c3ca:	ee67 7a88 	vmul.f32	s15, s15, s16
 800c3ce:	d007      	beq.n	800c3e0 <align_factor_ch+0xcc>
 800c3d0:	eef4 7ae8 	vcmpe.f32	s15, s17
 800c3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d8:	f103 32ff 	add.w	r2, r3, #4294967295
 800c3dc:	dcf2      	bgt.n	800c3c4 <align_factor_ch+0xb0>
 800c3de:	e7d2      	b.n	800c386 <align_factor_ch+0x72>
 800c3e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c3e4:	f06f 031d 	mvn.w	r3, #29
 800c3e8:	e7cd      	b.n	800c386 <align_factor_ch+0x72>
 800c3ea:	8027      	strh	r7, [r4, #0]
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	e7d6      	b.n	800c39e <align_factor_ch+0x8a>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	e7c8      	b.n	800c386 <align_factor_ch+0x72>
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	4f000000 	.word	0x4f000000

0800c3fc <st_sssa8_ch_conv_dw_Wadapt>:
 800c3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c400:	b08b      	sub	sp, #44	; 0x2c
 800c402:	468e      	mov	lr, r1
 800c404:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c406:	9007      	str	r0, [sp, #28]
 800c408:	eb0e 048e 	add.w	r4, lr, lr, lsl #2
 800c40c:	ea5f 0b9e 	movs.w	fp, lr, lsr #2
 800c410:	4615      	mov	r5, r2
 800c412:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c416:	eb01 0244 	add.w	r2, r1, r4, lsl #1
 800c41a:	d07f      	beq.n	800c51c <st_sssa8_ch_conv_dw_Wadapt+0x120>
 800c41c:	4619      	mov	r1, r3
 800c41e:	fb03 f305 	mul.w	r3, r3, r5
 800c422:	f3c3 064f 	ubfx	r6, r3, #1, #16
 800c426:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c42a:	4607      	mov	r7, r0
 800c42c:	1e74      	subs	r4, r6, #1
 800c42e:	b29b      	uxth	r3, r3
 800c430:	3004      	adds	r0, #4
 800c432:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c436:	b2a4      	uxth	r4, r4
 800c438:	ea4f 094e 	mov.w	r9, lr, lsl #1
 800c43c:	fb15 f101 	smulbb	r1, r5, r1
 800c440:	fb04 9409 	mla	r4, r4, r9, r9
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800c56c <st_sssa8_ch_conv_dw_Wadapt+0x170>
 800c44a:	f8cd b018 	str.w	fp, [sp, #24]
 800c44e:	f001 0301 	and.w	r3, r1, #1
 800c452:	9403      	str	r4, [sp, #12]
 800c454:	9302      	str	r3, [sp, #8]
 800c456:	46ba      	mov	sl, r7
 800c458:	46b3      	mov	fp, r6
 800c45a:	9209      	str	r2, [sp, #36]	; 0x24
 800c45c:	4650      	mov	r0, sl
 800c45e:	f1bb 0f00 	cmp.w	fp, #0
 800c462:	d02f      	beq.n	800c4c4 <st_sssa8_ch_conv_dw_Wadapt+0xc8>
 800c464:	4659      	mov	r1, fp
 800c466:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c468:	6804      	ldr	r4, [r0, #0]
 800c46a:	f850 300e 	ldr.w	r3, [r0, lr]
 800c46e:	1d3a      	adds	r2, r7, #4
 800c470:	9209      	str	r2, [sp, #36]	; 0x24
 800c472:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c474:	1d32      	adds	r2, r6, #4
 800c476:	9209      	str	r2, [sp, #36]	; 0x24
 800c478:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c47a:	1d2a      	adds	r2, r5, #4
 800c47c:	9209      	str	r2, [sp, #36]	; 0x24
 800c47e:	b2a2      	uxth	r2, r4
 800c480:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c484:	ea03 0308 	and.w	r3, r3, r8
 800c488:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800c48c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c48e:	fa2f fc82 	sxtb16	ip, r2
 800c492:	3901      	subs	r1, #1
 800c494:	f8c7 c000 	str.w	ip, [r7]
 800c498:	ea4f 2232 	mov.w	r2, r2, ror #8
 800c49c:	b289      	uxth	r1, r1
 800c49e:	fa2f f282 	sxtb16	r2, r2
 800c4a2:	6032      	str	r2, [r6, #0]
 800c4a4:	1d22      	adds	r2, r4, #4
 800c4a6:	fa2f f683 	sxtb16	r6, r3
 800c4aa:	4448      	add	r0, r9
 800c4ac:	ea4f 2333 	mov.w	r3, r3, ror #8
 800c4b0:	602e      	str	r6, [r5, #0]
 800c4b2:	fa2f f383 	sxtb16	r3, r3
 800c4b6:	9209      	str	r2, [sp, #36]	; 0x24
 800c4b8:	6023      	str	r3, [r4, #0]
 800c4ba:	2900      	cmp	r1, #0
 800c4bc:	d1d3      	bne.n	800c466 <st_sssa8_ch_conv_dw_Wadapt+0x6a>
 800c4be:	9b03      	ldr	r3, [sp, #12]
 800c4c0:	eb03 000a 	add.w	r0, r3, sl
 800c4c4:	9b02      	ldr	r3, [sp, #8]
 800c4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4c8:	b1eb      	cbz	r3, 800c506 <st_sssa8_ch_conv_dw_Wadapt+0x10a>
 800c4ca:	6801      	ldr	r1, [r0, #0]
 800c4cc:	ea01 0308 	and.w	r3, r1, r8
 800c4d0:	ea08 2401 	and.w	r4, r8, r1, lsl #8
 800c4d4:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800c4d8:	2000      	movs	r0, #0
 800c4da:	b289      	uxth	r1, r1
 800c4dc:	4321      	orrs	r1, r4
 800c4de:	4604      	mov	r4, r0
 800c4e0:	fa2f f181 	sxtb16	r1, r1
 800c4e4:	ea4f 4333 	mov.w	r3, r3, ror #16
 800c4e8:	f361 040f 	bfi	r4, r1, #0, #16
 800c4ec:	fa2f f383 	sxtb16	r3, r3
 800c4f0:	0c09      	lsrs	r1, r1, #16
 800c4f2:	f363 000f 	bfi	r0, r3, #0, #16
 800c4f6:	0c1b      	lsrs	r3, r3, #16
 800c4f8:	f363 401f 	bfi	r0, r3, #16, #16
 800c4fc:	f361 441f 	bfi	r4, r1, #16, #16
 800c500:	6050      	str	r0, [r2, #4]
 800c502:	6014      	str	r4, [r2, #0]
 800c504:	3208      	adds	r2, #8
 800c506:	9b01      	ldr	r3, [sp, #4]
 800c508:	f10a 0a04 	add.w	sl, sl, #4
 800c50c:	4553      	cmp	r3, sl
 800c50e:	d1a4      	bne.n	800c45a <st_sssa8_ch_conv_dw_Wadapt+0x5e>
 800c510:	f8dd b018 	ldr.w	fp, [sp, #24]
 800c514:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800c518:	fa1f fb8b 	uxth.w	fp, fp
 800c51c:	f01e 0603 	ands.w	r6, lr, #3
 800c520:	d021      	beq.n	800c566 <st_sssa8_ch_conv_dw_Wadapt+0x16a>
 800c522:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800c526:	fb13 f301 	smulbb	r3, r3, r1
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	b1db      	cbz	r3, 800c566 <st_sssa8_ch_conv_dw_Wadapt+0x16a>
 800c52e:	3b01      	subs	r3, #1
 800c530:	b29b      	uxth	r3, r3
 800c532:	1c5f      	adds	r7, r3, #1
 800c534:	445e      	add	r6, fp
 800c536:	005b      	lsls	r3, r3, #1
 800c538:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c53c:	b2b6      	uxth	r6, r6
 800c53e:	007f      	lsls	r7, r7, #1
 800c540:	1c9d      	adds	r5, r3, #2
 800c542:	f10b 0301 	add.w	r3, fp, #1
 800c546:	eb0c 010b 	add.w	r1, ip, fp
 800c54a:	1954      	adds	r4, r2, r5
 800c54c:	fa1f fb83 	uxth.w	fp, r3
 800c550:	4613      	mov	r3, r2
 800c552:	f991 0000 	ldrsb.w	r0, [r1]
 800c556:	f823 0b02 	strh.w	r0, [r3], #2
 800c55a:	42a3      	cmp	r3, r4
 800c55c:	4471      	add	r1, lr
 800c55e:	d1f8      	bne.n	800c552 <st_sssa8_ch_conv_dw_Wadapt+0x156>
 800c560:	45b3      	cmp	fp, r6
 800c562:	443a      	add	r2, r7
 800c564:	d1ed      	bne.n	800c542 <st_sssa8_ch_conv_dw_Wadapt+0x146>
 800c566:	b00b      	add	sp, #44	; 0x2c
 800c568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c56c:	ffff0000 	.word	0xffff0000

0800c570 <st_sssa8_ch_convolve_dw>:
 800c570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c574:	b0dd      	sub	sp, #372	; 0x174
 800c576:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
 800c57a:	f8bd 51a4 	ldrh.w	r5, [sp, #420]	; 0x1a4
 800c57e:	9538      	str	r5, [sp, #224]	; 0xe0
 800c580:	f8bd 51a8 	ldrh.w	r5, [sp, #424]	; 0x1a8
 800c584:	9531      	str	r5, [sp, #196]	; 0xc4
 800c586:	f8bd 51ac 	ldrh.w	r5, [sp, #428]	; 0x1ac
 800c58a:	9539      	str	r5, [sp, #228]	; 0xe4
 800c58c:	f8bd 51b0 	ldrh.w	r5, [sp, #432]	; 0x1b0
 800c590:	9521      	str	r5, [sp, #132]	; 0x84
 800c592:	f8bd 51b4 	ldrh.w	r5, [sp, #436]	; 0x1b4
 800c596:	f8bd 419c 	ldrh.w	r4, [sp, #412]	; 0x19c
 800c59a:	9537      	str	r5, [sp, #220]	; 0xdc
 800c59c:	f99d 51c4 	ldrsb.w	r5, [sp, #452]	; 0x1c4
 800c5a0:	f8bd 71a0 	ldrh.w	r7, [sp, #416]	; 0x1a0
 800c5a4:	9e38      	ldr	r6, [sp, #224]	; 0xe0
 800c5a6:	9508      	str	r5, [sp, #32]
 800c5a8:	f8bd 51d0 	ldrh.w	r5, [sp, #464]	; 0x1d0
 800c5ac:	9524      	str	r5, [sp, #144]	; 0x90
 800c5ae:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800c5b2:	f8bd 51d4 	ldrh.w	r5, [sp, #468]	; 0x1d4
 800c5b6:	9403      	str	r4, [sp, #12]
 800c5b8:	fb06 f907 	mul.w	r9, r6, r7
 800c5bc:	953a      	str	r5, [sp, #232]	; 0xe8
 800c5be:	931d      	str	r3, [sp, #116]	; 0x74
 800c5c0:	4625      	mov	r5, r4
 800c5c2:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 800c5c4:	9733      	str	r7, [sp, #204]	; 0xcc
 800c5c6:	4444      	add	r4, r8
 800c5c8:	fb05 4409 	mla	r4, r5, r9, r4
 800c5cc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800c5d0:	006f      	lsls	r7, r5, #1
 800c5d2:	9317      	str	r3, [sp, #92]	; 0x5c
 800c5d4:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 800c5d6:	f99d c1c8 	ldrsb.w	ip, [sp, #456]	; 0x1c8
 800c5da:	9713      	str	r7, [sp, #76]	; 0x4c
 800c5dc:	462e      	mov	r6, r5
 800c5de:	197d      	adds	r5, r7, r5
 800c5e0:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800c5e4:	901f      	str	r0, [sp, #124]	; 0x7c
 800c5e6:	9325      	str	r3, [sp, #148]	; 0x94
 800c5e8:	b1ae      	cbz	r6, 800c616 <st_sssa8_ch_convolve_dw+0xa6>
 800c5ea:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 800c5ec:	1f1c      	subs	r4, r3, #4
 800c5ee:	19ce      	adds	r6, r1, r7
 800c5f0:	2501      	movs	r5, #1
 800c5f2:	4667      	mov	r7, ip
 800c5f4:	f931 3b02 	ldrsh.w	r3, [r1], #2
 800c5f8:	1e5a      	subs	r2, r3, #1
 800c5fa:	b292      	uxth	r2, r2
 800c5fc:	fa05 f003 	lsl.w	r0, r5, r3
 800c600:	2a14      	cmp	r2, #20
 800c602:	fa07 f303 	lsl.w	r3, r7, r3
 800c606:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 800c60a:	f200 850a 	bhi.w	800d022 <st_sssa8_ch_convolve_dw+0xab2>
 800c60e:	428e      	cmp	r6, r1
 800c610:	f844 3f04 	str.w	r3, [r4, #4]!
 800c614:	d1ee      	bne.n	800c5f4 <st_sssa8_ch_convolve_dw+0x84>
 800c616:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c618:	943e      	str	r4, [sp, #248]	; 0xf8
 800c61a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c61c:	943d      	str	r4, [sp, #244]	; 0xf4
 800c61e:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800c620:	9442      	str	r4, [sp, #264]	; 0x108
 800c622:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800c624:	9441      	str	r4, [sp, #260]	; 0x104
 800c626:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800c628:	9446      	str	r4, [sp, #280]	; 0x118
 800c62a:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 800c62c:	9445      	str	r4, [sp, #276]	; 0x114
 800c62e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800c630:	9454      	str	r4, [sp, #336]	; 0x150
 800c632:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 800c634:	9455      	str	r4, [sp, #340]	; 0x154
 800c636:	ab44      	add	r3, sp, #272	; 0x110
 800c638:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 800c63a:	9300      	str	r3, [sp, #0]
 800c63c:	aa3c      	add	r2, sp, #240	; 0xf0
 800c63e:	ab40      	add	r3, sp, #256	; 0x100
 800c640:	9456      	str	r4, [sp, #344]	; 0x158
 800c642:	a848      	add	r0, sp, #288	; 0x120
 800c644:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 800c646:	9457      	str	r4, [sp, #348]	; 0x15c
 800c648:	a952      	add	r1, sp, #328	; 0x148
 800c64a:	f001 fe89 	bl	800e360 <ai_padding_opt_init>
 800c64e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c650:	9b03      	ldr	r3, [sp, #12]
 800c652:	fbb3 f3f2 	udiv	r3, r3, r2
 800c656:	079a      	lsls	r2, r3, #30
 800c658:	9319      	str	r3, [sp, #100]	; 0x64
 800c65a:	bf02      	ittt	eq
 800c65c:	109c      	asreq	r4, r3, #2
 800c65e:	2304      	moveq	r3, #4
 800c660:	9319      	streq	r3, [sp, #100]	; 0x64
 800c662:	9b08      	ldr	r3, [sp, #32]
 800c664:	f1c3 0300 	rsb	r3, r3, #0
 800c668:	b29a      	uxth	r2, r3
 800c66a:	ea42 4a03 	orr.w	sl, r2, r3, lsl #16
 800c66e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800c670:	bf18      	it	ne
 800c672:	2401      	movne	r4, #1
 800c674:	2b00      	cmp	r3, #0
 800c676:	f000 824d 	beq.w	800cb14 <st_sssa8_ch_convolve_dw+0x5a4>
 800c67a:	9803      	ldr	r0, [sp, #12]
 800c67c:	9938      	ldr	r1, [sp, #224]	; 0xe0
 800c67e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800c680:	9f6e      	ldr	r7, [sp, #440]	; 0x1b8
 800c682:	0882      	lsrs	r2, r0, #2
 800c684:	f3c9 064f 	ubfx	r6, r9, #1, #16
 800c688:	fb13 f301 	smulbb	r3, r3, r1
 800c68c:	960f      	str	r6, [sp, #60]	; 0x3c
 800c68e:	9223      	str	r2, [sp, #140]	; 0x8c
 800c690:	1e55      	subs	r5, r2, #1
 800c692:	1e72      	subs	r2, r6, #1
 800c694:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800c696:	b29b      	uxth	r3, r3
 800c698:	4446      	add	r6, r8
 800c69a:	1e59      	subs	r1, r3, #1
 800c69c:	eba0 0808 	sub.w	r8, r0, r8
 800c6a0:	f107 0020 	add.w	r0, r7, #32
 800c6a4:	9f39      	ldr	r7, [sp, #228]	; 0xe4
 800c6a6:	9627      	str	r6, [sp, #156]	; 0x9c
 800c6a8:	b289      	uxth	r1, r1
 800c6aa:	f101 0e01 	add.w	lr, r1, #1
 800c6ae:	f1c7 0c00 	rsb	ip, r7, #0
 800c6b2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800c6b4:	931a      	str	r3, [sp, #104]	; 0x68
 800c6b6:	2700      	movs	r7, #0
 800c6b8:	9736      	str	r7, [sp, #216]	; 0xd8
 800c6ba:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c6bc:	eb01 0148 	add.w	r1, r1, r8, lsl #1
 800c6c0:	9128      	str	r1, [sp, #160]	; 0xa0
 800c6c2:	4639      	mov	r1, r7
 800c6c4:	b2ad      	uxth	r5, r5
 800c6c6:	fb01 f104 	mul.w	r1, r1, r4
 800c6ca:	9135      	str	r1, [sp, #212]	; 0xd4
 800c6cc:	eb00 1105 	add.w	r1, r0, r5, lsl #4
 800c6d0:	1c6b      	adds	r3, r5, #1
 800c6d2:	9111      	str	r1, [sp, #68]	; 0x44
 800c6d4:	9976      	ldr	r1, [sp, #472]	; 0x1d8
 800c6d6:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800c6d8:	b296      	uxth	r6, r2
 800c6da:	011a      	lsls	r2, r3, #4
 800c6dc:	4411      	add	r1, r2
 800c6de:	912f      	str	r1, [sp, #188]	; 0xbc
 800c6e0:	18a9      	adds	r1, r5, r2
 800c6e2:	912c      	str	r1, [sp, #176]	; 0xb0
 800c6e4:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 800c6e6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800c6e8:	4411      	add	r1, r2
 800c6ea:	912b      	str	r1, [sp, #172]	; 0xac
 800c6ec:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800c6f0:	911c      	str	r1, [sp, #112]	; 0x70
 800c6f2:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 800c6f6:	912e      	str	r1, [sp, #184]	; 0xb8
 800c6f8:	0099      	lsls	r1, r3, #2
 800c6fa:	f106 0801 	add.w	r8, r6, #1
 800c6fe:	912a      	str	r1, [sp, #168]	; 0xa8
 800c700:	0131      	lsls	r1, r6, #4
 800c702:	9129      	str	r1, [sp, #164]	; 0xa4
 800c704:	ea4f 1108 	mov.w	r1, r8, lsl #4
 800c708:	9115      	str	r1, [sp, #84]	; 0x54
 800c70a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c70c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c70e:	fb08 f101 	mul.w	r1, r8, r1
 800c712:	9114      	str	r1, [sp, #80]	; 0x50
 800c714:	f003 0101 	and.w	r1, r3, #1
 800c718:	9110      	str	r1, [sp, #64]	; 0x40
 800c71a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c71c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800c71e:	f8cd a0c0 	str.w	sl, [sp, #192]	; 0xc0
 800c722:	0092      	lsls	r2, r2, #2
 800c724:	922d      	str	r2, [sp, #180]	; 0xb4
 800c726:	fa1f f28c 	uxth.w	r2, ip
 800c72a:	9234      	str	r2, [sp, #208]	; 0xd0
 800c72c:	fb07 f203 	mul.w	r2, r7, r3
 800c730:	9b03      	ldr	r3, [sp, #12]
 800c732:	923b      	str	r2, [sp, #236]	; 0xec
 800c734:	f003 0203 	and.w	r2, r3, #3
 800c738:	2400      	movs	r4, #0
 800c73a:	9220      	str	r2, [sp, #128]	; 0x80
 800c73c:	4698      	mov	r8, r3
 800c73e:	a848      	add	r0, sp, #288	; 0x120
 800c740:	f001 fe68 	bl	800e414 <ai_padding_opt_phase1>
 800c744:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c746:	2b00      	cmp	r3, #0
 800c748:	f000 81d6 	beq.w	800caf8 <st_sssa8_ch_convolve_dw+0x588>
 800c74c:	e9dd 3238 	ldrd	r3, r2, [sp, #224]	; 0xe0
 800c750:	1a9a      	subs	r2, r3, r2
 800c752:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800c754:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800c756:	425b      	negs	r3, r3
 800c758:	b29b      	uxth	r3, r3
 800c75a:	931b      	str	r3, [sp, #108]	; 0x6c
 800c75c:	f9bd 30d0 	ldrsh.w	r3, [sp, #208]	; 0xd0
 800c760:	9326      	str	r3, [sp, #152]	; 0x98
 800c762:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c764:	2100      	movs	r1, #0
 800c766:	fb04 2200 	mla	r2, r4, r0, r2
 800c76a:	3b01      	subs	r3, #1
 800c76c:	9216      	str	r2, [sp, #88]	; 0x58
 800c76e:	911e      	str	r1, [sp, #120]	; 0x78
 800c770:	460a      	mov	r2, r1
 800c772:	9332      	str	r3, [sp, #200]	; 0xc8
 800c774:	9b48      	ldr	r3, [sp, #288]	; 0x120
 800c776:	2b00      	cmp	r3, #0
 800c778:	f000 8307 	beq.w	800cd8a <st_sssa8_ch_convolve_dw+0x81a>
 800c77c:	3b01      	subs	r3, #1
 800c77e:	9348      	str	r3, [sp, #288]	; 0x120
 800c780:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c782:	2101      	movs	r1, #1
 800c784:	2b01      	cmp	r3, #1
 800c786:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 800c78a:	f000 834b 	beq.w	800ce24 <st_sssa8_ch_convolve_dw+0x8b4>
 800c78e:	2b04      	cmp	r3, #4
 800c790:	f000 83d1 	beq.w	800cf36 <st_sssa8_ch_convolve_dw+0x9c6>
 800c794:	2b02      	cmp	r3, #2
 800c796:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c798:	4618      	mov	r0, r3
 800c79a:	f000 837d 	beq.w	800ce98 <st_sssa8_ch_convolve_dw+0x928>
 800c79e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c7a0:	4298      	cmp	r0, r3
 800c7a2:	dd41      	ble.n	800c828 <st_sssa8_ch_convolve_dw+0x2b8>
 800c7a4:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c7a6:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800c7a8:	fb02 0201 	mla	r2, r2, r1, r0
 800c7ac:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800c7ae:	1a52      	subs	r2, r2, r1
 800c7b0:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 800c7b4:	9205      	str	r2, [sp, #20]
 800c7b6:	4291      	cmp	r1, r2
 800c7b8:	910a      	str	r1, [sp, #40]	; 0x28
 800c7ba:	da35      	bge.n	800c828 <st_sssa8_ch_convolve_dw+0x2b8>
 800c7bc:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c7c0:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800c7c4:	4647      	mov	r7, r8
 800c7c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7c8:	9a04      	ldr	r2, [sp, #16]
 800c7ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c7cc:	fb03 f302 	mul.w	r3, r3, r2
 800c7d0:	9307      	str	r3, [sp, #28]
 800c7d2:	f1c9 0800 	rsb	r8, r9, #0
 800c7d6:	4682      	mov	sl, r0
 800c7d8:	9b03      	ldr	r3, [sp, #12]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	db0a      	blt.n	800c7f4 <st_sssa8_ch_convolve_dw+0x284>
 800c7de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7e0:	9a04      	ldr	r2, [sp, #16]
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	dd06      	ble.n	800c7f4 <st_sssa8_ch_convolve_dw+0x284>
 800c7e6:	f1ba 0f00 	cmp.w	sl, #0
 800c7ea:	db03      	blt.n	800c7f4 <st_sssa8_ch_convolve_dw+0x284>
 800c7ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7ee:	4283      	cmp	r3, r0
 800c7f0:	f300 822c 	bgt.w	800cc4c <st_sssa8_ch_convolve_dw+0x6dc>
 800c7f4:	463a      	mov	r2, r7
 800c7f6:	4649      	mov	r1, r9
 800c7f8:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800c7fc:	f001 fe26 	bl	800e44c <st_uint8_fill>
 800c800:	f10a 0a01 	add.w	sl, sl, #1
 800c804:	9b05      	ldr	r3, [sp, #20]
 800c806:	fa0f fa8a 	sxth.w	sl, sl
 800c80a:	459a      	cmp	sl, r3
 800c80c:	44b9      	add	r9, r7
 800c80e:	eba8 0807 	sub.w	r8, r8, r7
 800c812:	4650      	mov	r0, sl
 800c814:	dbe0      	blt.n	800c7d8 <st_sssa8_ch_convolve_dw+0x268>
 800c816:	9b03      	ldr	r3, [sp, #12]
 800c818:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c81a:	3301      	adds	r3, #1
 800c81c:	b21b      	sxth	r3, r3
 800c81e:	4293      	cmp	r3, r2
 800c820:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c824:	dbcf      	blt.n	800c7c6 <st_sssa8_ch_convolve_dw+0x256>
 800c826:	46b8      	mov	r8, r7
 800c828:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	f000 82e4 	beq.w	800cdf8 <st_sssa8_ch_convolve_dw+0x888>
 800c830:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800c832:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 800c834:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
 800c838:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c83c:	3310      	adds	r3, #16
 800c83e:	f102 0e10 	add.w	lr, r2, #16
 800c842:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 800c844:	9307      	str	r3, [sp, #28]
 800c846:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c848:	f8dd b0c0 	ldr.w	fp, [sp, #192]	; 0xc0
 800c84c:	3204      	adds	r2, #4
 800c84e:	3308      	adds	r3, #8
 800c850:	9204      	str	r2, [sp, #16]
 800c852:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c854:	9305      	str	r3, [sp, #20]
 800c856:	9206      	str	r2, [sp, #24]
 800c858:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 800c85a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800c85c:	3310      	adds	r3, #16
 800c85e:	3220      	adds	r2, #32
 800c860:	9212      	str	r2, [sp, #72]	; 0x48
 800c862:	4698      	mov	r8, r3
 800c864:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800c868:	9b07      	ldr	r3, [sp, #28]
 800c86a:	9218      	str	r2, [sp, #96]	; 0x60
 800c86c:	4666      	mov	r6, ip
 800c86e:	e953 c504 	ldrd	ip, r5, [r3, #-16]
 800c872:	f853 4c08 	ldr.w	r4, [r3, #-8]
 800c876:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c87a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c87c:	9906      	ldr	r1, [sp, #24]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d043      	beq.n	800c90a <st_sssa8_ch_convolve_dw+0x39a>
 800c882:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c884:	9609      	str	r6, [sp, #36]	; 0x24
 800c886:	18f3      	adds	r3, r6, r3
 800c888:	e9cd e80a 	strd	lr, r8, [sp, #40]	; 0x28
 800c88c:	469e      	mov	lr, r3
 800c88e:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800c892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c894:	9303      	str	r3, [sp, #12]
 800c896:	f106 0210 	add.w	r2, r6, #16
 800c89a:	465f      	mov	r7, fp
 800c89c:	9b03      	ldr	r3, [sp, #12]
 800c89e:	f8d1 a000 	ldr.w	sl, [r1]
 800c8a2:	f851 b003 	ldr.w	fp, [r1, r3]
 800c8a6:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800c8aa:	ea4f 431b 	mov.w	r3, fp, lsr #16
 800c8ae:	fa1f f98a 	uxth.w	r9, sl
 800c8b2:	041b      	lsls	r3, r3, #16
 800c8b4:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 800c8b8:	ea43 431a 	orr.w	r3, r3, sl, lsr #16
 800c8bc:	fa27 fa89 	sxtab16	sl, r7, r9
 800c8c0:	fb26 cc0a 	smlad	ip, r6, sl, ip
 800c8c4:	ea4f 2939 	mov.w	r9, r9, ror #8
 800c8c8:	f852 6c0c 	ldr.w	r6, [r2, #-12]
 800c8cc:	fa27 f989 	sxtab16	r9, r7, r9
 800c8d0:	fb26 5509 	smlad	r5, r6, r9, r5
 800c8d4:	fa27 f983 	sxtab16	r9, r7, r3
 800c8d8:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800c8dc:	fb26 4409 	smlad	r4, r6, r9, r4
 800c8e0:	ea4f 2333 	mov.w	r3, r3, ror #8
 800c8e4:	f852 6c04 	ldr.w	r6, [r2, #-4]
 800c8e8:	fa27 f383 	sxtab16	r3, r7, r3
 800c8ec:	fb26 0003 	smlad	r0, r6, r3, r0
 800c8f0:	3210      	adds	r2, #16
 800c8f2:	4596      	cmp	lr, r2
 800c8f4:	4441      	add	r1, r8
 800c8f6:	d1d1      	bne.n	800c89c <st_sssa8_ch_convolve_dw+0x32c>
 800c8f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c8fc:	9a06      	ldr	r2, [sp, #24]
 800c8fe:	441e      	add	r6, r3
 800c900:	e9dd e80a 	ldrd	lr, r8, [sp, #40]	; 0x28
 800c904:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c906:	46bb      	mov	fp, r7
 800c908:	1899      	adds	r1, r3, r2
 800c90a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c90c:	b1d3      	cbz	r3, 800c944 <st_sssa8_ch_convolve_dw+0x3d4>
 800c90e:	680b      	ldr	r3, [r1, #0]
 800c910:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800c912:	8831      	ldrh	r1, [r6, #0]
 800c914:	f8b6 a002 	ldrh.w	sl, [r6, #2]
 800c918:	f8b6 9004 	ldrh.w	r9, [r6, #4]
 800c91c:	b25a      	sxtb	r2, r3
 800c91e:	1bd2      	subs	r2, r2, r7
 800c920:	fb11 cc02 	smlabb	ip, r1, r2, ip
 800c924:	f343 2207 	sbfx	r2, r3, #8, #8
 800c928:	1bd2      	subs	r2, r2, r7
 800c92a:	88f1      	ldrh	r1, [r6, #6]
 800c92c:	fb1a 5502 	smlabb	r5, sl, r2, r5
 800c930:	f343 4207 	sbfx	r2, r3, #16, #8
 800c934:	1bd2      	subs	r2, r2, r7
 800c936:	ebc7 6323 	rsb	r3, r7, r3, asr #24
 800c93a:	fb19 4402 	smlabb	r4, r9, r2, r4
 800c93e:	fb11 0003 	smlabb	r0, r1, r3, r0
 800c942:	3608      	adds	r6, #8
 800c944:	9b05      	ldr	r3, [sp, #20]
 800c946:	f858 9c10 	ldr.w	r9, [r8, #-16]
 800c94a:	f933 2c08 	ldrsh.w	r2, [r3, #-8]
 800c94e:	f85e 1c10 	ldr.w	r1, [lr, #-16]
 800c952:	2a15      	cmp	r2, #21
 800c954:	f340 8102 	ble.w	800cb5c <st_sssa8_ch_convolve_dw+0x5ec>
 800c958:	1e93      	subs	r3, r2, #2
 800c95a:	2701      	movs	r7, #1
 800c95c:	3a01      	subs	r2, #1
 800c95e:	fa07 f303 	lsl.w	r3, r7, r3
 800c962:	fb5c 3c09 	smmla	ip, ip, r9, r3
 800c966:	fa4c fc02 	asr.w	ip, ip, r2
 800c96a:	448c      	add	ip, r1
 800c96c:	f30c 0c07 	ssat	ip, #8, ip
 800c970:	9b04      	ldr	r3, [sp, #16]
 800c972:	f803 cc04 	strb.w	ip, [r3, #-4]
 800c976:	9b05      	ldr	r3, [sp, #20]
 800c978:	f933 1c06 	ldrsh.w	r1, [r3, #-6]
 800c97c:	2915      	cmp	r1, #21
 800c97e:	f340 8100 	ble.w	800cb82 <st_sssa8_ch_convolve_dw+0x612>
 800c982:	1e8b      	subs	r3, r1, #2
 800c984:	f85e 2c0c 	ldr.w	r2, [lr, #-12]
 800c988:	2701      	movs	r7, #1
 800c98a:	3901      	subs	r1, #1
 800c98c:	fa07 f303 	lsl.w	r3, r7, r3
 800c990:	f858 7c0c 	ldr.w	r7, [r8, #-12]
 800c994:	fb55 3307 	smmla	r3, r5, r7, r3
 800c998:	fa43 f101 	asr.w	r1, r3, r1
 800c99c:	4411      	add	r1, r2
 800c99e:	f301 0107 	ssat	r1, #8, r1
 800c9a2:	9b04      	ldr	r3, [sp, #16]
 800c9a4:	f803 1c03 	strb.w	r1, [r3, #-3]
 800c9a8:	9b05      	ldr	r3, [sp, #20]
 800c9aa:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 800c9ae:	2915      	cmp	r1, #21
 800c9b0:	f340 80c4 	ble.w	800cb3c <st_sssa8_ch_convolve_dw+0x5cc>
 800c9b4:	1e8d      	subs	r5, r1, #2
 800c9b6:	f85e 2c08 	ldr.w	r2, [lr, #-8]
 800c9ba:	f858 3c08 	ldr.w	r3, [r8, #-8]
 800c9be:	2701      	movs	r7, #1
 800c9c0:	3901      	subs	r1, #1
 800c9c2:	fa07 f505 	lsl.w	r5, r7, r5
 800c9c6:	fb54 5503 	smmla	r5, r4, r3, r5
 800c9ca:	fa45 f101 	asr.w	r1, r5, r1
 800c9ce:	4411      	add	r1, r2
 800c9d0:	f301 0107 	ssat	r1, #8, r1
 800c9d4:	9b04      	ldr	r3, [sp, #16]
 800c9d6:	f803 1c02 	strb.w	r1, [r3, #-2]
 800c9da:	9b05      	ldr	r3, [sp, #20]
 800c9dc:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 800c9e0:	2915      	cmp	r1, #21
 800c9e2:	f340 809b 	ble.w	800cb1c <st_sssa8_ch_convolve_dw+0x5ac>
 800c9e6:	1e8c      	subs	r4, r1, #2
 800c9e8:	f85e 2c04 	ldr.w	r2, [lr, #-4]
 800c9ec:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800c9f0:	2501      	movs	r5, #1
 800c9f2:	3901      	subs	r1, #1
 800c9f4:	fa05 f404 	lsl.w	r4, r5, r4
 800c9f8:	fb50 4403 	smmla	r4, r0, r3, r4
 800c9fc:	fa44 f101 	asr.w	r1, r4, r1
 800ca00:	4411      	add	r1, r2
 800ca02:	f301 0107 	ssat	r1, #8, r1
 800ca06:	9b04      	ldr	r3, [sp, #16]
 800ca08:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ca0c:	9a05      	ldr	r2, [sp, #20]
 800ca0e:	9b07      	ldr	r3, [sp, #28]
 800ca10:	3208      	adds	r2, #8
 800ca12:	9205      	str	r2, [sp, #20]
 800ca14:	9a04      	ldr	r2, [sp, #16]
 800ca16:	3204      	adds	r2, #4
 800ca18:	9204      	str	r2, [sp, #16]
 800ca1a:	9a06      	ldr	r2, [sp, #24]
 800ca1c:	3204      	adds	r2, #4
 800ca1e:	9206      	str	r2, [sp, #24]
 800ca20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ca22:	3310      	adds	r3, #16
 800ca24:	429a      	cmp	r2, r3
 800ca26:	9307      	str	r3, [sp, #28]
 800ca28:	f108 0810 	add.w	r8, r8, #16
 800ca2c:	f10e 0e10 	add.w	lr, lr, #16
 800ca30:	f47f af1d 	bne.w	800c86e <st_sssa8_ch_convolve_dw+0x2fe>
 800ca34:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 800ca36:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800ca38:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800ca3c:	4413      	add	r3, r2
 800ca3e:	46b4      	mov	ip, r6
 800ca40:	e9dd ae2b 	ldrd	sl, lr, [sp, #172]	; 0xac
 800ca44:	e9dd 692d 	ldrd	r6, r9, [sp, #180]	; 0xb4
 800ca48:	9373      	str	r3, [sp, #460]	; 0x1cc
 800ca4a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800ca4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ca4e:	2a00      	cmp	r2, #0
 800ca50:	d045      	beq.n	800cade <st_sssa8_ch_convolve_dw+0x56e>
 800ca52:	eb02 0b06 	add.w	fp, r2, r6
 800ca56:	1f1f      	subs	r7, r3, #4
 800ca58:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 800ca5c:	fa1f f38b 	uxth.w	r3, fp
 800ca60:	f8dd b1cc 	ldr.w	fp, [sp, #460]	; 0x1cc
 800ca64:	9303      	str	r3, [sp, #12]
 800ca66:	f1a9 0902 	sub.w	r9, r9, #2
 800ca6a:	f1ae 0e04 	sub.w	lr, lr, #4
 800ca6e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca70:	f85a 1b04 	ldr.w	r1, [sl], #4
 800ca74:	1c73      	adds	r3, r6, #1
 800ca76:	4432      	add	r2, r6
 800ca78:	b29e      	uxth	r6, r3
 800ca7a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ca7c:	b163      	cbz	r3, 800ca98 <st_sssa8_ch_convolve_dw+0x528>
 800ca7e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ca80:	eb0c 0403 	add.w	r4, ip, r3
 800ca84:	f992 3000 	ldrsb.w	r3, [r2]
 800ca88:	f83c 0b02 	ldrh.w	r0, [ip], #2
 800ca8c:	1b5b      	subs	r3, r3, r5
 800ca8e:	45a4      	cmp	ip, r4
 800ca90:	4442      	add	r2, r8
 800ca92:	fb10 1103 	smlabb	r1, r0, r3, r1
 800ca96:	d1f5      	bne.n	800ca84 <st_sssa8_ch_convolve_dw+0x514>
 800ca98:	f939 2f02 	ldrsh.w	r2, [r9, #2]!
 800ca9c:	f857 4f04 	ldr.w	r4, [r7, #4]!
 800caa0:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 800caa4:	2a15      	cmp	r2, #21
 800caa6:	dd7c      	ble.n	800cba2 <st_sssa8_ch_convolve_dw+0x632>
 800caa8:	1e93      	subs	r3, r2, #2
 800caaa:	3a01      	subs	r2, #1
 800caac:	9204      	str	r2, [sp, #16]
 800caae:	2201      	movs	r2, #1
 800cab0:	fa02 f303 	lsl.w	r3, r2, r3
 800cab4:	fb51 3104 	smmla	r1, r1, r4, r3
 800cab8:	9b04      	ldr	r3, [sp, #16]
 800caba:	4119      	asrs	r1, r3
 800cabc:	4401      	add	r1, r0
 800cabe:	f301 0107 	ssat	r1, #8, r1
 800cac2:	f88b 1000 	strb.w	r1, [fp]
 800cac6:	9b03      	ldr	r3, [sp, #12]
 800cac8:	429e      	cmp	r6, r3
 800caca:	f10b 0b01 	add.w	fp, fp, #1
 800cace:	d1ce      	bne.n	800ca6e <st_sssa8_ch_convolve_dw+0x4fe>
 800cad0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cad2:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 800cad4:	3b01      	subs	r3, #1
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	3301      	adds	r3, #1
 800cada:	441a      	add	r2, r3
 800cadc:	9273      	str	r2, [sp, #460]	; 0x1cc
 800cade:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cae0:	9921      	ldr	r1, [sp, #132]	; 0x84
 800cae2:	3301      	adds	r3, #1
 800cae4:	b21a      	sxth	r2, r3
 800cae6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cae8:	921e      	str	r2, [sp, #120]	; 0x78
 800caea:	440b      	add	r3, r1
 800caec:	b29b      	uxth	r3, r3
 800caee:	931b      	str	r3, [sp, #108]	; 0x6c
 800caf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800caf2:	4293      	cmp	r3, r2
 800caf4:	f73f ae3e 	bgt.w	800c774 <st_sssa8_ch_convolve_dw+0x204>
 800caf8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800cafa:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800cafc:	3301      	adds	r3, #1
 800cafe:	b21a      	sxth	r2, r3
 800cb00:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800cb02:	9236      	str	r2, [sp, #216]	; 0xd8
 800cb04:	440b      	add	r3, r1
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	9334      	str	r3, [sp, #208]	; 0xd0
 800cb0a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	4614      	mov	r4, r2
 800cb10:	f73f ae15 	bgt.w	800c73e <st_sssa8_ch_convolve_dw+0x1ce>
 800cb14:	2000      	movs	r0, #0
 800cb16:	b05d      	add	sp, #372	; 0x174
 800cb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb1c:	2900      	cmp	r1, #0
 800cb1e:	dd73      	ble.n	800cc08 <st_sssa8_ch_convolve_dw+0x698>
 800cb20:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800cb24:	f85e 2c04 	ldr.w	r2, [lr, #-4]
 800cb28:	0040      	lsls	r0, r0, #1
 800cb2a:	fb50 2003 	smmla	r0, r0, r3, r2
 800cb2e:	4108      	asrs	r0, r1
 800cb30:	f300 0007 	ssat	r0, #8, r0
 800cb34:	9b04      	ldr	r3, [sp, #16]
 800cb36:	f803 0c01 	strb.w	r0, [r3, #-1]
 800cb3a:	e767      	b.n	800ca0c <st_sssa8_ch_convolve_dw+0x49c>
 800cb3c:	2900      	cmp	r1, #0
 800cb3e:	dd50      	ble.n	800cbe2 <st_sssa8_ch_convolve_dw+0x672>
 800cb40:	f858 3c08 	ldr.w	r3, [r8, #-8]
 800cb44:	f85e 2c08 	ldr.w	r2, [lr, #-8]
 800cb48:	0064      	lsls	r4, r4, #1
 800cb4a:	fb54 2403 	smmla	r4, r4, r3, r2
 800cb4e:	410c      	asrs	r4, r1
 800cb50:	f304 0407 	ssat	r4, #8, r4
 800cb54:	9b04      	ldr	r3, [sp, #16]
 800cb56:	f803 4c02 	strb.w	r4, [r3, #-2]
 800cb5a:	e73e      	b.n	800c9da <st_sssa8_ch_convolve_dw+0x46a>
 800cb5c:	2a00      	cmp	r2, #0
 800cb5e:	dd66      	ble.n	800cc2e <st_sssa8_ch_convolve_dw+0x6be>
 800cb60:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800cb64:	fb5c 1c09 	smmla	ip, ip, r9, r1
 800cb68:	fa4c f202 	asr.w	r2, ip, r2
 800cb6c:	f302 0207 	ssat	r2, #8, r2
 800cb70:	9b04      	ldr	r3, [sp, #16]
 800cb72:	f803 2c04 	strb.w	r2, [r3, #-4]
 800cb76:	9b05      	ldr	r3, [sp, #20]
 800cb78:	f933 1c06 	ldrsh.w	r1, [r3, #-6]
 800cb7c:	2915      	cmp	r1, #21
 800cb7e:	f73f af00 	bgt.w	800c982 <st_sssa8_ch_convolve_dw+0x412>
 800cb82:	2900      	cmp	r1, #0
 800cb84:	dd1a      	ble.n	800cbbc <st_sssa8_ch_convolve_dw+0x64c>
 800cb86:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 800cb8a:	f85e 2c0c 	ldr.w	r2, [lr, #-12]
 800cb8e:	006d      	lsls	r5, r5, #1
 800cb90:	fb55 2503 	smmla	r5, r5, r3, r2
 800cb94:	410d      	asrs	r5, r1
 800cb96:	f305 0507 	ssat	r5, #8, r5
 800cb9a:	9b04      	ldr	r3, [sp, #16]
 800cb9c:	f803 5c03 	strb.w	r5, [r3, #-3]
 800cba0:	e702      	b.n	800c9a8 <st_sssa8_ch_convolve_dw+0x438>
 800cba2:	2a00      	cmp	r2, #0
 800cba4:	f340 80e3 	ble.w	800cd6e <st_sssa8_ch_convolve_dw+0x7fe>
 800cba8:	0049      	lsls	r1, r1, #1
 800cbaa:	fb51 0104 	smmla	r1, r1, r4, r0
 800cbae:	fa41 f202 	asr.w	r2, r1, r2
 800cbb2:	f302 0207 	ssat	r2, #8, r2
 800cbb6:	f88b 2000 	strb.w	r2, [fp]
 800cbba:	e784      	b.n	800cac6 <st_sssa8_ch_convolve_dw+0x556>
 800cbbc:	f1c1 0101 	rsb	r1, r1, #1
 800cbc0:	fa05 f201 	lsl.w	r2, r5, r1
 800cbc4:	f302 021f 	ssat	r2, #32, r2
 800cbc8:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 800cbcc:	fb52 f213 	smmulr	r2, r2, r3
 800cbd0:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 800cbd4:	4413      	add	r3, r2
 800cbd6:	f303 0307 	ssat	r3, #8, r3
 800cbda:	9a04      	ldr	r2, [sp, #16]
 800cbdc:	f802 3c03 	strb.w	r3, [r2, #-3]
 800cbe0:	e6e2      	b.n	800c9a8 <st_sssa8_ch_convolve_dw+0x438>
 800cbe2:	f1c1 0101 	rsb	r1, r1, #1
 800cbe6:	fa04 f201 	lsl.w	r2, r4, r1
 800cbea:	f302 021f 	ssat	r2, #32, r2
 800cbee:	f858 3c08 	ldr.w	r3, [r8, #-8]
 800cbf2:	fb52 f213 	smmulr	r2, r2, r3
 800cbf6:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 800cbfa:	4413      	add	r3, r2
 800cbfc:	f303 0307 	ssat	r3, #8, r3
 800cc00:	9a04      	ldr	r2, [sp, #16]
 800cc02:	f802 3c02 	strb.w	r3, [r2, #-2]
 800cc06:	e6e8      	b.n	800c9da <st_sssa8_ch_convolve_dw+0x46a>
 800cc08:	f1c1 0101 	rsb	r1, r1, #1
 800cc0c:	fa00 f201 	lsl.w	r2, r0, r1
 800cc10:	f302 021f 	ssat	r2, #32, r2
 800cc14:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800cc18:	fb52 f213 	smmulr	r2, r2, r3
 800cc1c:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 800cc20:	4413      	add	r3, r2
 800cc22:	f303 0307 	ssat	r3, #8, r3
 800cc26:	9a04      	ldr	r2, [sp, #16]
 800cc28:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cc2c:	e6ee      	b.n	800ca0c <st_sssa8_ch_convolve_dw+0x49c>
 800cc2e:	f1c2 0201 	rsb	r2, r2, #1
 800cc32:	fa0c f202 	lsl.w	r2, ip, r2
 800cc36:	f302 021f 	ssat	r2, #32, r2
 800cc3a:	fb52 f219 	smmulr	r2, r2, r9
 800cc3e:	440a      	add	r2, r1
 800cc40:	f302 0207 	ssat	r2, #8, r2
 800cc44:	9b04      	ldr	r3, [sp, #16]
 800cc46:	f803 2c04 	strb.w	r2, [r3, #-4]
 800cc4a:	e694      	b.n	800c976 <st_sssa8_ch_convolve_dw+0x406>
 800cc4c:	9b07      	ldr	r3, [sp, #28]
 800cc4e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800cc50:	4418      	add	r0, r3
 800cc52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cc54:	461a      	mov	r2, r3
 800cc56:	fb03 1000 	mla	r0, r3, r0, r1
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f43f add0 	beq.w	800c800 <st_sssa8_ch_convolve_dw+0x290>
 800cc60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f43f adcc 	beq.w	800c800 <st_sssa8_ch_convolve_dw+0x290>
 800cc68:	1e99      	subs	r1, r3, #2
 800cc6a:	9106      	str	r1, [sp, #24]
 800cc6c:	1ed9      	subs	r1, r3, #3
 800cc6e:	1884      	adds	r4, r0, r2
 800cc70:	9109      	str	r1, [sp, #36]	; 0x24
 800cc72:	9722      	str	r7, [sp, #136]	; 0x88
 800cc74:	1f19      	subs	r1, r3, #4
 800cc76:	9f32      	ldr	r7, [sp, #200]	; 0xc8
 800cc78:	910b      	str	r1, [sp, #44]	; 0x2c
 800cc7a:	46c6      	mov	lr, r8
 800cc7c:	464a      	mov	r2, r9
 800cc7e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cc82:	469c      	mov	ip, r3
 800cc84:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 800cc88:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 800cc8c:	46a3      	mov	fp, r4
 800cc8e:	eb02 060c 	add.w	r6, r2, ip
 800cc92:	f100 0801 	add.w	r8, r0, #1
 800cc96:	42b0      	cmp	r0, r6
 800cc98:	bf38      	it	cc
 800cc9a:	4542      	cmpcc	r2, r8
 800cc9c:	d35d      	bcc.n	800cd5a <st_sssa8_ch_convolve_dw+0x7ea>
 800cc9e:	f1bc 0f0b 	cmp.w	ip, #11
 800cca2:	d95a      	bls.n	800cd5a <st_sssa8_ch_convolve_dw+0x7ea>
 800cca4:	f00e 0303 	and.w	r3, lr, #3
 800cca8:	1cd9      	adds	r1, r3, #3
 800ccaa:	42b9      	cmp	r1, r7
 800ccac:	f200 80ad 	bhi.w	800ce0a <st_sssa8_ch_convolve_dw+0x89a>
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d059      	beq.n	800cd68 <st_sssa8_ch_convolve_dw+0x7f8>
 800ccb4:	7801      	ldrb	r1, [r0, #0]
 800ccb6:	7011      	strb	r1, [r2, #0]
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	f102 0a01 	add.w	sl, r2, #1
 800ccbe:	9d06      	ldr	r5, [sp, #24]
 800ccc0:	d00b      	beq.n	800ccda <st_sssa8_ch_convolve_dw+0x76a>
 800ccc2:	7801      	ldrb	r1, [r0, #0]
 800ccc4:	7051      	strb	r1, [r2, #1]
 800ccc6:	2b03      	cmp	r3, #3
 800ccc8:	f102 0a02 	add.w	sl, r2, #2
 800cccc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ccce:	d104      	bne.n	800ccda <st_sssa8_ch_convolve_dw+0x76a>
 800ccd0:	7801      	ldrb	r1, [r0, #0]
 800ccd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ccd4:	7091      	strb	r1, [r2, #2]
 800ccd6:	f102 0a03 	add.w	sl, r2, #3
 800ccda:	7801      	ldrb	r1, [r0, #0]
 800ccdc:	2400      	movs	r4, #0
 800ccde:	f361 0407 	bfi	r4, r1, #0, #8
 800cce2:	f361 240f 	bfi	r4, r1, #8, #8
 800cce6:	ebac 0903 	sub.w	r9, ip, r3
 800ccea:	f361 4417 	bfi	r4, r1, #16, #8
 800ccee:	4413      	add	r3, r2
 800ccf0:	f361 641f 	bfi	r4, r1, #24, #8
 800ccf4:	ea4f 0299 	mov.w	r2, r9, lsr #2
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	3101      	adds	r1, #1
 800ccfc:	4291      	cmp	r1, r2
 800ccfe:	f843 4b04 	str.w	r4, [r3], #4
 800cd02:	d3fa      	bcc.n	800ccfa <st_sssa8_ch_convolve_dw+0x78a>
 800cd04:	f029 0103 	bic.w	r1, r9, #3
 800cd08:	4549      	cmp	r1, r9
 800cd0a:	eb0a 0301 	add.w	r3, sl, r1
 800cd0e:	eba5 0501 	sub.w	r5, r5, r1
 800cd12:	d014      	beq.n	800cd3e <st_sssa8_ch_convolve_dw+0x7ce>
 800cd14:	7802      	ldrb	r2, [r0, #0]
 800cd16:	701a      	strb	r2, [r3, #0]
 800cd18:	b18d      	cbz	r5, 800cd3e <st_sssa8_ch_convolve_dw+0x7ce>
 800cd1a:	7802      	ldrb	r2, [r0, #0]
 800cd1c:	705a      	strb	r2, [r3, #1]
 800cd1e:	2d01      	cmp	r5, #1
 800cd20:	d00d      	beq.n	800cd3e <st_sssa8_ch_convolve_dw+0x7ce>
 800cd22:	7802      	ldrb	r2, [r0, #0]
 800cd24:	709a      	strb	r2, [r3, #2]
 800cd26:	2d02      	cmp	r5, #2
 800cd28:	d009      	beq.n	800cd3e <st_sssa8_ch_convolve_dw+0x7ce>
 800cd2a:	7802      	ldrb	r2, [r0, #0]
 800cd2c:	70da      	strb	r2, [r3, #3]
 800cd2e:	2d03      	cmp	r5, #3
 800cd30:	d005      	beq.n	800cd3e <st_sssa8_ch_convolve_dw+0x7ce>
 800cd32:	7802      	ldrb	r2, [r0, #0]
 800cd34:	711a      	strb	r2, [r3, #4]
 800cd36:	2d04      	cmp	r5, #4
 800cd38:	d001      	beq.n	800cd3e <st_sssa8_ch_convolve_dw+0x7ce>
 800cd3a:	7802      	ldrb	r2, [r0, #0]
 800cd3c:	715a      	strb	r2, [r3, #5]
 800cd3e:	45d8      	cmp	r8, fp
 800cd40:	4640      	mov	r0, r8
 800cd42:	4632      	mov	r2, r6
 800cd44:	ebae 0e0c 	sub.w	lr, lr, ip
 800cd48:	d1a1      	bne.n	800cc8e <st_sssa8_ch_convolve_dw+0x71e>
 800cd4a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800cd4e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800cd52:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cd56:	9f22      	ldr	r7, [sp, #136]	; 0x88
 800cd58:	e552      	b.n	800c800 <st_sssa8_ch_convolve_dw+0x290>
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	7802      	ldrb	r2, [r0, #0]
 800cd5e:	f803 2b01 	strb.w	r2, [r3], #1
 800cd62:	429e      	cmp	r6, r3
 800cd64:	d1fa      	bne.n	800cd5c <st_sssa8_ch_convolve_dw+0x7ec>
 800cd66:	e7ea      	b.n	800cd3e <st_sssa8_ch_convolve_dw+0x7ce>
 800cd68:	463d      	mov	r5, r7
 800cd6a:	4692      	mov	sl, r2
 800cd6c:	e7b5      	b.n	800ccda <st_sssa8_ch_convolve_dw+0x76a>
 800cd6e:	f1c2 0201 	rsb	r2, r2, #1
 800cd72:	fa01 f202 	lsl.w	r2, r1, r2
 800cd76:	f302 031f 	ssat	r3, #32, r2
 800cd7a:	fb53 f314 	smmulr	r3, r3, r4
 800cd7e:	4403      	add	r3, r0
 800cd80:	f303 0307 	ssat	r3, #8, r3
 800cd84:	f88b 3000 	strb.w	r3, [fp]
 800cd88:	e69d      	b.n	800cac6 <st_sssa8_ch_convolve_dw+0x556>
 800cd8a:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d03f      	beq.n	800ce10 <st_sssa8_ch_convolve_dw+0x8a0>
 800cd90:	3b01      	subs	r3, #1
 800cd92:	9349      	str	r3, [sp, #292]	; 0x124
 800cd94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd96:	f8bd 1144 	ldrh.w	r1, [sp, #324]	; 0x144
 800cd9a:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	f47f acf5 	bne.w	800c78e <st_sssa8_ch_convolve_dw+0x21e>
 800cda4:	2901      	cmp	r1, #1
 800cda6:	d03d      	beq.n	800ce24 <st_sssa8_ch_convolve_dw+0x8b4>
 800cda8:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800cdaa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cdac:	f9bd 506c 	ldrsh.w	r5, [sp, #108]	; 0x6c
 800cdb0:	4297      	cmp	r7, r2
 800cdb2:	f77f ad39 	ble.w	800c828 <st_sssa8_ch_convolve_dw+0x2b8>
 800cdb6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cdb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdbc:	f8dd 90ec 	ldr.w	r9, [sp, #236]	; 0xec
 800cdc0:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 800cdc4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800cdc8:	46b0      	mov	r8, r6
 800cdca:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800cdcc:	4614      	mov	r4, r2
 800cdce:	4610      	mov	r0, r2
 800cdd0:	fb00 500b 	mla	r0, r0, fp, r5
 800cdd4:	3401      	adds	r4, #1
 800cdd6:	fb06 a000 	mla	r0, r6, r0, sl
 800cdda:	4641      	mov	r1, r8
 800cddc:	b224      	sxth	r4, r4
 800cdde:	464a      	mov	r2, r9
 800cde0:	f003 ff2a 	bl	8010c38 <st_dsp_arm_copy_q7>
 800cde4:	42bc      	cmp	r4, r7
 800cde6:	44c8      	add	r8, r9
 800cde8:	4620      	mov	r0, r4
 800cdea:	dbf1      	blt.n	800cdd0 <st_sssa8_ch_convolve_dw+0x860>
 800cdec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cdee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f47f ad1c 	bne.w	800c830 <st_sssa8_ch_convolve_dw+0x2c0>
 800cdf8:	461e      	mov	r6, r3
 800cdfa:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800cdfe:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
 800ce02:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 800ce04:	e9dd c927 	ldrd	ip, r9, [sp, #156]	; 0x9c
 800ce08:	e620      	b.n	800ca4c <st_sssa8_ch_convolve_dw+0x4dc>
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	463d      	mov	r5, r7
 800ce0e:	e781      	b.n	800cd14 <st_sssa8_ch_convolve_dw+0x7a4>
 800ce10:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800ce12:	3b01      	subs	r3, #1
 800ce14:	934a      	str	r3, [sp, #296]	; 0x128
 800ce16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ce18:	2101      	movs	r1, #1
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 800ce20:	f47f acb5 	bne.w	800c78e <st_sssa8_ch_convolve_dw+0x21e>
 800ce24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ce26:	4618      	mov	r0, r3
 800ce28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ce2a:	4298      	cmp	r0, r3
 800ce2c:	f77f acfc 	ble.w	800c828 <st_sssa8_ch_convolve_dw+0x2b8>
 800ce30:	9921      	ldr	r1, [sp, #132]	; 0x84
 800ce32:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800ce34:	f9bd a06c 	ldrsh.w	sl, [sp, #108]	; 0x6c
 800ce38:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800ce3a:	f89d b020 	ldrb.w	fp, [sp, #32]
 800ce3e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800ce42:	fb02 0201 	mla	r2, r2, r1, r0
 800ce46:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800ce48:	461e      	mov	r6, r3
 800ce4a:	1a55      	subs	r5, r2, r1
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	4555      	cmp	r5, sl
 800ce50:	dd1b      	ble.n	800ce8a <st_sssa8_ch_convolve_dw+0x91a>
 800ce52:	fb09 f302 	mul.w	r3, r9, r2
 800ce56:	2e00      	cmp	r6, #0
 800ce58:	9303      	str	r3, [sp, #12]
 800ce5a:	f2c0 80cb 	blt.w	800cff4 <st_sssa8_ch_convolve_dw+0xa84>
 800ce5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce60:	4293      	cmp	r3, r2
 800ce62:	4657      	mov	r7, sl
 800ce64:	f340 80bb 	ble.w	800cfde <st_sssa8_ch_convolve_dw+0xa6e>
 800ce68:	46d4      	mov	ip, sl
 800ce6a:	2f00      	cmp	r7, #0
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	4642      	mov	r2, r8
 800ce70:	4658      	mov	r0, fp
 800ce72:	db02      	blt.n	800ce7a <st_sssa8_ch_convolve_dw+0x90a>
 800ce74:	45e1      	cmp	r9, ip
 800ce76:	f300 80c9 	bgt.w	800d00c <st_sssa8_ch_convolve_dw+0xa9c>
 800ce7a:	f001 fae7 	bl	800e44c <st_uint8_fill>
 800ce7e:	3701      	adds	r7, #1
 800ce80:	b23f      	sxth	r7, r7
 800ce82:	42bd      	cmp	r5, r7
 800ce84:	4444      	add	r4, r8
 800ce86:	46bc      	mov	ip, r7
 800ce88:	dcef      	bgt.n	800ce6a <st_sssa8_ch_convolve_dw+0x8fa>
 800ce8a:	3601      	adds	r6, #1
 800ce8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ce8e:	b236      	sxth	r6, r6
 800ce90:	429e      	cmp	r6, r3
 800ce92:	4632      	mov	r2, r6
 800ce94:	dbdb      	blt.n	800ce4e <st_sssa8_ch_convolve_dw+0x8de>
 800ce96:	e4c7      	b.n	800c828 <st_sssa8_ch_convolve_dw+0x2b8>
 800ce98:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ce9a:	4288      	cmp	r0, r1
 800ce9c:	f77f acc4 	ble.w	800c828 <st_sssa8_ch_convolve_dw+0x2b8>
 800cea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cea2:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800cea4:	fb02 0203 	mla	r2, r2, r3, r0
 800cea8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800ceaa:	1ad5      	subs	r5, r2, r3
 800ceac:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800ceb0:	9304      	str	r3, [sp, #16]
 800ceb2:	429d      	cmp	r5, r3
 800ceb4:	f77f acb8 	ble.w	800c828 <st_sssa8_ch_convolve_dw+0x2b8>
 800ceb8:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800cebc:	f89d 9020 	ldrb.w	r9, [sp, #32]
 800cec0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800cec2:	460e      	mov	r6, r1
 800cec4:	468b      	mov	fp, r1
 800cec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cec8:	9a04      	ldr	r2, [sp, #16]
 800ceca:	fb0b f303 	mul.w	r3, fp, r3
 800cece:	9303      	str	r3, [sp, #12]
 800ced0:	4614      	mov	r4, r2
 800ced2:	2e00      	cmp	r6, #0
 800ced4:	db06      	blt.n	800cee4 <st_sssa8_ch_convolve_dw+0x974>
 800ced6:	455f      	cmp	r7, fp
 800ced8:	dd04      	ble.n	800cee4 <st_sssa8_ch_convolve_dw+0x974>
 800ceda:	2c00      	cmp	r4, #0
 800cedc:	db02      	blt.n	800cee4 <st_sssa8_ch_convolve_dw+0x974>
 800cede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cee0:	4293      	cmp	r3, r2
 800cee2:	dc11      	bgt.n	800cf08 <st_sssa8_ch_convolve_dw+0x998>
 800cee4:	4642      	mov	r2, r8
 800cee6:	4651      	mov	r1, sl
 800cee8:	4648      	mov	r0, r9
 800ceea:	f001 faaf 	bl	800e44c <st_uint8_fill>
 800ceee:	3401      	adds	r4, #1
 800cef0:	b224      	sxth	r4, r4
 800cef2:	42ac      	cmp	r4, r5
 800cef4:	44c2      	add	sl, r8
 800cef6:	4622      	mov	r2, r4
 800cef8:	dbeb      	blt.n	800ced2 <st_sssa8_ch_convolve_dw+0x962>
 800cefa:	3601      	adds	r6, #1
 800cefc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cefe:	b236      	sxth	r6, r6
 800cf00:	429e      	cmp	r6, r3
 800cf02:	46b3      	mov	fp, r6
 800cf04:	dbdf      	blt.n	800cec6 <st_sssa8_ch_convolve_dw+0x956>
 800cf06:	e48f      	b.n	800c828 <st_sssa8_ch_convolve_dw+0x2b8>
 800cf08:	9b03      	ldr	r3, [sp, #12]
 800cf0a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800cf0c:	441a      	add	r2, r3
 800cf0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf10:	fb03 0102 	mla	r1, r3, r2, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d0ea      	beq.n	800ceee <st_sssa8_ch_convolve_dw+0x97e>
 800cf18:	eb01 0c03 	add.w	ip, r1, r3
 800cf1c:	4650      	mov	r0, sl
 800cf1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf22:	021b      	lsls	r3, r3, #8
 800cf24:	4561      	cmp	r1, ip
 800cf26:	ea4f 2233 	mov.w	r2, r3, ror #8
 800cf2a:	fa33 f382 	uxtab16	r3, r3, r2
 800cf2e:	f820 3b02 	strh.w	r3, [r0], #2
 800cf32:	d1f4      	bne.n	800cf1e <st_sssa8_ch_convolve_dw+0x9ae>
 800cf34:	e7db      	b.n	800ceee <st_sssa8_ch_convolve_dw+0x97e>
 800cf36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cf38:	9926      	ldr	r1, [sp, #152]	; 0x98
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	4288      	cmp	r0, r1
 800cf3e:	f77f ac73 	ble.w	800c828 <st_sssa8_ch_convolve_dw+0x2b8>
 800cf42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf44:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800cf46:	fb02 0203 	mla	r2, r2, r3, r0
 800cf4a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800cf4c:	1ad5      	subs	r5, r2, r3
 800cf4e:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800cf52:	9304      	str	r3, [sp, #16]
 800cf54:	429d      	cmp	r5, r3
 800cf56:	f77f ac67 	ble.w	800c828 <st_sssa8_ch_convolve_dw+0x2b8>
 800cf5a:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800cf5e:	f89d 9020 	ldrb.w	r9, [sp, #32]
 800cf62:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800cf64:	460e      	mov	r6, r1
 800cf66:	468b      	mov	fp, r1
 800cf68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf6a:	9a04      	ldr	r2, [sp, #16]
 800cf6c:	fb03 f30b 	mul.w	r3, r3, fp
 800cf70:	9303      	str	r3, [sp, #12]
 800cf72:	4614      	mov	r4, r2
 800cf74:	2e00      	cmp	r6, #0
 800cf76:	db06      	blt.n	800cf86 <st_sssa8_ch_convolve_dw+0xa16>
 800cf78:	455f      	cmp	r7, fp
 800cf7a:	dd04      	ble.n	800cf86 <st_sssa8_ch_convolve_dw+0xa16>
 800cf7c:	2c00      	cmp	r4, #0
 800cf7e:	db02      	blt.n	800cf86 <st_sssa8_ch_convolve_dw+0xa16>
 800cf80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf82:	4293      	cmp	r3, r2
 800cf84:	dc11      	bgt.n	800cfaa <st_sssa8_ch_convolve_dw+0xa3a>
 800cf86:	4642      	mov	r2, r8
 800cf88:	4651      	mov	r1, sl
 800cf8a:	4648      	mov	r0, r9
 800cf8c:	f001 fa5e 	bl	800e44c <st_uint8_fill>
 800cf90:	3401      	adds	r4, #1
 800cf92:	b224      	sxth	r4, r4
 800cf94:	42ac      	cmp	r4, r5
 800cf96:	44c2      	add	sl, r8
 800cf98:	4622      	mov	r2, r4
 800cf9a:	dbeb      	blt.n	800cf74 <st_sssa8_ch_convolve_dw+0xa04>
 800cf9c:	3601      	adds	r6, #1
 800cf9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cfa0:	b236      	sxth	r6, r6
 800cfa2:	429e      	cmp	r6, r3
 800cfa4:	46b3      	mov	fp, r6
 800cfa6:	dbdf      	blt.n	800cf68 <st_sssa8_ch_convolve_dw+0x9f8>
 800cfa8:	e43e      	b.n	800c828 <st_sssa8_ch_convolve_dw+0x2b8>
 800cfaa:	9b03      	ldr	r3, [sp, #12]
 800cfac:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800cfae:	441a      	add	r2, r3
 800cfb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cfb2:	fb03 1202 	mla	r2, r3, r2, r1
 800cfb6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d0e9      	beq.n	800cf90 <st_sssa8_ch_convolve_dw+0xa20>
 800cfbc:	18d0      	adds	r0, r2, r3
 800cfbe:	4651      	mov	r1, sl
 800cfc0:	f812 cb01 	ldrb.w	ip, [r2], #1
 800cfc4:	ea4f 630c 	mov.w	r3, ip, lsl #24
 800cfc8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800cfcc:	4282      	cmp	r2, r0
 800cfce:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800cfd2:	fa33 f38c 	uxtab16	r3, r3, ip
 800cfd6:	f841 3b04 	str.w	r3, [r1], #4
 800cfda:	d1f1      	bne.n	800cfc0 <st_sssa8_ch_convolve_dw+0xa50>
 800cfdc:	e7d8      	b.n	800cf90 <st_sssa8_ch_convolve_dw+0xa20>
 800cfde:	3701      	adds	r7, #1
 800cfe0:	4621      	mov	r1, r4
 800cfe2:	4642      	mov	r2, r8
 800cfe4:	4658      	mov	r0, fp
 800cfe6:	b23f      	sxth	r7, r7
 800cfe8:	f001 fa30 	bl	800e44c <st_uint8_fill>
 800cfec:	42bd      	cmp	r5, r7
 800cfee:	4444      	add	r4, r8
 800cff0:	dcf5      	bgt.n	800cfde <st_sssa8_ch_convolve_dw+0xa6e>
 800cff2:	e74a      	b.n	800ce8a <st_sssa8_ch_convolve_dw+0x91a>
 800cff4:	4657      	mov	r7, sl
 800cff6:	3701      	adds	r7, #1
 800cff8:	4621      	mov	r1, r4
 800cffa:	4642      	mov	r2, r8
 800cffc:	4658      	mov	r0, fp
 800cffe:	b23f      	sxth	r7, r7
 800d000:	f001 fa24 	bl	800e44c <st_uint8_fill>
 800d004:	42af      	cmp	r7, r5
 800d006:	4444      	add	r4, r8
 800d008:	dbf5      	blt.n	800cff6 <st_sssa8_ch_convolve_dw+0xa86>
 800d00a:	e73e      	b.n	800ce8a <st_sssa8_ch_convolve_dw+0x91a>
 800d00c:	9b03      	ldr	r3, [sp, #12]
 800d00e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800d010:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d012:	eb03 000c 	add.w	r0, r3, ip
 800d016:	fb02 1000 	mla	r0, r2, r0, r1
 800d01a:	4621      	mov	r1, r4
 800d01c:	f003 fe0c 	bl	8010c38 <st_dsp_arm_copy_q7>
 800d020:	e72d      	b.n	800ce7e <st_sssa8_ch_convolve_dw+0x90e>
 800d022:	428e      	cmp	r6, r1
 800d024:	f844 7f04 	str.w	r7, [r4, #4]!
 800d028:	f47f aae4 	bne.w	800c5f4 <st_sssa8_ch_convolve_dw+0x84>
 800d02c:	f7ff baf3 	b.w	800c616 <st_sssa8_ch_convolve_dw+0xa6>

0800d030 <st_sssa8_ch_convolve_rank1upd>:
 800d030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d034:	b083      	sub	sp, #12
 800d036:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800d03a:	f99d e038 	ldrsb.w	lr, [sp, #56]	; 0x38
 800d03e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800d040:	fb13 f305 	smulbb	r3, r3, r5
 800d044:	fb13 f600 	smulbb	r6, r3, r0
 800d048:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800d04c:	2a00      	cmp	r2, #0
 800d04e:	d06f      	beq.n	800d130 <st_sssa8_ch_convolve_rank1upd+0x100>
 800d050:	b2b6      	uxth	r6, r6
 800d052:	ea4f 0b96 	mov.w	fp, r6, lsr #2
 800d056:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800d05a:	f1ab 0381 	sub.w	r3, fp, #129	; 0x81
 800d05e:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800d062:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800d066:	ebc3 2043 	rsb	r0, r3, r3, lsl #9
 800d06a:	f1ab 0980 	sub.w	r9, fp, #128	; 0x80
 800d06e:	3301      	adds	r3, #1
 800d070:	f1aa 0a04 	sub.w	sl, sl, #4
 800d074:	eb09 19c0 	add.w	r9, r9, r0, lsl #7
 800d078:	ea4f 2c43 	mov.w	ip, r3, lsl #9
 800d07c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 800d080:	44a2      	add	sl, r4
 800d082:	f006 0603 	and.w	r6, r6, #3
 800d086:	fa1f f989 	uxth.w	r9, r9
 800d08a:	9301      	str	r3, [sp, #4]
 800d08c:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 800d090:	d951      	bls.n	800d136 <st_sssa8_ch_convolve_rank1upd+0x106>
 800d092:	eb01 050c 	add.w	r5, r1, ip
 800d096:	2400      	movs	r4, #0
 800d098:	2300      	movs	r3, #0
 800d09a:	f501 7000 	add.w	r0, r1, #512	; 0x200
 800d09e:	461f      	mov	r7, r3
 800d0a0:	f851 2b04 	ldr.w	r2, [r1], #4
 800d0a4:	fa2f f382 	sxtb16	r3, r2
 800d0a8:	4288      	cmp	r0, r1
 800d0aa:	ea4f 2232 	mov.w	r2, r2, ror #8
 800d0ae:	fa97 f313 	qadd16	r3, r7, r3
 800d0b2:	fa2f f282 	sxtb16	r2, r2
 800d0b6:	fa93 f712 	qadd16	r7, r3, r2
 800d0ba:	d1f1      	bne.n	800d0a0 <st_sssa8_ch_convolve_rank1upd+0x70>
 800d0bc:	b23a      	sxth	r2, r7
 800d0be:	eb02 4327 	add.w	r3, r2, r7, asr #16
 800d0c2:	4285      	cmp	r5, r0
 800d0c4:	4601      	mov	r1, r0
 800d0c6:	441c      	add	r4, r3
 800d0c8:	d1e6      	bne.n	800d098 <st_sssa8_ch_convolve_rank1upd+0x68>
 800d0ca:	4648      	mov	r0, r9
 800d0cc:	b1b8      	cbz	r0, 800d0fe <st_sssa8_ch_convolve_rank1upd+0xce>
 800d0ce:	3801      	subs	r0, #1
 800d0d0:	b280      	uxth	r0, r0
 800d0d2:	3001      	adds	r0, #1
 800d0d4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f851 3b04 	ldr.w	r3, [r1], #4
 800d0de:	fa2f f583 	sxtb16	r5, r3
 800d0e2:	4281      	cmp	r1, r0
 800d0e4:	ea4f 2333 	mov.w	r3, r3, ror #8
 800d0e8:	fa92 f215 	qadd16	r2, r2, r5
 800d0ec:	fa2f f383 	sxtb16	r3, r3
 800d0f0:	fa92 f213 	qadd16	r2, r2, r3
 800d0f4:	d1f1      	bne.n	800d0da <st_sssa8_ch_convolve_rank1upd+0xaa>
 800d0f6:	b213      	sxth	r3, r2
 800d0f8:	eb03 4222 	add.w	r2, r3, r2, asr #16
 800d0fc:	4414      	add	r4, r2
 800d0fe:	b176      	cbz	r6, 800d11e <st_sssa8_ch_convolve_rank1upd+0xee>
 800d100:	f991 3000 	ldrsb.w	r3, [r1]
 800d104:	2e01      	cmp	r6, #1
 800d106:	441c      	add	r4, r3
 800d108:	d018      	beq.n	800d13c <st_sssa8_ch_convolve_rank1upd+0x10c>
 800d10a:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800d10e:	2e02      	cmp	r6, #2
 800d110:	441c      	add	r4, r3
 800d112:	bf17      	itett	ne
 800d114:	f991 3002 	ldrsbne.w	r3, [r1, #2]
 800d118:	3102      	addeq	r1, #2
 800d11a:	3103      	addne	r1, #3
 800d11c:	18e4      	addne	r4, r4, r3
 800d11e:	f858 3b04 	ldr.w	r3, [r8], #4
 800d122:	fb0e 3414 	mls	r4, lr, r4, r3
 800d126:	9b01      	ldr	r3, [sp, #4]
 800d128:	f84a 4f04 	str.w	r4, [sl, #4]!
 800d12c:	4543      	cmp	r3, r8
 800d12e:	d1ad      	bne.n	800d08c <st_sssa8_ch_convolve_rank1upd+0x5c>
 800d130:	b003      	add	sp, #12
 800d132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d136:	4658      	mov	r0, fp
 800d138:	2400      	movs	r4, #0
 800d13a:	e7c7      	b.n	800d0cc <st_sssa8_ch_convolve_rank1upd+0x9c>
 800d13c:	3101      	adds	r1, #1
 800d13e:	e7ee      	b.n	800d11e <st_sssa8_ch_convolve_rank1upd+0xee>

0800d140 <st_sssa8_ch_convolve>:
 800d140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d144:	b0d1      	sub	sp, #324	; 0x144
 800d146:	469b      	mov	fp, r3
 800d148:	f8bd 5170 	ldrh.w	r5, [sp, #368]	; 0x170
 800d14c:	9515      	str	r5, [sp, #84]	; 0x54
 800d14e:	f8bd 5178 	ldrh.w	r5, [sp, #376]	; 0x178
 800d152:	9512      	str	r5, [sp, #72]	; 0x48
 800d154:	f8bd 517c 	ldrh.w	r5, [sp, #380]	; 0x17c
 800d158:	9523      	str	r5, [sp, #140]	; 0x8c
 800d15a:	f8bd 5180 	ldrh.w	r5, [sp, #384]	; 0x180
 800d15e:	950a      	str	r5, [sp, #40]	; 0x28
 800d160:	f8bd 5184 	ldrh.w	r5, [sp, #388]	; 0x184
 800d164:	f8bd 616c 	ldrh.w	r6, [sp, #364]	; 0x16c
 800d168:	9519      	str	r5, [sp, #100]	; 0x64
 800d16a:	f8bd 51a0 	ldrh.w	r5, [sp, #416]	; 0x1a0
 800d16e:	9c6a      	ldr	r4, [sp, #424]	; 0x1a8
 800d170:	950e      	str	r5, [sp, #56]	; 0x38
 800d172:	f8bd 51a4 	ldrh.w	r5, [sp, #420]	; 0x1a4
 800d176:	f8bd 7174 	ldrh.w	r7, [sp, #372]	; 0x174
 800d17a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d17c:	9617      	str	r6, [sp, #92]	; 0x5c
 800d17e:	951e      	str	r5, [sp, #120]	; 0x78
 800d180:	4635      	mov	r5, r6
 800d182:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800d186:	9722      	str	r7, [sp, #136]	; 0x88
 800d188:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800d18c:	9411      	str	r4, [sp, #68]	; 0x44
 800d18e:	462e      	mov	r6, r5
 800d190:	ebc5 7445 	rsb	r4, r5, r5, lsl #29
 800d194:	461d      	mov	r5, r3
 800d196:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d198:	9209      	str	r2, [sp, #36]	; 0x24
 800d19a:	fb15 f303 	smulbb	r3, r5, r3
 800d19e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800d1a0:	9f64      	ldr	r7, [sp, #400]	; 0x190
 800d1a2:	f99d a194 	ldrsb.w	sl, [sp, #404]	; 0x194
 800d1a6:	f99d e198 	ldrsb.w	lr, [sp, #408]	; 0x198
 800d1aa:	900c      	str	r0, [sp, #48]	; 0x30
 800d1ac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d1b0:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800d1b4:	fb13 f30b 	smulbb	r3, r3, fp
 800d1b8:	eb05 0208 	add.w	r2, r5, r8
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	951f      	str	r5, [sp, #124]	; 0x7c
 800d1c0:	9106      	str	r1, [sp, #24]
 800d1c2:	9221      	str	r2, [sp, #132]	; 0x84
 800d1c4:	9318      	str	r3, [sp, #96]	; 0x60
 800d1c6:	2e00      	cmp	r6, #0
 800d1c8:	f000 853f 	beq.w	800dc4a <st_sssa8_ch_convolve+0xb0a>
 800d1cc:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 800d1d0:	4638      	mov	r0, r7
 800d1d2:	eb07 060c 	add.w	r6, r7, ip
 800d1d6:	1f14      	subs	r4, r2, #4
 800d1d8:	2701      	movs	r7, #1
 800d1da:	4675      	mov	r5, lr
 800d1dc:	f930 3b02 	ldrsh.w	r3, [r0], #2
 800d1e0:	1e5a      	subs	r2, r3, #1
 800d1e2:	b292      	uxth	r2, r2
 800d1e4:	fa07 f103 	lsl.w	r1, r7, r3
 800d1e8:	2a14      	cmp	r2, #20
 800d1ea:	fa05 f303 	lsl.w	r3, r5, r3
 800d1ee:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 800d1f2:	f200 8159 	bhi.w	800d4a8 <st_sssa8_ch_convolve+0x368>
 800d1f6:	4286      	cmp	r6, r0
 800d1f8:	f844 3f04 	str.w	r3, [r4, #4]!
 800d1fc:	d1ee      	bne.n	800d1dc <st_sssa8_ch_convolve+0x9c>
 800d1fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d200:	4637      	mov	r7, r6
 800d202:	eb03 0408 	add.w	r4, r3, r8
 800d206:	eba7 050c 	sub.w	r5, r7, ip
 800d20a:	9520      	str	r5, [sp, #128]	; 0x80
 800d20c:	9d06      	ldr	r5, [sp, #24]
 800d20e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d210:	9532      	str	r5, [sp, #200]	; 0xc8
 800d212:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d214:	9531      	str	r5, [sp, #196]	; 0xc4
 800d216:	9748      	str	r7, [sp, #288]	; 0x120
 800d218:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d21a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d21c:	9536      	str	r5, [sp, #216]	; 0xd8
 800d21e:	ab38      	add	r3, sp, #224	; 0xe0
 800d220:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800d222:	9749      	str	r7, [sp, #292]	; 0x124
 800d224:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800d226:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	aa30      	add	r2, sp, #192	; 0xc0
 800d22c:	ab34      	add	r3, sp, #208	; 0xd0
 800d22e:	a946      	add	r1, sp, #280	; 0x118
 800d230:	9535      	str	r5, [sp, #212]	; 0xd4
 800d232:	974a      	str	r7, [sp, #296]	; 0x128
 800d234:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d236:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800d238:	953a      	str	r5, [sp, #232]	; 0xe8
 800d23a:	a83c      	add	r0, sp, #240	; 0xf0
 800d23c:	9639      	str	r6, [sp, #228]	; 0xe4
 800d23e:	974b      	str	r7, [sp, #300]	; 0x12c
 800d240:	f001 f88e 	bl	800e360 <ai_padding_opt_init>
 800d244:	e9dd 3117 	ldrd	r3, r1, [sp, #92]	; 0x5c
 800d248:	ea4f 094b 	mov.w	r9, fp, lsl #1
 800d24c:	fb03 f301 	mul.w	r3, r3, r1
 800d250:	fb09 f205 	mul.w	r2, r9, r5
 800d254:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d256:	fb06 f202 	mul.w	r2, r6, r2
 800d25a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d25e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800d262:	921a      	str	r2, [sp, #104]	; 0x68
 800d264:	f340 84d8 	ble.w	800dc18 <st_sssa8_ch_convolve+0xad8>
 800d268:	2300      	movs	r3, #0
 800d26a:	932b      	str	r3, [sp, #172]	; 0xac
 800d26c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d26e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d270:	9967      	ldr	r1, [sp, #412]	; 0x19c
 800d272:	fb03 f302 	mul.w	r3, r3, r2
 800d276:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d278:	fb02 1303 	mla	r3, r2, r3, r1
 800d27c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d27e:	429a      	cmp	r2, r3
 800d280:	f080 8118 	bcs.w	800d4b4 <st_sssa8_ch_convolve+0x374>
 800d284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d286:	9906      	ldr	r1, [sp, #24]
 800d288:	fb03 f301 	mul.w	r3, r3, r1
 800d28c:	fb0b 2303 	mla	r3, fp, r3, r2
 800d290:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 800d292:	429a      	cmp	r2, r3
 800d294:	bf2c      	ite	cs
 800d296:	2300      	movcs	r3, #0
 800d298:	2301      	movcc	r3, #1
 800d29a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d29c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800d2a0:	fb92 f2f1 	sdiv	r2, r2, r1
 800d2a4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800d2a6:	f022 0201 	bic.w	r2, r2, #1
 800d2aa:	428a      	cmp	r2, r1
 800d2ac:	bf28      	it	cs
 800d2ae:	460a      	movcs	r2, r1
 800d2b0:	2a01      	cmp	r2, #1
 800d2b2:	921d      	str	r2, [sp, #116]	; 0x74
 800d2b4:	f240 8308 	bls.w	800d8c8 <st_sssa8_ch_convolve+0x788>
 800d2b8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d2ba:	460a      	mov	r2, r1
 800d2bc:	fbb1 f1f0 	udiv	r1, r1, r0
 800d2c0:	fb00 2211 	mls	r2, r0, r1, r2
 800d2c4:	b292      	uxth	r2, r2
 800d2c6:	b289      	uxth	r1, r1
 800d2c8:	912a      	str	r1, [sp, #168]	; 0xa8
 800d2ca:	b11a      	cbz	r2, 800d2d4 <st_sssa8_ch_convolve+0x194>
 800d2cc:	460a      	mov	r2, r1
 800d2ce:	3201      	adds	r2, #1
 800d2d0:	b292      	uxth	r2, r2
 800d2d2:	922a      	str	r2, [sp, #168]	; 0xa8
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	f040 80fc 	bne.w	800d4d2 <st_sssa8_ch_convolve+0x392>
 800d2da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d2dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d2de:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d2e0:	005b      	lsls	r3, r3, #1
 800d2e2:	fb02 f303 	mul.w	r3, r2, r3
 800d2e6:	fb09 1303 	mla	r3, r9, r3, r1
 800d2ea:	fb0b f202 	mul.w	r2, fp, r2
 800d2ee:	9310      	str	r3, [sp, #64]	; 0x40
 800d2f0:	0053      	lsls	r3, r2, #1
 800d2f2:	fa0f fa8a 	sxth.w	sl, sl
 800d2f6:	9314      	str	r3, [sp, #80]	; 0x50
 800d2f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2fa:	9213      	str	r2, [sp, #76]	; 0x4c
 800d2fc:	46c8      	mov	r8, r9
 800d2fe:	9324      	str	r3, [sp, #144]	; 0x90
 800d300:	46d9      	mov	r9, fp
 800d302:	4657      	mov	r7, sl
 800d304:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d306:	3b01      	subs	r3, #1
 800d308:	b29b      	uxth	r3, r3
 800d30a:	461a      	mov	r2, r3
 800d30c:	932a      	str	r3, [sp, #168]	; 0xa8
 800d30e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d312:	429a      	cmp	r2, r3
 800d314:	f000 82d4 	beq.w	800d8c0 <st_sssa8_ch_convolve+0x780>
 800d318:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d31a:	b92b      	cbnz	r3, 800d328 <st_sssa8_ch_convolve+0x1e8>
 800d31c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d31e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d320:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d322:	985a      	ldr	r0, [sp, #360]	; 0x168
 800d324:	f001 fd32 	bl	800ed8c <st_int8_to16_dual>
 800d328:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f000 8098 	beq.w	800d460 <st_sssa8_ch_convolve+0x320>
 800d330:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d332:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800d336:	425b      	negs	r3, r3
 800d338:	b29b      	uxth	r3, r3
 800d33a:	2400      	movs	r4, #0
 800d33c:	9316      	str	r3, [sp, #88]	; 0x58
 800d33e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800d340:	941c      	str	r4, [sp, #112]	; 0x70
 800d342:	931b      	str	r3, [sp, #108]	; 0x6c
 800d344:	a83c      	add	r0, sp, #240	; 0xf0
 800d346:	f001 f865 	bl	800e414 <ai_padding_opt_phase1>
 800d34a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d066      	beq.n	800d41e <st_sssa8_ch_convolve+0x2de>
 800d350:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	; 0x88
 800d354:	1a9a      	subs	r2, r3, r2
 800d356:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d358:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d35a:	425b      	negs	r3, r3
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	2100      	movs	r1, #0
 800d360:	9307      	str	r3, [sp, #28]
 800d362:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 800d366:	910b      	str	r1, [sp, #44]	; 0x2c
 800d368:	fb04 2600 	mla	r6, r4, r0, r2
 800d36c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d36e:	460c      	mov	r4, r1
 800d370:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800d372:	2b00      	cmp	r3, #0
 800d374:	f040 8183 	bne.w	800d67e <st_sssa8_ch_convolve+0x53e>
 800d378:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f040 819c 	bne.w	800d6b8 <st_sssa8_ch_convolve+0x578>
 800d380:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800d382:	2201      	movs	r2, #1
 800d384:	3b01      	subs	r3, #1
 800d386:	933e      	str	r3, [sp, #248]	; 0xf8
 800d388:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800d38c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d38e:	429e      	cmp	r6, r3
 800d390:	dd34      	ble.n	800d3fc <st_sssa8_ch_convolve+0x2bc>
 800d392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d394:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d396:	9608      	str	r6, [sp, #32]
 800d398:	fb04 2403 	mla	r4, r4, r3, r2
 800d39c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d39e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 800d3a2:	1ae4      	subs	r4, r4, r3
 800d3a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3a6:	4616      	mov	r6, r2
 800d3a8:	461d      	mov	r5, r3
 800d3aa:	42b4      	cmp	r4, r6
 800d3ac:	dd1f      	ble.n	800d3ee <st_sssa8_ch_convolve+0x2ae>
 800d3ae:	9a06      	ldr	r2, [sp, #24]
 800d3b0:	2d00      	cmp	r5, #0
 800d3b2:	fb03 f202 	mul.w	r2, r3, r2
 800d3b6:	920d      	str	r2, [sp, #52]	; 0x34
 800d3b8:	f2c0 8167 	blt.w	800d68a <st_sssa8_ch_convolve+0x54a>
 800d3bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	46b3      	mov	fp, r6
 800d3c2:	dd79      	ble.n	800d4b8 <st_sssa8_ch_convolve+0x378>
 800d3c4:	46b4      	mov	ip, r6
 800d3c6:	f1bb 0f00 	cmp.w	fp, #0
 800d3ca:	4651      	mov	r1, sl
 800d3cc:	464a      	mov	r2, r9
 800d3ce:	4638      	mov	r0, r7
 800d3d0:	db03      	blt.n	800d3da <st_sssa8_ch_convolve+0x29a>
 800d3d2:	9b06      	ldr	r3, [sp, #24]
 800d3d4:	4563      	cmp	r3, ip
 800d3d6:	f300 8166 	bgt.w	800d6a6 <st_sssa8_ch_convolve+0x566>
 800d3da:	f003 fc4f 	bl	8010c7c <st_dsp_arm_fill_q15>
 800d3de:	f10b 0b01 	add.w	fp, fp, #1
 800d3e2:	fa0f fb8b 	sxth.w	fp, fp
 800d3e6:	455c      	cmp	r4, fp
 800d3e8:	44c2      	add	sl, r8
 800d3ea:	46dc      	mov	ip, fp
 800d3ec:	dceb      	bgt.n	800d3c6 <st_sssa8_ch_convolve+0x286>
 800d3ee:	3501      	adds	r5, #1
 800d3f0:	9a08      	ldr	r2, [sp, #32]
 800d3f2:	b22d      	sxth	r5, r5
 800d3f4:	4295      	cmp	r5, r2
 800d3f6:	462b      	mov	r3, r5
 800d3f8:	dbd7      	blt.n	800d3aa <st_sssa8_ch_convolve+0x26a>
 800d3fa:	4616      	mov	r6, r2
 800d3fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3fe:	4553      	cmp	r3, sl
 800d400:	f000 818c 	beq.w	800d71c <st_sssa8_ch_convolve+0x5dc>
 800d404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d406:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d408:	3301      	adds	r3, #1
 800d40a:	b21a      	sxth	r2, r3
 800d40c:	9b07      	ldr	r3, [sp, #28]
 800d40e:	920b      	str	r2, [sp, #44]	; 0x2c
 800d410:	440b      	add	r3, r1
 800d412:	b29b      	uxth	r3, r3
 800d414:	9307      	str	r3, [sp, #28]
 800d416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d418:	4293      	cmp	r3, r2
 800d41a:	4614      	mov	r4, r2
 800d41c:	dca8      	bgt.n	800d370 <st_sssa8_ch_convolve+0x230>
 800d41e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d420:	9919      	ldr	r1, [sp, #100]	; 0x64
 800d422:	3301      	adds	r3, #1
 800d424:	b21a      	sxth	r2, r3
 800d426:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d428:	921c      	str	r2, [sp, #112]	; 0x70
 800d42a:	440b      	add	r3, r1
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	9316      	str	r3, [sp, #88]	; 0x58
 800d430:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d432:	4293      	cmp	r3, r2
 800d434:	4614      	mov	r4, r2
 800d436:	dc85      	bgt.n	800d344 <st_sssa8_ch_convolve+0x204>
 800d438:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d43a:	4551      	cmp	r1, sl
 800d43c:	d010      	beq.n	800d460 <st_sssa8_ch_convolve+0x320>
 800d43e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d440:	9305      	str	r3, [sp, #20]
 800d442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d444:	9304      	str	r3, [sp, #16]
 800d446:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800d448:	9303      	str	r3, [sp, #12]
 800d44a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d44c:	9302      	str	r3, [sp, #8]
 800d44e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d450:	9301      	str	r3, [sp, #4]
 800d452:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d45a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800d45c:	f002 ff36 	bl	80102cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800d460:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d462:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d464:	1a9b      	subs	r3, r3, r2
 800d466:	b298      	uxth	r0, r3
 800d468:	4282      	cmp	r2, r0
 800d46a:	4611      	mov	r1, r2
 800d46c:	bf28      	it	cs
 800d46e:	4601      	movcs	r1, r0
 800d470:	9024      	str	r0, [sp, #144]	; 0x90
 800d472:	460b      	mov	r3, r1
 800d474:	b1b1      	cbz	r1, 800d4a4 <st_sssa8_ch_convolve+0x364>
 800d476:	9d5a      	ldr	r5, [sp, #360]	; 0x168
 800d478:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800d47a:	4611      	mov	r1, r2
 800d47c:	fb04 5001 	mla	r0, r4, r1, r5
 800d480:	905a      	str	r0, [sp, #360]	; 0x168
 800d482:	9820      	ldr	r0, [sp, #128]	; 0x80
 800d484:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800d488:	9020      	str	r0, [sp, #128]	; 0x80
 800d48a:	9867      	ldr	r0, [sp, #412]	; 0x19c
 800d48c:	4408      	add	r0, r1
 800d48e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800d490:	9067      	str	r0, [sp, #412]	; 0x19c
 800d492:	0092      	lsls	r2, r2, #2
 800d494:	4411      	add	r1, r2
 800d496:	911f      	str	r1, [sp, #124]	; 0x7c
 800d498:	9963      	ldr	r1, [sp, #396]	; 0x18c
 800d49a:	4411      	add	r1, r2
 800d49c:	9163      	str	r1, [sp, #396]	; 0x18c
 800d49e:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d4a0:	4411      	add	r1, r2
 800d4a2:	9121      	str	r1, [sp, #132]	; 0x84
 800d4a4:	931d      	str	r3, [sp, #116]	; 0x74
 800d4a6:	e72d      	b.n	800d304 <st_sssa8_ch_convolve+0x1c4>
 800d4a8:	4286      	cmp	r6, r0
 800d4aa:	f844 5f04 	str.w	r5, [r4, #4]!
 800d4ae:	f47f ae95 	bne.w	800d1dc <st_sssa8_ch_convolve+0x9c>
 800d4b2:	e6a4      	b.n	800d1fe <st_sssa8_ch_convolve+0xbe>
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	e6f0      	b.n	800d29a <st_sssa8_ch_convolve+0x15a>
 800d4b8:	f10b 0b01 	add.w	fp, fp, #1
 800d4bc:	4651      	mov	r1, sl
 800d4be:	464a      	mov	r2, r9
 800d4c0:	4638      	mov	r0, r7
 800d4c2:	fa0f fb8b 	sxth.w	fp, fp
 800d4c6:	f003 fbd9 	bl	8010c7c <st_dsp_arm_fill_q15>
 800d4ca:	455c      	cmp	r4, fp
 800d4cc:	44c2      	add	sl, r8
 800d4ce:	dcf3      	bgt.n	800d4b8 <st_sssa8_ch_convolve+0x378>
 800d4d0:	e78d      	b.n	800d3ee <st_sssa8_ch_convolve+0x2ae>
 800d4d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	f000 81f3 	beq.w	800d8c0 <st_sssa8_ch_convolve+0x780>
 800d4da:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d4dc:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d4de:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800d4e0:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800d4e2:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 800d4e6:	004b      	lsls	r3, r1, #1
 800d4e8:	fb00 f303 	mul.w	r3, r0, r3
 800d4ec:	fb09 5303 	mla	r3, r9, r3, r5
 800d4f0:	4262      	negs	r2, r4
 800d4f2:	9310      	str	r3, [sp, #64]	; 0x40
 800d4f4:	1b0b      	subs	r3, r1, r4
 800d4f6:	fb0b f000 	mul.w	r0, fp, r0
 800d4fa:	932f      	str	r3, [sp, #188]	; 0xbc
 800d4fc:	b293      	uxth	r3, r2
 800d4fe:	2700      	movs	r7, #0
 800d500:	fa0f fa8a 	sxth.w	sl, sl
 800d504:	932d      	str	r3, [sp, #180]	; 0xb4
 800d506:	0043      	lsls	r3, r0, #1
 800d508:	901b      	str	r0, [sp, #108]	; 0x6c
 800d50a:	972e      	str	r7, [sp, #184]	; 0xb8
 800d50c:	9314      	str	r3, [sp, #80]	; 0x50
 800d50e:	46d9      	mov	r9, fp
 800d510:	f8cd a0a4 	str.w	sl, [sp, #164]	; 0xa4
 800d514:	a83c      	add	r0, sp, #240	; 0xf0
 800d516:	f000 ff7d 	bl	800e414 <ai_padding_opt_phase1>
 800d51a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d51c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d51e:	9967      	ldr	r1, [sp, #412]	; 0x19c
 800d520:	fb07 f303 	mul.w	r3, r7, r3
 800d524:	fb02 1303 	mla	r3, r2, r3, r1
 800d528:	931c      	str	r3, [sp, #112]	; 0x70
 800d52a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d52c:	b92b      	cbnz	r3, 800d53a <st_sssa8_ch_convolve+0x3fa>
 800d52e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d530:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d532:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d534:	985a      	ldr	r0, [sp, #360]	; 0x168
 800d536:	f001 fc29 	bl	800ed8c <st_int8_to16_dual>
 800d53a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d53c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800d53e:	fb03 2707 	mla	r7, r3, r7, r2
 800d542:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 800d546:	930f      	str	r3, [sp, #60]	; 0x3c
 800d548:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d54a:	9322      	str	r3, [sp, #136]	; 0x88
 800d54c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d54e:	9327      	str	r3, [sp, #156]	; 0x9c
 800d550:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d552:	9313      	str	r3, [sp, #76]	; 0x4c
 800d554:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 800d556:	932c      	str	r3, [sp, #176]	; 0xb0
 800d558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d55a:	9326      	str	r3, [sp, #152]	; 0x98
 800d55c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d55e:	9325      	str	r3, [sp, #148]	; 0x94
 800d560:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d562:	9324      	str	r3, [sp, #144]	; 0x90
 800d564:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800d566:	9323      	str	r3, [sp, #140]	; 0x8c
 800d568:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d56a:	3b01      	subs	r3, #1
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	461a      	mov	r2, r3
 800d570:	9322      	str	r3, [sp, #136]	; 0x88
 800d572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d576:	429a      	cmp	r2, r3
 800d578:	f000 8194 	beq.w	800d8a4 <st_sssa8_ch_convolve+0x764>
 800d57c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d57e:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800d580:	9940      	ldr	r1, [sp, #256]	; 0x100
 800d582:	923e      	str	r2, [sp, #248]	; 0xf8
 800d584:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d586:	e9cd 313c 	strd	r3, r1, [sp, #240]	; 0xf0
 800d58a:	2a00      	cmp	r2, #0
 800d58c:	f000 8160 	beq.w	800d850 <st_sssa8_ch_convolve+0x710>
 800d590:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d592:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800d594:	4252      	negs	r2, r2
 800d596:	2100      	movs	r1, #0
 800d598:	b292      	uxth	r2, r2
 800d59a:	910b      	str	r1, [sp, #44]	; 0x2c
 800d59c:	9207      	str	r2, [sp, #28]
 800d59e:	460a      	mov	r2, r1
 800d5a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d5a2:	9116      	str	r1, [sp, #88]	; 0x58
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d157      	bne.n	800d658 <st_sssa8_ch_convolve+0x518>
 800d5a8:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	f040 80f1 	bne.w	800d792 <st_sssa8_ch_convolve+0x652>
 800d5b0:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800d5b2:	2101      	movs	r1, #1
 800d5b4:	3b01      	subs	r3, #1
 800d5b6:	933e      	str	r3, [sp, #248]	; 0xf8
 800d5b8:	f8ad 1116 	strh.w	r1, [sp, #278]	; 0x116
 800d5bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5be:	429f      	cmp	r7, r3
 800d5c0:	dd36      	ble.n	800d630 <st_sssa8_ch_convolve+0x4f0>
 800d5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5c4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d5c6:	9708      	str	r7, [sp, #32]
 800d5c8:	fb02 1203 	mla	r2, r2, r3, r1
 800d5cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5ce:	e9dd 8b28 	ldrd	r8, fp, [sp, #160]	; 0xa0
 800d5d2:	1ad5      	subs	r5, r2, r3
 800d5d4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 800d5d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5da:	4617      	mov	r7, r2
 800d5dc:	461e      	mov	r6, r3
 800d5de:	42af      	cmp	r7, r5
 800d5e0:	da1f      	bge.n	800d622 <st_sssa8_ch_convolve+0x4e2>
 800d5e2:	9a06      	ldr	r2, [sp, #24]
 800d5e4:	2e00      	cmp	r6, #0
 800d5e6:	fb02 f203 	mul.w	r2, r2, r3
 800d5ea:	920d      	str	r2, [sp, #52]	; 0x34
 800d5ec:	f2c0 80ba 	blt.w	800d764 <st_sssa8_ch_convolve+0x624>
 800d5f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	46ba      	mov	sl, r7
 800d5f6:	dd35      	ble.n	800d664 <st_sssa8_ch_convolve+0x524>
 800d5f8:	46bc      	mov	ip, r7
 800d5fa:	f1ba 0f00 	cmp.w	sl, #0
 800d5fe:	4621      	mov	r1, r4
 800d600:	464a      	mov	r2, r9
 800d602:	4658      	mov	r0, fp
 800d604:	db03      	blt.n	800d60e <st_sssa8_ch_convolve+0x4ce>
 800d606:	9b06      	ldr	r3, [sp, #24]
 800d608:	4563      	cmp	r3, ip
 800d60a:	f300 80b9 	bgt.w	800d780 <st_sssa8_ch_convolve+0x640>
 800d60e:	f003 fb35 	bl	8010c7c <st_dsp_arm_fill_q15>
 800d612:	f10a 0a01 	add.w	sl, sl, #1
 800d616:	fa0f fa8a 	sxth.w	sl, sl
 800d61a:	4555      	cmp	r5, sl
 800d61c:	4444      	add	r4, r8
 800d61e:	46d4      	mov	ip, sl
 800d620:	dceb      	bgt.n	800d5fa <st_sssa8_ch_convolve+0x4ba>
 800d622:	3601      	adds	r6, #1
 800d624:	9a08      	ldr	r2, [sp, #32]
 800d626:	b236      	sxth	r6, r6
 800d628:	4296      	cmp	r6, r2
 800d62a:	4633      	mov	r3, r6
 800d62c:	dbd7      	blt.n	800d5de <st_sssa8_ch_convolve+0x49e>
 800d62e:	4617      	mov	r7, r2
 800d630:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d632:	42a3      	cmp	r3, r4
 800d634:	f000 80d7 	beq.w	800d7e6 <st_sssa8_ch_convolve+0x6a6>
 800d638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d63a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d63c:	3301      	adds	r3, #1
 800d63e:	b21a      	sxth	r2, r3
 800d640:	9b07      	ldr	r3, [sp, #28]
 800d642:	920b      	str	r2, [sp, #44]	; 0x2c
 800d644:	440b      	add	r3, r1
 800d646:	b29b      	uxth	r3, r3
 800d648:	9307      	str	r3, [sp, #28]
 800d64a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d64c:	4293      	cmp	r3, r2
 800d64e:	f340 80eb 	ble.w	800d828 <st_sssa8_ch_convolve+0x6e8>
 800d652:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d0a7      	beq.n	800d5a8 <st_sssa8_ch_convolve+0x468>
 800d658:	3b01      	subs	r3, #1
 800d65a:	2101      	movs	r1, #1
 800d65c:	933c      	str	r3, [sp, #240]	; 0xf0
 800d65e:	f8ad 1116 	strh.w	r1, [sp, #278]	; 0x116
 800d662:	e7ab      	b.n	800d5bc <st_sssa8_ch_convolve+0x47c>
 800d664:	f10a 0a01 	add.w	sl, sl, #1
 800d668:	4621      	mov	r1, r4
 800d66a:	464a      	mov	r2, r9
 800d66c:	4658      	mov	r0, fp
 800d66e:	fa0f fa8a 	sxth.w	sl, sl
 800d672:	f003 fb03 	bl	8010c7c <st_dsp_arm_fill_q15>
 800d676:	4555      	cmp	r5, sl
 800d678:	4444      	add	r4, r8
 800d67a:	dcf3      	bgt.n	800d664 <st_sssa8_ch_convolve+0x524>
 800d67c:	e7d1      	b.n	800d622 <st_sssa8_ch_convolve+0x4e2>
 800d67e:	3b01      	subs	r3, #1
 800d680:	2201      	movs	r2, #1
 800d682:	933c      	str	r3, [sp, #240]	; 0xf0
 800d684:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800d688:	e680      	b.n	800d38c <st_sssa8_ch_convolve+0x24c>
 800d68a:	46b3      	mov	fp, r6
 800d68c:	f10b 0b01 	add.w	fp, fp, #1
 800d690:	4651      	mov	r1, sl
 800d692:	464a      	mov	r2, r9
 800d694:	4638      	mov	r0, r7
 800d696:	fa0f fb8b 	sxth.w	fp, fp
 800d69a:	f003 faef 	bl	8010c7c <st_dsp_arm_fill_q15>
 800d69e:	45a3      	cmp	fp, r4
 800d6a0:	44c2      	add	sl, r8
 800d6a2:	dbf3      	blt.n	800d68c <st_sssa8_ch_convolve+0x54c>
 800d6a4:	e6a3      	b.n	800d3ee <st_sssa8_ch_convolve+0x2ae>
 800d6a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6a8:	eb03 000c 	add.w	r0, r3, ip
 800d6ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6ae:	fb09 3000 	mla	r0, r9, r0, r3
 800d6b2:	f001 facd 	bl	800ec50 <st_int8_to16_no_shift>
 800d6b6:	e692      	b.n	800d3de <st_sssa8_ch_convolve+0x29e>
 800d6b8:	f8bd 2114 	ldrh.w	r2, [sp, #276]	; 0x114
 800d6bc:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	2a01      	cmp	r2, #1
 800d6c4:	933d      	str	r3, [sp, #244]	; 0xf4
 800d6c6:	f43f ae61 	beq.w	800d38c <st_sssa8_ch_convolve+0x24c>
 800d6ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6cc:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800d6d0:	429e      	cmp	r6, r3
 800d6d2:	f77f ae93 	ble.w	800d3fc <st_sssa8_ch_convolve+0x2bc>
 800d6d6:	f8cd 8020 	str.w	r8, [sp, #32]
 800d6da:	970d      	str	r7, [sp, #52]	; 0x34
 800d6dc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800d6e0:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800d6e4:	4657      	mov	r7, sl
 800d6e6:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 800d6ea:	461d      	mov	r5, r3
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	9b06      	ldr	r3, [sp, #24]
 800d6f0:	3501      	adds	r5, #1
 800d6f2:	fb00 4003 	mla	r0, r0, r3, r4
 800d6f6:	fb09 b000 	mla	r0, r9, r0, fp
 800d6fa:	4639      	mov	r1, r7
 800d6fc:	b22d      	sxth	r5, r5
 800d6fe:	4642      	mov	r2, r8
 800d700:	f001 faa6 	bl	800ec50 <st_int8_to16_no_shift>
 800d704:	42b5      	cmp	r5, r6
 800d706:	4457      	add	r7, sl
 800d708:	4628      	mov	r0, r5
 800d70a:	dbf0      	blt.n	800d6ee <st_sssa8_ch_convolve+0x5ae>
 800d70c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d70e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d712:	46ba      	mov	sl, r7
 800d714:	4553      	cmp	r3, sl
 800d716:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d718:	f47f ae74 	bne.w	800d404 <st_sssa8_ch_convolve+0x2c4>
 800d71c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d71e:	9305      	str	r3, [sp, #20]
 800d720:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d722:	9304      	str	r3, [sp, #16]
 800d724:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800d726:	9303      	str	r3, [sp, #12]
 800d728:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d72a:	9302      	str	r3, [sp, #8]
 800d72c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d72e:	9301      	str	r3, [sp, #4]
 800d730:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d736:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d738:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d73a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800d73c:	f002 fab2 	bl	800fca4 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800d740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d742:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d744:	901b      	str	r0, [sp, #108]	; 0x6c
 800d746:	3301      	adds	r3, #1
 800d748:	b21a      	sxth	r2, r3
 800d74a:	9b07      	ldr	r3, [sp, #28]
 800d74c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d74e:	440b      	add	r3, r1
 800d750:	b29b      	uxth	r3, r3
 800d752:	9307      	str	r3, [sp, #28]
 800d754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d756:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800d75a:	4293      	cmp	r3, r2
 800d75c:	4614      	mov	r4, r2
 800d75e:	f73f ae07 	bgt.w	800d370 <st_sssa8_ch_convolve+0x230>
 800d762:	e65c      	b.n	800d41e <st_sssa8_ch_convolve+0x2de>
 800d764:	46ba      	mov	sl, r7
 800d766:	f10a 0a01 	add.w	sl, sl, #1
 800d76a:	4621      	mov	r1, r4
 800d76c:	464a      	mov	r2, r9
 800d76e:	4658      	mov	r0, fp
 800d770:	fa0f fa8a 	sxth.w	sl, sl
 800d774:	f003 fa82 	bl	8010c7c <st_dsp_arm_fill_q15>
 800d778:	45aa      	cmp	sl, r5
 800d77a:	4444      	add	r4, r8
 800d77c:	dbf3      	blt.n	800d766 <st_sssa8_ch_convolve+0x626>
 800d77e:	e750      	b.n	800d622 <st_sssa8_ch_convolve+0x4e2>
 800d780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d782:	eb03 000c 	add.w	r0, r3, ip
 800d786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d788:	fb09 3000 	mla	r0, r9, r0, r3
 800d78c:	f001 fa60 	bl	800ec50 <st_int8_to16_no_shift>
 800d790:	e73f      	b.n	800d612 <st_sssa8_ch_convolve+0x4d2>
 800d792:	f8bd 1114 	ldrh.w	r1, [sp, #276]	; 0x114
 800d796:	f8ad 1116 	strh.w	r1, [sp, #278]	; 0x116
 800d79a:	3b01      	subs	r3, #1
 800d79c:	2901      	cmp	r1, #1
 800d79e:	933d      	str	r3, [sp, #244]	; 0xf4
 800d7a0:	f43f af0c 	beq.w	800d5bc <st_sssa8_ch_convolve+0x47c>
 800d7a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7a6:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 800d7aa:	429f      	cmp	r7, r3
 800d7ac:	f77f af40 	ble.w	800d630 <st_sssa8_ch_convolve+0x4f0>
 800d7b0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d7b4:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 800d7b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d7bc:	461e      	mov	r6, r3
 800d7be:	4618      	mov	r0, r3
 800d7c0:	9b06      	ldr	r3, [sp, #24]
 800d7c2:	3601      	adds	r6, #1
 800d7c4:	fb00 5003 	mla	r0, r0, r3, r5
 800d7c8:	fb09 a000 	mla	r0, r9, r0, sl
 800d7cc:	4621      	mov	r1, r4
 800d7ce:	b236      	sxth	r6, r6
 800d7d0:	465a      	mov	r2, fp
 800d7d2:	f001 fa3d 	bl	800ec50 <st_int8_to16_no_shift>
 800d7d6:	42be      	cmp	r6, r7
 800d7d8:	4444      	add	r4, r8
 800d7da:	4630      	mov	r0, r6
 800d7dc:	dbf0      	blt.n	800d7c0 <st_sssa8_ch_convolve+0x680>
 800d7de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7e0:	42a3      	cmp	r3, r4
 800d7e2:	f47f af29 	bne.w	800d638 <st_sssa8_ch_convolve+0x4f8>
 800d7e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d7e8:	9305      	str	r3, [sp, #20]
 800d7ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d7ec:	9304      	str	r3, [sp, #16]
 800d7ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d7f0:	9303      	str	r3, [sp, #12]
 800d7f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d7f4:	9302      	str	r3, [sp, #8]
 800d7f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d7f8:	9301      	str	r3, [sp, #4]
 800d7fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800d800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d802:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d804:	981a      	ldr	r0, [sp, #104]	; 0x68
 800d806:	f002 fa4d 	bl	800fca4 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800d80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d80c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d80e:	9016      	str	r0, [sp, #88]	; 0x58
 800d810:	3301      	adds	r3, #1
 800d812:	b21a      	sxth	r2, r3
 800d814:	9b07      	ldr	r3, [sp, #28]
 800d816:	920b      	str	r2, [sp, #44]	; 0x2c
 800d818:	440b      	add	r3, r1
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	9307      	str	r3, [sp, #28]
 800d81e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d820:	4293      	cmp	r3, r2
 800d822:	dd15      	ble.n	800d850 <st_sssa8_ch_convolve+0x710>
 800d824:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800d826:	e714      	b.n	800d652 <st_sssa8_ch_convolve+0x512>
 800d828:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d82a:	428c      	cmp	r4, r1
 800d82c:	d010      	beq.n	800d850 <st_sssa8_ch_convolve+0x710>
 800d82e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d830:	9305      	str	r3, [sp, #20]
 800d832:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d834:	9304      	str	r3, [sp, #16]
 800d836:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d838:	9303      	str	r3, [sp, #12]
 800d83a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d83c:	9302      	str	r3, [sp, #8]
 800d83e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d840:	9301      	str	r3, [sp, #4]
 800d842:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800d848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d84a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800d84c:	f002 fd3e 	bl	80102cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800d850:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d852:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d854:	1a9b      	subs	r3, r3, r2
 800d856:	b299      	uxth	r1, r3
 800d858:	428a      	cmp	r2, r1
 800d85a:	4613      	mov	r3, r2
 800d85c:	bf28      	it	cs
 800d85e:	460a      	movcs	r2, r1
 800d860:	b294      	uxth	r4, r2
 800d862:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d864:	9127      	str	r1, [sp, #156]	; 0x9c
 800d866:	441a      	add	r2, r3
 800d868:	921c      	str	r2, [sp, #112]	; 0x70
 800d86a:	b90c      	cbnz	r4, 800d870 <st_sssa8_ch_convolve+0x730>
 800d86c:	9413      	str	r4, [sp, #76]	; 0x4c
 800d86e:	e67b      	b.n	800d568 <st_sssa8_ch_convolve+0x428>
 800d870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d872:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800d874:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800d876:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d878:	4619      	mov	r1, r3
 800d87a:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 800d87e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800d880:	9124      	str	r1, [sp, #144]	; 0x90
 800d882:	009d      	lsls	r5, r3, #2
 800d884:	442e      	add	r6, r5
 800d886:	9625      	str	r6, [sp, #148]	; 0x94
 800d888:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800d88a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d88c:	442e      	add	r6, r5
 800d88e:	9623      	str	r6, [sp, #140]	; 0x8c
 800d890:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800d892:	fb02 0003 	mla	r0, r2, r3, r0
 800d896:	442e      	add	r6, r5
 800d898:	4623      	mov	r3, r4
 800d89a:	902c      	str	r0, [sp, #176]	; 0xb0
 800d89c:	9626      	str	r6, [sp, #152]	; 0x98
 800d89e:	f001 fa75 	bl	800ed8c <st_int8_to16_dual>
 800d8a2:	e7e3      	b.n	800d86c <st_sssa8_ch_convolve+0x72c>
 800d8a4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d8a6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	b21a      	sxth	r2, r3
 800d8ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d8ae:	922e      	str	r2, [sp, #184]	; 0xb8
 800d8b0:	440b      	add	r3, r1
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	932d      	str	r3, [sp, #180]	; 0xb4
 800d8b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	4617      	mov	r7, r2
 800d8bc:	f73f ae2a 	bgt.w	800d514 <st_sssa8_ch_convolve+0x3d4>
 800d8c0:	2000      	movs	r0, #0
 800d8c2:	b051      	add	sp, #324	; 0x144
 800d8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d0f8      	beq.n	800d8c0 <st_sssa8_ch_convolve+0x780>
 800d8ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d8d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800d8d2:	005a      	lsls	r2, r3, #1
 800d8d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8d6:	fb03 f10b 	mul.w	r1, r3, fp
 800d8da:	fb03 f202 	mul.w	r2, r3, r2
 800d8de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d8e0:	9114      	str	r1, [sp, #80]	; 0x50
 800d8e2:	fb09 5202 	mla	r2, r9, r2, r5
 800d8e6:	425b      	negs	r3, r3
 800d8e8:	eba4 0408 	sub.w	r4, r4, r8
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	9210      	str	r2, [sp, #64]	; 0x40
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	004a      	lsls	r2, r1, #1
 800d8f4:	941b      	str	r4, [sp, #108]	; 0x6c
 800d8f6:	fa0f f88a 	sxth.w	r8, sl
 800d8fa:	901a      	str	r0, [sp, #104]	; 0x68
 800d8fc:	9213      	str	r2, [sp, #76]	; 0x4c
 800d8fe:	9316      	str	r3, [sp, #88]	; 0x58
 800d900:	4604      	mov	r4, r0
 800d902:	46aa      	mov	sl, r5
 800d904:	a83c      	add	r0, sp, #240	; 0xf0
 800d906:	f000 fd85 	bl	800e414 <ai_padding_opt_phase1>
 800d90a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d063      	beq.n	800d9d8 <st_sssa8_ch_convolve+0x898>
 800d910:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	; 0x88
 800d914:	1a9a      	subs	r2, r3, r2
 800d916:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d918:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d91a:	425b      	negs	r3, r3
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	2100      	movs	r1, #0
 800d920:	9307      	str	r3, [sp, #28]
 800d922:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 800d926:	910b      	str	r1, [sp, #44]	; 0x2c
 800d928:	fb00 2604 	mla	r6, r0, r4, r2
 800d92c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d92e:	460a      	mov	r2, r1
 800d930:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800d932:	2b00      	cmp	r3, #0
 800d934:	f040 80f4 	bne.w	800db20 <st_sssa8_ch_convolve+0x9e0>
 800d938:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	f040 810b 	bne.w	800db56 <st_sssa8_ch_convolve+0xa16>
 800d940:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800d942:	2101      	movs	r1, #1
 800d944:	3b01      	subs	r3, #1
 800d946:	933e      	str	r3, [sp, #248]	; 0xf8
 800d948:	f8ad 1116 	strh.w	r1, [sp, #278]	; 0x116
 800d94c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d94e:	42b3      	cmp	r3, r6
 800d950:	da32      	bge.n	800d9b8 <st_sssa8_ch_convolve+0x878>
 800d952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d954:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d956:	9608      	str	r6, [sp, #32]
 800d958:	fb02 1203 	mla	r2, r2, r3, r1
 800d95c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d95e:	1ad4      	subs	r4, r2, r3
 800d960:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 800d964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d966:	4616      	mov	r6, r2
 800d968:	461d      	mov	r5, r3
 800d96a:	42b4      	cmp	r4, r6
 800d96c:	dd1d      	ble.n	800d9aa <st_sssa8_ch_convolve+0x86a>
 800d96e:	9a06      	ldr	r2, [sp, #24]
 800d970:	2d00      	cmp	r5, #0
 800d972:	fb03 f202 	mul.w	r2, r3, r2
 800d976:	920d      	str	r2, [sp, #52]	; 0x34
 800d978:	f2c0 80d8 	blt.w	800db2c <st_sssa8_ch_convolve+0x9ec>
 800d97c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d97e:	429a      	cmp	r2, r3
 800d980:	4637      	mov	r7, r6
 800d982:	f340 80c2 	ble.w	800db0a <st_sssa8_ch_convolve+0x9ca>
 800d986:	46b4      	mov	ip, r6
 800d988:	2f00      	cmp	r7, #0
 800d98a:	4651      	mov	r1, sl
 800d98c:	465a      	mov	r2, fp
 800d98e:	4640      	mov	r0, r8
 800d990:	db03      	blt.n	800d99a <st_sssa8_ch_convolve+0x85a>
 800d992:	9b06      	ldr	r3, [sp, #24]
 800d994:	4563      	cmp	r3, ip
 800d996:	f300 80d5 	bgt.w	800db44 <st_sssa8_ch_convolve+0xa04>
 800d99a:	f003 f96f 	bl	8010c7c <st_dsp_arm_fill_q15>
 800d99e:	3701      	adds	r7, #1
 800d9a0:	b23f      	sxth	r7, r7
 800d9a2:	42bc      	cmp	r4, r7
 800d9a4:	44ca      	add	sl, r9
 800d9a6:	46bc      	mov	ip, r7
 800d9a8:	dcee      	bgt.n	800d988 <st_sssa8_ch_convolve+0x848>
 800d9aa:	3501      	adds	r5, #1
 800d9ac:	9a08      	ldr	r2, [sp, #32]
 800d9ae:	b22d      	sxth	r5, r5
 800d9b0:	4295      	cmp	r5, r2
 800d9b2:	462b      	mov	r3, r5
 800d9b4:	dbd9      	blt.n	800d96a <st_sssa8_ch_convolve+0x82a>
 800d9b6:	4616      	mov	r6, r2
 800d9b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9ba:	4553      	cmp	r3, sl
 800d9bc:	f000 80ff 	beq.w	800dbbe <st_sssa8_ch_convolve+0xa7e>
 800d9c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	b21a      	sxth	r2, r3
 800d9c8:	9b07      	ldr	r3, [sp, #28]
 800d9ca:	920b      	str	r2, [sp, #44]	; 0x2c
 800d9cc:	440b      	add	r3, r1
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	9307      	str	r3, [sp, #28]
 800d9d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	dcab      	bgt.n	800d930 <st_sssa8_ch_convolve+0x7f0>
 800d9d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d9da:	9919      	ldr	r1, [sp, #100]	; 0x64
 800d9dc:	3301      	adds	r3, #1
 800d9de:	b21a      	sxth	r2, r3
 800d9e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d9e2:	921a      	str	r2, [sp, #104]	; 0x68
 800d9e4:	440b      	add	r3, r1
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	9316      	str	r3, [sp, #88]	; 0x58
 800d9ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	4614      	mov	r4, r2
 800d9f0:	dc88      	bgt.n	800d904 <st_sssa8_ch_convolve+0x7c4>
 800d9f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d9f4:	4552      	cmp	r2, sl
 800d9f6:	f43f af63 	beq.w	800d8c0 <st_sssa8_ch_convolve+0x780>
 800d9fa:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800d9fc:	2900      	cmp	r1, #0
 800d9fe:	f43f af5f 	beq.w	800d8c0 <st_sssa8_ch_convolve+0x780>
 800da02:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800da04:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800da06:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800da08:	4893      	ldr	r0, [pc, #588]	; (800dc58 <st_sssa8_ch_convolve+0xb18>)
 800da0a:	f1a7 0902 	sub.w	r9, r7, #2
 800da0e:	9f63      	ldr	r7, [sp, #396]	; 0x18c
 800da10:	f1a7 0a04 	sub.w	sl, r7, #4
 800da14:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800da16:	08b5      	lsrs	r5, r6, #2
 800da18:	1e6b      	subs	r3, r5, #1
 800da1a:	f1a7 0b04 	sub.w	fp, r7, #4
 800da1e:	9f67      	ldr	r7, [sp, #412]	; 0x19c
 800da20:	9509      	str	r5, [sp, #36]	; 0x24
 800da22:	b29b      	uxth	r3, r3
 800da24:	4439      	add	r1, r7
 800da26:	3301      	adds	r3, #1
 800da28:	3c04      	subs	r4, #4
 800da2a:	9107      	str	r1, [sp, #28]
 800da2c:	0099      	lsls	r1, r3, #2
 800da2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800da32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da34:	9306      	str	r3, [sp, #24]
 800da36:	f006 0803 	and.w	r8, r6, #3
 800da3a:	9108      	str	r1, [sp, #32]
 800da3c:	9f5a      	ldr	r7, [sp, #360]	; 0x168
 800da3e:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800da42:	2a00      	cmp	r2, #0
 800da44:	d05f      	beq.n	800db06 <st_sssa8_ch_convolve+0x9c6>
 800da46:	9a08      	ldr	r2, [sp, #32]
 800da48:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800da4c:	eb07 0e02 	add.w	lr, r7, r2
 800da50:	f857 2b04 	ldr.w	r2, [r7], #4
 800da54:	fa2f f582 	sxtb16	r5, r2
 800da58:	b2ae      	uxth	r6, r5
 800da5a:	ea4f 2232 	mov.w	r2, r2, ror #8
 800da5e:	f8dc 1000 	ldr.w	r1, [ip]
 800da62:	fa2f f282 	sxtb16	r2, r2
 800da66:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800da6a:	fb26 3101 	smlad	r1, r6, r1, r3
 800da6e:	ea02 0300 	and.w	r3, r2, r0
 800da72:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 800da76:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800da7a:	f10c 0c08 	add.w	ip, ip, #8
 800da7e:	fb23 1302 	smlad	r3, r3, r2, r1
 800da82:	4577      	cmp	r7, lr
 800da84:	d1e4      	bne.n	800da50 <st_sssa8_ch_convolve+0x910>
 800da86:	9a06      	ldr	r2, [sp, #24]
 800da88:	f1b8 0f00 	cmp.w	r8, #0
 800da8c:	d017      	beq.n	800dabe <st_sssa8_ch_convolve+0x97e>
 800da8e:	f997 1000 	ldrsb.w	r1, [r7]
 800da92:	8815      	ldrh	r5, [r2, #0]
 800da94:	f1b8 0f01 	cmp.w	r8, #1
 800da98:	fb15 3301 	smlabb	r3, r5, r1, r3
 800da9c:	f000 80c6 	beq.w	800dc2c <st_sssa8_ch_convolve+0xaec>
 800daa0:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800daa4:	8855      	ldrh	r5, [r2, #2]
 800daa6:	f1b8 0f02 	cmp.w	r8, #2
 800daaa:	fb15 3301 	smlabb	r3, r5, r1, r3
 800daae:	f000 80d1 	beq.w	800dc54 <st_sssa8_ch_convolve+0xb14>
 800dab2:	8891      	ldrh	r1, [r2, #4]
 800dab4:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800dab8:	3703      	adds	r7, #3
 800daba:	fb11 3302 	smlabb	r3, r1, r2, r3
 800dabe:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 800dac0:	f939 1f02 	ldrsh.w	r1, [r9, #2]!
 800dac4:	f85a 6f04 	ldr.w	r6, [sl, #4]!
 800dac8:	f85b 5f04 	ldr.w	r5, [fp, #4]!
 800dacc:	3201      	adds	r2, #1
 800dace:	2915      	cmp	r1, #21
 800dad0:	9267      	str	r2, [sp, #412]	; 0x19c
 800dad2:	f340 8095 	ble.w	800dc00 <st_sssa8_ch_convolve+0xac0>
 800dad6:	1e8a      	subs	r2, r1, #2
 800dad8:	f04f 0c01 	mov.w	ip, #1
 800dadc:	3901      	subs	r1, #1
 800dade:	fa0c f202 	lsl.w	r2, ip, r2
 800dae2:	fb53 2306 	smmla	r3, r3, r6, r2
 800dae6:	410b      	asrs	r3, r1
 800dae8:	442b      	add	r3, r5
 800daea:	f303 0307 	ssat	r3, #8, r3
 800daee:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 800daf0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800daf4:	9b07      	ldr	r3, [sp, #28]
 800daf6:	4293      	cmp	r3, r2
 800daf8:	f43f aee2 	beq.w	800d8c0 <st_sssa8_ch_convolve+0x780>
 800dafc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dafe:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800db02:	2a00      	cmp	r2, #0
 800db04:	d19f      	bne.n	800da46 <st_sssa8_ch_convolve+0x906>
 800db06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800db08:	e7be      	b.n	800da88 <st_sssa8_ch_convolve+0x948>
 800db0a:	3701      	adds	r7, #1
 800db0c:	4651      	mov	r1, sl
 800db0e:	465a      	mov	r2, fp
 800db10:	4640      	mov	r0, r8
 800db12:	b23f      	sxth	r7, r7
 800db14:	f003 f8b2 	bl	8010c7c <st_dsp_arm_fill_q15>
 800db18:	42bc      	cmp	r4, r7
 800db1a:	44ca      	add	sl, r9
 800db1c:	dcf5      	bgt.n	800db0a <st_sssa8_ch_convolve+0x9ca>
 800db1e:	e744      	b.n	800d9aa <st_sssa8_ch_convolve+0x86a>
 800db20:	3b01      	subs	r3, #1
 800db22:	2101      	movs	r1, #1
 800db24:	933c      	str	r3, [sp, #240]	; 0xf0
 800db26:	f8ad 1116 	strh.w	r1, [sp, #278]	; 0x116
 800db2a:	e70f      	b.n	800d94c <st_sssa8_ch_convolve+0x80c>
 800db2c:	4637      	mov	r7, r6
 800db2e:	3701      	adds	r7, #1
 800db30:	4651      	mov	r1, sl
 800db32:	465a      	mov	r2, fp
 800db34:	4640      	mov	r0, r8
 800db36:	b23f      	sxth	r7, r7
 800db38:	f003 f8a0 	bl	8010c7c <st_dsp_arm_fill_q15>
 800db3c:	42bc      	cmp	r4, r7
 800db3e:	44ca      	add	sl, r9
 800db40:	dcf5      	bgt.n	800db2e <st_sssa8_ch_convolve+0x9ee>
 800db42:	e732      	b.n	800d9aa <st_sssa8_ch_convolve+0x86a>
 800db44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db46:	eb03 000c 	add.w	r0, r3, ip
 800db4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db4c:	fb0b 3000 	mla	r0, fp, r0, r3
 800db50:	f001 f87e 	bl	800ec50 <st_int8_to16_no_shift>
 800db54:	e723      	b.n	800d99e <st_sssa8_ch_convolve+0x85e>
 800db56:	f8bd 1114 	ldrh.w	r1, [sp, #276]	; 0x114
 800db5a:	f8ad 1116 	strh.w	r1, [sp, #278]	; 0x116
 800db5e:	3b01      	subs	r3, #1
 800db60:	2901      	cmp	r1, #1
 800db62:	933d      	str	r3, [sp, #244]	; 0xf4
 800db64:	f43f aef2 	beq.w	800d94c <st_sssa8_ch_convolve+0x80c>
 800db68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db6a:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800db6e:	42b3      	cmp	r3, r6
 800db70:	f6bf af22 	bge.w	800d9b8 <st_sssa8_ch_convolve+0x878>
 800db74:	4657      	mov	r7, sl
 800db76:	f8cd 9020 	str.w	r9, [sp, #32]
 800db7a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800db7e:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 800db82:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800db86:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800db8a:	461d      	mov	r5, r3
 800db8c:	4618      	mov	r0, r3
 800db8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db90:	fb00 4008 	mla	r0, r0, r8, r4
 800db94:	3501      	adds	r5, #1
 800db96:	fb0b 3000 	mla	r0, fp, r0, r3
 800db9a:	4639      	mov	r1, r7
 800db9c:	b22d      	sxth	r5, r5
 800db9e:	4652      	mov	r2, sl
 800dba0:	f001 f856 	bl	800ec50 <st_int8_to16_no_shift>
 800dba4:	42b5      	cmp	r5, r6
 800dba6:	444f      	add	r7, r9
 800dba8:	4628      	mov	r0, r5
 800dbaa:	dbf0      	blt.n	800db8e <st_sssa8_ch_convolve+0xa4e>
 800dbac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dbb2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800dbb6:	46ba      	mov	sl, r7
 800dbb8:	4553      	cmp	r3, sl
 800dbba:	f47f af01 	bne.w	800d9c0 <st_sssa8_ch_convolve+0x880>
 800dbbe:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800dbc0:	9304      	str	r3, [sp, #16]
 800dbc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dbc4:	9303      	str	r3, [sp, #12]
 800dbc6:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800dbc8:	9302      	str	r3, [sp, #8]
 800dbca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dbcc:	9301      	str	r3, [sp, #4]
 800dbce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dbd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dbd6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dbd8:	985a      	ldr	r0, [sp, #360]	; 0x168
 800dbda:	f000 fc63 	bl	800e4a4 <st_sssa8_ch_nn_mat_mult_kernel>
 800dbde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbe0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dbe2:	9067      	str	r0, [sp, #412]	; 0x19c
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	b21a      	sxth	r2, r3
 800dbe8:	9b07      	ldr	r3, [sp, #28]
 800dbea:	920b      	str	r2, [sp, #44]	; 0x2c
 800dbec:	440b      	add	r3, r1
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	9307      	str	r3, [sp, #28]
 800dbf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbf4:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	f73f ae99 	bgt.w	800d930 <st_sssa8_ch_convolve+0x7f0>
 800dbfe:	e6eb      	b.n	800d9d8 <st_sssa8_ch_convolve+0x898>
 800dc00:	2900      	cmp	r1, #0
 800dc02:	dd15      	ble.n	800dc30 <st_sssa8_ch_convolve+0xaf0>
 800dc04:	005b      	lsls	r3, r3, #1
 800dc06:	fb53 5306 	smmla	r3, r3, r6, r5
 800dc0a:	fa43 f101 	asr.w	r1, r3, r1
 800dc0e:	f301 0307 	ssat	r3, #8, r1
 800dc12:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dc16:	e76d      	b.n	800daf4 <st_sssa8_ch_convolve+0x9b4>
 800dc18:	4611      	mov	r1, r2
 800dc1a:	985a      	ldr	r0, [sp, #360]	; 0x168
 800dc1c:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 800dc20:	f001 f8b4 	bl	800ed8c <st_int8_to16_dual>
 800dc24:	2301      	movs	r3, #1
 800dc26:	932b      	str	r3, [sp, #172]	; 0xac
 800dc28:	f7ff bb20 	b.w	800d26c <st_sssa8_ch_convolve+0x12c>
 800dc2c:	3701      	adds	r7, #1
 800dc2e:	e746      	b.n	800dabe <st_sssa8_ch_convolve+0x97e>
 800dc30:	f1c1 0101 	rsb	r1, r1, #1
 800dc34:	408b      	lsls	r3, r1
 800dc36:	f303 031f 	ssat	r3, #32, r3
 800dc3a:	fb53 f316 	smmulr	r3, r3, r6
 800dc3e:	442b      	add	r3, r5
 800dc40:	f303 0307 	ssat	r3, #8, r3
 800dc44:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dc48:	e754      	b.n	800daf4 <st_sssa8_ch_convolve+0x9b4>
 800dc4a:	4614      	mov	r4, r2
 800dc4c:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 800dc50:	f7ff bad9 	b.w	800d206 <st_sssa8_ch_convolve+0xc6>
 800dc54:	3702      	adds	r7, #2
 800dc56:	e732      	b.n	800dabe <st_sssa8_ch_convolve+0x97e>
 800dc58:	ffff0000 	.word	0xffff0000

0800dc5c <st_sssa8_ch_convolve_1x1_WeightsPrefetch>:
 800dc5c:	b570      	push	{r4, r5, r6, lr}
 800dc5e:	685e      	ldr	r6, [r3, #4]
 800dc60:	f06f 0509 	mvn.w	r5, #9
 800dc64:	fb05 6501 	mla	r5, r5, r1, r6
 800dc68:	fb02 f601 	mul.w	r6, r2, r1
 800dc6c:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
 800dc70:	db06      	blt.n	800dc80 <st_sssa8_ch_convolve_1x1_WeightsPrefetch+0x24>
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800dc78:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800dc7c:	f001 f9dc 	bl	800f038 <st_sssa8_ch_fullW_prefetch>
 800dc80:	2000      	movs	r0, #0
 800dc82:	bd70      	pop	{r4, r5, r6, pc}

0800dc84 <st_sssa8_ch_convolve_1x1>:
 800dc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc88:	b091      	sub	sp, #68	; 0x44
 800dc8a:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 800dc8e:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 800dc92:	f99d 4094 	ldrsb.w	r4, [sp, #148]	; 0x94
 800dc96:	940e      	str	r4, [sp, #56]	; 0x38
 800dc98:	2d01      	cmp	r5, #1
 800dc9a:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 800dc9e:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 800dca2:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
 800dca6:	f8bd 907c 	ldrh.w	r9, [sp, #124]	; 0x7c
 800dcaa:	f8bd a080 	ldrh.w	sl, [sp, #128]	; 0x80
 800dcae:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 800dcb2:	f99d c098 	ldrsb.w	ip, [sp, #152]	; 0x98
 800dcb6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800dcb8:	920d      	str	r2, [sp, #52]	; 0x34
 800dcba:	d165      	bne.n	800dd88 <st_sssa8_ch_convolve_1x1+0x104>
 800dcbc:	2e01      	cmp	r6, #1
 800dcbe:	d163      	bne.n	800dd88 <st_sssa8_ch_convolve_1x1+0x104>
 800dcc0:	f1b8 0f00 	cmp.w	r8, #0
 800dcc4:	d160      	bne.n	800dd88 <st_sssa8_ch_convolve_1x1+0x104>
 800dcc6:	f1b9 0f00 	cmp.w	r9, #0
 800dcca:	d15d      	bne.n	800dd88 <st_sssa8_ch_convolve_1x1+0x104>
 800dccc:	f1ba 0f01 	cmp.w	sl, #1
 800dcd0:	d15a      	bne.n	800dd88 <st_sssa8_ch_convolve_1x1+0x104>
 800dcd2:	f1be 0f01 	cmp.w	lr, #1
 800dcd6:	d157      	bne.n	800dd88 <st_sssa8_ch_convolve_1x1+0x104>
 800dcd8:	e9d4 2100 	ldrd	r2, r1, [r4]
 800dcdc:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 800dce0:	eb0a 0907 	add.w	r9, sl, r7
 800dce4:	eb02 0949 	add.w	r9, r2, r9, lsl #1
 800dce8:	ebc7 7887 	rsb	r8, r7, r7, lsl #30
 800dcec:	910f      	str	r1, [sp, #60]	; 0x3c
 800dcee:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 800dcf2:	2f00      	cmp	r7, #0
 800dcf4:	d04d      	beq.n	800dd92 <st_sssa8_ch_convolve_1x1+0x10e>
 800dcf6:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800dcf8:	ea4f 0b47 	mov.w	fp, r7, lsl #1
 800dcfc:	eb04 050b 	add.w	r5, r4, fp
 800dd00:	f1a8 0604 	sub.w	r6, r8, #4
 800dd04:	f934 2b02 	ldrsh.w	r2, [r4], #2
 800dd08:	1e51      	subs	r1, r2, #1
 800dd0a:	b289      	uxth	r1, r1
 800dd0c:	fa0e f002 	lsl.w	r0, lr, r2
 800dd10:	2914      	cmp	r1, #20
 800dd12:	fa0c f202 	lsl.w	r2, ip, r2
 800dd16:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 800dd1a:	d830      	bhi.n	800dd7e <st_sssa8_ch_convolve_1x1+0xfa>
 800dd1c:	42a5      	cmp	r5, r4
 800dd1e:	f846 2f04 	str.w	r2, [r6, #4]!
 800dd22:	d1ef      	bne.n	800dd04 <st_sssa8_ch_convolve_1x1+0x80>
 800dd24:	9524      	str	r5, [sp, #144]	; 0x90
 800dd26:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dd28:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dd2a:	44d0      	add	r8, sl
 800dd2c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800dd30:	f06f 0409 	mvn.w	r4, #9
 800dd34:	fb02 f201 	mul.w	r2, r2, r1
 800dd38:	fb04 5407 	mla	r4, r4, r7, r5
 800dd3c:	fb07 f503 	mul.w	r5, r7, r3
 800dd40:	ebb4 0f45 	cmp.w	r4, r5, lsl #1
 800dd44:	9202      	str	r2, [sp, #8]
 800dd46:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800dd48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd4a:	f8cd 901c 	str.w	r9, [sp, #28]
 800dd4e:	bfac      	ite	ge
 800dd50:	4649      	movge	r1, r9
 800dd52:	2100      	movlt	r1, #0
 800dd54:	e9cd 3204 	strd	r3, r2, [sp, #16]
 800dd58:	eba4 050b 	sub.w	r5, r4, fp
 800dd5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd5e:	9300      	str	r3, [sp, #0]
 800dd60:	eba8 040a 	sub.w	r4, r8, sl
 800dd64:	9108      	str	r1, [sp, #32]
 800dd66:	9501      	str	r5, [sp, #4]
 800dd68:	9406      	str	r4, [sp, #24]
 800dd6a:	9703      	str	r7, [sp, #12]
 800dd6c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800dd6e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800dd70:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dd72:	f001 fa53 	bl	800f21c <st_sssa8_ch_nn_mat_mult_nt_t>
 800dd76:	2000      	movs	r0, #0
 800dd78:	b011      	add	sp, #68	; 0x44
 800dd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd7e:	42a5      	cmp	r5, r4
 800dd80:	f846 cf04 	str.w	ip, [r6, #4]!
 800dd84:	d1be      	bne.n	800dd04 <st_sssa8_ch_convolve_1x1+0x80>
 800dd86:	e7cd      	b.n	800dd24 <st_sssa8_ch_convolve_1x1+0xa0>
 800dd88:	f06f 0002 	mvn.w	r0, #2
 800dd8c:	b011      	add	sp, #68	; 0x44
 800dd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd92:	46bb      	mov	fp, r7
 800dd94:	460d      	mov	r5, r1
 800dd96:	e7c9      	b.n	800dd2c <st_sssa8_ch_convolve_1x1+0xa8>

0800dd98 <st_sssa8_fully_connected>:
 800dd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9c:	b097      	sub	sp, #92	; 0x5c
 800dd9e:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 800dda2:	f9b5 5000 	ldrsh.w	r5, [r5]
 800dda6:	6824      	ldr	r4, [r4, #0]
 800dda8:	9409      	str	r4, [sp, #36]	; 0x24
 800ddaa:	f99d 408c 	ldrsb.w	r4, [sp, #140]	; 0x8c
 800ddae:	9407      	str	r4, [sp, #28]
 800ddb0:	1e6c      	subs	r4, r5, #1
 800ddb2:	940d      	str	r4, [sp, #52]	; 0x34
 800ddb4:	b2a4      	uxth	r4, r4
 800ddb6:	2c14      	cmp	r4, #20
 800ddb8:	9505      	str	r5, [sp, #20]
 800ddba:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 800ddbe:	9204      	str	r2, [sp, #16]
 800ddc0:	460f      	mov	r7, r1
 800ddc2:	9312      	str	r3, [sp, #72]	; 0x48
 800ddc4:	d806      	bhi.n	800ddd4 <st_sssa8_fully_connected+0x3c>
 800ddc6:	9a07      	ldr	r2, [sp, #28]
 800ddc8:	2301      	movs	r3, #1
 800ddca:	40aa      	lsls	r2, r5
 800ddcc:	40ab      	lsls	r3, r5
 800ddce:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 800ddd2:	9307      	str	r3, [sp, #28]
 800ddd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f000 81e6 	beq.w	800e1a8 <st_sssa8_fully_connected+0x410>
 800dddc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ddde:	9d04      	ldr	r5, [sp, #16]
 800dde0:	9600      	str	r6, [sp, #0]
 800dde2:	4619      	mov	r1, r3
 800dde4:	b2b3      	uxth	r3, r6
 800dde6:	0854      	lsrs	r4, r2, #1
 800dde8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800ddec:	462a      	mov	r2, r5
 800ddee:	f001 ff23 	bl	800fc38 <st_int8_reordered_no_shift_zero>
 800ddf2:	2c00      	cmp	r4, #0
 800ddf4:	f000 8142 	beq.w	800e07c <st_sssa8_fully_connected+0x2e4>
 800ddf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ddfa:	9e05      	ldr	r6, [sp, #20]
 800ddfc:	f103 0110 	add.w	r1, r3, #16
 800de00:	f04f 0c01 	mov.w	ip, #1
 800de04:	1eb3      	subs	r3, r6, #2
 800de06:	fa0c f303 	lsl.w	r3, ip, r3
 800de0a:	f1a5 0010 	sub.w	r0, r5, #16
 800de0e:	9313      	str	r3, [sp, #76]	; 0x4c
 800de10:	1eeb      	subs	r3, r5, #3
 800de12:	0900      	lsrs	r0, r0, #4
 800de14:	930f      	str	r3, [sp, #60]	; 0x3c
 800de16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800de18:	3001      	adds	r0, #1
 800de1a:	0102      	lsls	r2, r0, #4
 800de1c:	3308      	adds	r3, #8
 800de1e:	9306      	str	r3, [sp, #24]
 800de20:	920a      	str	r2, [sp, #40]	; 0x28
 800de22:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800de24:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800de26:	9308      	str	r3, [sp, #32]
 800de28:	3c01      	subs	r4, #1
 800de2a:	1f2b      	subs	r3, r5, #4
 800de2c:	b2a4      	uxth	r4, r4
 800de2e:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 800de32:	9311      	str	r3, [sp, #68]	; 0x44
 800de34:	ebac 0306 	sub.w	r3, ip, r6
 800de38:	9210      	str	r2, [sp, #64]	; 0x40
 800de3a:	9314      	str	r3, [sp, #80]	; 0x50
 800de3c:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 800de40:	9b06      	ldr	r3, [sp, #24]
 800de42:	9415      	str	r4, [sp, #84]	; 0x54
 800de44:	920e      	str	r2, [sp, #56]	; 0x38
 800de46:	9a04      	ldr	r2, [sp, #16]
 800de48:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800de4c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800de50:	18be      	adds	r6, r7, r2
 800de52:	2a0f      	cmp	r2, #15
 800de54:	9603      	str	r6, [sp, #12]
 800de56:	f340 826d 	ble.w	800e334 <st_sssa8_fully_connected+0x59c>
 800de5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de5c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800de5e:	eb07 0c02 	add.w	ip, r7, r2
 800de62:	461a      	mov	r2, r3
 800de64:	f8d7 9000 	ldr.w	r9, [r7]
 800de68:	f8d6 e000 	ldr.w	lr, [r6]
 800de6c:	fa2f f889 	sxtb16	r8, r9
 800de70:	ea4f 243e 	mov.w	r4, lr, ror #8
 800de74:	ea4f 2939 	mov.w	r9, r9, ror #8
 800de78:	fa2f f384 	sxtb16	r3, r4
 800de7c:	fa2f f989 	sxtb16	r9, r9
 800de80:	fa2f fe8e 	sxtb16	lr, lr
 800de84:	682c      	ldr	r4, [r5, #0]
 800de86:	fb24 0008 	smlad	r0, r4, r8, r0
 800de8a:	fb24 240e 	smlad	r4, r4, lr, r2
 800de8e:	6869      	ldr	r1, [r5, #4]
 800de90:	fb21 0009 	smlad	r0, r1, r9, r0
 800de94:	fb21 4403 	smlad	r4, r1, r3, r4
 800de98:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800de9c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800dea0:	fa2f fa88 	sxtb16	sl, r8
 800dea4:	ea4f 233e 	mov.w	r3, lr, ror #8
 800dea8:	ea4f 2838 	mov.w	r8, r8, ror #8
 800deac:	fa2f f383 	sxtb16	r3, r3
 800deb0:	fa2f f888 	sxtb16	r8, r8
 800deb4:	fa2f fe8e 	sxtb16	lr, lr
 800deb8:	68a9      	ldr	r1, [r5, #8]
 800deba:	fb21 000a 	smlad	r0, r1, sl, r0
 800debe:	fb21 410e 	smlad	r1, r1, lr, r4
 800dec2:	f8d5 900c 	ldr.w	r9, [r5, #12]
 800dec6:	fb29 0808 	smlad	r8, r9, r8, r0
 800deca:	fb29 1903 	smlad	r9, r9, r3, r1
 800dece:	68bc      	ldr	r4, [r7, #8]
 800ded0:	68b1      	ldr	r1, [r6, #8]
 800ded2:	fa2f f084 	sxtb16	r0, r4
 800ded6:	ea4f 2231 	mov.w	r2, r1, ror #8
 800deda:	ea4f 2434 	mov.w	r4, r4, ror #8
 800dede:	fa2f f282 	sxtb16	r2, r2
 800dee2:	fa2f f484 	sxtb16	r4, r4
 800dee6:	fa2f f181 	sxtb16	r1, r1
 800deea:	692b      	ldr	r3, [r5, #16]
 800deec:	fb23 8800 	smlad	r8, r3, r0, r8
 800def0:	fb23 9301 	smlad	r3, r3, r1, r9
 800def4:	f8d5 e014 	ldr.w	lr, [r5, #20]
 800def8:	fb2e 8404 	smlad	r4, lr, r4, r8
 800defc:	fb2e 3e02 	smlad	lr, lr, r2, r3
 800df00:	68f9      	ldr	r1, [r7, #12]
 800df02:	68f3      	ldr	r3, [r6, #12]
 800df04:	fa2f f981 	sxtb16	r9, r1
 800df08:	ea4f 2233 	mov.w	r2, r3, ror #8
 800df0c:	ea4f 2031 	mov.w	r0, r1, ror #8
 800df10:	fa2f f882 	sxtb16	r8, r2
 800df14:	3710      	adds	r7, #16
 800df16:	3610      	adds	r6, #16
 800df18:	fa2f f080 	sxtb16	r0, r0
 800df1c:	fa2f f383 	sxtb16	r3, r3
 800df20:	69aa      	ldr	r2, [r5, #24]
 800df22:	fb22 4909 	smlad	r9, r2, r9, r4
 800df26:	fb22 e203 	smlad	r2, r2, r3, lr
 800df2a:	69ec      	ldr	r4, [r5, #28]
 800df2c:	3520      	adds	r5, #32
 800df2e:	fb24 9000 	smlad	r0, r4, r0, r9
 800df32:	fb24 2208 	smlad	r2, r4, r8, r2
 800df36:	4567      	cmp	r7, ip
 800df38:	d194      	bne.n	800de64 <st_sssa8_fully_connected+0xcc>
 800df3a:	9903      	ldr	r1, [sp, #12]
 800df3c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800df40:	4613      	mov	r3, r2
 800df42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df44:	460c      	mov	r4, r1
 800df46:	4414      	add	r4, r2
 800df48:	9403      	str	r4, [sp, #12]
 800df4a:	4690      	mov	r8, r2
 800df4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df4e:	4590      	cmp	r8, r2
 800df50:	da36      	bge.n	800dfc0 <st_sssa8_fully_connected+0x228>
 800df52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df54:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800df58:	eba2 0a08 	sub.w	sl, r2, r8
 800df5c:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 800df60:	f10a 0201 	add.w	r2, sl, #1
 800df64:	920c      	str	r2, [sp, #48]	; 0x30
 800df66:	0092      	lsls	r2, r2, #2
 800df68:	920b      	str	r2, [sp, #44]	; 0x2c
 800df6a:	eb07 0902 	add.w	r9, r7, r2
 800df6e:	465e      	mov	r6, fp
 800df70:	f85e 1b04 	ldr.w	r1, [lr], #4
 800df74:	f857 2b04 	ldr.w	r2, [r7], #4
 800df78:	fa2f fc81 	sxtb16	ip, r1
 800df7c:	fa2f f582 	sxtb16	r5, r2
 800df80:	ea4f 2431 	mov.w	r4, r1, ror #8
 800df84:	ea4f 2232 	mov.w	r2, r2, ror #8
 800df88:	fa2f f484 	sxtb16	r4, r4
 800df8c:	fa2f f282 	sxtb16	r2, r2
 800df90:	6831      	ldr	r1, [r6, #0]
 800df92:	fb21 0005 	smlad	r0, r1, r5, r0
 800df96:	fb21 330c 	smlad	r3, r1, ip, r3
 800df9a:	6871      	ldr	r1, [r6, #4]
 800df9c:	3608      	adds	r6, #8
 800df9e:	fb21 0002 	smlad	r0, r1, r2, r0
 800dfa2:	fb21 3304 	smlad	r3, r1, r4, r3
 800dfa6:	454f      	cmp	r7, r9
 800dfa8:	d1e2      	bne.n	800df70 <st_sssa8_fully_connected+0x1d8>
 800dfaa:	9a03      	ldr	r2, [sp, #12]
 800dfac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfae:	440a      	add	r2, r1
 800dfb0:	9203      	str	r2, [sp, #12]
 800dfb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dfb4:	f108 0804 	add.w	r8, r8, #4
 800dfb8:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 800dfbc:	eb0b 0bc2 	add.w	fp, fp, r2, lsl #3
 800dfc0:	9d04      	ldr	r5, [sp, #16]
 800dfc2:	45a8      	cmp	r8, r5
 800dfc4:	da2c      	bge.n	800e020 <st_sssa8_fully_connected+0x288>
 800dfc6:	f9bb 1000 	ldrsh.w	r1, [fp]
 800dfca:	f997 2000 	ldrsb.w	r2, [r7]
 800dfce:	9c03      	ldr	r4, [sp, #12]
 800dfd0:	fb11 0002 	smlabb	r0, r1, r2, r0
 800dfd4:	f994 4000 	ldrsb.w	r4, [r4]
 800dfd8:	f108 0201 	add.w	r2, r8, #1
 800dfdc:	4295      	cmp	r5, r2
 800dfde:	fb11 3304 	smlabb	r3, r1, r4, r3
 800dfe2:	f340 80c5 	ble.w	800e170 <st_sssa8_fully_connected+0x3d8>
 800dfe6:	9903      	ldr	r1, [sp, #12]
 800dfe8:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 800dfec:	f997 4001 	ldrsb.w	r4, [r7, #1]
 800dff0:	f991 1001 	ldrsb.w	r1, [r1, #1]
 800dff4:	fb12 0004 	smlabb	r0, r2, r4, r0
 800dff8:	fb12 3301 	smlabb	r3, r2, r1, r3
 800dffc:	9a04      	ldr	r2, [sp, #16]
 800dffe:	f108 0802 	add.w	r8, r8, #2
 800e002:	4542      	cmp	r2, r8
 800e004:	f340 819b 	ble.w	800e33e <st_sssa8_fully_connected+0x5a6>
 800e008:	9903      	ldr	r1, [sp, #12]
 800e00a:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800e00e:	f991 4002 	ldrsb.w	r4, [r1, #2]
 800e012:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800e016:	fb12 3304 	smlabb	r3, r2, r4, r3
 800e01a:	fb12 0001 	smlabb	r0, r2, r1, r0
 800e01e:	3703      	adds	r7, #3
 800e020:	9a08      	ldr	r2, [sp, #32]
 800e022:	9905      	ldr	r1, [sp, #20]
 800e024:	3202      	adds	r2, #2
 800e026:	2915      	cmp	r1, #21
 800e028:	9208      	str	r2, [sp, #32]
 800e02a:	f340 808a 	ble.w	800e142 <st_sssa8_fully_connected+0x3aa>
 800e02e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e030:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800e032:	fb50 5001 	smmla	r0, r0, r1, r5
 800e036:	fb53 5301 	smmla	r3, r3, r1, r5
 800e03a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e03c:	9c07      	ldr	r4, [sp, #28]
 800e03e:	4108      	asrs	r0, r1
 800e040:	4420      	add	r0, r4
 800e042:	f300 0007 	ssat	r0, #8, r0
 800e046:	410b      	asrs	r3, r1
 800e048:	4423      	add	r3, r4
 800e04a:	f802 0c02 	strb.w	r0, [r2, #-2]
 800e04e:	f303 0307 	ssat	r3, #8, r3
 800e052:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e056:	9a04      	ldr	r2, [sp, #16]
 800e058:	9b06      	ldr	r3, [sp, #24]
 800e05a:	4417      	add	r7, r2
 800e05c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e05e:	3308      	adds	r3, #8
 800e060:	429a      	cmp	r2, r3
 800e062:	9306      	str	r3, [sp, #24]
 800e064:	f47f aeef 	bne.w	800de46 <st_sssa8_fully_connected+0xae>
 800e068:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800e06a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e06c:	3401      	adds	r4, #1
 800e06e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e072:	9324      	str	r3, [sp, #144]	; 0x90
 800e074:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800e076:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800e07a:	9325      	str	r3, [sp, #148]	; 0x94
 800e07c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e07e:	07db      	lsls	r3, r3, #31
 800e080:	d54a      	bpl.n	800e118 <st_sssa8_fully_connected+0x380>
 800e082:	9a04      	ldr	r2, [sp, #16]
 800e084:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e086:	0892      	lsrs	r2, r2, #2
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	d01a      	beq.n	800e0c2 <st_sssa8_fully_connected+0x32a>
 800e08c:	1e55      	subs	r5, r2, #1
 800e08e:	b2ad      	uxth	r5, r5
 800e090:	3501      	adds	r5, #1
 800e092:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e094:	eb07 0685 	add.w	r6, r7, r5, lsl #2
 800e098:	f857 2b04 	ldr.w	r2, [r7], #4
 800e09c:	6821      	ldr	r1, [r4, #0]
 800e09e:	fa2f f082 	sxtb16	r0, r2
 800e0a2:	ea4f 2232 	mov.w	r2, r2, ror #8
 800e0a6:	fa2f f282 	sxtb16	r2, r2
 800e0aa:	fb21 3300 	smlad	r3, r1, r0, r3
 800e0ae:	6861      	ldr	r1, [r4, #4]
 800e0b0:	3408      	adds	r4, #8
 800e0b2:	fb21 3302 	smlad	r3, r1, r2, r3
 800e0b6:	42b7      	cmp	r7, r6
 800e0b8:	d1ee      	bne.n	800e098 <st_sssa8_fully_connected+0x300>
 800e0ba:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e0bc:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800e0c0:	9226      	str	r2, [sp, #152]	; 0x98
 800e0c2:	9a04      	ldr	r2, [sp, #16]
 800e0c4:	f012 0203 	ands.w	r2, r2, #3
 800e0c8:	d015      	beq.n	800e0f6 <st_sssa8_fully_connected+0x35e>
 800e0ca:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e0cc:	f997 1000 	ldrsb.w	r1, [r7]
 800e0d0:	8800      	ldrh	r0, [r0, #0]
 800e0d2:	2a01      	cmp	r2, #1
 800e0d4:	fb10 3301 	smlabb	r3, r0, r1, r3
 800e0d8:	d00d      	beq.n	800e0f6 <st_sssa8_fully_connected+0x35e>
 800e0da:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e0dc:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800e0e0:	8840      	ldrh	r0, [r0, #2]
 800e0e2:	2a02      	cmp	r2, #2
 800e0e4:	fb10 3301 	smlabb	r3, r0, r1, r3
 800e0e8:	d005      	beq.n	800e0f6 <st_sssa8_fully_connected+0x35e>
 800e0ea:	9926      	ldr	r1, [sp, #152]	; 0x98
 800e0ec:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800e0f0:	8889      	ldrh	r1, [r1, #4]
 800e0f2:	fb11 3302 	smlabb	r3, r1, r2, r3
 800e0f6:	9a05      	ldr	r2, [sp, #20]
 800e0f8:	2a15      	cmp	r2, #21
 800e0fa:	dd11      	ble.n	800e120 <st_sssa8_fully_connected+0x388>
 800e0fc:	1e91      	subs	r1, r2, #2
 800e0fe:	2201      	movs	r2, #1
 800e100:	408a      	lsls	r2, r1
 800e102:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e104:	fb53 2301 	smmla	r3, r3, r1, r2
 800e108:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e10a:	4113      	asrs	r3, r2
 800e10c:	9a07      	ldr	r2, [sp, #28]
 800e10e:	4413      	add	r3, r2
 800e110:	f303 0307 	ssat	r3, #8, r3
 800e114:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e116:	7013      	strb	r3, [r2, #0]
 800e118:	2000      	movs	r0, #0
 800e11a:	b017      	add	sp, #92	; 0x5c
 800e11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e120:	2a00      	cmp	r2, #0
 800e122:	f340 810e 	ble.w	800e342 <st_sssa8_fully_connected+0x5aa>
 800e126:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e128:	9807      	ldr	r0, [sp, #28]
 800e12a:	005b      	lsls	r3, r3, #1
 800e12c:	fb53 0301 	smmla	r3, r3, r1, r0
 800e130:	4113      	asrs	r3, r2
 800e132:	f303 0307 	ssat	r3, #8, r3
 800e136:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e138:	2000      	movs	r0, #0
 800e13a:	7013      	strb	r3, [r2, #0]
 800e13c:	b017      	add	sp, #92	; 0x5c
 800e13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e142:	2900      	cmp	r1, #0
 800e144:	460a      	mov	r2, r1
 800e146:	dd15      	ble.n	800e174 <st_sssa8_fully_connected+0x3dc>
 800e148:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e14a:	9d07      	ldr	r5, [sp, #28]
 800e14c:	0040      	lsls	r0, r0, #1
 800e14e:	005b      	lsls	r3, r3, #1
 800e150:	fb50 5001 	smmla	r0, r0, r1, r5
 800e154:	fb53 5301 	smmla	r3, r3, r1, r5
 800e158:	4110      	asrs	r0, r2
 800e15a:	f300 0007 	ssat	r0, #8, r0
 800e15e:	9908      	ldr	r1, [sp, #32]
 800e160:	4113      	asrs	r3, r2
 800e162:	f801 0c02 	strb.w	r0, [r1, #-2]
 800e166:	f303 0307 	ssat	r3, #8, r3
 800e16a:	f801 3c01 	strb.w	r3, [r1, #-1]
 800e16e:	e772      	b.n	800e056 <st_sssa8_fully_connected+0x2be>
 800e170:	3701      	adds	r7, #1
 800e172:	e755      	b.n	800e020 <st_sssa8_fully_connected+0x288>
 800e174:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e176:	fa00 f201 	lsl.w	r2, r0, r1
 800e17a:	f302 021f 	ssat	r2, #32, r2
 800e17e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e180:	fb52 f210 	smmulr	r2, r2, r0
 800e184:	408b      	lsls	r3, r1
 800e186:	f303 031f 	ssat	r3, #32, r3
 800e18a:	fb53 f310 	smmulr	r3, r3, r0
 800e18e:	9907      	ldr	r1, [sp, #28]
 800e190:	440a      	add	r2, r1
 800e192:	f302 0207 	ssat	r2, #8, r2
 800e196:	9808      	ldr	r0, [sp, #32]
 800e198:	440b      	add	r3, r1
 800e19a:	f800 2c02 	strb.w	r2, [r0, #-2]
 800e19e:	f303 0307 	ssat	r3, #8, r3
 800e1a2:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e1a6:	e756      	b.n	800e056 <st_sssa8_fully_connected+0x2be>
 800e1a8:	4273      	negs	r3, r6
 800e1aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e1ac:	b29d      	uxth	r5, r3
 800e1ae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800e1b2:	2900      	cmp	r1, #0
 800e1b4:	d0b0      	beq.n	800e118 <st_sssa8_fully_connected+0x380>
 800e1b6:	9c04      	ldr	r4, [sp, #16]
 800e1b8:	9b05      	ldr	r3, [sp, #20]
 800e1ba:	9004      	str	r0, [sp, #16]
 800e1bc:	3b02      	subs	r3, #2
 800e1be:	f1a4 0e10 	sub.w	lr, r4, #16
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	468c      	mov	ip, r1
 800e1c6:	409a      	lsls	r2, r3
 800e1c8:	9925      	ldr	r1, [sp, #148]	; 0x94
 800e1ca:	9b05      	ldr	r3, [sp, #20]
 800e1cc:	9208      	str	r2, [sp, #32]
 800e1ce:	f02e 0e0f 	bic.w	lr, lr, #15
 800e1d2:	e9dd a824 	ldrd	sl, r8, [sp, #144]	; 0x90
 800e1d6:	f10e 0e10 	add.w	lr, lr, #16
 800e1da:	46a1      	mov	r9, r4
 800e1dc:	448c      	add	ip, r1
 800e1de:	f1c3 0301 	rsb	r3, r3, #1
 800e1e2:	b231      	sxth	r1, r6
 800e1e4:	f1b9 0f0f 	cmp.w	r9, #15
 800e1e8:	eb00 060e 	add.w	r6, r0, lr
 800e1ec:	f8cd c00c 	str.w	ip, [sp, #12]
 800e1f0:	930a      	str	r3, [sp, #40]	; 0x28
 800e1f2:	9606      	str	r6, [sp, #24]
 800e1f4:	468c      	mov	ip, r1
 800e1f6:	f85a 3b04 	ldr.w	r3, [sl], #4
 800e1fa:	dd7d      	ble.n	800e2f8 <st_sssa8_fully_connected+0x560>
 800e1fc:	9c04      	ldr	r4, [sp, #16]
 800e1fe:	eb07 060e 	add.w	r6, r7, lr
 800e202:	f8d7 b000 	ldr.w	fp, [r7]
 800e206:	6821      	ldr	r1, [r4, #0]
 800e208:	fa2f f08b 	sxtb16	r0, fp
 800e20c:	ea4f 2231 	mov.w	r2, r1, ror #8
 800e210:	ea4f 2b3b 	mov.w	fp, fp, ror #8
 800e214:	fa25 f282 	sxtab16	r2, r5, r2
 800e218:	fa2f fb8b 	sxtb16	fp, fp
 800e21c:	fa25 f181 	sxtab16	r1, r5, r1
 800e220:	fb21 3300 	smlad	r3, r1, r0, r3
 800e224:	fb22 300b 	smlad	r0, r2, fp, r3
 800e228:	6879      	ldr	r1, [r7, #4]
 800e22a:	6862      	ldr	r2, [r4, #4]
 800e22c:	fa2f fb81 	sxtb16	fp, r1
 800e230:	ea4f 2332 	mov.w	r3, r2, ror #8
 800e234:	ea4f 2131 	mov.w	r1, r1, ror #8
 800e238:	fa25 f383 	sxtab16	r3, r5, r3
 800e23c:	fa2f f181 	sxtb16	r1, r1
 800e240:	fa25 f282 	sxtab16	r2, r5, r2
 800e244:	fb22 020b 	smlad	r2, r2, fp, r0
 800e248:	fb23 2201 	smlad	r2, r3, r1, r2
 800e24c:	68b8      	ldr	r0, [r7, #8]
 800e24e:	68a3      	ldr	r3, [r4, #8]
 800e250:	fa2f fb80 	sxtb16	fp, r0
 800e254:	ea4f 2133 	mov.w	r1, r3, ror #8
 800e258:	ea4f 2030 	mov.w	r0, r0, ror #8
 800e25c:	fa25 f181 	sxtab16	r1, r5, r1
 800e260:	fa2f f080 	sxtb16	r0, r0
 800e264:	fa25 f383 	sxtab16	r3, r5, r3
 800e268:	fb23 230b 	smlad	r3, r3, fp, r2
 800e26c:	fb21 3300 	smlad	r3, r1, r0, r3
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	68e1      	ldr	r1, [r4, #12]
 800e274:	fa2f f082 	sxtb16	r0, r2
 800e278:	ea4f 2b31 	mov.w	fp, r1, ror #8
 800e27c:	3710      	adds	r7, #16
 800e27e:	ea4f 2232 	mov.w	r2, r2, ror #8
 800e282:	3410      	adds	r4, #16
 800e284:	fa2f f282 	sxtb16	r2, r2
 800e288:	fa25 f181 	sxtab16	r1, r5, r1
 800e28c:	fa25 fb8b 	sxtab16	fp, r5, fp
 800e290:	fb21 3300 	smlad	r3, r1, r0, r3
 800e294:	fb2b 3302 	smlad	r3, fp, r2, r3
 800e298:	42b7      	cmp	r7, r6
 800e29a:	d1b2      	bne.n	800e202 <st_sssa8_fully_connected+0x46a>
 800e29c:	9806      	ldr	r0, [sp, #24]
 800e29e:	4674      	mov	r4, lr
 800e2a0:	454c      	cmp	r4, r9
 800e2a2:	da0f      	bge.n	800e2c4 <st_sssa8_fully_connected+0x52c>
 800e2a4:	eba9 0404 	sub.w	r4, r9, r4
 800e2a8:	443c      	add	r4, r7
 800e2aa:	463a      	mov	r2, r7
 800e2ac:	7812      	ldrb	r2, [r2, #0]
 800e2ae:	f910 1b01 	ldrsb.w	r1, [r0], #1
 800e2b2:	3701      	adds	r7, #1
 800e2b4:	b252      	sxtb	r2, r2
 800e2b6:	eba1 010c 	sub.w	r1, r1, ip
 800e2ba:	42a7      	cmp	r7, r4
 800e2bc:	fb11 3302 	smlabb	r3, r1, r2, r3
 800e2c0:	463a      	mov	r2, r7
 800e2c2:	d1f3      	bne.n	800e2ac <st_sssa8_fully_connected+0x514>
 800e2c4:	9a05      	ldr	r2, [sp, #20]
 800e2c6:	2a15      	cmp	r2, #21
 800e2c8:	f108 0801 	add.w	r8, r8, #1
 800e2cc:	dd17      	ble.n	800e2fe <st_sssa8_fully_connected+0x566>
 800e2ce:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e2d2:	fb53 1302 	smmla	r3, r3, r2, r1
 800e2d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e2d8:	4113      	asrs	r3, r2
 800e2da:	9a07      	ldr	r2, [sp, #28]
 800e2dc:	4413      	add	r3, r2
 800e2de:	f303 0307 	ssat	r3, #8, r3
 800e2e2:	f808 3c01 	strb.w	r3, [r8, #-1]
 800e2e6:	9b03      	ldr	r3, [sp, #12]
 800e2e8:	4543      	cmp	r3, r8
 800e2ea:	f43f af15 	beq.w	800e118 <st_sssa8_fully_connected+0x380>
 800e2ee:	f1b9 0f0f 	cmp.w	r9, #15
 800e2f2:	f85a 3b04 	ldr.w	r3, [sl], #4
 800e2f6:	dc81      	bgt.n	800e1fc <st_sssa8_fully_connected+0x464>
 800e2f8:	9804      	ldr	r0, [sp, #16]
 800e2fa:	2400      	movs	r4, #0
 800e2fc:	e7d0      	b.n	800e2a0 <st_sssa8_fully_connected+0x508>
 800e2fe:	2a00      	cmp	r2, #0
 800e300:	dd0a      	ble.n	800e318 <st_sssa8_fully_connected+0x580>
 800e302:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e304:	9807      	ldr	r0, [sp, #28]
 800e306:	005b      	lsls	r3, r3, #1
 800e308:	fb53 0301 	smmla	r3, r3, r1, r0
 800e30c:	4113      	asrs	r3, r2
 800e30e:	f303 0307 	ssat	r3, #8, r3
 800e312:	f808 3c01 	strb.w	r3, [r8, #-1]
 800e316:	e7e6      	b.n	800e2e6 <st_sssa8_fully_connected+0x54e>
 800e318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e31a:	4093      	lsls	r3, r2
 800e31c:	f303 031f 	ssat	r3, #32, r3
 800e320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e322:	fb53 f312 	smmulr	r3, r3, r2
 800e326:	9a07      	ldr	r2, [sp, #28]
 800e328:	4413      	add	r3, r2
 800e32a:	f303 0307 	ssat	r3, #8, r3
 800e32e:	f808 3c01 	strb.w	r3, [r8, #-1]
 800e332:	e7d8      	b.n	800e2e6 <st_sssa8_fully_connected+0x54e>
 800e334:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 800e338:	f04f 0800 	mov.w	r8, #0
 800e33c:	e606      	b.n	800df4c <st_sssa8_fully_connected+0x1b4>
 800e33e:	3702      	adds	r7, #2
 800e340:	e66e      	b.n	800e020 <st_sssa8_fully_connected+0x288>
 800e342:	f1c2 0201 	rsb	r2, r2, #1
 800e346:	4093      	lsls	r3, r2
 800e348:	f303 031f 	ssat	r3, #32, r3
 800e34c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e34e:	fb53 f312 	smmulr	r3, r3, r2
 800e352:	9a07      	ldr	r2, [sp, #28]
 800e354:	441a      	add	r2, r3
 800e356:	f302 0307 	ssat	r3, #8, r2
 800e35a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e35c:	7013      	strb	r3, [r2, #0]
 800e35e:	e6db      	b.n	800e118 <st_sssa8_fully_connected+0x380>

0800e360 <ai_padding_opt_init>:
 800e360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e364:	2600      	movs	r6, #0
 800e366:	e9c0 6600 	strd	r6, r6, [r0]
 800e36a:	6086      	str	r6, [r0, #8]
 800e36c:	689d      	ldr	r5, [r3, #8]
 800e36e:	690c      	ldr	r4, [r1, #16]
 800e370:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800e374:	42b5      	cmp	r5, r6
 800e376:	dd20      	ble.n	800e3ba <ai_padding_opt_init+0x5a>
 800e378:	4264      	negs	r4, r4
 800e37a:	46b0      	mov	r8, r6
 800e37c:	46b6      	mov	lr, r6
 800e37e:	46b1      	mov	r9, r6
 800e380:	4637      	mov	r7, r6
 800e382:	e013      	b.n	800e3ac <ai_padding_opt_init+0x4c>
 800e384:	6895      	ldr	r5, [r2, #8]
 800e386:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800e38a:	1b2d      	subs	r5, r5, r4
 800e38c:	42b5      	cmp	r5, r6
 800e38e:	bfb5      	itete	lt
 800e390:	f10e 0e01 	addlt.w	lr, lr, #1
 800e394:	f108 0801 	addge.w	r8, r8, #1
 800e398:	f8c0 e008 	strlt.w	lr, [r0, #8]
 800e39c:	f8c0 8004 	strge.w	r8, [r0, #4]
 800e3a0:	689d      	ldr	r5, [r3, #8]
 800e3a2:	688e      	ldr	r6, [r1, #8]
 800e3a4:	3701      	adds	r7, #1
 800e3a6:	42bd      	cmp	r5, r7
 800e3a8:	4434      	add	r4, r6
 800e3aa:	dd09      	ble.n	800e3c0 <ai_padding_opt_init+0x60>
 800e3ac:	2c00      	cmp	r4, #0
 800e3ae:	dae9      	bge.n	800e384 <ai_padding_opt_init+0x24>
 800e3b0:	f109 0901 	add.w	r9, r9, #1
 800e3b4:	f8c0 9000 	str.w	r9, [r0]
 800e3b8:	e7f2      	b.n	800e3a0 <ai_padding_opt_init+0x40>
 800e3ba:	46b6      	mov	lr, r6
 800e3bc:	46b0      	mov	r8, r6
 800e3be:	46b1      	mov	r9, r6
 800e3c0:	2500      	movs	r5, #0
 800e3c2:	e9c0 9803 	strd	r9, r8, [r0, #12]
 800e3c6:	e9c0 e505 	strd	lr, r5, [r0, #20]
 800e3ca:	e9c0 5507 	strd	r5, r5, [r0, #28]
 800e3ce:	685e      	ldr	r6, [r3, #4]
 800e3d0:	694c      	ldr	r4, [r1, #20]
 800e3d2:	42ae      	cmp	r6, r5
 800e3d4:	f1c4 0400 	rsb	r4, r4, #0
 800e3d8:	dc0f      	bgt.n	800e3fa <ai_padding_opt_init+0x9a>
 800e3da:	e018      	b.n	800e40e <ai_padding_opt_init+0xae>
 800e3dc:	6856      	ldr	r6, [r2, #4]
 800e3de:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800e3e2:	1b36      	subs	r6, r6, r4
 800e3e4:	42be      	cmp	r6, r7
 800e3e6:	da0e      	bge.n	800e406 <ai_padding_opt_init+0xa6>
 800e3e8:	6a06      	ldr	r6, [r0, #32]
 800e3ea:	3601      	adds	r6, #1
 800e3ec:	6206      	str	r6, [r0, #32]
 800e3ee:	685e      	ldr	r6, [r3, #4]
 800e3f0:	68cf      	ldr	r7, [r1, #12]
 800e3f2:	3501      	adds	r5, #1
 800e3f4:	42ae      	cmp	r6, r5
 800e3f6:	443c      	add	r4, r7
 800e3f8:	dd09      	ble.n	800e40e <ai_padding_opt_init+0xae>
 800e3fa:	2c00      	cmp	r4, #0
 800e3fc:	daee      	bge.n	800e3dc <ai_padding_opt_init+0x7c>
 800e3fe:	6986      	ldr	r6, [r0, #24]
 800e400:	3601      	adds	r6, #1
 800e402:	6186      	str	r6, [r0, #24]
 800e404:	e7f3      	b.n	800e3ee <ai_padding_opt_init+0x8e>
 800e406:	69c6      	ldr	r6, [r0, #28]
 800e408:	3601      	adds	r6, #1
 800e40a:	61c6      	str	r6, [r0, #28]
 800e40c:	e7ef      	b.n	800e3ee <ai_padding_opt_init+0x8e>
 800e40e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e412:	bf00      	nop

0800e414 <ai_padding_opt_phase1>:
 800e414:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800e418:	b933      	cbnz	r3, 800e428 <ai_padding_opt_phase1+0x14>
 800e41a:	b992      	cbnz	r2, 800e442 <ai_padding_opt_phase1+0x2e>
 800e41c:	6a03      	ldr	r3, [r0, #32]
 800e41e:	2201      	movs	r2, #1
 800e420:	3b01      	subs	r3, #1
 800e422:	6203      	str	r3, [r0, #32]
 800e424:	8482      	strh	r2, [r0, #36]	; 0x24
 800e426:	e005      	b.n	800e434 <ai_padding_opt_phase1+0x20>
 800e428:	2a00      	cmp	r2, #0
 800e42a:	d0f7      	beq.n	800e41c <ai_padding_opt_phase1+0x8>
 800e42c:	3b01      	subs	r3, #1
 800e42e:	2201      	movs	r2, #1
 800e430:	6183      	str	r3, [r0, #24]
 800e432:	8482      	strh	r2, [r0, #36]	; 0x24
 800e434:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
 800e438:	6943      	ldr	r3, [r0, #20]
 800e43a:	6083      	str	r3, [r0, #8]
 800e43c:	e9c0 1200 	strd	r1, r2, [r0]
 800e440:	4770      	bx	lr
 800e442:	3a01      	subs	r2, #1
 800e444:	61c2      	str	r2, [r0, #28]
 800e446:	8483      	strh	r3, [r0, #36]	; 0x24
 800e448:	e7f4      	b.n	800e434 <ai_padding_opt_phase1+0x20>
 800e44a:	bf00      	nop

0800e44c <st_uint8_fill>:
 800e44c:	078b      	lsls	r3, r1, #30
 800e44e:	d008      	beq.n	800e462 <st_uint8_fill+0x16>
 800e450:	b90a      	cbnz	r2, 800e456 <st_uint8_fill+0xa>
 800e452:	e01e      	b.n	800e492 <st_uint8_fill+0x46>
 800e454:	b1f2      	cbz	r2, 800e494 <st_uint8_fill+0x48>
 800e456:	f801 0b01 	strb.w	r0, [r1], #1
 800e45a:	078b      	lsls	r3, r1, #30
 800e45c:	f102 32ff 	add.w	r2, r2, #4294967295
 800e460:	d1f8      	bne.n	800e454 <st_uint8_fill+0x8>
 800e462:	b430      	push	{r4, r5}
 800e464:	0404      	lsls	r4, r0, #16
 800e466:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 800e46a:	4304      	orrs	r4, r0
 800e46c:	0893      	lsrs	r3, r2, #2
 800e46e:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 800e472:	f002 0503 	and.w	r5, r2, #3
 800e476:	d010      	beq.n	800e49a <st_uint8_fill+0x4e>
 800e478:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e47c:	f841 4b04 	str.w	r4, [r1], #4
 800e480:	4299      	cmp	r1, r3
 800e482:	d1fb      	bne.n	800e47c <st_uint8_fill+0x30>
 800e484:	b13d      	cbz	r5, 800e496 <st_uint8_fill+0x4a>
 800e486:	462a      	mov	r2, r5
 800e488:	4601      	mov	r1, r0
 800e48a:	bc30      	pop	{r4, r5}
 800e48c:	4618      	mov	r0, r3
 800e48e:	f002 bf7d 	b.w	801138c <memset>
 800e492:	4770      	bx	lr
 800e494:	4770      	bx	lr
 800e496:	bc30      	pop	{r4, r5}
 800e498:	4770      	bx	lr
 800e49a:	460b      	mov	r3, r1
 800e49c:	2d00      	cmp	r5, #0
 800e49e:	d1f2      	bne.n	800e486 <st_uint8_fill+0x3a>
 800e4a0:	e7f9      	b.n	800e496 <st_uint8_fill+0x4a>
 800e4a2:	bf00      	nop

0800e4a4 <st_sssa8_ch_nn_mat_mult_kernel>:
 800e4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a8:	b09f      	sub	sp, #124	; 0x7c
 800e4aa:	4683      	mov	fp, r0
 800e4ac:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800e4ae:	f8bd 40a0 	ldrh.w	r4, [sp, #160]	; 0xa0
 800e4b2:	931c      	str	r3, [sp, #112]	; 0x70
 800e4b4:	18c5      	adds	r5, r0, r3
 800e4b6:	085b      	lsrs	r3, r3, #1
 800e4b8:	940c      	str	r4, [sp, #48]	; 0x30
 800e4ba:	9113      	str	r1, [sp, #76]	; 0x4c
 800e4bc:	921a      	str	r2, [sp, #104]	; 0x68
 800e4be:	951b      	str	r5, [sp, #108]	; 0x6c
 800e4c0:	f000 8280 	beq.w	800e9c4 <st_sssa8_ch_nn_mat_mult_kernel+0x520>
 800e4c4:	460f      	mov	r7, r1
 800e4c6:	f1a4 0110 	sub.w	r1, r4, #16
 800e4ca:	0909      	lsrs	r1, r1, #4
 800e4cc:	3101      	adds	r1, #1
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	4694      	mov	ip, r2
 800e4d2:	014a      	lsls	r2, r1, #5
 800e4d4:	0109      	lsls	r1, r1, #4
 800e4d6:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 800e4da:	910e      	str	r1, [sp, #56]	; 0x38
 800e4dc:	18b9      	adds	r1, r7, r2
 800e4de:	9118      	str	r1, [sp, #96]	; 0x60
 800e4e0:	18b1      	adds	r1, r6, r2
 800e4e2:	4662      	mov	r2, ip
 800e4e4:	3208      	adds	r2, #8
 800e4e6:	920d      	str	r2, [sp, #52]	; 0x34
 800e4e8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e4ea:	9117      	str	r1, [sp, #92]	; 0x5c
 800e4ec:	3204      	adds	r2, #4
 800e4ee:	9207      	str	r2, [sp, #28]
 800e4f0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800e4f2:	f8df a758 	ldr.w	sl, [pc, #1880]	; 800ec4c <st_sssa8_ch_nn_mat_mult_kernel+0x7a8>
 800e4f6:	9616      	str	r6, [sp, #88]	; 0x58
 800e4f8:	3208      	adds	r2, #8
 800e4fa:	920b      	str	r2, [sp, #44]	; 0x2c
 800e4fc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800e4fe:	f8cd b000 	str.w	fp, [sp]
 800e502:	3b01      	subs	r3, #1
 800e504:	3202      	adds	r2, #2
 800e506:	b29c      	uxth	r4, r3
 800e508:	9209      	str	r2, [sp, #36]	; 0x24
 800e50a:	4663      	mov	r3, ip
 800e50c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800e50e:	941d      	str	r4, [sp, #116]	; 0x74
 800e510:	3310      	adds	r3, #16
 800e512:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
 800e516:	3208      	adds	r2, #8
 800e518:	9114      	str	r1, [sp, #80]	; 0x50
 800e51a:	9208      	str	r2, [sp, #32]
 800e51c:	1ec1      	subs	r1, r0, #3
 800e51e:	1caa      	adds	r2, r5, #2
 800e520:	1f03      	subs	r3, r0, #4
 800e522:	9115      	str	r1, [sp, #84]	; 0x54
 800e524:	920a      	str	r2, [sp, #40]	; 0x28
 800e526:	9319      	str	r3, [sp, #100]	; 0x64
 800e528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e52a:	9d00      	ldr	r5, [sp, #0]
 800e52c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e52e:	18e8      	adds	r0, r5, r3
 800e530:	2b0f      	cmp	r3, #15
 800e532:	9004      	str	r0, [sp, #16]
 800e534:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800e538:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800e53c:	f340 8361 	ble.w	800ec02 <st_sssa8_ch_nn_mat_mult_kernel+0x75e>
 800e540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e542:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 800e546:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800e54a:	9a00      	ldr	r2, [sp, #0]
 800e54c:	9001      	str	r0, [sp, #4]
 800e54e:	18eb      	adds	r3, r5, r3
 800e550:	9303      	str	r3, [sp, #12]
 800e552:	4625      	mov	r5, r4
 800e554:	4633      	mov	r3, r6
 800e556:	9901      	ldr	r1, [sp, #4]
 800e558:	6812      	ldr	r2, [r2, #0]
 800e55a:	6809      	ldr	r1, [r1, #0]
 800e55c:	fa2f fc82 	sxtb16	ip, r2
 800e560:	ea4f 2232 	mov.w	r2, r2, ror #8
 800e564:	fa2f f282 	sxtb16	r2, r2
 800e568:	ea02 000a 	and.w	r0, r2, sl
 800e56c:	fa1f fb8c 	uxth.w	fp, ip
 800e570:	ea4f 2731 	mov.w	r7, r1, ror #8
 800e574:	ea40 4c1c 	orr.w	ip, r0, ip, lsr #16
 800e578:	fa2f f787 	sxtb16	r7, r7
 800e57c:	fa2f f181 	sxtb16	r1, r1
 800e580:	ea07 0e0a 	and.w	lr, r7, sl
 800e584:	b288      	uxth	r0, r1
 800e586:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800e58a:	ea4e 4111 	orr.w	r1, lr, r1, lsr #16
 800e58e:	ea4b 4202 	orr.w	r2, fp, r2, lsl #16
 800e592:	f8d8 e000 	ldr.w	lr, [r8]
 800e596:	f8d9 7000 	ldr.w	r7, [r9]
 800e59a:	fb22 660e 	smlad	r6, r2, lr, r6
 800e59e:	fb22 3207 	smlad	r2, r2, r7, r3
 800e5a2:	fb20 440e 	smlad	r4, r0, lr, r4
 800e5a6:	fb20 5707 	smlad	r7, r0, r7, r5
 800e5aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e5ae:	f8d9 e004 	ldr.w	lr, [r9, #4]
 800e5b2:	fb2c 6603 	smlad	r6, ip, r3, r6
 800e5b6:	fb2c 2b0e 	smlad	fp, ip, lr, r2
 800e5ba:	fb21 4403 	smlad	r4, r1, r3, r4
 800e5be:	fb21 7e0e 	smlad	lr, r1, lr, r7
 800e5c2:	9b00      	ldr	r3, [sp, #0]
 800e5c4:	9801      	ldr	r0, [sp, #4]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	6840      	ldr	r0, [r0, #4]
 800e5ca:	fa2f f283 	sxtb16	r2, r3
 800e5ce:	ea4f 2333 	mov.w	r3, r3, ror #8
 800e5d2:	fa2f f383 	sxtb16	r3, r3
 800e5d6:	ea03 010a 	and.w	r1, r3, sl
 800e5da:	fa1f fc82 	uxth.w	ip, r2
 800e5de:	ea4f 2530 	mov.w	r5, r0, ror #8
 800e5e2:	ea41 4212 	orr.w	r2, r1, r2, lsr #16
 800e5e6:	fa2f f585 	sxtb16	r5, r5
 800e5ea:	fa2f f080 	sxtb16	r0, r0
 800e5ee:	ea05 070a 	and.w	r7, r5, sl
 800e5f2:	b281      	uxth	r1, r0
 800e5f4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800e5f8:	ea47 4010 	orr.w	r0, r7, r0, lsr #16
 800e5fc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 800e600:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800e604:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800e608:	fb23 6607 	smlad	r6, r3, r7, r6
 800e60c:	fb23 b305 	smlad	r3, r3, r5, fp
 800e610:	fb21 4407 	smlad	r4, r1, r7, r4
 800e614:	fb21 e105 	smlad	r1, r1, r5, lr
 800e618:	f8d8 500c 	ldr.w	r5, [r8, #12]
 800e61c:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800e620:	fb22 6605 	smlad	r6, r2, r5, r6
 800e624:	fb22 3c07 	smlad	ip, r2, r7, r3
 800e628:	fb20 4405 	smlad	r4, r0, r5, r4
 800e62c:	fb20 1707 	smlad	r7, r0, r7, r1
 800e630:	9900      	ldr	r1, [sp, #0]
 800e632:	9d01      	ldr	r5, [sp, #4]
 800e634:	688a      	ldr	r2, [r1, #8]
 800e636:	68a9      	ldr	r1, [r5, #8]
 800e638:	fa2f f382 	sxtb16	r3, r2
 800e63c:	ea4f 2232 	mov.w	r2, r2, ror #8
 800e640:	fa2f f282 	sxtb16	r2, r2
 800e644:	ea02 050a 	and.w	r5, r2, sl
 800e648:	fa1f fb83 	uxth.w	fp, r3
 800e64c:	ea4f 2e31 	mov.w	lr, r1, ror #8
 800e650:	ea45 4313 	orr.w	r3, r5, r3, lsr #16
 800e654:	fa2f fe8e 	sxtb16	lr, lr
 800e658:	fa2f f181 	sxtb16	r1, r1
 800e65c:	ea0e 000a 	and.w	r0, lr, sl
 800e660:	b28d      	uxth	r5, r1
 800e662:	ea4b 4202 	orr.w	r2, fp, r2, lsl #16
 800e666:	ea45 450e 	orr.w	r5, r5, lr, lsl #16
 800e66a:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 800e66e:	f8d8 b010 	ldr.w	fp, [r8, #16]
 800e672:	f8d9 e010 	ldr.w	lr, [r9, #16]
 800e676:	fb22 660b 	smlad	r6, r2, fp, r6
 800e67a:	fb22 c20e 	smlad	r2, r2, lr, ip
 800e67e:	fb25 440b 	smlad	r4, r5, fp, r4
 800e682:	fb25 750e 	smlad	r5, r5, lr, r7
 800e686:	f8d8 7014 	ldr.w	r7, [r8, #20]
 800e68a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800e68e:	fb23 6607 	smlad	r6, r3, r7, r6
 800e692:	fb23 2200 	smlad	r2, r3, r0, r2
 800e696:	9202      	str	r2, [sp, #8]
 800e698:	fb21 4407 	smlad	r4, r1, r7, r4
 800e69c:	fb21 5000 	smlad	r0, r1, r0, r5
 800e6a0:	9a00      	ldr	r2, [sp, #0]
 800e6a2:	9901      	ldr	r1, [sp, #4]
 800e6a4:	68d3      	ldr	r3, [r2, #12]
 800e6a6:	68cd      	ldr	r5, [r1, #12]
 800e6a8:	fa2f fc83 	sxtb16	ip, r3
 800e6ac:	3210      	adds	r2, #16
 800e6ae:	9200      	str	r2, [sp, #0]
 800e6b0:	9a01      	ldr	r2, [sp, #4]
 800e6b2:	fa1f fb8c 	uxth.w	fp, ip
 800e6b6:	ea4f 2333 	mov.w	r3, r3, ror #8
 800e6ba:	fa2f f383 	sxtb16	r3, r3
 800e6be:	ea03 010a 	and.w	r1, r3, sl
 800e6c2:	ea4f 2e35 	mov.w	lr, r5, ror #8
 800e6c6:	ea41 4c1c 	orr.w	ip, r1, ip, lsr #16
 800e6ca:	fa2f fe8e 	sxtb16	lr, lr
 800e6ce:	fa2f f585 	sxtb16	r5, r5
 800e6d2:	ea0e 070a 	and.w	r7, lr, sl
 800e6d6:	b2a9      	uxth	r1, r5
 800e6d8:	ea4b 4303 	orr.w	r3, fp, r3, lsl #16
 800e6dc:	f102 0b10 	add.w	fp, r2, #16
 800e6e0:	f8cd b004 	str.w	fp, [sp, #4]
 800e6e4:	ea47 4715 	orr.w	r7, r7, r5, lsr #16
 800e6e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800e6ec:	f8d8 b018 	ldr.w	fp, [r8, #24]
 800e6f0:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800e6f4:	fb23 660b 	smlad	r6, r3, fp, r6
 800e6f8:	9a02      	ldr	r2, [sp, #8]
 800e6fa:	fb23 2305 	smlad	r3, r3, r5, r2
 800e6fe:	fb21 440b 	smlad	r4, r1, fp, r4
 800e702:	fb21 0105 	smlad	r1, r1, r5, r0
 800e706:	f8d8 201c 	ldr.w	r2, [r8, #28]
 800e70a:	f8d9 501c 	ldr.w	r5, [r9, #28]
 800e70e:	f108 0820 	add.w	r8, r8, #32
 800e712:	f109 0920 	add.w	r9, r9, #32
 800e716:	fb2c 6602 	smlad	r6, ip, r2, r6
 800e71a:	fb2c 3305 	smlad	r3, ip, r5, r3
 800e71e:	fb27 4402 	smlad	r4, r7, r2, r4
 800e722:	fb27 1505 	smlad	r5, r7, r5, r1
 800e726:	9a00      	ldr	r2, [sp, #0]
 800e728:	9903      	ldr	r1, [sp, #12]
 800e72a:	428a      	cmp	r2, r1
 800e72c:	f47f af13 	bne.w	800e556 <st_sssa8_ch_nn_mat_mult_kernel+0xb2>
 800e730:	9a04      	ldr	r2, [sp, #16]
 800e732:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800e736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e738:	4611      	mov	r1, r2
 800e73a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e73c:	9206      	str	r2, [sp, #24]
 800e73e:	4419      	add	r1, r3
 800e740:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e742:	9104      	str	r1, [sp, #16]
 800e744:	9205      	str	r2, [sp, #20]
 800e746:	469c      	mov	ip, r3
 800e748:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e74a:	459c      	cmp	ip, r3
 800e74c:	da65      	bge.n	800e81a <st_sssa8_ch_nn_mat_mult_kernel+0x376>
 800e74e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e750:	9a04      	ldr	r2, [sp, #16]
 800e752:	f8dd b000 	ldr.w	fp, [sp]
 800e756:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800e75a:	eba3 030c 	sub.w	r3, r3, ip
 800e75e:	089b      	lsrs	r3, r3, #2
 800e760:	9311      	str	r3, [sp, #68]	; 0x44
 800e762:	3301      	adds	r3, #1
 800e764:	9310      	str	r3, [sp, #64]	; 0x40
 800e766:	e9dd 1505 	ldrd	r1, r5, [sp, #20]
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e76e:	18d3      	adds	r3, r2, r3
 800e770:	9303      	str	r3, [sp, #12]
 800e772:	4691      	mov	r9, r2
 800e774:	f85b 3b04 	ldr.w	r3, [fp], #4
 800e778:	f859 0b04 	ldr.w	r0, [r9], #4
 800e77c:	fa2f f283 	sxtb16	r2, r3
 800e780:	ea4f 2333 	mov.w	r3, r3, ror #8
 800e784:	fa2f f383 	sxtb16	r3, r3
 800e788:	ea03 0e0a 	and.w	lr, r3, sl
 800e78c:	b297      	uxth	r7, r2
 800e78e:	ea4f 2830 	mov.w	r8, r0, ror #8
 800e792:	ea4e 4e12 	orr.w	lr, lr, r2, lsr #16
 800e796:	fa2f f888 	sxtb16	r8, r8
 800e79a:	fa2f f080 	sxtb16	r0, r0
 800e79e:	ea08 0c0a 	and.w	ip, r8, sl
 800e7a2:	b282      	uxth	r2, r0
 800e7a4:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 800e7a8:	ea4c 4010 	orr.w	r0, ip, r0, lsr #16
 800e7ac:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800e7b0:	f8d1 c000 	ldr.w	ip, [r1]
 800e7b4:	f8d5 8000 	ldr.w	r8, [r5]
 800e7b8:	fb23 660c 	smlad	r6, r3, ip, r6
 800e7bc:	9f02      	ldr	r7, [sp, #8]
 800e7be:	fb23 7308 	smlad	r3, r3, r8, r7
 800e7c2:	fb22 440c 	smlad	r4, r2, ip, r4
 800e7c6:	9f01      	ldr	r7, [sp, #4]
 800e7c8:	fb22 7208 	smlad	r2, r2, r8, r7
 800e7cc:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800e7d0:	686f      	ldr	r7, [r5, #4]
 800e7d2:	3108      	adds	r1, #8
 800e7d4:	3508      	adds	r5, #8
 800e7d6:	fb2e 660c 	smlad	r6, lr, ip, r6
 800e7da:	fb2e 3307 	smlad	r3, lr, r7, r3
 800e7de:	9302      	str	r3, [sp, #8]
 800e7e0:	fb20 440c 	smlad	r4, r0, ip, r4
 800e7e4:	fb20 2307 	smlad	r3, r0, r7, r2
 800e7e8:	9301      	str	r3, [sp, #4]
 800e7ea:	9b03      	ldr	r3, [sp, #12]
 800e7ec:	454b      	cmp	r3, r9
 800e7ee:	d1c1      	bne.n	800e774 <st_sssa8_ch_nn_mat_mult_kernel+0x2d0>
 800e7f0:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 800e7f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e7f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e7f8:	f8cd 9010 	str.w	r9, [sp, #16]
 800e7fc:	f10c 0204 	add.w	r2, ip, #4
 800e800:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 800e804:	9a06      	ldr	r2, [sp, #24]
 800e806:	00db      	lsls	r3, r3, #3
 800e808:	441a      	add	r2, r3
 800e80a:	9206      	str	r2, [sp, #24]
 800e80c:	9a05      	ldr	r2, [sp, #20]
 800e80e:	441a      	add	r2, r3
 800e810:	9205      	str	r2, [sp, #20]
 800e812:	9b00      	ldr	r3, [sp, #0]
 800e814:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e816:	4413      	add	r3, r2
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e81c:	4565      	cmp	r5, ip
 800e81e:	dd54      	ble.n	800e8ca <st_sssa8_ch_nn_mat_mult_kernel+0x426>
 800e820:	9a05      	ldr	r2, [sp, #20]
 800e822:	9b00      	ldr	r3, [sp, #0]
 800e824:	f9b2 0000 	ldrsh.w	r0, [r2]
 800e828:	9a06      	ldr	r2, [sp, #24]
 800e82a:	f993 3000 	ldrsb.w	r3, [r3]
 800e82e:	f9b2 1000 	ldrsh.w	r1, [r2]
 800e832:	9a04      	ldr	r2, [sp, #16]
 800e834:	9f02      	ldr	r7, [sp, #8]
 800e836:	f992 2000 	ldrsb.w	r2, [r2]
 800e83a:	fb10 6603 	smlabb	r6, r0, r3, r6
 800e83e:	fb10 4402 	smlabb	r4, r0, r2, r4
 800e842:	fb11 7303 	smlabb	r3, r1, r3, r7
 800e846:	9801      	ldr	r0, [sp, #4]
 800e848:	9302      	str	r3, [sp, #8]
 800e84a:	f10c 0301 	add.w	r3, ip, #1
 800e84e:	fb11 0202 	smlabb	r2, r1, r2, r0
 800e852:	42ab      	cmp	r3, r5
 800e854:	9201      	str	r2, [sp, #4]
 800e856:	9b00      	ldr	r3, [sp, #0]
 800e858:	f280 8174 	bge.w	800eb44 <st_sssa8_ch_nn_mat_mult_kernel+0x6a0>
 800e85c:	f993 0001 	ldrsb.w	r0, [r3, #1]
 800e860:	9b05      	ldr	r3, [sp, #20]
 800e862:	9f02      	ldr	r7, [sp, #8]
 800e864:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800e868:	9b06      	ldr	r3, [sp, #24]
 800e86a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e86e:	9b04      	ldr	r3, [sp, #16]
 800e870:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e874:	fb11 6600 	smlabb	r6, r1, r0, r6
 800e878:	fb11 4403 	smlabb	r4, r1, r3, r4
 800e87c:	9901      	ldr	r1, [sp, #4]
 800e87e:	fb12 1303 	smlabb	r3, r2, r3, r1
 800e882:	9301      	str	r3, [sp, #4]
 800e884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e886:	f10c 0502 	add.w	r5, ip, #2
 800e88a:	fb12 7000 	smlabb	r0, r2, r0, r7
 800e88e:	42ab      	cmp	r3, r5
 800e890:	9002      	str	r0, [sp, #8]
 800e892:	f340 81bf 	ble.w	800ec14 <st_sssa8_ch_nn_mat_mult_kernel+0x770>
 800e896:	9b05      	ldr	r3, [sp, #20]
 800e898:	9d00      	ldr	r5, [sp, #0]
 800e89a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e89e:	9b04      	ldr	r3, [sp, #16]
 800e8a0:	9f01      	ldr	r7, [sp, #4]
 800e8a2:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e8a6:	9b06      	ldr	r3, [sp, #24]
 800e8a8:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800e8ac:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800e8b0:	fb12 4401 	smlabb	r4, r2, r1, r4
 800e8b4:	fb12 6603 	smlabb	r6, r2, r3, r6
 800e8b8:	9a02      	ldr	r2, [sp, #8]
 800e8ba:	fb10 2303 	smlabb	r3, r0, r3, r2
 800e8be:	fb10 7101 	smlabb	r1, r0, r1, r7
 800e8c2:	9302      	str	r3, [sp, #8]
 800e8c4:	1ceb      	adds	r3, r5, #3
 800e8c6:	9101      	str	r1, [sp, #4]
 800e8c8:	9300      	str	r3, [sp, #0]
 800e8ca:	9b07      	ldr	r3, [sp, #28]
 800e8cc:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 800e8d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8d2:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800e8d6:	9b08      	ldr	r3, [sp, #32]
 800e8d8:	2915      	cmp	r1, #21
 800e8da:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800e8de:	f340 8117 	ble.w	800eb10 <st_sssa8_ch_nn_mat_mult_kernel+0x66c>
 800e8e2:	1e8b      	subs	r3, r1, #2
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	3901      	subs	r1, #1
 800e8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ec:	fb56 3600 	smmla	r6, r6, r0, r3
 800e8f0:	410e      	asrs	r6, r1
 800e8f2:	9a02      	ldr	r2, [sp, #8]
 800e8f4:	fb52 3300 	smmla	r3, r2, r0, r3
 800e8f8:	442e      	add	r6, r5
 800e8fa:	f306 0607 	ssat	r6, #8, r6
 800e8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e900:	410b      	asrs	r3, r1
 800e902:	442b      	add	r3, r5
 800e904:	f802 6c02 	strb.w	r6, [r2, #-2]
 800e908:	f303 0307 	ssat	r3, #8, r3
 800e90c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e90e:	f802 3c02 	strb.w	r3, [r2, #-2]
 800e912:	9b07      	ldr	r3, [sp, #28]
 800e914:	f933 2c02 	ldrsh.w	r2, [r3, #-2]
 800e918:	2a15      	cmp	r2, #21
 800e91a:	f340 80d7 	ble.w	800eacc <st_sssa8_ch_nn_mat_mult_kernel+0x628>
 800e91e:	9b08      	ldr	r3, [sp, #32]
 800e920:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e926:	f1a2 0e02 	sub.w	lr, r2, #2
 800e92a:	2001      	movs	r0, #1
 800e92c:	3a01      	subs	r2, #1
 800e92e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e932:	fa00 fe0e 	lsl.w	lr, r0, lr
 800e936:	fb54 e003 	smmla	r0, r4, r3, lr
 800e93a:	4110      	asrs	r0, r2
 800e93c:	9c01      	ldr	r4, [sp, #4]
 800e93e:	fb54 ee03 	smmla	lr, r4, r3, lr
 800e942:	4408      	add	r0, r1
 800e944:	f300 0007 	ssat	r0, #8, r0
 800e948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e94a:	fa4e fe02 	asr.w	lr, lr, r2
 800e94e:	448e      	add	lr, r1
 800e950:	f803 0c01 	strb.w	r0, [r3, #-1]
 800e954:	f30e 0e07 	ssat	lr, #8, lr
 800e958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e95a:	f803 ec01 	strb.w	lr, [r3, #-1]
 800e95e:	9a00      	ldr	r2, [sp, #0]
 800e960:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e964:	440a      	add	r2, r1
 800e966:	9200      	str	r2, [sp, #0]
 800e968:	9a07      	ldr	r2, [sp, #28]
 800e96a:	3204      	adds	r2, #4
 800e96c:	9207      	str	r2, [sp, #28]
 800e96e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e970:	3208      	adds	r2, #8
 800e972:	920b      	str	r2, [sp, #44]	; 0x2c
 800e974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e976:	3202      	adds	r2, #2
 800e978:	9209      	str	r2, [sp, #36]	; 0x24
 800e97a:	9a08      	ldr	r2, [sp, #32]
 800e97c:	3208      	adds	r2, #8
 800e97e:	9208      	str	r2, [sp, #32]
 800e980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e982:	3202      	adds	r2, #2
 800e984:	920a      	str	r2, [sp, #40]	; 0x28
 800e986:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e988:	3308      	adds	r3, #8
 800e98a:	429a      	cmp	r2, r3
 800e98c:	930d      	str	r3, [sp, #52]	; 0x34
 800e98e:	f47f adcb 	bne.w	800e528 <st_sssa8_ch_nn_mat_mult_kernel+0x84>
 800e992:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e994:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800e996:	f8dd b000 	ldr.w	fp, [sp]
 800e99a:	3301      	adds	r3, #1
 800e99c:	00da      	lsls	r2, r3, #3
 800e99e:	0059      	lsls	r1, r3, #1
 800e9a0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e9a4:	9329      	str	r3, [sp, #164]	; 0xa4
 800e9a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e9a8:	4413      	add	r3, r2
 800e9aa:	931a      	str	r3, [sp, #104]	; 0x68
 800e9ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e9ae:	4413      	add	r3, r2
 800e9b0:	932a      	str	r3, [sp, #168]	; 0xa8
 800e9b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800e9b4:	4413      	add	r3, r2
 800e9b6:	932b      	str	r3, [sp, #172]	; 0xac
 800e9b8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800e9ba:	440b      	add	r3, r1
 800e9bc:	932c      	str	r3, [sp, #176]	; 0xb0
 800e9be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e9c0:	440b      	add	r3, r1
 800e9c2:	931b      	str	r3, [sp, #108]	; 0x6c
 800e9c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e9c6:	07da      	lsls	r2, r3, #31
 800e9c8:	f140 8115 	bpl.w	800ebf6 <st_sssa8_ch_nn_mat_mult_kernel+0x752>
 800e9cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e9ce:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800e9d0:	6818      	ldr	r0, [r3, #0]
 800e9d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9d4:	eb06 0943 	add.w	r9, r6, r3, lsl #1
 800e9d8:	089b      	lsrs	r3, r3, #2
 800e9da:	f000 8135 	beq.w	800ec48 <st_sssa8_ch_nn_mat_mult_kernel+0x7a4>
 800e9de:	f103 3cff 	add.w	ip, r3, #4294967295
 800e9e2:	fa1f fc8c 	uxth.w	ip, ip
 800e9e6:	f10c 0c01 	add.w	ip, ip, #1
 800e9ea:	f8df 8260 	ldr.w	r8, [pc, #608]	; 800ec4c <st_sssa8_ch_nn_mat_mult_kernel+0x7a8>
 800e9ee:	eb0b 0e8c 	add.w	lr, fp, ip, lsl #2
 800e9f2:	464f      	mov	r7, r9
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	f85b 3b04 	ldr.w	r3, [fp], #4
 800e9fa:	fa2f f483 	sxtb16	r4, r3
 800e9fe:	ea4f 2333 	mov.w	r3, r3, ror #8
 800ea02:	b2a1      	uxth	r1, r4
 800ea04:	fa2f f383 	sxtb16	r3, r3
 800ea08:	ea03 0508 	and.w	r5, r3, r8
 800ea0c:	ea45 4414 	orr.w	r4, r5, r4, lsr #16
 800ea10:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ea14:	6831      	ldr	r1, [r6, #0]
 800ea16:	fb23 0001 	smlad	r0, r3, r1, r0
 800ea1a:	6839      	ldr	r1, [r7, #0]
 800ea1c:	fb23 2301 	smlad	r3, r3, r1, r2
 800ea20:	6871      	ldr	r1, [r6, #4]
 800ea22:	687a      	ldr	r2, [r7, #4]
 800ea24:	3608      	adds	r6, #8
 800ea26:	3708      	adds	r7, #8
 800ea28:	fb24 0001 	smlad	r0, r4, r1, r0
 800ea2c:	fb24 3202 	smlad	r2, r4, r2, r3
 800ea30:	45de      	cmp	lr, fp
 800ea32:	d1e0      	bne.n	800e9f6 <st_sssa8_ch_nn_mat_mult_kernel+0x552>
 800ea34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea36:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800ea3a:	4463      	add	r3, ip
 800ea3c:	44e1      	add	r9, ip
 800ea3e:	9313      	str	r3, [sp, #76]	; 0x4c
 800ea40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea42:	f013 0303 	ands.w	r3, r3, #3
 800ea46:	d01f      	beq.n	800ea88 <st_sssa8_ch_nn_mat_mult_kernel+0x5e4>
 800ea48:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800ea4a:	f99b 1000 	ldrsb.w	r1, [fp]
 800ea4e:	8835      	ldrh	r5, [r6, #0]
 800ea50:	f8b9 4000 	ldrh.w	r4, [r9]
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	fb15 0001 	smlabb	r0, r5, r1, r0
 800ea5a:	fb14 2201 	smlabb	r2, r4, r1, r2
 800ea5e:	d013      	beq.n	800ea88 <st_sssa8_ch_nn_mat_mult_kernel+0x5e4>
 800ea60:	f99b 1001 	ldrsb.w	r1, [fp, #1]
 800ea64:	8875      	ldrh	r5, [r6, #2]
 800ea66:	f8b9 4002 	ldrh.w	r4, [r9, #2]
 800ea6a:	2b02      	cmp	r3, #2
 800ea6c:	fb15 0001 	smlabb	r0, r5, r1, r0
 800ea70:	fb14 2201 	smlabb	r2, r4, r1, r2
 800ea74:	d008      	beq.n	800ea88 <st_sssa8_ch_nn_mat_mult_kernel+0x5e4>
 800ea76:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 800ea7a:	88b4      	ldrh	r4, [r6, #4]
 800ea7c:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 800ea80:	fb14 0003 	smlabb	r0, r4, r3, r0
 800ea84:	fb11 2203 	smlabb	r2, r1, r3, r2
 800ea88:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800ea8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ea8c:	680d      	ldr	r5, [r1, #0]
 800ea8e:	992b      	ldr	r1, [sp, #172]	; 0xac
 800ea90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea94:	680c      	ldr	r4, [r1, #0]
 800ea96:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800ea98:	2b15      	cmp	r3, #21
 800ea9a:	f101 0101 	add.w	r1, r1, #1
 800ea9e:	f300 8094 	bgt.w	800ebca <st_sssa8_ch_nn_mat_mult_kernel+0x726>
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	f340 80ba 	ble.w	800ec1c <st_sssa8_ch_nn_mat_mult_kernel+0x778>
 800eaa8:	0040      	lsls	r0, r0, #1
 800eaaa:	0052      	lsls	r2, r2, #1
 800eaac:	fb50 4005 	smmla	r0, r0, r5, r4
 800eab0:	fb52 4205 	smmla	r2, r2, r5, r4
 800eab4:	fa40 f303 	asr.w	r3, r0, r3
 800eab8:	f303 0307 	ssat	r3, #8, r3
 800eabc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800eabe:	7003      	strb	r3, [r0, #0]
 800eac0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800eac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eac6:	fa42 f303 	asr.w	r3, r2, r3
 800eaca:	e08e      	b.n	800ebea <st_sssa8_ch_nn_mat_mult_kernel+0x746>
 800eacc:	2a00      	cmp	r2, #0
 800eace:	dd3c      	ble.n	800eb4a <st_sssa8_ch_nn_mat_mult_kernel+0x6a6>
 800ead0:	9b01      	ldr	r3, [sp, #4]
 800ead2:	9908      	ldr	r1, [sp, #32]
 800ead4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800ead8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eada:	f851 1c04 	ldr.w	r1, [r1, #-4]
 800eade:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800eae2:	fb5e 1e03 	smmla	lr, lr, r3, r1
 800eae6:	0067      	lsls	r7, r4, #1
 800eae8:	fb57 1703 	smmla	r7, r7, r3, r1
 800eaec:	fa47 f202 	asr.w	r2, r7, r2
 800eaf0:	f302 0207 	ssat	r2, #8, r2
 800eaf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaf6:	f803 2c01 	strb.w	r2, [r3, #-1]
 800eafa:	9b07      	ldr	r3, [sp, #28]
 800eafc:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 800eb00:	fa4e f101 	asr.w	r1, lr, r1
 800eb04:	f301 0107 	ssat	r1, #8, r1
 800eb08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eb0e:	e726      	b.n	800e95e <st_sssa8_ch_nn_mat_mult_kernel+0x4ba>
 800eb10:	2900      	cmp	r1, #0
 800eb12:	dd3d      	ble.n	800eb90 <st_sssa8_ch_nn_mat_mult_kernel+0x6ec>
 800eb14:	9b02      	ldr	r3, [sp, #8]
 800eb16:	0076      	lsls	r6, r6, #1
 800eb18:	005a      	lsls	r2, r3, #1
 800eb1a:	fb56 5600 	smmla	r6, r6, r0, r5
 800eb1e:	fb52 5000 	smmla	r0, r2, r0, r5
 800eb22:	410e      	asrs	r6, r1
 800eb24:	f306 0607 	ssat	r6, #8, r6
 800eb28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb2a:	f803 6c02 	strb.w	r6, [r3, #-2]
 800eb2e:	9b07      	ldr	r3, [sp, #28]
 800eb30:	f933 2c04 	ldrsh.w	r2, [r3, #-4]
 800eb34:	fa40 f202 	asr.w	r2, r0, r2
 800eb38:	f302 0207 	ssat	r2, #8, r2
 800eb3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb3e:	f803 2c02 	strb.w	r2, [r3, #-2]
 800eb42:	e6e6      	b.n	800e912 <st_sssa8_ch_nn_mat_mult_kernel+0x46e>
 800eb44:	3301      	adds	r3, #1
 800eb46:	9300      	str	r3, [sp, #0]
 800eb48:	e6bf      	b.n	800e8ca <st_sssa8_ch_nn_mat_mult_kernel+0x426>
 800eb4a:	f1c2 0201 	rsb	r2, r2, #1
 800eb4e:	fa04 f102 	lsl.w	r1, r4, r2
 800eb52:	f301 011f 	ssat	r1, #32, r1
 800eb56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb58:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800eb5c:	fb51 f114 	smmulr	r1, r1, r4
 800eb60:	9b01      	ldr	r3, [sp, #4]
 800eb62:	4093      	lsls	r3, r2
 800eb64:	f303 001f 	ssat	r0, #32, r3
 800eb68:	fb50 f014 	smmulr	r0, r0, r4
 800eb6c:	9b08      	ldr	r3, [sp, #32]
 800eb6e:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800eb72:	440a      	add	r2, r1
 800eb74:	f302 0207 	ssat	r2, #8, r2
 800eb78:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb7a:	f801 2c01 	strb.w	r2, [r1, #-1]
 800eb7e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800eb82:	4403      	add	r3, r0
 800eb84:	f303 0307 	ssat	r3, #8, r3
 800eb88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb8a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800eb8e:	e6e6      	b.n	800e95e <st_sssa8_ch_nn_mat_mult_kernel+0x4ba>
 800eb90:	f1c1 0101 	rsb	r1, r1, #1
 800eb94:	408e      	lsls	r6, r1
 800eb96:	f306 061f 	ssat	r6, #32, r6
 800eb9a:	fb56 f610 	smmulr	r6, r6, r0
 800eb9e:	9b02      	ldr	r3, [sp, #8]
 800eba0:	408b      	lsls	r3, r1
 800eba2:	f303 011f 	ssat	r1, #32, r3
 800eba6:	fb51 f010 	smmulr	r0, r1, r0
 800ebaa:	4435      	add	r5, r6
 800ebac:	f305 0507 	ssat	r5, #8, r5
 800ebb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebb2:	f803 5c02 	strb.w	r5, [r3, #-2]
 800ebb6:	9b08      	ldr	r3, [sp, #32]
 800ebb8:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800ebbc:	4403      	add	r3, r0
 800ebbe:	f303 0307 	ssat	r3, #8, r3
 800ebc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebc4:	f802 3c02 	strb.w	r3, [r2, #-2]
 800ebc8:	e6a3      	b.n	800e912 <st_sssa8_ch_nn_mat_mult_kernel+0x46e>
 800ebca:	1e9f      	subs	r7, r3, #2
 800ebcc:	1e5e      	subs	r6, r3, #1
 800ebce:	2301      	movs	r3, #1
 800ebd0:	40bb      	lsls	r3, r7
 800ebd2:	fb50 3005 	smmla	r0, r0, r5, r3
 800ebd6:	4130      	asrs	r0, r6
 800ebd8:	4420      	add	r0, r4
 800ebda:	fb52 3305 	smmla	r3, r2, r5, r3
 800ebde:	f300 0207 	ssat	r2, #8, r0
 800ebe2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800ebe4:	4133      	asrs	r3, r6
 800ebe6:	4423      	add	r3, r4
 800ebe8:	7002      	strb	r2, [r0, #0]
 800ebea:	f303 0307 	ssat	r3, #8, r3
 800ebee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ebf0:	912c      	str	r1, [sp, #176]	; 0xb0
 800ebf2:	7013      	strb	r3, [r2, #0]
 800ebf4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ebf6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ebf8:	4413      	add	r3, r2
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	b01f      	add	sp, #124	; 0x7c
 800ebfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ec04:	9306      	str	r3, [sp, #24]
 800ec06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec08:	9305      	str	r3, [sp, #20]
 800ec0a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800ec0e:	f04f 0c00 	mov.w	ip, #0
 800ec12:	e599      	b.n	800e748 <st_sssa8_ch_nn_mat_mult_kernel+0x2a4>
 800ec14:	9b00      	ldr	r3, [sp, #0]
 800ec16:	3302      	adds	r3, #2
 800ec18:	9300      	str	r3, [sp, #0]
 800ec1a:	e656      	b.n	800e8ca <st_sssa8_ch_nn_mat_mult_kernel+0x426>
 800ec1c:	f1c3 0601 	rsb	r6, r3, #1
 800ec20:	fa00 f306 	lsl.w	r3, r0, r6
 800ec24:	f303 031f 	ssat	r3, #32, r3
 800ec28:	fb53 f315 	smmulr	r3, r3, r5
 800ec2c:	40b2      	lsls	r2, r6
 800ec2e:	f302 021f 	ssat	r2, #32, r2
 800ec32:	fb52 f215 	smmulr	r2, r2, r5
 800ec36:	4423      	add	r3, r4
 800ec38:	f303 0307 	ssat	r3, #8, r3
 800ec3c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800ec3e:	7003      	strb	r3, [r0, #0]
 800ec40:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4413      	add	r3, r2
 800ec46:	e7d0      	b.n	800ebea <st_sssa8_ch_nn_mat_mult_kernel+0x746>
 800ec48:	4602      	mov	r2, r0
 800ec4a:	e6f9      	b.n	800ea40 <st_sssa8_ch_nn_mat_mult_kernel+0x59c>
 800ec4c:	ffff0000 	.word	0xffff0000

0800ec50 <st_int8_to16_no_shift>:
 800ec50:	f1b2 0c10 	subs.w	ip, r2, #16
 800ec54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec58:	f100 808e 	bmi.w	800ed78 <st_int8_to16_no_shift+0x128>
 800ec5c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800ec60:	f10c 0c01 	add.w	ip, ip, #1
 800ec64:	4f48      	ldr	r7, [pc, #288]	; (800ed88 <st_int8_to16_no_shift+0x138>)
 800ec66:	eb01 144c 	add.w	r4, r1, ip, lsl #5
 800ec6a:	4605      	mov	r5, r0
 800ec6c:	682b      	ldr	r3, [r5, #0]
 800ec6e:	686e      	ldr	r6, [r5, #4]
 800ec70:	fa2f f983 	sxtb16	r9, r3
 800ec74:	ea4f 2333 	mov.w	r3, r3, ror #8
 800ec78:	fa1f f889 	uxth.w	r8, r9
 800ec7c:	fa2f f383 	sxtb16	r3, r3
 800ec80:	ea03 0a07 	and.w	sl, r3, r7
 800ec84:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 800ec88:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ec8c:	ea4f 2e36 	mov.w	lr, r6, ror #8
 800ec90:	fa2f f686 	sxtb16	r6, r6
 800ec94:	fa2f fe8e 	sxtb16	lr, lr
 800ec98:	fa1f f886 	uxth.w	r8, r6
 800ec9c:	ea0e 0a07 	and.w	sl, lr, r7
 800eca0:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 800eca4:	ea48 4e0e 	orr.w	lr, r8, lr, lsl #16
 800eca8:	f8c1 9004 	str.w	r9, [r1, #4]
 800ecac:	f8c1 e008 	str.w	lr, [r1, #8]
 800ecb0:	600b      	str	r3, [r1, #0]
 800ecb2:	60ce      	str	r6, [r1, #12]
 800ecb4:	68ab      	ldr	r3, [r5, #8]
 800ecb6:	68ee      	ldr	r6, [r5, #12]
 800ecb8:	fa2f f983 	sxtb16	r9, r3
 800ecbc:	ea4f 2333 	mov.w	r3, r3, ror #8
 800ecc0:	fa1f f889 	uxth.w	r8, r9
 800ecc4:	fa2f f383 	sxtb16	r3, r3
 800ecc8:	ea03 0a07 	and.w	sl, r3, r7
 800eccc:	ea4f 2e36 	mov.w	lr, r6, ror #8
 800ecd0:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 800ecd4:	fa2f f686 	sxtb16	r6, r6
 800ecd8:	fa2f fe8e 	sxtb16	lr, lr
 800ecdc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ece0:	ea0e 0a07 	and.w	sl, lr, r7
 800ece4:	fa1f f886 	uxth.w	r8, r6
 800ece8:	ea48 4e0e 	orr.w	lr, r8, lr, lsl #16
 800ecec:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 800ecf0:	f8c1 9014 	str.w	r9, [r1, #20]
 800ecf4:	610b      	str	r3, [r1, #16]
 800ecf6:	61ce      	str	r6, [r1, #28]
 800ecf8:	f8c1 e018 	str.w	lr, [r1, #24]
 800ecfc:	3120      	adds	r1, #32
 800ecfe:	428c      	cmp	r4, r1
 800ed00:	f105 0510 	add.w	r5, r5, #16
 800ed04:	d1b2      	bne.n	800ec6c <st_int8_to16_no_shift+0x1c>
 800ed06:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800ed0a:	1f17      	subs	r7, r2, #4
 800ed0c:	4567      	cmp	r7, ip
 800ed0e:	4460      	add	r0, ip
 800ed10:	db38      	blt.n	800ed84 <st_int8_to16_no_shift+0x134>
 800ed12:	eba7 070c 	sub.w	r7, r7, ip
 800ed16:	08bf      	lsrs	r7, r7, #2
 800ed18:	f107 0801 	add.w	r8, r7, #1
 800ed1c:	f8df e068 	ldr.w	lr, [pc, #104]	; 800ed88 <st_int8_to16_no_shift+0x138>
 800ed20:	eb04 05c8 	add.w	r5, r4, r8, lsl #3
 800ed24:	4606      	mov	r6, r0
 800ed26:	f856 3b04 	ldr.w	r3, [r6], #4
 800ed2a:	fa2f f983 	sxtb16	r9, r3
 800ed2e:	ea4f 2333 	mov.w	r3, r3, ror #8
 800ed32:	fa1f f189 	uxth.w	r1, r9
 800ed36:	fa2f f383 	sxtb16	r3, r3
 800ed3a:	ea03 0a0e 	and.w	sl, r3, lr
 800ed3e:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 800ed42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ed46:	f8c4 9004 	str.w	r9, [r4, #4]
 800ed4a:	6023      	str	r3, [r4, #0]
 800ed4c:	3408      	adds	r4, #8
 800ed4e:	42a5      	cmp	r5, r4
 800ed50:	d1e9      	bne.n	800ed26 <st_int8_to16_no_shift+0xd6>
 800ed52:	f10c 0c04 	add.w	ip, ip, #4
 800ed56:	eb0c 0c87 	add.w	ip, ip, r7, lsl #2
 800ed5a:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 800ed5e:	4562      	cmp	r2, ip
 800ed60:	dd08      	ble.n	800ed74 <st_int8_to16_no_shift+0x124>
 800ed62:	eba2 0c0c 	sub.w	ip, r2, ip
 800ed66:	4484      	add	ip, r0
 800ed68:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800ed6c:	f825 3b02 	strh.w	r3, [r5], #2
 800ed70:	4560      	cmp	r0, ip
 800ed72:	d1f9      	bne.n	800ed68 <st_int8_to16_no_shift+0x118>
 800ed74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed78:	f04f 0c00 	mov.w	ip, #0
 800ed7c:	1f17      	subs	r7, r2, #4
 800ed7e:	4567      	cmp	r7, ip
 800ed80:	460c      	mov	r4, r1
 800ed82:	dac6      	bge.n	800ed12 <st_int8_to16_no_shift+0xc2>
 800ed84:	4625      	mov	r5, r4
 800ed86:	e7ea      	b.n	800ed5e <st_int8_to16_no_shift+0x10e>
 800ed88:	ffff0000 	.word	0xffff0000

0800ed8c <st_int8_to16_dual>:
 800ed8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed90:	b089      	sub	sp, #36	; 0x24
 800ed92:	4692      	mov	sl, r2
 800ed94:	9307      	str	r3, [sp, #28]
 800ed96:	085b      	lsrs	r3, r3, #1
 800ed98:	eb00 0b02 	add.w	fp, r0, r2
 800ed9c:	9300      	str	r3, [sp, #0]
 800ed9e:	f000 810f 	beq.w	800efc0 <st_int8_to16_dual+0x234>
 800eda2:	f1a2 0310 	sub.w	r3, r2, #16
 800eda6:	9305      	str	r3, [sp, #20]
 800eda8:	091b      	lsrs	r3, r3, #4
 800edaa:	3301      	adds	r3, #1
 800edac:	011a      	lsls	r2, r3, #4
 800edae:	019b      	lsls	r3, r3, #6
 800edb0:	9306      	str	r3, [sp, #24]
 800edb2:	4ca0      	ldr	r4, [pc, #640]	; (800f034 <st_int8_to16_dual+0x2a8>)
 800edb4:	9201      	str	r2, [sp, #4]
 800edb6:	f1aa 0304 	sub.w	r3, sl, #4
 800edba:	46d1      	mov	r9, sl
 800edbc:	9304      	str	r3, [sp, #16]
 800edbe:	468a      	mov	sl, r1
 800edc0:	9b05      	ldr	r3, [sp, #20]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	f2c0 812f 	blt.w	800f026 <st_int8_to16_dual+0x29a>
 800edc8:	9b01      	ldr	r3, [sp, #4]
 800edca:	465e      	mov	r6, fp
 800edcc:	18c5      	adds	r5, r0, r3
 800edce:	4653      	mov	r3, sl
 800edd0:	6802      	ldr	r2, [r0, #0]
 800edd2:	6831      	ldr	r1, [r6, #0]
 800edd4:	fa2f f782 	sxtb16	r7, r2
 800edd8:	ea4f 2232 	mov.w	r2, r2, ror #8
 800eddc:	fa2f f282 	sxtb16	r2, r2
 800ede0:	ea02 0c04 	and.w	ip, r2, r4
 800ede4:	ea4c 4c17 	orr.w	ip, ip, r7, lsr #16
 800ede8:	b2bf      	uxth	r7, r7
 800edea:	f8c3 c008 	str.w	ip, [r3, #8]
 800edee:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
 800edf2:	ea4f 2731 	mov.w	r7, r1, ror #8
 800edf6:	fa2f f787 	sxtb16	r7, r7
 800edfa:	ea07 0c04 	and.w	ip, r7, r4
 800edfe:	fa2f f181 	sxtb16	r1, r1
 800ee02:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 800ee06:	b289      	uxth	r1, r1
 800ee08:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800ee0c:	f8c3 c00c 	str.w	ip, [r3, #12]
 800ee10:	601a      	str	r2, [r3, #0]
 800ee12:	6059      	str	r1, [r3, #4]
 800ee14:	6842      	ldr	r2, [r0, #4]
 800ee16:	6871      	ldr	r1, [r6, #4]
 800ee18:	fa2f f782 	sxtb16	r7, r2
 800ee1c:	ea4f 2232 	mov.w	r2, r2, ror #8
 800ee20:	fa2f f282 	sxtb16	r2, r2
 800ee24:	ea02 0c04 	and.w	ip, r2, r4
 800ee28:	ea4c 4c17 	orr.w	ip, ip, r7, lsr #16
 800ee2c:	b2bf      	uxth	r7, r7
 800ee2e:	f8c3 c018 	str.w	ip, [r3, #24]
 800ee32:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
 800ee36:	ea4f 2731 	mov.w	r7, r1, ror #8
 800ee3a:	fa2f f787 	sxtb16	r7, r7
 800ee3e:	ea07 0c04 	and.w	ip, r7, r4
 800ee42:	fa2f f181 	sxtb16	r1, r1
 800ee46:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 800ee4a:	b289      	uxth	r1, r1
 800ee4c:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800ee50:	f8c3 c01c 	str.w	ip, [r3, #28]
 800ee54:	611a      	str	r2, [r3, #16]
 800ee56:	6159      	str	r1, [r3, #20]
 800ee58:	6882      	ldr	r2, [r0, #8]
 800ee5a:	68b1      	ldr	r1, [r6, #8]
 800ee5c:	fa2f f782 	sxtb16	r7, r2
 800ee60:	ea4f 2232 	mov.w	r2, r2, ror #8
 800ee64:	fa2f f282 	sxtb16	r2, r2
 800ee68:	ea02 0c04 	and.w	ip, r2, r4
 800ee6c:	ea4c 4c17 	orr.w	ip, ip, r7, lsr #16
 800ee70:	b2bf      	uxth	r7, r7
 800ee72:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 800ee76:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
 800ee7a:	ea4f 2731 	mov.w	r7, r1, ror #8
 800ee7e:	fa2f f787 	sxtb16	r7, r7
 800ee82:	ea07 0c04 	and.w	ip, r7, r4
 800ee86:	fa2f f181 	sxtb16	r1, r1
 800ee8a:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 800ee8e:	b289      	uxth	r1, r1
 800ee90:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800ee94:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
 800ee98:	621a      	str	r2, [r3, #32]
 800ee9a:	6259      	str	r1, [r3, #36]	; 0x24
 800ee9c:	68c2      	ldr	r2, [r0, #12]
 800ee9e:	68f1      	ldr	r1, [r6, #12]
 800eea0:	fa2f f782 	sxtb16	r7, r2
 800eea4:	ea4f 2232 	mov.w	r2, r2, ror #8
 800eea8:	fa2f f282 	sxtb16	r2, r2
 800eeac:	ea02 0c04 	and.w	ip, r2, r4
 800eeb0:	ea4c 4c17 	orr.w	ip, ip, r7, lsr #16
 800eeb4:	b2bf      	uxth	r7, r7
 800eeb6:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
 800eeba:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
 800eebe:	ea4f 2731 	mov.w	r7, r1, ror #8
 800eec2:	fa2f f787 	sxtb16	r7, r7
 800eec6:	ea07 0c04 	and.w	ip, r7, r4
 800eeca:	fa2f f181 	sxtb16	r1, r1
 800eece:	3010      	adds	r0, #16
 800eed0:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 800eed4:	b289      	uxth	r1, r1
 800eed6:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800eeda:	4285      	cmp	r5, r0
 800eedc:	631a      	str	r2, [r3, #48]	; 0x30
 800eede:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
 800eee2:	6359      	str	r1, [r3, #52]	; 0x34
 800eee4:	f106 0610 	add.w	r6, r6, #16
 800eee8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800eeec:	f47f af70 	bne.w	800edd0 <st_int8_to16_dual+0x44>
 800eef0:	9b06      	ldr	r3, [sp, #24]
 800eef2:	449a      	add	sl, r3
 800eef4:	9b01      	ldr	r3, [sp, #4]
 800eef6:	449b      	add	fp, r3
 800eef8:	469c      	mov	ip, r3
 800eefa:	9b04      	ldr	r3, [sp, #16]
 800eefc:	4563      	cmp	r3, ip
 800eefe:	db3b      	blt.n	800ef78 <st_int8_to16_dual+0x1ec>
 800ef00:	eba3 080c 	sub.w	r8, r3, ip
 800ef04:	ea4f 0898 	mov.w	r8, r8, lsr #2
 800ef08:	f108 0301 	add.w	r3, r8, #1
 800ef0c:	9302      	str	r3, [sp, #8]
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	9303      	str	r3, [sp, #12]
 800ef12:	eb05 0e03 	add.w	lr, r5, r3
 800ef16:	465f      	mov	r7, fp
 800ef18:	4650      	mov	r0, sl
 800ef1a:	f855 2b04 	ldr.w	r2, [r5], #4
 800ef1e:	f857 3b04 	ldr.w	r3, [r7], #4
 800ef22:	fa2f f682 	sxtb16	r6, r2
 800ef26:	ea4f 2232 	mov.w	r2, r2, ror #8
 800ef2a:	fa2f f282 	sxtb16	r2, r2
 800ef2e:	ea02 0104 	and.w	r1, r2, r4
 800ef32:	ea41 4116 	orr.w	r1, r1, r6, lsr #16
 800ef36:	b2b6      	uxth	r6, r6
 800ef38:	ea46 4202 	orr.w	r2, r6, r2, lsl #16
 800ef3c:	6081      	str	r1, [r0, #8]
 800ef3e:	ea4f 2633 	mov.w	r6, r3, ror #8
 800ef42:	fa2f f686 	sxtb16	r6, r6
 800ef46:	ea06 0104 	and.w	r1, r6, r4
 800ef4a:	fa2f f383 	sxtb16	r3, r3
 800ef4e:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 800ef58:	4575      	cmp	r5, lr
 800ef5a:	6002      	str	r2, [r0, #0]
 800ef5c:	60c1      	str	r1, [r0, #12]
 800ef5e:	6046      	str	r6, [r0, #4]
 800ef60:	f100 0010 	add.w	r0, r0, #16
 800ef64:	d1d9      	bne.n	800ef1a <st_int8_to16_dual+0x18e>
 800ef66:	9b02      	ldr	r3, [sp, #8]
 800ef68:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
 800ef6c:	9b03      	ldr	r3, [sp, #12]
 800ef6e:	f10c 0c04 	add.w	ip, ip, #4
 800ef72:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 800ef76:	449b      	add	fp, r3
 800ef78:	45e1      	cmp	r9, ip
 800ef7a:	dd15      	ble.n	800efa8 <st_int8_to16_dual+0x21c>
 800ef7c:	eba9 0c0c 	sub.w	ip, r9, ip
 800ef80:	eb05 000c 	add.w	r0, r5, ip
 800ef84:	f10a 0304 	add.w	r3, sl, #4
 800ef88:	465a      	mov	r2, fp
 800ef8a:	f915 1b01 	ldrsb.w	r1, [r5], #1
 800ef8e:	f823 1c04 	strh.w	r1, [r3, #-4]
 800ef92:	f912 1b01 	ldrsb.w	r1, [r2], #1
 800ef96:	f823 1c02 	strh.w	r1, [r3, #-2]
 800ef9a:	4285      	cmp	r5, r0
 800ef9c:	f103 0304 	add.w	r3, r3, #4
 800efa0:	d1f3      	bne.n	800ef8a <st_int8_to16_dual+0x1fe>
 800efa2:	44e3      	add	fp, ip
 800efa4:	eb0a 0a8c 	add.w	sl, sl, ip, lsl #2
 800efa8:	9b00      	ldr	r3, [sp, #0]
 800efaa:	3b01      	subs	r3, #1
 800efac:	b29b      	uxth	r3, r3
 800efae:	9300      	str	r3, [sp, #0]
 800efb0:	eb05 0009 	add.w	r0, r5, r9
 800efb4:	44cb      	add	fp, r9
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	f47f af02 	bne.w	800edc0 <st_int8_to16_dual+0x34>
 800efbc:	4651      	mov	r1, sl
 800efbe:	46ca      	mov	sl, r9
 800efc0:	9b07      	ldr	r3, [sp, #28]
 800efc2:	07db      	lsls	r3, r3, #31
 800efc4:	d52c      	bpl.n	800f020 <st_int8_to16_dual+0x294>
 800efc6:	f1ba 0304 	subs.w	r3, sl, #4
 800efca:	d430      	bmi.n	800f02e <st_int8_to16_dual+0x2a2>
 800efcc:	089b      	lsrs	r3, r3, #2
 800efce:	1c5f      	adds	r7, r3, #1
 800efd0:	f8df c060 	ldr.w	ip, [pc, #96]	; 800f034 <st_int8_to16_dual+0x2a8>
 800efd4:	eb01 05c7 	add.w	r5, r1, r7, lsl #3
 800efd8:	4606      	mov	r6, r0
 800efda:	f856 3b04 	ldr.w	r3, [r6], #4
 800efde:	fa2f fe83 	sxtb16	lr, r3
 800efe2:	ea4f 2333 	mov.w	r3, r3, ror #8
 800efe6:	fa1f f28e 	uxth.w	r2, lr
 800efea:	fa2f f383 	sxtb16	r3, r3
 800efee:	ea03 040c 	and.w	r4, r3, ip
 800eff2:	ea44 441e 	orr.w	r4, r4, lr, lsr #16
 800eff6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800effa:	604c      	str	r4, [r1, #4]
 800effc:	600b      	str	r3, [r1, #0]
 800effe:	3108      	adds	r1, #8
 800f000:	428d      	cmp	r5, r1
 800f002:	d1ea      	bne.n	800efda <st_int8_to16_dual+0x24e>
 800f004:	00bb      	lsls	r3, r7, #2
 800f006:	4418      	add	r0, r3
 800f008:	459a      	cmp	sl, r3
 800f00a:	dd09      	ble.n	800f020 <st_int8_to16_dual+0x294>
 800f00c:	ebaa 0303 	sub.w	r3, sl, r3
 800f010:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800f014:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800f018:	f825 2b02 	strh.w	r2, [r5], #2
 800f01c:	429d      	cmp	r5, r3
 800f01e:	d1f9      	bne.n	800f014 <st_int8_to16_dual+0x288>
 800f020:	b009      	add	sp, #36	; 0x24
 800f022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f026:	4605      	mov	r5, r0
 800f028:	f04f 0c00 	mov.w	ip, #0
 800f02c:	e765      	b.n	800eefa <st_int8_to16_dual+0x16e>
 800f02e:	460d      	mov	r5, r1
 800f030:	2300      	movs	r3, #0
 800f032:	e7e9      	b.n	800f008 <st_int8_to16_dual+0x27c>
 800f034:	ffff0000 	.word	0xffff0000

0800f038 <st_sssa8_ch_fullW_prefetch>:
 800f038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f03c:	b087      	sub	sp, #28
 800f03e:	1887      	adds	r7, r0, r2
 800f040:	9105      	str	r1, [sp, #20]
 800f042:	1049      	asrs	r1, r1, #1
 800f044:	9100      	str	r1, [sp, #0]
 800f046:	f000 80cd 	beq.w	800f1e4 <st_sssa8_ch_fullW_prefetch+0x1ac>
 800f04a:	f1a2 0110 	sub.w	r1, r2, #16
 800f04e:	0909      	lsrs	r1, r1, #4
 800f050:	3101      	adds	r1, #1
 800f052:	ea4f 1901 	mov.w	r9, r1, lsl #4
 800f056:	0189      	lsls	r1, r1, #6
 800f058:	9103      	str	r1, [sp, #12]
 800f05a:	1ed1      	subs	r1, r2, #3
 800f05c:	9102      	str	r1, [sp, #8]
 800f05e:	1f11      	subs	r1, r2, #4
 800f060:	9104      	str	r1, [sp, #16]
 800f062:	2a0f      	cmp	r2, #15
 800f064:	f340 80d2 	ble.w	800f20c <st_sssa8_ch_fullW_prefetch+0x1d4>
 800f068:	eb00 0409 	add.w	r4, r0, r9
 800f06c:	463e      	mov	r6, r7
 800f06e:	4619      	mov	r1, r3
 800f070:	6805      	ldr	r5, [r0, #0]
 800f072:	f8d6 c000 	ldr.w	ip, [r6]
 800f076:	fa2f fe85 	sxtb16	lr, r5
 800f07a:	ea4f 2535 	mov.w	r5, r5, ror #8
 800f07e:	f8c1 e000 	str.w	lr, [r1]
 800f082:	fa2f f585 	sxtb16	r5, r5
 800f086:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800f08a:	604d      	str	r5, [r1, #4]
 800f08c:	fa2f fc8c 	sxtb16	ip, ip
 800f090:	fa2f f58e 	sxtb16	r5, lr
 800f094:	f8c1 c008 	str.w	ip, [r1, #8]
 800f098:	60cd      	str	r5, [r1, #12]
 800f09a:	6845      	ldr	r5, [r0, #4]
 800f09c:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800f0a0:	fa2f fe85 	sxtb16	lr, r5
 800f0a4:	ea4f 2535 	mov.w	r5, r5, ror #8
 800f0a8:	f8c1 e010 	str.w	lr, [r1, #16]
 800f0ac:	fa2f f585 	sxtb16	r5, r5
 800f0b0:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800f0b4:	614d      	str	r5, [r1, #20]
 800f0b6:	fa2f fc8c 	sxtb16	ip, ip
 800f0ba:	fa2f f58e 	sxtb16	r5, lr
 800f0be:	f8c1 c018 	str.w	ip, [r1, #24]
 800f0c2:	61cd      	str	r5, [r1, #28]
 800f0c4:	6885      	ldr	r5, [r0, #8]
 800f0c6:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800f0ca:	fa2f fe85 	sxtb16	lr, r5
 800f0ce:	ea4f 2535 	mov.w	r5, r5, ror #8
 800f0d2:	f8c1 e020 	str.w	lr, [r1, #32]
 800f0d6:	fa2f f585 	sxtb16	r5, r5
 800f0da:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800f0de:	624d      	str	r5, [r1, #36]	; 0x24
 800f0e0:	fa2f fc8c 	sxtb16	ip, ip
 800f0e4:	fa2f f58e 	sxtb16	r5, lr
 800f0e8:	f8c1 c028 	str.w	ip, [r1, #40]	; 0x28
 800f0ec:	62cd      	str	r5, [r1, #44]	; 0x2c
 800f0ee:	68c5      	ldr	r5, [r0, #12]
 800f0f0:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800f0f4:	fa2f fe85 	sxtb16	lr, r5
 800f0f8:	3010      	adds	r0, #16
 800f0fa:	4284      	cmp	r4, r0
 800f0fc:	ea4f 2535 	mov.w	r5, r5, ror #8
 800f100:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 800f104:	fa2f f585 	sxtb16	r5, r5
 800f108:	f106 0610 	add.w	r6, r6, #16
 800f10c:	634d      	str	r5, [r1, #52]	; 0x34
 800f10e:	ea4f 253c 	mov.w	r5, ip, ror #8
 800f112:	f101 0140 	add.w	r1, r1, #64	; 0x40
 800f116:	fa2f fc8c 	sxtb16	ip, ip
 800f11a:	fa2f f585 	sxtb16	r5, r5
 800f11e:	f841 cc08 	str.w	ip, [r1, #-8]
 800f122:	f841 5c04 	str.w	r5, [r1, #-4]
 800f126:	d1a3      	bne.n	800f070 <st_sssa8_ch_fullW_prefetch+0x38>
 800f128:	9903      	ldr	r1, [sp, #12]
 800f12a:	444f      	add	r7, r9
 800f12c:	440b      	add	r3, r1
 800f12e:	46cc      	mov	ip, r9
 800f130:	9902      	ldr	r1, [sp, #8]
 800f132:	458c      	cmp	ip, r1
 800f134:	da2f      	bge.n	800f196 <st_sssa8_ch_fullW_prefetch+0x15e>
 800f136:	9904      	ldr	r1, [sp, #16]
 800f138:	eba1 080c 	sub.w	r8, r1, ip
 800f13c:	ea4f 0898 	mov.w	r8, r8, lsr #2
 800f140:	f108 0a01 	add.w	sl, r8, #1
 800f144:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800f148:	9101      	str	r1, [sp, #4]
 800f14a:	eb04 0e01 	add.w	lr, r4, r1
 800f14e:	463e      	mov	r6, r7
 800f150:	4618      	mov	r0, r3
 800f152:	f854 1b04 	ldr.w	r1, [r4], #4
 800f156:	f856 5b04 	ldr.w	r5, [r6], #4
 800f15a:	fa2f fb81 	sxtb16	fp, r1
 800f15e:	4574      	cmp	r4, lr
 800f160:	f8c0 b000 	str.w	fp, [r0]
 800f164:	ea4f 2131 	mov.w	r1, r1, ror #8
 800f168:	ea4f 2b35 	mov.w	fp, r5, ror #8
 800f16c:	fa2f f181 	sxtb16	r1, r1
 800f170:	fa2f f585 	sxtb16	r5, r5
 800f174:	6041      	str	r1, [r0, #4]
 800f176:	6085      	str	r5, [r0, #8]
 800f178:	fa2f f18b 	sxtb16	r1, fp
 800f17c:	f100 0010 	add.w	r0, r0, #16
 800f180:	f840 1c04 	str.w	r1, [r0, #-4]
 800f184:	d1e5      	bne.n	800f152 <st_sssa8_ch_fullW_prefetch+0x11a>
 800f186:	9901      	ldr	r1, [sp, #4]
 800f188:	f10c 0c04 	add.w	ip, ip, #4
 800f18c:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 800f190:	eb03 130a 	add.w	r3, r3, sl, lsl #4
 800f194:	440f      	add	r7, r1
 800f196:	4562      	cmp	r2, ip
 800f198:	dd1c      	ble.n	800f1d4 <st_sssa8_ch_fullW_prefetch+0x19c>
 800f19a:	f994 1000 	ldrsb.w	r1, [r4]
 800f19e:	8019      	strh	r1, [r3, #0]
 800f1a0:	f997 1000 	ldrsb.w	r1, [r7]
 800f1a4:	8059      	strh	r1, [r3, #2]
 800f1a6:	f10c 0101 	add.w	r1, ip, #1
 800f1aa:	428a      	cmp	r2, r1
 800f1ac:	dd2a      	ble.n	800f204 <st_sssa8_ch_fullW_prefetch+0x1cc>
 800f1ae:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800f1b2:	8099      	strh	r1, [r3, #4]
 800f1b4:	f10c 0c02 	add.w	ip, ip, #2
 800f1b8:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800f1bc:	80d9      	strh	r1, [r3, #6]
 800f1be:	4562      	cmp	r2, ip
 800f1c0:	dd28      	ble.n	800f214 <st_sssa8_ch_fullW_prefetch+0x1dc>
 800f1c2:	f994 1002 	ldrsb.w	r1, [r4, #2]
 800f1c6:	8119      	strh	r1, [r3, #8]
 800f1c8:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800f1cc:	8159      	strh	r1, [r3, #10]
 800f1ce:	3403      	adds	r4, #3
 800f1d0:	3703      	adds	r7, #3
 800f1d2:	330c      	adds	r3, #12
 800f1d4:	9900      	ldr	r1, [sp, #0]
 800f1d6:	3901      	subs	r1, #1
 800f1d8:	eb04 0002 	add.w	r0, r4, r2
 800f1dc:	4417      	add	r7, r2
 800f1de:	9100      	str	r1, [sp, #0]
 800f1e0:	f47f af3f 	bne.w	800f062 <st_sssa8_ch_fullW_prefetch+0x2a>
 800f1e4:	9905      	ldr	r1, [sp, #20]
 800f1e6:	07c9      	lsls	r1, r1, #31
 800f1e8:	d509      	bpl.n	800f1fe <st_sssa8_ch_fullW_prefetch+0x1c6>
 800f1ea:	2a00      	cmp	r2, #0
 800f1ec:	dd07      	ble.n	800f1fe <st_sssa8_ch_fullW_prefetch+0x1c6>
 800f1ee:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800f1f2:	f910 1b01 	ldrsb.w	r1, [r0], #1
 800f1f6:	f823 1b02 	strh.w	r1, [r3], #2
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d1f9      	bne.n	800f1f2 <st_sssa8_ch_fullW_prefetch+0x1ba>
 800f1fe:	b007      	add	sp, #28
 800f200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f204:	3401      	adds	r4, #1
 800f206:	3701      	adds	r7, #1
 800f208:	3304      	adds	r3, #4
 800f20a:	e7e3      	b.n	800f1d4 <st_sssa8_ch_fullW_prefetch+0x19c>
 800f20c:	4604      	mov	r4, r0
 800f20e:	f04f 0c00 	mov.w	ip, #0
 800f212:	e78d      	b.n	800f130 <st_sssa8_ch_fullW_prefetch+0xf8>
 800f214:	3402      	adds	r4, #2
 800f216:	3702      	adds	r7, #2
 800f218:	3308      	adds	r3, #8
 800f21a:	e7db      	b.n	800f1d4 <st_sssa8_ch_fullW_prefetch+0x19c>

0800f21c <st_sssa8_ch_nn_mat_mult_nt_t>:
 800f21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f220:	b0b3      	sub	sp, #204	; 0xcc
 800f222:	9023      	str	r0, [sp, #140]	; 0x8c
 800f224:	9224      	str	r2, [sp, #144]	; 0x90
 800f226:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f228:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800f22a:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 800f22e:	9129      	str	r1, [sp, #164]	; 0xa4
 800f230:	2800      	cmp	r0, #0
 800f232:	bf18      	it	ne
 800f234:	4602      	movne	r2, r0
 800f236:	9243      	str	r2, [sp, #268]	; 0x10c
 800f238:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f23a:	932e      	str	r3, [sp, #184]	; 0xb8
 800f23c:	2a01      	cmp	r2, #1
 800f23e:	f340 8239 	ble.w	800f6b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x498>
 800f242:	4616      	mov	r6, r2
 800f244:	3a02      	subs	r2, #2
 800f246:	461f      	mov	r7, r3
 800f248:	0852      	lsrs	r2, r2, #1
 800f24a:	f1ab 0310 	sub.w	r3, fp, #16
 800f24e:	9230      	str	r2, [sp, #192]	; 0xc0
 800f250:	091b      	lsrs	r3, r3, #4
 800f252:	00d2      	lsls	r2, r2, #3
 800f254:	3301      	adds	r3, #1
 800f256:	320c      	adds	r2, #12
 800f258:	ea4f 00ab 	mov.w	r0, fp, asr #2
 800f25c:	9227      	str	r2, [sp, #156]	; 0x9c
 800f25e:	011a      	lsls	r2, r3, #4
 800f260:	0084      	lsls	r4, r0, #2
 800f262:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 800f264:	9205      	str	r2, [sp, #20]
 800f266:	019a      	lsls	r2, r3, #6
 800f268:	9222      	str	r2, [sp, #136]	; 0x88
 800f26a:	eb0b 0204 	add.w	r2, fp, r4
 800f26e:	106d      	asrs	r5, r5, #1
 800f270:	0076      	lsls	r6, r6, #1
 800f272:	922f      	str	r2, [sp, #188]	; 0xbc
 800f274:	0102      	lsls	r2, r0, #4
 800f276:	922d      	str	r2, [sp, #180]	; 0xb4
 800f278:	fb06 f205 	mul.w	r2, r6, r5
 800f27c:	9228      	str	r2, [sp, #160]	; 0xa0
 800f27e:	f00b 0203 	and.w	r2, fp, #3
 800f282:	922c      	str	r2, [sp, #176]	; 0xb0
 800f284:	f1ab 020f 	sub.w	r2, fp, #15
 800f288:	9211      	str	r2, [sp, #68]	; 0x44
 800f28a:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800f28c:	902b      	str	r0, [sp, #172]	; 0xac
 800f28e:	f002 0201 	and.w	r2, r2, #1
 800f292:	9225      	str	r2, [sp, #148]	; 0x94
 800f294:	ea4f 024b 	mov.w	r2, fp, lsl #1
 800f298:	2304      	movs	r3, #4
 800f29a:	9221      	str	r2, [sp, #132]	; 0x84
 800f29c:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800f2a0:	9315      	str	r3, [sp, #84]	; 0x54
 800f2a2:	922a      	str	r2, [sp, #168]	; 0xa8
 800f2a4:	f1ab 0304 	sub.w	r3, fp, #4
 800f2a8:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800f2aa:	9314      	str	r3, [sp, #80]	; 0x50
 800f2ac:	f10b 0301 	add.w	r3, fp, #1
 800f2b0:	3202      	adds	r2, #2
 800f2b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2b6:	9431      	str	r4, [sp, #196]	; 0xc4
 800f2b8:	9526      	str	r5, [sp, #152]	; 0x98
 800f2ba:	9612      	str	r6, [sp, #72]	; 0x48
 800f2bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800f2be:	9716      	str	r7, [sp, #88]	; 0x58
 800f2c0:	911c      	str	r1, [sp, #112]	; 0x70
 800f2c2:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800f2c4:	9942      	ldr	r1, [sp, #264]	; 0x108
 800f2c6:	441a      	add	r2, r3
 800f2c8:	4419      	add	r1, r3
 800f2ca:	9220      	str	r2, [sp, #128]	; 0x80
 800f2cc:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800f2d0:	920c      	str	r2, [sp, #48]	; 0x30
 800f2d2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800f2d6:	920e      	str	r2, [sp, #56]	; 0x38
 800f2d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f2da:	911f      	str	r1, [sp, #124]	; 0x7c
 800f2dc:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 800f2e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f2e4:	9204      	str	r2, [sp, #16]
 800f2e6:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800f2e8:	9103      	str	r1, [sp, #12]
 800f2ea:	4611      	mov	r1, r2
 800f2ec:	58ca      	ldr	r2, [r1, r3]
 800f2ee:	920d      	str	r2, [sp, #52]	; 0x34
 800f2f0:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800f2f2:	58d3      	ldr	r3, [r2, r3]
 800f2f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f2f6:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	f000 83eb 	beq.w	800fad4 <st_sssa8_ch_nn_mat_mult_nt_t+0x8b8>
 800f2fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f300:	2b00      	cmp	r3, #0
 800f302:	f040 839b 	bne.w	800fa3c <st_sssa8_ch_nn_mat_mult_nt_t+0x820>
 800f306:	4619      	mov	r1, r3
 800f308:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800f30a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f30c:	1910      	adds	r0, r2, r4
 800f30e:	5912      	ldr	r2, [r2, r4]
 800f310:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800f314:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800f316:	4413      	add	r3, r2
 800f318:	930a      	str	r3, [sp, #40]	; 0x28
 800f31a:	180b      	adds	r3, r1, r0
 800f31c:	9309      	str	r3, [sp, #36]	; 0x24
 800f31e:	2c00      	cmp	r4, #0
 800f320:	f000 843d 	beq.w	800fb9e <st_sssa8_ch_nn_mat_mult_nt_t+0x982>
 800f324:	9804      	ldr	r0, [sp, #16]
 800f326:	9903      	ldr	r1, [sp, #12]
 800f328:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 800f32c:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 800f330:	9402      	str	r4, [sp, #8]
 800f332:	2501      	movs	r5, #1
 800f334:	1e83      	subs	r3, r0, #2
 800f336:	fa05 f303 	lsl.w	r3, r5, r3
 800f33a:	9319      	str	r3, [sp, #100]	; 0x64
 800f33c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800f33e:	1e8a      	subs	r2, r1, #2
 800f340:	fa05 f202 	lsl.w	r2, r5, r2
 800f344:	3b03      	subs	r3, #3
 800f346:	9218      	str	r2, [sp, #96]	; 0x60
 800f348:	9310      	str	r3, [sp, #64]	; 0x40
 800f34a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f34c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f34e:	4413      	add	r3, r2
 800f350:	9313      	str	r3, [sp, #76]	; 0x4c
 800f352:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f354:	9301      	str	r3, [sp, #4]
 800f356:	1a6b      	subs	r3, r5, r1
 800f358:	931d      	str	r3, [sp, #116]	; 0x74
 800f35a:	1e4b      	subs	r3, r1, #1
 800f35c:	931a      	str	r3, [sp, #104]	; 0x68
 800f35e:	1a2b      	subs	r3, r5, r0
 800f360:	931e      	str	r3, [sp, #120]	; 0x78
 800f362:	1e43      	subs	r3, r0, #1
 800f364:	931b      	str	r3, [sp, #108]	; 0x6c
 800f366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f368:	2b00      	cmp	r3, #0
 800f36a:	f340 825c 	ble.w	800f826 <st_sssa8_ch_nn_mat_mult_nt_t+0x60a>
 800f36e:	9b05      	ldr	r3, [sp, #20]
 800f370:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f372:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f374:	f8dd 810c 	ldr.w	r8, [sp, #268]	; 0x10c
 800f378:	4453      	add	r3, sl
 800f37a:	9300      	str	r3, [sp, #0]
 800f37c:	4634      	mov	r4, r6
 800f37e:	4603      	mov	r3, r0
 800f380:	eb0a 090b 	add.w	r9, sl, fp
 800f384:	f8da 5000 	ldr.w	r5, [sl]
 800f388:	f8d8 2000 	ldr.w	r2, [r8]
 800f38c:	fa2f f185 	sxtb16	r1, r5
 800f390:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800f394:	fa2f f595 	sxtb16	r5, r5, ror #8
 800f398:	f8d8 e008 	ldr.w	lr, [r8, #8]
 800f39c:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800f3a0:	fb21 6602 	smlad	r6, r1, r2, r6
 800f3a4:	fb25 660c 	smlad	r6, r5, ip, r6
 800f3a8:	fb21 000e 	smlad	r0, r1, lr, r0
 800f3ac:	fb25 0007 	smlad	r0, r5, r7, r0
 800f3b0:	f85a 100b 	ldr.w	r1, [sl, fp]
 800f3b4:	fa2f f581 	sxtb16	r5, r1
 800f3b8:	fa2f f191 	sxtb16	r1, r1, ror #8
 800f3bc:	fb25 4202 	smlad	r2, r5, r2, r4
 800f3c0:	fb25 330e 	smlad	r3, r5, lr, r3
 800f3c4:	fb21 220c 	smlad	r2, r1, ip, r2
 800f3c8:	f8d8 c010 	ldr.w	ip, [r8, #16]
 800f3cc:	f8d8 4014 	ldr.w	r4, [r8, #20]
 800f3d0:	fb21 3707 	smlad	r7, r1, r7, r3
 800f3d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f3d8:	f8d8 e018 	ldr.w	lr, [r8, #24]
 800f3dc:	fa2f f583 	sxtb16	r5, r3
 800f3e0:	f8d8 101c 	ldr.w	r1, [r8, #28]
 800f3e4:	fa2f f393 	sxtb16	r3, r3, ror #8
 800f3e8:	fb25 660c 	smlad	r6, r5, ip, r6
 800f3ec:	fb23 6604 	smlad	r6, r3, r4, r6
 800f3f0:	fb25 050e 	smlad	r5, r5, lr, r0
 800f3f4:	fb23 5501 	smlad	r5, r3, r1, r5
 800f3f8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800f3fc:	fa2f f380 	sxtb16	r3, r0
 800f400:	fa2f f090 	sxtb16	r0, r0, ror #8
 800f404:	fb23 2c0c 	smlad	ip, r3, ip, r2
 800f408:	fb23 770e 	smlad	r7, r3, lr, r7
 800f40c:	fb20 cc04 	smlad	ip, r0, r4, ip
 800f410:	f8d8 4020 	ldr.w	r4, [r8, #32]
 800f414:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 800f418:	fb20 7101 	smlad	r1, r0, r1, r7
 800f41c:	f8da 2008 	ldr.w	r2, [sl, #8]
 800f420:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 800f424:	fa2f f382 	sxtb16	r3, r2
 800f428:	f8d8 702c 	ldr.w	r7, [r8, #44]	; 0x2c
 800f42c:	fa2f f292 	sxtb16	r2, r2, ror #8
 800f430:	fb23 6604 	smlad	r6, r3, r4, r6
 800f434:	fb22 660e 	smlad	r6, r2, lr, r6
 800f438:	fb23 5300 	smlad	r3, r3, r0, r5
 800f43c:	fb22 3207 	smlad	r2, r2, r7, r3
 800f440:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800f444:	fa2f f985 	sxtb16	r9, r5
 800f448:	fa2f f595 	sxtb16	r5, r5, ror #8
 800f44c:	fb29 c404 	smlad	r4, r9, r4, ip
 800f450:	fb29 1100 	smlad	r1, r9, r0, r1
 800f454:	fb25 4e0e 	smlad	lr, r5, lr, r4
 800f458:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 800f45c:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 800f460:	fb25 1707 	smlad	r7, r5, r7, r1
 800f464:	f8da 000c 	ldr.w	r0, [sl, #12]
 800f468:	f8d8 1038 	ldr.w	r1, [r8, #56]	; 0x38
 800f46c:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 800f470:	fa2f f380 	sxtb16	r3, r0
 800f474:	f108 0840 	add.w	r8, r8, #64	; 0x40
 800f478:	f10a 0a10 	add.w	sl, sl, #16
 800f47c:	fa2f f090 	sxtb16	r0, r0, ror #8
 800f480:	fb23 660c 	smlad	r6, r3, ip, r6
 800f484:	fb20 6604 	smlad	r6, r0, r4, r6
 800f488:	fb23 2201 	smlad	r2, r3, r1, r2
 800f48c:	fb20 2005 	smlad	r0, r0, r5, r2
 800f490:	eb0a 090b 	add.w	r9, sl, fp
 800f494:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800f498:	fa2f f283 	sxtb16	r2, r3
 800f49c:	fa2f f393 	sxtb16	r3, r3, ror #8
 800f4a0:	fb22 ee0c 	smlad	lr, r2, ip, lr
 800f4a4:	fb22 7701 	smlad	r7, r2, r1, r7
 800f4a8:	fb23 e404 	smlad	r4, r3, r4, lr
 800f4ac:	fb23 7305 	smlad	r3, r3, r5, r7
 800f4b0:	9a00      	ldr	r2, [sp, #0]
 800f4b2:	4592      	cmp	sl, r2
 800f4b4:	f47f af66 	bne.w	800f384 <st_sssa8_ch_nn_mat_mult_nt_t+0x168>
 800f4b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f4ba:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f4be:	9200      	str	r2, [sp, #0]
 800f4c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f4c2:	4591      	cmp	r9, r2
 800f4c4:	da43      	bge.n	800f54e <st_sssa8_ch_nn_mat_mult_nt_t+0x332>
 800f4c6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f4c8:	9f00      	ldr	r7, [sp, #0]
 800f4ca:	f8cd 9020 	str.w	r9, [sp, #32]
 800f4ce:	eba1 0209 	sub.w	r2, r1, r9
 800f4d2:	0892      	lsrs	r2, r2, #2
 800f4d4:	9207      	str	r2, [sp, #28]
 800f4d6:	3201      	adds	r2, #1
 800f4d8:	9206      	str	r2, [sp, #24]
 800f4da:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800f4de:	f8cd b100 	str.w	fp, [sp, #256]	; 0x100
 800f4e2:	4691      	mov	r9, r2
 800f4e4:	468b      	mov	fp, r1
 800f4e6:	f85a 2b04 	ldr.w	r2, [sl], #4
 800f4ea:	683d      	ldr	r5, [r7, #0]
 800f4ec:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800f4f0:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800f4f4:	fa2f f182 	sxtb16	r1, r2
 800f4f8:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800f4fc:	fa2f f292 	sxtb16	r2, r2, ror #8
 800f500:	3710      	adds	r7, #16
 800f502:	fb21 6605 	smlad	r6, r1, r5, r6
 800f506:	fb22 660e 	smlad	r6, r2, lr, r6
 800f50a:	fb21 0008 	smlad	r0, r1, r8, r0
 800f50e:	fb22 000c 	smlad	r0, r2, ip, r0
 800f512:	f85a 200b 	ldr.w	r2, [sl, fp]
 800f516:	fa2f f182 	sxtb16	r1, r2
 800f51a:	fa2f f292 	sxtb16	r2, r2, ror #8
 800f51e:	fb21 4405 	smlad	r4, r1, r5, r4
 800f522:	fb21 3308 	smlad	r3, r1, r8, r3
 800f526:	fb22 440e 	smlad	r4, r2, lr, r4
 800f52a:	fb22 330c 	smlad	r3, r2, ip, r3
 800f52e:	45ca      	cmp	sl, r9
 800f530:	d1d9      	bne.n	800f4e6 <st_sssa8_ch_nn_mat_mult_nt_t+0x2ca>
 800f532:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f536:	9a07      	ldr	r2, [sp, #28]
 800f538:	9906      	ldr	r1, [sp, #24]
 800f53a:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 800f53e:	f109 0904 	add.w	r9, r9, #4
 800f542:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800f546:	9a00      	ldr	r2, [sp, #0]
 800f548:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800f54c:	9200      	str	r2, [sp, #0]
 800f54e:	45cb      	cmp	fp, r9
 800f550:	eb0a 020b 	add.w	r2, sl, fp
 800f554:	f340 812e 	ble.w	800f7b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x598>
 800f558:	9900      	ldr	r1, [sp, #0]
 800f55a:	f99a 2000 	ldrsb.w	r2, [sl]
 800f55e:	f9b1 7000 	ldrsh.w	r7, [r1]
 800f562:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800f566:	f91a 100b 	ldrsb.w	r1, [sl, fp]
 800f56a:	fb17 6602 	smlabb	r6, r7, r2, r6
 800f56e:	fb17 4401 	smlabb	r4, r7, r1, r4
 800f572:	fb15 0002 	smlabb	r0, r5, r2, r0
 800f576:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800f578:	f109 0201 	add.w	r2, r9, #1
 800f57c:	4593      	cmp	fp, r2
 800f57e:	fb15 3301 	smlabb	r3, r5, r1, r3
 800f582:	eb0a 0107 	add.w	r1, sl, r7
 800f586:	f340 8117 	ble.w	800f7b8 <st_sssa8_ch_nn_mat_mult_nt_t+0x59c>
 800f58a:	9a00      	ldr	r2, [sp, #0]
 800f58c:	f99a 7001 	ldrsb.w	r7, [sl, #1]
 800f590:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800f594:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800f598:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f59a:	f109 0902 	add.w	r9, r9, #2
 800f59e:	f91a 2002 	ldrsb.w	r2, [sl, r2]
 800f5a2:	fb15 6607 	smlabb	r6, r5, r7, r6
 800f5a6:	fb11 0007 	smlabb	r0, r1, r7, r0
 800f5aa:	45cb      	cmp	fp, r9
 800f5ac:	f10a 0702 	add.w	r7, sl, #2
 800f5b0:	fb15 4402 	smlabb	r4, r5, r2, r4
 800f5b4:	fb11 3302 	smlabb	r3, r1, r2, r3
 800f5b8:	eb07 020b 	add.w	r2, r7, fp
 800f5bc:	f340 80fa 	ble.w	800f7b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x598>
 800f5c0:	9a00      	ldr	r2, [sp, #0]
 800f5c2:	f917 500b 	ldrsb.w	r5, [r7, fp]
 800f5c6:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 800f5ca:	f9b2 700a 	ldrsh.w	r7, [r2, #10]
 800f5ce:	f99a 2002 	ldrsb.w	r2, [sl, #2]
 800f5d2:	f10a 0a03 	add.w	sl, sl, #3
 800f5d6:	fb11 4405 	smlabb	r4, r1, r5, r4
 800f5da:	fb17 3305 	smlabb	r3, r7, r5, r3
 800f5de:	fb11 6602 	smlabb	r6, r1, r2, r6
 800f5e2:	fb17 0002 	smlabb	r0, r7, r2, r0
 800f5e6:	44da      	add	sl, fp
 800f5e8:	9a03      	ldr	r2, [sp, #12]
 800f5ea:	2a15      	cmp	r2, #21
 800f5ec:	f340 80cd 	ble.w	800f78a <st_sssa8_ch_nn_mat_mult_nt_t+0x56e>
 800f5f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5f2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800f5f4:	fb56 5602 	smmla	r6, r6, r2, r5
 800f5f8:	fb54 5402 	smmla	r4, r4, r2, r5
 800f5fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f5fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f600:	4116      	asrs	r6, r2
 800f602:	440e      	add	r6, r1
 800f604:	f306 0607 	ssat	r6, #8, r6
 800f608:	4114      	asrs	r4, r2
 800f60a:	9a01      	ldr	r2, [sp, #4]
 800f60c:	440c      	add	r4, r1
 800f60e:	7016      	strb	r6, [r2, #0]
 800f610:	f304 0407 	ssat	r4, #8, r4
 800f614:	993f      	ldr	r1, [sp, #252]	; 0xfc
 800f616:	5454      	strb	r4, [r2, r1]
 800f618:	9a04      	ldr	r2, [sp, #16]
 800f61a:	2a15      	cmp	r2, #21
 800f61c:	f340 809e 	ble.w	800f75c <st_sssa8_ch_nn_mat_mult_nt_t+0x540>
 800f620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f622:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800f624:	fb50 4002 	smmla	r0, r0, r2, r4
 800f628:	fb53 4302 	smmla	r3, r3, r2, r4
 800f62c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f62e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f630:	4110      	asrs	r0, r2
 800f632:	4408      	add	r0, r1
 800f634:	f300 0007 	ssat	r0, #8, r0
 800f638:	4113      	asrs	r3, r2
 800f63a:	9a01      	ldr	r2, [sp, #4]
 800f63c:	440b      	add	r3, r1
 800f63e:	7050      	strb	r0, [r2, #1]
 800f640:	f303 0307 	ssat	r3, #8, r3
 800f644:	993f      	ldr	r1, [sp, #252]	; 0xfc
 800f646:	440a      	add	r2, r1
 800f648:	7053      	strb	r3, [r2, #1]
 800f64a:	9b01      	ldr	r3, [sp, #4]
 800f64c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f64e:	4413      	add	r3, r2
 800f650:	9301      	str	r3, [sp, #4]
 800f652:	9b02      	ldr	r3, [sp, #8]
 800f654:	3b01      	subs	r3, #1
 800f656:	9302      	str	r3, [sp, #8]
 800f658:	f47f ae85 	bne.w	800f366 <st_sssa8_ch_nn_mat_mult_nt_t+0x14a>
 800f65c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f65e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800f660:	eb03 0b02 	add.w	fp, r3, r2
 800f664:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800f666:	2b00      	cmp	r3, #0
 800f668:	f040 80e6 	bne.w	800f838 <st_sssa8_ch_nn_mat_mult_nt_t+0x61c>
 800f66c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f66e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f670:	4413      	add	r3, r2
 800f672:	931c      	str	r3, [sp, #112]	; 0x70
 800f674:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f676:	3302      	adds	r3, #2
 800f678:	9316      	str	r3, [sp, #88]	; 0x58
 800f67a:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800f67c:	b11b      	cbz	r3, 800f686 <st_sssa8_ch_nn_mat_mult_nt_t+0x46a>
 800f67e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f680:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800f682:	4413      	add	r3, r2
 800f684:	9343      	str	r3, [sp, #268]	; 0x10c
 800f686:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f688:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f68a:	3204      	adds	r2, #4
 800f68c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f68e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800f690:	3308      	adds	r3, #8
 800f692:	429a      	cmp	r2, r3
 800f694:	9315      	str	r3, [sp, #84]	; 0x54
 800f696:	f47f ae14 	bne.w	800f2c2 <st_sssa8_ch_nn_mat_mult_nt_t+0xa6>
 800f69a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800f69c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800f69e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f6a0:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	fb03 1202 	mla	r2, r3, r2, r1
 800f6aa:	9229      	str	r2, [sp, #164]	; 0xa4
 800f6ac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f6ae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800f6b2:	932e      	str	r3, [sp, #184]	; 0xb8
 800f6b4:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800f6b6:	07db      	lsls	r3, r3, #31
 800f6b8:	d54c      	bpl.n	800f754 <st_sssa8_ch_nn_mat_mult_nt_t+0x538>
 800f6ba:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	dd49      	ble.n	800f754 <st_sssa8_ch_nn_mat_mult_nt_t+0x538>
 800f6c0:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800f6c2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f6c4:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 800f6c8:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 800f6cc:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
 800f6d0:	f103 4700 	add.w	r7, r3, #2147483648	; 0x80000000
 800f6d4:	3e01      	subs	r6, #1
 800f6d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f6d8:	00b6      	lsls	r6, r6, #2
 800f6da:	4433      	add	r3, r6
 800f6dc:	469e      	mov	lr, r3
 800f6de:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800f6e0:	f8cd e000 	str.w	lr, [sp]
 800f6e4:	eb03 0c06 	add.w	ip, r3, r6
 800f6e8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800f6ea:	441e      	add	r6, r3
 800f6ec:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800f6ee:	3f01      	subs	r7, #1
 800f6f0:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 800f6f4:	2500      	movs	r5, #0
 800f6f6:	f04f 0801 	mov.w	r8, #1
 800f6fa:	9b00      	ldr	r3, [sp, #0]
 800f6fc:	f1bb 0f00 	cmp.w	fp, #0
 800f700:	6819      	ldr	r1, [r3, #0]
 800f702:	dd0d      	ble.n	800f720 <st_sssa8_ch_nn_mat_mult_nt_t+0x504>
 800f704:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f706:	eb02 0e0b 	add.w	lr, r2, fp
 800f70a:	1e58      	subs	r0, r3, #1
 800f70c:	f912 3b01 	ldrsb.w	r3, [r2], #1
 800f710:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 800f714:	eba3 0309 	sub.w	r3, r3, r9
 800f718:	4572      	cmp	r2, lr
 800f71a:	fb04 1103 	mla	r1, r4, r3, r1
 800f71e:	d1f5      	bne.n	800f70c <st_sssa8_ch_nn_mat_mult_nt_t+0x4f0>
 800f720:	f9b7 0000 	ldrsh.w	r0, [r7]
 800f724:	f8dc e000 	ldr.w	lr, [ip]
 800f728:	6834      	ldr	r4, [r6, #0]
 800f72a:	2815      	cmp	r0, #21
 800f72c:	f340 823c 	ble.w	800fba8 <st_sssa8_ch_nn_mat_mult_nt_t+0x98c>
 800f730:	1e83      	subs	r3, r0, #2
 800f732:	3801      	subs	r0, #1
 800f734:	fa08 f303 	lsl.w	r3, r8, r3
 800f738:	fb51 330e 	smmla	r3, r1, lr, r3
 800f73c:	4103      	asrs	r3, r0
 800f73e:	4423      	add	r3, r4
 800f740:	f303 0307 	ssat	r3, #8, r3
 800f744:	f88a 3000 	strb.w	r3, [sl]
 800f748:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800f74a:	449a      	add	sl, r3
 800f74c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800f74e:	3501      	adds	r5, #1
 800f750:	42ab      	cmp	r3, r5
 800f752:	d1d2      	bne.n	800f6fa <st_sssa8_ch_nn_mat_mult_nt_t+0x4de>
 800f754:	2000      	movs	r0, #0
 800f756:	b033      	add	sp, #204	; 0xcc
 800f758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f75c:	2a00      	cmp	r2, #0
 800f75e:	dd2d      	ble.n	800f7bc <st_sssa8_ch_nn_mat_mult_nt_t+0x5a0>
 800f760:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f762:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f764:	0040      	lsls	r0, r0, #1
 800f766:	005b      	lsls	r3, r3, #1
 800f768:	fb50 5001 	smmla	r0, r0, r1, r5
 800f76c:	fb53 5301 	smmla	r3, r3, r1, r5
 800f770:	4110      	asrs	r0, r2
 800f772:	f300 0007 	ssat	r0, #8, r0
 800f776:	9901      	ldr	r1, [sp, #4]
 800f778:	4113      	asrs	r3, r2
 800f77a:	7048      	strb	r0, [r1, #1]
 800f77c:	f303 0307 	ssat	r3, #8, r3
 800f780:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f782:	188a      	adds	r2, r1, r2
 800f784:	7053      	strb	r3, [r2, #1]
 800f786:	460b      	mov	r3, r1
 800f788:	e760      	b.n	800f64c <st_sssa8_ch_nn_mat_mult_nt_t+0x430>
 800f78a:	2a00      	cmp	r2, #0
 800f78c:	dd31      	ble.n	800f7f2 <st_sssa8_ch_nn_mat_mult_nt_t+0x5d6>
 800f78e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f790:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f792:	0076      	lsls	r6, r6, #1
 800f794:	0064      	lsls	r4, r4, #1
 800f796:	fb56 7601 	smmla	r6, r6, r1, r7
 800f79a:	fb54 7401 	smmla	r4, r4, r1, r7
 800f79e:	4116      	asrs	r6, r2
 800f7a0:	f306 0607 	ssat	r6, #8, r6
 800f7a4:	9901      	ldr	r1, [sp, #4]
 800f7a6:	4114      	asrs	r4, r2
 800f7a8:	700e      	strb	r6, [r1, #0]
 800f7aa:	f304 0407 	ssat	r4, #8, r4
 800f7ae:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f7b0:	548c      	strb	r4, [r1, r2]
 800f7b2:	e731      	b.n	800f618 <st_sssa8_ch_nn_mat_mult_nt_t+0x3fc>
 800f7b4:	4692      	mov	sl, r2
 800f7b6:	e717      	b.n	800f5e8 <st_sssa8_ch_nn_mat_mult_nt_t+0x3cc>
 800f7b8:	468a      	mov	sl, r1
 800f7ba:	e715      	b.n	800f5e8 <st_sssa8_ch_nn_mat_mult_nt_t+0x3cc>
 800f7bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f7be:	fa00 f201 	lsl.w	r2, r0, r1
 800f7c2:	f302 021f 	ssat	r2, #32, r2
 800f7c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f7c8:	fb52 f210 	smmulr	r2, r2, r0
 800f7cc:	408b      	lsls	r3, r1
 800f7ce:	f303 031f 	ssat	r3, #32, r3
 800f7d2:	fb53 f310 	smmulr	r3, r3, r0
 800f7d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f7d8:	440a      	add	r2, r1
 800f7da:	f302 0207 	ssat	r2, #8, r2
 800f7de:	9801      	ldr	r0, [sp, #4]
 800f7e0:	440b      	add	r3, r1
 800f7e2:	7042      	strb	r2, [r0, #1]
 800f7e4:	f303 0307 	ssat	r3, #8, r3
 800f7e8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f7ea:	1882      	adds	r2, r0, r2
 800f7ec:	7053      	strb	r3, [r2, #1]
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	e72c      	b.n	800f64c <st_sssa8_ch_nn_mat_mult_nt_t+0x430>
 800f7f2:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f7f4:	fa06 f201 	lsl.w	r2, r6, r1
 800f7f8:	f302 021f 	ssat	r2, #32, r2
 800f7fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f7fe:	fb52 f215 	smmulr	r2, r2, r5
 800f802:	fa04 f101 	lsl.w	r1, r4, r1
 800f806:	f301 011f 	ssat	r1, #32, r1
 800f80a:	fb51 f115 	smmulr	r1, r1, r5
 800f80e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800f810:	4422      	add	r2, r4
 800f812:	f302 0207 	ssat	r2, #8, r2
 800f816:	9d01      	ldr	r5, [sp, #4]
 800f818:	4421      	add	r1, r4
 800f81a:	702a      	strb	r2, [r5, #0]
 800f81c:	f301 0107 	ssat	r1, #8, r1
 800f820:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f822:	54a9      	strb	r1, [r5, r2]
 800f824:	e6f8      	b.n	800f618 <st_sssa8_ch_nn_mat_mult_nt_t+0x3fc>
 800f826:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f828:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f82a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f82c:	9300      	str	r3, [sp, #0]
 800f82e:	4634      	mov	r4, r6
 800f830:	4603      	mov	r3, r0
 800f832:	f04f 0900 	mov.w	r9, #0
 800f836:	e643      	b.n	800f4c0 <st_sssa8_ch_nn_mat_mult_nt_t+0x2a4>
 800f838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f340 81f3 	ble.w	800fc26 <st_sssa8_ch_nn_mat_mult_nt_t+0xa0a>
 800f840:	9b05      	ldr	r3, [sp, #20]
 800f842:	9d43      	ldr	r5, [sp, #268]	; 0x10c
 800f844:	eb0a 0703 	add.w	r7, sl, r3
 800f848:	e9dd 4309 	ldrd	r4, r3, [sp, #36]	; 0x24
 800f84c:	f8da 2000 	ldr.w	r2, [sl]
 800f850:	6828      	ldr	r0, [r5, #0]
 800f852:	fa2f f182 	sxtb16	r1, r2
 800f856:	fa2f f292 	sxtb16	r2, r2, ror #8
 800f85a:	fb21 4000 	smlad	r0, r1, r0, r4
 800f85e:	686c      	ldr	r4, [r5, #4]
 800f860:	fb22 0404 	smlad	r4, r2, r4, r0
 800f864:	68a8      	ldr	r0, [r5, #8]
 800f866:	fb21 3300 	smlad	r3, r1, r0, r3
 800f86a:	68e9      	ldr	r1, [r5, #12]
 800f86c:	fb22 3201 	smlad	r2, r2, r1, r3
 800f870:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f874:	6928      	ldr	r0, [r5, #16]
 800f876:	fa2f f183 	sxtb16	r1, r3
 800f87a:	fa2f f393 	sxtb16	r3, r3, ror #8
 800f87e:	fb21 4000 	smlad	r0, r1, r0, r4
 800f882:	696c      	ldr	r4, [r5, #20]
 800f884:	fb23 0404 	smlad	r4, r3, r4, r0
 800f888:	69a8      	ldr	r0, [r5, #24]
 800f88a:	fb21 2100 	smlad	r1, r1, r0, r2
 800f88e:	69ea      	ldr	r2, [r5, #28]
 800f890:	fb23 1302 	smlad	r3, r3, r2, r1
 800f894:	f8da 2008 	ldr.w	r2, [sl, #8]
 800f898:	6a28      	ldr	r0, [r5, #32]
 800f89a:	fa2f f182 	sxtb16	r1, r2
 800f89e:	fa2f f292 	sxtb16	r2, r2, ror #8
 800f8a2:	fb21 4000 	smlad	r0, r1, r0, r4
 800f8a6:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800f8a8:	fb22 0606 	smlad	r6, r2, r6, r0
 800f8ac:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800f8ae:	fb21 3100 	smlad	r1, r1, r0, r3
 800f8b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f8b4:	fb22 1203 	smlad	r2, r2, r3, r1
 800f8b8:	f8da 400c 	ldr.w	r4, [sl, #12]
 800f8bc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f8be:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
 800f8c2:	f8d5 e038 	ldr.w	lr, [r5, #56]	; 0x38
 800f8c6:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 800f8ca:	fa2f f184 	sxtb16	r1, r4
 800f8ce:	3540      	adds	r5, #64	; 0x40
 800f8d0:	f10a 0a10 	add.w	sl, sl, #16
 800f8d4:	fa2f f394 	sxtb16	r3, r4, ror #8
 800f8d8:	fb21 6000 	smlad	r0, r1, r0, r6
 800f8dc:	fb23 0408 	smlad	r4, r3, r8, r0
 800f8e0:	fb21 220e 	smlad	r2, r1, lr, r2
 800f8e4:	fb23 230c 	smlad	r3, r3, ip, r2
 800f8e8:	45ba      	cmp	sl, r7
 800f8ea:	d1af      	bne.n	800f84c <st_sssa8_ch_nn_mat_mult_nt_t+0x630>
 800f8ec:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
 800f8f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f8f2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f8f4:	f8dd e014 	ldr.w	lr, [sp, #20]
 800f8f8:	eb03 0c02 	add.w	ip, r3, r2
 800f8fc:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800f8fe:	3b03      	subs	r3, #3
 800f900:	459e      	cmp	lr, r3
 800f902:	da32      	bge.n	800f96a <st_sssa8_ch_nn_mat_mult_nt_t+0x74e>
 800f904:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f906:	f8cd c000 	str.w	ip, [sp]
 800f90a:	eba3 080e 	sub.w	r8, r3, lr
 800f90e:	ea4f 0898 	mov.w	r8, r8, lsr #2
 800f912:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 800f916:	f108 0901 	add.w	r9, r8, #1
 800f91a:	eb0a 0789 	add.w	r7, sl, r9, lsl #2
 800f91e:	4661      	mov	r1, ip
 800f920:	f8cd e004 	str.w	lr, [sp, #4]
 800f924:	f85a 3b04 	ldr.w	r3, [sl], #4
 800f928:	6808      	ldr	r0, [r1, #0]
 800f92a:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800f92e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800f932:	68ce      	ldr	r6, [r1, #12]
 800f934:	fa2f f283 	sxtb16	r2, r3
 800f938:	3110      	adds	r1, #16
 800f93a:	fa2f f393 	sxtb16	r3, r3, ror #8
 800f93e:	fb22 4400 	smlad	r4, r2, r0, r4
 800f942:	fb23 440e 	smlad	r4, r3, lr, r4
 800f946:	fb22 550c 	smlad	r5, r2, ip, r5
 800f94a:	fb23 5506 	smlad	r5, r3, r6, r5
 800f94e:	45ba      	cmp	sl, r7
 800f950:	d1e8      	bne.n	800f924 <st_sssa8_ch_nn_mat_mult_nt_t+0x708>
 800f952:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f956:	f8dd c000 	ldr.w	ip, [sp]
 800f95a:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 800f95e:	f10e 0e04 	add.w	lr, lr, #4
 800f962:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 800f966:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 800f96a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800f96c:	4573      	cmp	r3, lr
 800f96e:	dd2f      	ble.n	800f9d0 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b4>
 800f970:	f99a 2000 	ldrsb.w	r2, [sl]
 800f974:	f8bc 3000 	ldrh.w	r3, [ip]
 800f978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f97a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f97c:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 800f980:	fb13 0002 	smlabb	r0, r3, r2, r0
 800f984:	fb11 4402 	smlabb	r4, r1, r2, r4
 800f988:	9a40      	ldr	r2, [sp, #256]	; 0x100
 800f98a:	9009      	str	r0, [sp, #36]	; 0x24
 800f98c:	f10e 0301 	add.w	r3, lr, #1
 800f990:	429a      	cmp	r2, r3
 800f992:	940a      	str	r4, [sp, #40]	; 0x28
 800f994:	dd1c      	ble.n	800f9d0 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b4>
 800f996:	f99a 3001 	ldrsb.w	r3, [sl, #1]
 800f99a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800f99e:	f8bc 1006 	ldrh.w	r1, [ip, #6]
 800f9a2:	fb12 0003 	smlabb	r0, r2, r3, r0
 800f9a6:	fb11 4403 	smlabb	r4, r1, r3, r4
 800f9aa:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800f9ac:	9009      	str	r0, [sp, #36]	; 0x24
 800f9ae:	f10e 0e02 	add.w	lr, lr, #2
 800f9b2:	4573      	cmp	r3, lr
 800f9b4:	940a      	str	r4, [sp, #40]	; 0x28
 800f9b6:	dd0b      	ble.n	800f9d0 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b4>
 800f9b8:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 800f9bc:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 800f9c0:	f8bc 100a 	ldrh.w	r1, [ip, #10]
 800f9c4:	fb12 0203 	smlabb	r2, r2, r3, r0
 800f9c8:	fb11 4303 	smlabb	r3, r1, r3, r4
 800f9cc:	9209      	str	r2, [sp, #36]	; 0x24
 800f9ce:	930a      	str	r3, [sp, #40]	; 0x28
 800f9d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f9d2:	f933 2c02 	ldrsh.w	r2, [r3, #-2]
 800f9d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f9d8:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f9dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f9de:	2a15      	cmp	r2, #21
 800f9e0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800f9e4:	f340 80cf 	ble.w	800fb86 <st_sssa8_ch_nn_mat_mult_nt_t+0x96a>
 800f9e8:	1e93      	subs	r3, r2, #2
 800f9ea:	2401      	movs	r4, #1
 800f9ec:	3a01      	subs	r2, #1
 800f9ee:	fa04 f303 	lsl.w	r3, r4, r3
 800f9f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f9f4:	fb54 3300 	smmla	r3, r4, r0, r3
 800f9f8:	4113      	asrs	r3, r2
 800f9fa:	440b      	add	r3, r1
 800f9fc:	f303 0307 	ssat	r3, #8, r3
 800fa00:	f88b 3000 	strb.w	r3, [fp]
 800fa04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa06:	f9b3 1000 	ldrsh.w	r1, [r3]
 800fa0a:	2915      	cmp	r1, #21
 800fa0c:	f340 80a9 	ble.w	800fb62 <st_sssa8_ch_nn_mat_mult_nt_t+0x946>
 800fa10:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800fa12:	461c      	mov	r4, r3
 800fa14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa16:	58e2      	ldr	r2, [r4, r3]
 800fa18:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 800fa1a:	1e88      	subs	r0, r1, #2
 800fa1c:	58e3      	ldr	r3, [r4, r3]
 800fa1e:	3901      	subs	r1, #1
 800fa20:	2401      	movs	r4, #1
 800fa22:	fa04 f000 	lsl.w	r0, r4, r0
 800fa26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fa28:	fb54 0003 	smmla	r0, r4, r3, r0
 800fa2c:	fa40 f101 	asr.w	r1, r0, r1
 800fa30:	4411      	add	r1, r2
 800fa32:	f301 0307 	ssat	r3, #8, r1
 800fa36:	f88b 3001 	strb.w	r3, [fp, #1]
 800fa3a:	e617      	b.n	800f66c <st_sssa8_ch_nn_mat_mult_nt_t+0x450>
 800fa3c:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800fa3e:	2c00      	cmp	r4, #0
 800fa40:	f000 80ed 	beq.w	800fc1e <st_sssa8_ch_nn_mat_mult_nt_t+0xa02>
 800fa44:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800fa46:	2300      	movs	r3, #0
 800fa48:	4619      	mov	r1, r3
 800fa4a:	f102 0010 	add.w	r0, r2, #16
 800fa4e:	f930 2c08 	ldrsh.w	r2, [r0, #-8]
 800fa52:	f930 6c10 	ldrsh.w	r6, [r0, #-16]
 800fa56:	f930 5c0e 	ldrsh.w	r5, [r0, #-14]
 800fa5a:	1a9b      	subs	r3, r3, r2
 800fa5c:	f930 2c06 	ldrsh.w	r2, [r0, #-6]
 800fa60:	1a9b      	subs	r3, r3, r2
 800fa62:	f930 2c04 	ldrsh.w	r2, [r0, #-4]
 800fa66:	1b89      	subs	r1, r1, r6
 800fa68:	f930 6c0c 	ldrsh.w	r6, [r0, #-12]
 800fa6c:	1b49      	subs	r1, r1, r5
 800fa6e:	1a9b      	subs	r3, r3, r2
 800fa70:	f930 5c0a 	ldrsh.w	r5, [r0, #-10]
 800fa74:	f930 2c02 	ldrsh.w	r2, [r0, #-2]
 800fa78:	1b89      	subs	r1, r1, r6
 800fa7a:	3c01      	subs	r4, #1
 800fa7c:	eba1 0105 	sub.w	r1, r1, r5
 800fa80:	eba3 0302 	sub.w	r3, r3, r2
 800fa84:	f100 0010 	add.w	r0, r0, #16
 800fa88:	d1e1      	bne.n	800fa4e <st_sssa8_ch_nn_mat_mult_nt_t+0x832>
 800fa8a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800fa8c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800fa8e:	4402      	add	r2, r0
 800fa90:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 800fa92:	b1cd      	cbz	r5, 800fac8 <st_sssa8_ch_nn_mat_mult_nt_t+0x8ac>
 800fa94:	f9b2 4000 	ldrsh.w	r4, [r2]
 800fa98:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800fa9c:	2d01      	cmp	r5, #1
 800fa9e:	eba1 0104 	sub.w	r1, r1, r4
 800faa2:	eba3 0300 	sub.w	r3, r3, r0
 800faa6:	d00f      	beq.n	800fac8 <st_sssa8_ch_nn_mat_mult_nt_t+0x8ac>
 800faa8:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 800faac:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 800fab0:	2d02      	cmp	r5, #2
 800fab2:	eba1 0104 	sub.w	r1, r1, r4
 800fab6:	eba3 0300 	sub.w	r3, r3, r0
 800faba:	d005      	beq.n	800fac8 <st_sssa8_ch_nn_mat_mult_nt_t+0x8ac>
 800fabc:	f9b2 0008 	ldrsh.w	r0, [r2, #8]
 800fac0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800fac4:	1a09      	subs	r1, r1, r0
 800fac6:	1a9b      	subs	r3, r3, r2
 800fac8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800faca:	fb02 f101 	mul.w	r1, r2, r1
 800face:	fb02 f303 	mul.w	r3, r2, r3
 800fad2:	e419      	b.n	800f308 <st_sssa8_ch_nn_mat_mult_nt_t+0xec>
 800fad4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800fad6:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800fad8:	982b      	ldr	r0, [sp, #172]	; 0xac
 800fada:	18ec      	adds	r4, r5, r3
 800fadc:	2800      	cmp	r0, #0
 800fade:	f000 80a7 	beq.w	800fc30 <st_sssa8_ch_nn_mat_mult_nt_t+0xa14>
 800fae2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800fae4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fae8:	f854 1b04 	ldr.w	r1, [r4], #4
 800faec:	fa2f f683 	sxtb16	r6, r3
 800faf0:	3801      	subs	r0, #1
 800faf2:	6016      	str	r6, [r2, #0]
 800faf4:	ea4f 2333 	mov.w	r3, r3, ror #8
 800faf8:	ea4f 2631 	mov.w	r6, r1, ror #8
 800fafc:	fa2f f383 	sxtb16	r3, r3
 800fb00:	fa2f f181 	sxtb16	r1, r1
 800fb04:	6053      	str	r3, [r2, #4]
 800fb06:	6091      	str	r1, [r2, #8]
 800fb08:	fa2f f386 	sxtb16	r3, r6
 800fb0c:	f102 0210 	add.w	r2, r2, #16
 800fb10:	f842 3c04 	str.w	r3, [r2, #-4]
 800fb14:	d1e6      	bne.n	800fae4 <st_sssa8_ch_nn_mat_mult_nt_t+0x8c8>
 800fb16:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fb18:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800fb1a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800fb1c:	185c      	adds	r4, r3, r1
 800fb1e:	189a      	adds	r2, r3, r2
 800fb20:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800fb22:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fb24:	440b      	add	r3, r1
 800fb26:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	f43f abe8 	beq.w	800f2fe <st_sssa8_ch_nn_mat_mult_nt_t+0xe2>
 800fb2e:	f992 1000 	ldrsb.w	r1, [r2]
 800fb32:	8019      	strh	r1, [r3, #0]
 800fb34:	f994 1000 	ldrsb.w	r1, [r4]
 800fb38:	8059      	strh	r1, [r3, #2]
 800fb3a:	2801      	cmp	r0, #1
 800fb3c:	f43f abdf 	beq.w	800f2fe <st_sssa8_ch_nn_mat_mult_nt_t+0xe2>
 800fb40:	f992 1001 	ldrsb.w	r1, [r2, #1]
 800fb44:	8099      	strh	r1, [r3, #4]
 800fb46:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800fb4a:	80d9      	strh	r1, [r3, #6]
 800fb4c:	2802      	cmp	r0, #2
 800fb4e:	f43f abd6 	beq.w	800f2fe <st_sssa8_ch_nn_mat_mult_nt_t+0xe2>
 800fb52:	f992 2002 	ldrsb.w	r2, [r2, #2]
 800fb56:	811a      	strh	r2, [r3, #8]
 800fb58:	f994 2002 	ldrsb.w	r2, [r4, #2]
 800fb5c:	815a      	strh	r2, [r3, #10]
 800fb5e:	f7ff bbce 	b.w	800f2fe <st_sssa8_ch_nn_mat_mult_nt_t+0xe2>
 800fb62:	2900      	cmp	r1, #0
 800fb64:	dd47      	ble.n	800fbf6 <st_sssa8_ch_nn_mat_mult_nt_t+0x9da>
 800fb66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fb6a:	0058      	lsls	r0, r3, #1
 800fb6c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800fb6e:	461c      	mov	r4, r3
 800fb70:	58a3      	ldr	r3, [r4, r2]
 800fb72:	9c42      	ldr	r4, [sp, #264]	; 0x108
 800fb74:	58a2      	ldr	r2, [r4, r2]
 800fb76:	fb50 2303 	smmla	r3, r0, r3, r2
 800fb7a:	410b      	asrs	r3, r1
 800fb7c:	f303 0307 	ssat	r3, #8, r3
 800fb80:	f88b 3001 	strb.w	r3, [fp, #1]
 800fb84:	e572      	b.n	800f66c <st_sssa8_ch_nn_mat_mult_nt_t+0x450>
 800fb86:	2a00      	cmp	r2, #0
 800fb88:	dd27      	ble.n	800fbda <st_sssa8_ch_nn_mat_mult_nt_t+0x9be>
 800fb8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb8c:	005b      	lsls	r3, r3, #1
 800fb8e:	fb53 1300 	smmla	r3, r3, r0, r1
 800fb92:	4113      	asrs	r3, r2
 800fb94:	f303 0307 	ssat	r3, #8, r3
 800fb98:	f88b 3000 	strb.w	r3, [fp]
 800fb9c:	e732      	b.n	800fa04 <st_sssa8_ch_nn_mat_mult_nt_t+0x7e8>
 800fb9e:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 800fba2:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 800fba6:	e55d      	b.n	800f664 <st_sssa8_ch_nn_mat_mult_nt_t+0x448>
 800fba8:	2800      	cmp	r0, #0
 800fbaa:	dd08      	ble.n	800fbbe <st_sssa8_ch_nn_mat_mult_nt_t+0x9a2>
 800fbac:	0049      	lsls	r1, r1, #1
 800fbae:	fb51 410e 	smmla	r1, r1, lr, r4
 800fbb2:	4101      	asrs	r1, r0
 800fbb4:	f301 0307 	ssat	r3, #8, r1
 800fbb8:	f88a 3000 	strb.w	r3, [sl]
 800fbbc:	e5c4      	b.n	800f748 <st_sssa8_ch_nn_mat_mult_nt_t+0x52c>
 800fbbe:	f1c0 0001 	rsb	r0, r0, #1
 800fbc2:	fa01 f000 	lsl.w	r0, r1, r0
 800fbc6:	f300 031f 	ssat	r3, #32, r0
 800fbca:	fb53 f31e 	smmulr	r3, r3, lr
 800fbce:	4423      	add	r3, r4
 800fbd0:	f303 0307 	ssat	r3, #8, r3
 800fbd4:	f88a 3000 	strb.w	r3, [sl]
 800fbd8:	e5b6      	b.n	800f748 <st_sssa8_ch_nn_mat_mult_nt_t+0x52c>
 800fbda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbdc:	f1c2 0201 	rsb	r2, r2, #1
 800fbe0:	4093      	lsls	r3, r2
 800fbe2:	f303 031f 	ssat	r3, #32, r3
 800fbe6:	fb53 f310 	smmulr	r3, r3, r0
 800fbea:	440b      	add	r3, r1
 800fbec:	f303 0307 	ssat	r3, #8, r3
 800fbf0:	f88b 3000 	strb.w	r3, [fp]
 800fbf4:	e706      	b.n	800fa04 <st_sssa8_ch_nn_mat_mult_nt_t+0x7e8>
 800fbf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbf8:	f1c1 0101 	rsb	r1, r1, #1
 800fbfc:	408a      	lsls	r2, r1
 800fbfe:	f302 021f 	ssat	r2, #32, r2
 800fc02:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800fc04:	9915      	ldr	r1, [sp, #84]	; 0x54
 800fc06:	4618      	mov	r0, r3
 800fc08:	5843      	ldr	r3, [r0, r1]
 800fc0a:	fb52 f213 	smmulr	r2, r2, r3
 800fc0e:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800fc10:	585b      	ldr	r3, [r3, r1]
 800fc12:	4413      	add	r3, r2
 800fc14:	f303 0307 	ssat	r3, #8, r3
 800fc18:	f88b 3001 	strb.w	r3, [fp, #1]
 800fc1c:	e526      	b.n	800f66c <st_sssa8_ch_nn_mat_mult_nt_t+0x450>
 800fc1e:	4621      	mov	r1, r4
 800fc20:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800fc22:	4623      	mov	r3, r4
 800fc24:	e734      	b.n	800fa90 <st_sssa8_ch_nn_mat_mult_nt_t+0x874>
 800fc26:	f8dd c10c 	ldr.w	ip, [sp, #268]	; 0x10c
 800fc2a:	f04f 0e00 	mov.w	lr, #0
 800fc2e:	e665      	b.n	800f8fc <st_sssa8_ch_nn_mat_mult_nt_t+0x6e0>
 800fc30:	462a      	mov	r2, r5
 800fc32:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fc34:	e777      	b.n	800fb26 <st_sssa8_ch_nn_mat_mult_nt_t+0x90a>
 800fc36:	bf00      	nop

0800fc38 <st_int8_reordered_no_shift_zero>:
 800fc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc3a:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800fc3e:	f9bd c014 	ldrsh.w	ip, [sp, #20]
 800fc42:	d02d      	beq.n	800fca0 <st_int8_reordered_no_shift_zero+0x68>
 800fc44:	eb00 078e 	add.w	r7, r0, lr, lsl #2
 800fc48:	460e      	mov	r6, r1
 800fc4a:	f850 4b04 	ldr.w	r4, [r0], #4
 800fc4e:	ea4f 2534 	mov.w	r5, r4, ror #8
 800fc52:	fa2f f585 	sxtb16	r5, r5
 800fc56:	fad5 f503 	ssub16	r5, r5, r3
 800fc5a:	fa2f f484 	sxtb16	r4, r4
 800fc5e:	fad4 f403 	ssub16	r4, r4, r3
 800fc62:	42b8      	cmp	r0, r7
 800fc64:	6034      	str	r4, [r6, #0]
 800fc66:	6075      	str	r5, [r6, #4]
 800fc68:	f106 0608 	add.w	r6, r6, #8
 800fc6c:	d1ed      	bne.n	800fc4a <st_int8_reordered_no_shift_zero+0x12>
 800fc6e:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800fc72:	f012 0203 	ands.w	r2, r2, #3
 800fc76:	d012      	beq.n	800fc9e <st_int8_reordered_no_shift_zero+0x66>
 800fc78:	f997 0000 	ldrsb.w	r0, [r7]
 800fc7c:	fa4f f38c 	sxtb.w	r3, ip
 800fc80:	1ac0      	subs	r0, r0, r3
 800fc82:	2a01      	cmp	r2, #1
 800fc84:	8008      	strh	r0, [r1, #0]
 800fc86:	d00a      	beq.n	800fc9e <st_int8_reordered_no_shift_zero+0x66>
 800fc88:	f997 0001 	ldrsb.w	r0, [r7, #1]
 800fc8c:	2a02      	cmp	r2, #2
 800fc8e:	eba0 0003 	sub.w	r0, r0, r3
 800fc92:	8048      	strh	r0, [r1, #2]
 800fc94:	d003      	beq.n	800fc9e <st_int8_reordered_no_shift_zero+0x66>
 800fc96:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800fc9a:	1ad3      	subs	r3, r2, r3
 800fc9c:	808b      	strh	r3, [r1, #4]
 800fc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fca0:	4607      	mov	r7, r0
 800fca2:	e7e6      	b.n	800fc72 <st_int8_reordered_no_shift_zero+0x3a>

0800fca4 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 800fca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca8:	b09b      	sub	sp, #108	; 0x6c
 800fcaa:	4683      	mov	fp, r0
 800fcac:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 800fcb0:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800fcb2:	f8bd 4094 	ldrh.w	r4, [sp, #148]	; 0x94
 800fcb6:	9318      	str	r3, [sp, #96]	; 0x60
 800fcb8:	18c6      	adds	r6, r0, r3
 800fcba:	086b      	lsrs	r3, r5, #1
 800fcbc:	9517      	str	r5, [sp, #92]	; 0x5c
 800fcbe:	9406      	str	r4, [sp, #24]
 800fcc0:	910d      	str	r1, [sp, #52]	; 0x34
 800fcc2:	9215      	str	r2, [sp, #84]	; 0x54
 800fcc4:	9616      	str	r6, [sp, #88]	; 0x58
 800fcc6:	f000 81cd 	beq.w	8010064 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c0>
 800fcca:	4694      	mov	ip, r2
 800fccc:	f1a4 0210 	sub.w	r2, r4, #16
 800fcd0:	0912      	lsrs	r2, r2, #4
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	3201      	adds	r2, #1
 800fcd6:	460f      	mov	r7, r1
 800fcd8:	eb07 0540 	add.w	r5, r7, r0, lsl #1
 800fcdc:	0151      	lsls	r1, r2, #5
 800fcde:	440f      	add	r7, r1
 800fce0:	1869      	adds	r1, r5, r1
 800fce2:	9112      	str	r1, [sp, #72]	; 0x48
 800fce4:	0191      	lsls	r1, r2, #6
 800fce6:	9111      	str	r1, [sp, #68]	; 0x44
 800fce8:	0111      	lsls	r1, r2, #4
 800fcea:	4662      	mov	r2, ip
 800fcec:	3208      	adds	r2, #8
 800fcee:	9207      	str	r2, [sp, #28]
 800fcf0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fcf2:	9113      	str	r1, [sp, #76]	; 0x4c
 800fcf4:	3204      	adds	r2, #4
 800fcf6:	9201      	str	r2, [sp, #4]
 800fcf8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800fcfa:	9510      	str	r5, [sp, #64]	; 0x40
 800fcfc:	3208      	adds	r2, #8
 800fcfe:	9205      	str	r2, [sp, #20]
 800fd00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800fd02:	9708      	str	r7, [sp, #32]
 800fd04:	3b01      	subs	r3, #1
 800fd06:	3202      	adds	r2, #2
 800fd08:	b29c      	uxth	r4, r3
 800fd0a:	9204      	str	r2, [sp, #16]
 800fd0c:	4663      	mov	r3, ip
 800fd0e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800fd10:	9419      	str	r4, [sp, #100]	; 0x64
 800fd12:	3310      	adds	r3, #16
 800fd14:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
 800fd18:	3208      	adds	r2, #8
 800fd1a:	1f03      	subs	r3, r0, #4
 800fd1c:	910e      	str	r1, [sp, #56]	; 0x38
 800fd1e:	9202      	str	r2, [sp, #8]
 800fd20:	1ec1      	subs	r1, r0, #3
 800fd22:	1cb2      	adds	r2, r6, #2
 800fd24:	9314      	str	r3, [sp, #80]	; 0x50
 800fd26:	9b07      	ldr	r3, [sp, #28]
 800fd28:	910f      	str	r1, [sp, #60]	; 0x3c
 800fd2a:	9203      	str	r2, [sp, #12]
 800fd2c:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800fd30:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fd34:	9b06      	ldr	r3, [sp, #24]
 800fd36:	2b0f      	cmp	r3, #15
 800fd38:	f340 82a4 	ble.w	8010284 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5e0>
 800fd3c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800fd40:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 800fd44:	9e08      	ldr	r6, [sp, #32]
 800fd46:	46dc      	mov	ip, fp
 800fd48:	4603      	mov	r3, r0
 800fd4a:	462c      	mov	r4, r5
 800fd4c:	f8de 7000 	ldr.w	r7, [lr]
 800fd50:	f8d8 2000 	ldr.w	r2, [r8]
 800fd54:	f8dc 1000 	ldr.w	r1, [ip]
 800fd58:	f8dc a004 	ldr.w	sl, [ip, #4]
 800fd5c:	fb21 5507 	smlad	r5, r1, r7, r5
 800fd60:	fb21 4102 	smlad	r1, r1, r2, r4
 800fd64:	fb2a 0007 	smlad	r0, sl, r7, r0
 800fd68:	fb2a 3202 	smlad	r2, sl, r2, r3
 800fd6c:	f8de 7004 	ldr.w	r7, [lr, #4]
 800fd70:	f8d8 a004 	ldr.w	sl, [r8, #4]
 800fd74:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800fd78:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800fd7c:	fb24 5507 	smlad	r5, r4, r7, r5
 800fd80:	fb24 110a 	smlad	r1, r4, sl, r1
 800fd84:	fb23 0007 	smlad	r0, r3, r7, r0
 800fd88:	fb23 230a 	smlad	r3, r3, sl, r2
 800fd8c:	f8de 7008 	ldr.w	r7, [lr, #8]
 800fd90:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800fd94:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800fd98:	f8dc a014 	ldr.w	sl, [ip, #20]
 800fd9c:	fb24 5507 	smlad	r5, r4, r7, r5
 800fda0:	fb24 1102 	smlad	r1, r4, r2, r1
 800fda4:	fb2a 0007 	smlad	r0, sl, r7, r0
 800fda8:	fb2a 3202 	smlad	r2, sl, r2, r3
 800fdac:	f8de 700c 	ldr.w	r7, [lr, #12]
 800fdb0:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 800fdb4:	f8dc 4018 	ldr.w	r4, [ip, #24]
 800fdb8:	f8dc 901c 	ldr.w	r9, [ip, #28]
 800fdbc:	fb24 5507 	smlad	r5, r4, r7, r5
 800fdc0:	fb24 140a 	smlad	r4, r4, sl, r1
 800fdc4:	fb29 0007 	smlad	r0, r9, r7, r0
 800fdc8:	fb29 2a0a 	smlad	sl, r9, sl, r2
 800fdcc:	f8de 7010 	ldr.w	r7, [lr, #16]
 800fdd0:	f8d8 9010 	ldr.w	r9, [r8, #16]
 800fdd4:	f8dc 1020 	ldr.w	r1, [ip, #32]
 800fdd8:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 800fddc:	fb21 5507 	smlad	r5, r1, r7, r5
 800fde0:	fb21 4409 	smlad	r4, r1, r9, r4
 800fde4:	fb23 0007 	smlad	r0, r3, r7, r0
 800fde8:	fb23 a909 	smlad	r9, r3, r9, sl
 800fdec:	f8de 7014 	ldr.w	r7, [lr, #20]
 800fdf0:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800fdf4:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
 800fdf8:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 800fdfc:	fb21 5507 	smlad	r5, r1, r7, r5
 800fe00:	fb21 4402 	smlad	r4, r1, r2, r4
 800fe04:	fb23 0007 	smlad	r0, r3, r7, r0
 800fe08:	fb23 9302 	smlad	r3, r3, r2, r9
 800fe0c:	f8de 7018 	ldr.w	r7, [lr, #24]
 800fe10:	f8d8 9018 	ldr.w	r9, [r8, #24]
 800fe14:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
 800fe18:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
 800fe1c:	fb21 5507 	smlad	r5, r1, r7, r5
 800fe20:	fb21 4409 	smlad	r4, r1, r9, r4
 800fe24:	fb22 0707 	smlad	r7, r2, r7, r0
 800fe28:	fb22 3909 	smlad	r9, r2, r9, r3
 800fe2c:	f8de 001c 	ldr.w	r0, [lr, #28]
 800fe30:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800fe34:	f8dc 1038 	ldr.w	r1, [ip, #56]	; 0x38
 800fe38:	f8dc 203c 	ldr.w	r2, [ip, #60]	; 0x3c
 800fe3c:	f10e 0e20 	add.w	lr, lr, #32
 800fe40:	f108 0820 	add.w	r8, r8, #32
 800fe44:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800fe48:	fb21 5500 	smlad	r5, r1, r0, r5
 800fe4c:	fb21 4403 	smlad	r4, r1, r3, r4
 800fe50:	fb22 7000 	smlad	r0, r2, r0, r7
 800fe54:	fb22 9303 	smlad	r3, r2, r3, r9
 800fe58:	45b6      	cmp	lr, r6
 800fe5a:	f47f af77 	bne.w	800fd4c <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa8>
 800fe5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fe60:	9f08      	ldr	r7, [sp, #32]
 800fe62:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 800fe66:	4493      	add	fp, r2
 800fe68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fe6a:	9200      	str	r2, [sp, #0]
 800fe6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe6e:	4596      	cmp	lr, r2
 800fe70:	da40      	bge.n	800fef4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x250>
 800fe72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fe74:	f8dd c000 	ldr.w	ip, [sp]
 800fe78:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 800fe7c:	eba2 020e 	sub.w	r2, r2, lr
 800fe80:	0892      	lsrs	r2, r2, #2
 800fe82:	920b      	str	r2, [sp, #44]	; 0x2c
 800fe84:	3201      	adds	r2, #1
 800fe86:	920a      	str	r2, [sp, #40]	; 0x28
 800fe88:	00d2      	lsls	r2, r2, #3
 800fe8a:	9209      	str	r2, [sp, #36]	; 0x24
 800fe8c:	eb07 0802 	add.w	r8, r7, r2
 800fe90:	465e      	mov	r6, fp
 800fe92:	f8d7 e000 	ldr.w	lr, [r7]
 800fe96:	f8dc 9000 	ldr.w	r9, [ip]
 800fe9a:	6831      	ldr	r1, [r6, #0]
 800fe9c:	f8d6 a004 	ldr.w	sl, [r6, #4]
 800fea0:	fb21 550e 	smlad	r5, r1, lr, r5
 800fea4:	fb21 4409 	smlad	r4, r1, r9, r4
 800fea8:	fb2a 000e 	smlad	r0, sl, lr, r0
 800feac:	fb2a 3309 	smlad	r3, sl, r9, r3
 800feb0:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800feb4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800feb8:	68b1      	ldr	r1, [r6, #8]
 800feba:	68f2      	ldr	r2, [r6, #12]
 800febc:	3708      	adds	r7, #8
 800febe:	f10c 0c08 	add.w	ip, ip, #8
 800fec2:	3610      	adds	r6, #16
 800fec4:	fb21 550e 	smlad	r5, r1, lr, r5
 800fec8:	fb21 4409 	smlad	r4, r1, r9, r4
 800fecc:	fb22 000e 	smlad	r0, r2, lr, r0
 800fed0:	fb22 3309 	smlad	r3, r2, r9, r3
 800fed4:	4547      	cmp	r7, r8
 800fed6:	d1dc      	bne.n	800fe92 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1ee>
 800fed8:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800fedc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fede:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fee0:	f10e 0e04 	add.w	lr, lr, #4
 800fee4:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 800fee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800feea:	eb0b 1b02 	add.w	fp, fp, r2, lsl #4
 800feee:	9a00      	ldr	r2, [sp, #0]
 800fef0:	440a      	add	r2, r1
 800fef2:	9200      	str	r2, [sp, #0]
 800fef4:	9a06      	ldr	r2, [sp, #24]
 800fef6:	4572      	cmp	r2, lr
 800fef8:	dd40      	ble.n	800ff7c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d8>
 800fefa:	9e00      	ldr	r6, [sp, #0]
 800fefc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800ff00:	f9b7 c000 	ldrsh.w	ip, [r7]
 800ff04:	f9b6 6000 	ldrsh.w	r6, [r6]
 800ff08:	f9bb 2000 	ldrsh.w	r2, [fp]
 800ff0c:	fb0c 0001 	mla	r0, ip, r1, r0
 800ff10:	fb06 3301 	mla	r3, r6, r1, r3
 800ff14:	9906      	ldr	r1, [sp, #24]
 800ff16:	fb02 550c 	mla	r5, r2, ip, r5
 800ff1a:	fb02 4406 	mla	r4, r2, r6, r4
 800ff1e:	f10e 0201 	add.w	r2, lr, #1
 800ff22:	4291      	cmp	r1, r2
 800ff24:	f340 814d 	ble.w	80101c2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51e>
 800ff28:	9a00      	ldr	r2, [sp, #0]
 800ff2a:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 800ff2e:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800ff32:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 800ff36:	f9bb c004 	ldrsh.w	ip, [fp, #4]
 800ff3a:	fb06 0002 	mla	r0, r6, r2, r0
 800ff3e:	fb01 3302 	mla	r3, r1, r2, r3
 800ff42:	9a06      	ldr	r2, [sp, #24]
 800ff44:	f10e 0e02 	add.w	lr, lr, #2
 800ff48:	4572      	cmp	r2, lr
 800ff4a:	fb0c 5506 	mla	r5, ip, r6, r5
 800ff4e:	fb0c 4401 	mla	r4, ip, r1, r4
 800ff52:	f340 819f 	ble.w	8010294 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f0>
 800ff56:	9a00      	ldr	r2, [sp, #0]
 800ff58:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 800ff5c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800ff60:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 800ff64:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
 800ff68:	fb07 5506 	mla	r5, r7, r6, r5
 800ff6c:	fb07 4401 	mla	r4, r7, r1, r4
 800ff70:	fb06 0002 	mla	r0, r6, r2, r0
 800ff74:	fb01 3302 	mla	r3, r1, r2, r3
 800ff78:	f10b 0b0c 	add.w	fp, fp, #12
 800ff7c:	9a01      	ldr	r2, [sp, #4]
 800ff7e:	f932 1c04 	ldrsh.w	r1, [r2, #-4]
 800ff82:	9a05      	ldr	r2, [sp, #20]
 800ff84:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800ff88:	9a02      	ldr	r2, [sp, #8]
 800ff8a:	2915      	cmp	r1, #21
 800ff8c:	f852 7c08 	ldr.w	r7, [r2, #-8]
 800ff90:	f340 80ff 	ble.w	8010192 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ee>
 800ff94:	1e8a      	subs	r2, r1, #2
 800ff96:	f04f 0c01 	mov.w	ip, #1
 800ff9a:	3901      	subs	r1, #1
 800ff9c:	fa0c f202 	lsl.w	r2, ip, r2
 800ffa0:	fb55 2506 	smmla	r5, r5, r6, r2
 800ffa4:	410d      	asrs	r5, r1
 800ffa6:	fb54 2206 	smmla	r2, r4, r6, r2
 800ffaa:	443d      	add	r5, r7
 800ffac:	f305 0507 	ssat	r5, #8, r5
 800ffb0:	410a      	asrs	r2, r1
 800ffb2:	9904      	ldr	r1, [sp, #16]
 800ffb4:	443a      	add	r2, r7
 800ffb6:	f801 5c02 	strb.w	r5, [r1, #-2]
 800ffba:	f302 0207 	ssat	r2, #8, r2
 800ffbe:	9903      	ldr	r1, [sp, #12]
 800ffc0:	f801 2c02 	strb.w	r2, [r1, #-2]
 800ffc4:	9a01      	ldr	r2, [sp, #4]
 800ffc6:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 800ffca:	2915      	cmp	r1, #21
 800ffcc:	f340 80c1 	ble.w	8010152 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ae>
 800ffd0:	9c02      	ldr	r4, [sp, #8]
 800ffd2:	9d05      	ldr	r5, [sp, #20]
 800ffd4:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800ffd8:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800ffdc:	1e8a      	subs	r2, r1, #2
 800ffde:	2601      	movs	r6, #1
 800ffe0:	3901      	subs	r1, #1
 800ffe2:	fa06 f202 	lsl.w	r2, r6, r2
 800ffe6:	fb50 2005 	smmla	r0, r0, r5, r2
 800ffea:	4108      	asrs	r0, r1
 800ffec:	fb53 2305 	smmla	r3, r3, r5, r2
 800fff0:	4420      	add	r0, r4
 800fff2:	f300 0007 	ssat	r0, #8, r0
 800fff6:	9a04      	ldr	r2, [sp, #16]
 800fff8:	410b      	asrs	r3, r1
 800fffa:	4423      	add	r3, r4
 800fffc:	f802 0c01 	strb.w	r0, [r2, #-1]
 8010000:	f303 0307 	ssat	r3, #8, r3
 8010004:	9a03      	ldr	r2, [sp, #12]
 8010006:	f802 3c01 	strb.w	r3, [r2, #-1]
 801000a:	9a01      	ldr	r2, [sp, #4]
 801000c:	9b07      	ldr	r3, [sp, #28]
 801000e:	3204      	adds	r2, #4
 8010010:	9201      	str	r2, [sp, #4]
 8010012:	9a05      	ldr	r2, [sp, #20]
 8010014:	3208      	adds	r2, #8
 8010016:	9205      	str	r2, [sp, #20]
 8010018:	9a04      	ldr	r2, [sp, #16]
 801001a:	3202      	adds	r2, #2
 801001c:	9204      	str	r2, [sp, #16]
 801001e:	9a02      	ldr	r2, [sp, #8]
 8010020:	3208      	adds	r2, #8
 8010022:	9202      	str	r2, [sp, #8]
 8010024:	9a03      	ldr	r2, [sp, #12]
 8010026:	3202      	adds	r2, #2
 8010028:	9203      	str	r2, [sp, #12]
 801002a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801002c:	3308      	adds	r3, #8
 801002e:	429a      	cmp	r2, r3
 8010030:	9307      	str	r3, [sp, #28]
 8010032:	f47f ae7b 	bne.w	800fd2c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x88>
 8010036:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010038:	9826      	ldr	r0, [sp, #152]	; 0x98
 801003a:	3301      	adds	r3, #1
 801003c:	00da      	lsls	r2, r3, #3
 801003e:	0059      	lsls	r1, r3, #1
 8010040:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010044:	9326      	str	r3, [sp, #152]	; 0x98
 8010046:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010048:	4413      	add	r3, r2
 801004a:	9315      	str	r3, [sp, #84]	; 0x54
 801004c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801004e:	4413      	add	r3, r2
 8010050:	9327      	str	r3, [sp, #156]	; 0x9c
 8010052:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010054:	4413      	add	r3, r2
 8010056:	9328      	str	r3, [sp, #160]	; 0xa0
 8010058:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801005a:	440b      	add	r3, r1
 801005c:	9329      	str	r3, [sp, #164]	; 0xa4
 801005e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010060:	440b      	add	r3, r1
 8010062:	9316      	str	r3, [sp, #88]	; 0x58
 8010064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010066:	07da      	lsls	r2, r3, #31
 8010068:	f140 8104 	bpl.w	8010274 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5d0>
 801006c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801006e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010070:	6819      	ldr	r1, [r3, #0]
 8010072:	9b06      	ldr	r3, [sp, #24]
 8010074:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
 8010078:	089b      	lsrs	r3, r3, #2
 801007a:	f000 8124 	beq.w	80102c6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x622>
 801007e:	1e5e      	subs	r6, r3, #1
 8010080:	b2b6      	uxth	r6, r6
 8010082:	3601      	adds	r6, #1
 8010084:	00f6      	lsls	r6, r6, #3
 8010086:	eb0b 0706 	add.w	r7, fp, r6
 801008a:	4664      	mov	r4, ip
 801008c:	460b      	mov	r3, r1
 801008e:	f8db 5000 	ldr.w	r5, [fp]
 8010092:	f8db 2004 	ldr.w	r2, [fp, #4]
 8010096:	f8d0 e000 	ldr.w	lr, [r0]
 801009a:	f10b 0b08 	add.w	fp, fp, #8
 801009e:	fb25 110e 	smlad	r1, r5, lr, r1
 80100a2:	f8d4 e000 	ldr.w	lr, [r4]
 80100a6:	fb25 330e 	smlad	r3, r5, lr, r3
 80100aa:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80100ae:	6865      	ldr	r5, [r4, #4]
 80100b0:	3008      	adds	r0, #8
 80100b2:	3408      	adds	r4, #8
 80100b4:	fb22 110e 	smlad	r1, r2, lr, r1
 80100b8:	fb22 3305 	smlad	r3, r2, r5, r3
 80100bc:	45bb      	cmp	fp, r7
 80100be:	d1e6      	bne.n	801008e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3ea>
 80100c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80100c2:	4432      	add	r2, r6
 80100c4:	44b4      	add	ip, r6
 80100c6:	920d      	str	r2, [sp, #52]	; 0x34
 80100c8:	9a06      	ldr	r2, [sp, #24]
 80100ca:	f012 0203 	ands.w	r2, r2, #3
 80100ce:	d01f      	beq.n	8010110 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 80100d0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80100d2:	f9bb 0000 	ldrsh.w	r0, [fp]
 80100d6:	8835      	ldrh	r5, [r6, #0]
 80100d8:	f8bc 4000 	ldrh.w	r4, [ip]
 80100dc:	2a01      	cmp	r2, #1
 80100de:	fb15 1100 	smlabb	r1, r5, r0, r1
 80100e2:	fb14 3300 	smlabb	r3, r4, r0, r3
 80100e6:	d013      	beq.n	8010110 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 80100e8:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 80100ec:	8875      	ldrh	r5, [r6, #2]
 80100ee:	f8bc 4002 	ldrh.w	r4, [ip, #2]
 80100f2:	2a02      	cmp	r2, #2
 80100f4:	fb15 1100 	smlabb	r1, r5, r0, r1
 80100f8:	fb14 3300 	smlabb	r3, r4, r0, r3
 80100fc:	d008      	beq.n	8010110 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 80100fe:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 8010102:	88b4      	ldrh	r4, [r6, #4]
 8010104:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 8010108:	fb12 1104 	smlabb	r1, r2, r4, r1
 801010c:	fb12 3300 	smlabb	r3, r2, r0, r3
 8010110:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8010112:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010114:	6805      	ldr	r5, [r0, #0]
 8010116:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8010118:	f9b2 2000 	ldrsh.w	r2, [r2]
 801011c:	6804      	ldr	r4, [r0, #0]
 801011e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8010120:	2a15      	cmp	r2, #21
 8010122:	f100 0001 	add.w	r0, r0, #1
 8010126:	f300 808f 	bgt.w	8010248 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5a4>
 801012a:	2a00      	cmp	r2, #0
 801012c:	f340 80b5 	ble.w	801029a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f6>
 8010130:	0049      	lsls	r1, r1, #1
 8010132:	005b      	lsls	r3, r3, #1
 8010134:	fb51 4105 	smmla	r1, r1, r5, r4
 8010138:	fb53 4305 	smmla	r3, r3, r5, r4
 801013c:	fa41 f202 	asr.w	r2, r1, r2
 8010140:	f302 0207 	ssat	r2, #8, r2
 8010144:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8010146:	700a      	strb	r2, [r1, #0]
 8010148:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801014a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801014e:	4113      	asrs	r3, r2
 8010150:	e08a      	b.n	8010268 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c4>
 8010152:	2900      	cmp	r1, #0
 8010154:	dd38      	ble.n	80101c8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x524>
 8010156:	9a05      	ldr	r2, [sp, #20]
 8010158:	9c02      	ldr	r4, [sp, #8]
 801015a:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801015e:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8010162:	0040      	lsls	r0, r0, #1
 8010164:	005b      	lsls	r3, r3, #1
 8010166:	fb50 4002 	smmla	r0, r0, r2, r4
 801016a:	fb53 4302 	smmla	r3, r3, r2, r4
 801016e:	fa40 f101 	asr.w	r1, r0, r1
 8010172:	f301 0107 	ssat	r1, #8, r1
 8010176:	9a04      	ldr	r2, [sp, #16]
 8010178:	f802 1c01 	strb.w	r1, [r2, #-1]
 801017c:	9a01      	ldr	r2, [sp, #4]
 801017e:	f932 4c02 	ldrsh.w	r4, [r2, #-2]
 8010182:	fa43 f404 	asr.w	r4, r3, r4
 8010186:	f304 0407 	ssat	r4, #8, r4
 801018a:	9b03      	ldr	r3, [sp, #12]
 801018c:	f803 4c01 	strb.w	r4, [r3, #-1]
 8010190:	e73c      	b.n	801000c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x368>
 8010192:	2900      	cmp	r1, #0
 8010194:	dd3b      	ble.n	801020e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x56a>
 8010196:	006d      	lsls	r5, r5, #1
 8010198:	0064      	lsls	r4, r4, #1
 801019a:	fb55 7506 	smmla	r5, r5, r6, r7
 801019e:	fb54 7406 	smmla	r4, r4, r6, r7
 80101a2:	410d      	asrs	r5, r1
 80101a4:	f305 0507 	ssat	r5, #8, r5
 80101a8:	9a04      	ldr	r2, [sp, #16]
 80101aa:	f802 5c02 	strb.w	r5, [r2, #-2]
 80101ae:	9a01      	ldr	r2, [sp, #4]
 80101b0:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 80101b4:	4114      	asrs	r4, r2
 80101b6:	f304 0407 	ssat	r4, #8, r4
 80101ba:	9a03      	ldr	r2, [sp, #12]
 80101bc:	f802 4c02 	strb.w	r4, [r2, #-2]
 80101c0:	e700      	b.n	800ffc4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x320>
 80101c2:	f10b 0b04 	add.w	fp, fp, #4
 80101c6:	e6d9      	b.n	800ff7c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d8>
 80101c8:	f1c1 0101 	rsb	r1, r1, #1
 80101cc:	4088      	lsls	r0, r1
 80101ce:	f300 001f 	ssat	r0, #32, r0
 80101d2:	9a05      	ldr	r2, [sp, #20]
 80101d4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80101d8:	fb50 f014 	smmulr	r0, r0, r4
 80101dc:	fa03 f101 	lsl.w	r1, r3, r1
 80101e0:	f301 011f 	ssat	r1, #32, r1
 80101e4:	fb51 f114 	smmulr	r1, r1, r4
 80101e8:	9b02      	ldr	r3, [sp, #8]
 80101ea:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80101ee:	4402      	add	r2, r0
 80101f0:	f302 0207 	ssat	r2, #8, r2
 80101f4:	9804      	ldr	r0, [sp, #16]
 80101f6:	f800 2c01 	strb.w	r2, [r0, #-1]
 80101fa:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80101fe:	440b      	add	r3, r1
 8010200:	f303 0307 	ssat	r3, #8, r3
 8010204:	9a03      	ldr	r2, [sp, #12]
 8010206:	f802 3c01 	strb.w	r3, [r2, #-1]
 801020a:	9a01      	ldr	r2, [sp, #4]
 801020c:	e6fe      	b.n	801000c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x368>
 801020e:	f1c1 0101 	rsb	r1, r1, #1
 8010212:	408d      	lsls	r5, r1
 8010214:	f305 051f 	ssat	r5, #32, r5
 8010218:	fb55 f516 	smmulr	r5, r5, r6
 801021c:	fa04 f101 	lsl.w	r1, r4, r1
 8010220:	f301 011f 	ssat	r1, #32, r1
 8010224:	fb51 f616 	smmulr	r6, r1, r6
 8010228:	443d      	add	r5, r7
 801022a:	f305 0507 	ssat	r5, #8, r5
 801022e:	9a04      	ldr	r2, [sp, #16]
 8010230:	f802 5c02 	strb.w	r5, [r2, #-2]
 8010234:	9a02      	ldr	r2, [sp, #8]
 8010236:	f852 2c08 	ldr.w	r2, [r2, #-8]
 801023a:	4416      	add	r6, r2
 801023c:	f306 0607 	ssat	r6, #8, r6
 8010240:	9a03      	ldr	r2, [sp, #12]
 8010242:	f802 6c02 	strb.w	r6, [r2, #-2]
 8010246:	e6bd      	b.n	800ffc4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x320>
 8010248:	1e97      	subs	r7, r2, #2
 801024a:	1e56      	subs	r6, r2, #1
 801024c:	2201      	movs	r2, #1
 801024e:	40ba      	lsls	r2, r7
 8010250:	fb51 2105 	smmla	r1, r1, r5, r2
 8010254:	4131      	asrs	r1, r6
 8010256:	4421      	add	r1, r4
 8010258:	fb53 2305 	smmla	r3, r3, r5, r2
 801025c:	f301 0207 	ssat	r2, #8, r1
 8010260:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8010262:	4133      	asrs	r3, r6
 8010264:	4423      	add	r3, r4
 8010266:	700a      	strb	r2, [r1, #0]
 8010268:	f303 0307 	ssat	r3, #8, r3
 801026c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801026e:	9029      	str	r0, [sp, #164]	; 0xa4
 8010270:	7013      	strb	r3, [r2, #0]
 8010272:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010274:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010276:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 801027a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801027c:	4418      	add	r0, r3
 801027e:	b01b      	add	sp, #108	; 0x6c
 8010280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801028a:	4603      	mov	r3, r0
 801028c:	462c      	mov	r4, r5
 801028e:	f04f 0e00 	mov.w	lr, #0
 8010292:	e5eb      	b.n	800fe6c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c8>
 8010294:	f10b 0b08 	add.w	fp, fp, #8
 8010298:	e670      	b.n	800ff7c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d8>
 801029a:	f1c2 0601 	rsb	r6, r2, #1
 801029e:	fa01 f206 	lsl.w	r2, r1, r6
 80102a2:	f302 021f 	ssat	r2, #32, r2
 80102a6:	fb52 f215 	smmulr	r2, r2, r5
 80102aa:	40b3      	lsls	r3, r6
 80102ac:	f303 031f 	ssat	r3, #32, r3
 80102b0:	fb53 f115 	smmulr	r1, r3, r5
 80102b4:	1913      	adds	r3, r2, r4
 80102b6:	f303 0307 	ssat	r3, #8, r3
 80102ba:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80102bc:	7013      	strb	r3, [r2, #0]
 80102be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	440b      	add	r3, r1
 80102c4:	e7d0      	b.n	8010268 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c4>
 80102c6:	460b      	mov	r3, r1
 80102c8:	e6fe      	b.n	80100c8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x424>
 80102ca:	bf00      	nop

080102cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 80102cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102d0:	b08f      	sub	sp, #60	; 0x3c
 80102d2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80102d6:	930c      	str	r3, [sp, #48]	; 0x30
 80102d8:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
 80102dc:	9403      	str	r4, [sp, #12]
 80102de:	085b      	lsrs	r3, r3, #1
 80102e0:	9105      	str	r1, [sp, #20]
 80102e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80102e4:	f000 81d1 	beq.w	801068a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3be>
 80102e8:	4616      	mov	r6, r2
 80102ea:	3b01      	subs	r3, #1
 80102ec:	b29d      	uxth	r5, r3
 80102ee:	4633      	mov	r3, r6
 80102f0:	3310      	adds	r3, #16
 80102f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80102f6:	9306      	str	r3, [sp, #24]
 80102f8:	1ee3      	subs	r3, r4, #3
 80102fa:	9307      	str	r3, [sp, #28]
 80102fc:	f106 0308 	add.w	r3, r6, #8
 8010300:	9302      	str	r3, [sp, #8]
 8010302:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010304:	950d      	str	r5, [sp, #52]	; 0x34
 8010306:	3302      	adds	r3, #2
 8010308:	9301      	str	r3, [sp, #4]
 801030a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801030c:	3304      	adds	r3, #4
 801030e:	9300      	str	r3, [sp, #0]
 8010310:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010312:	f1a4 0210 	sub.w	r2, r4, #16
 8010316:	f103 0a08 	add.w	sl, r3, #8
 801031a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801031c:	0912      	lsrs	r2, r2, #4
 801031e:	3201      	adds	r2, #1
 8010320:	f103 0b08 	add.w	fp, r3, #8
 8010324:	1f23      	subs	r3, r4, #4
 8010326:	eb01 1e42 	add.w	lr, r1, r2, lsl #5
 801032a:	930a      	str	r3, [sp, #40]	; 0x28
 801032c:	0191      	lsls	r1, r2, #6
 801032e:	9b02      	ldr	r3, [sp, #8]
 8010330:	9108      	str	r1, [sp, #32]
 8010332:	0112      	lsls	r2, r2, #4
 8010334:	9209      	str	r2, [sp, #36]	; 0x24
 8010336:	9a03      	ldr	r2, [sp, #12]
 8010338:	f853 4c08 	ldr.w	r4, [r3, #-8]
 801033c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010340:	2a0f      	cmp	r2, #15
 8010342:	f340 817c 	ble.w	801063e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x372>
 8010346:	f8dd c014 	ldr.w	ip, [sp, #20]
 801034a:	4607      	mov	r7, r0
 801034c:	f8dc 5000 	ldr.w	r5, [ip]
 8010350:	6839      	ldr	r1, [r7, #0]
 8010352:	fb21 4405 	smlad	r4, r1, r5, r4
 8010356:	687a      	ldr	r2, [r7, #4]
 8010358:	fb22 3305 	smlad	r3, r2, r5, r3
 801035c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8010360:	68b9      	ldr	r1, [r7, #8]
 8010362:	fb21 4105 	smlad	r1, r1, r5, r4
 8010366:	68fa      	ldr	r2, [r7, #12]
 8010368:	fb22 3205 	smlad	r2, r2, r5, r3
 801036c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8010370:	693c      	ldr	r4, [r7, #16]
 8010372:	fb24 1105 	smlad	r1, r4, r5, r1
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	fb23 2205 	smlad	r2, r3, r5, r2
 801037c:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8010380:	69bc      	ldr	r4, [r7, #24]
 8010382:	fb24 1405 	smlad	r4, r4, r5, r1
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	fb23 2305 	smlad	r3, r3, r5, r2
 801038c:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8010390:	6a39      	ldr	r1, [r7, #32]
 8010392:	fb21 4405 	smlad	r4, r1, r5, r4
 8010396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010398:	fb22 3305 	smlad	r3, r2, r5, r3
 801039c:	f8dc 5014 	ldr.w	r5, [ip, #20]
 80103a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80103a2:	fb21 4105 	smlad	r1, r1, r5, r4
 80103a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103a8:	fb22 3205 	smlad	r2, r2, r5, r3
 80103ac:	f8dc 5018 	ldr.w	r5, [ip, #24]
 80103b0:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80103b2:	fb24 1105 	smlad	r1, r4, r5, r1
 80103b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b8:	fb23 2205 	smlad	r2, r3, r5, r2
 80103bc:	f8dc 501c 	ldr.w	r5, [ip, #28]
 80103c0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80103c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103c4:	f10c 0c20 	add.w	ip, ip, #32
 80103c8:	3740      	adds	r7, #64	; 0x40
 80103ca:	fb24 1405 	smlad	r4, r4, r5, r1
 80103ce:	fb23 2305 	smlad	r3, r3, r5, r2
 80103d2:	45f4      	cmp	ip, lr
 80103d4:	d1ba      	bne.n	801034c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x80>
 80103d6:	9a08      	ldr	r2, [sp, #32]
 80103d8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80103dc:	4410      	add	r0, r2
 80103de:	4677      	mov	r7, lr
 80103e0:	9a07      	ldr	r2, [sp, #28]
 80103e2:	4594      	cmp	ip, r2
 80103e4:	da23      	bge.n	801042e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x162>
 80103e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103e8:	eba2 090c 	sub.w	r9, r2, ip
 80103ec:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80103f0:	f109 0201 	add.w	r2, r9, #1
 80103f4:	9204      	str	r2, [sp, #16]
 80103f6:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 80103fa:	4606      	mov	r6, r0
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	6831      	ldr	r1, [r6, #0]
 8010400:	fb21 4402 	smlad	r4, r1, r2, r4
 8010404:	6871      	ldr	r1, [r6, #4]
 8010406:	fb21 3202 	smlad	r2, r1, r2, r3
 801040a:	6879      	ldr	r1, [r7, #4]
 801040c:	68b5      	ldr	r5, [r6, #8]
 801040e:	68f3      	ldr	r3, [r6, #12]
 8010410:	3708      	adds	r7, #8
 8010412:	3610      	adds	r6, #16
 8010414:	fb25 4401 	smlad	r4, r5, r1, r4
 8010418:	fb23 2301 	smlad	r3, r3, r1, r2
 801041c:	4547      	cmp	r7, r8
 801041e:	d1ed      	bne.n	80103fc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x130>
 8010420:	9a04      	ldr	r2, [sp, #16]
 8010422:	f10c 0c04 	add.w	ip, ip, #4
 8010426:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
 801042a:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801042e:	9e03      	ldr	r6, [sp, #12]
 8010430:	4566      	cmp	r6, ip
 8010432:	dd23      	ble.n	801047c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1b0>
 8010434:	f9b7 1000 	ldrsh.w	r1, [r7]
 8010438:	8802      	ldrh	r2, [r0, #0]
 801043a:	8845      	ldrh	r5, [r0, #2]
 801043c:	fb12 4401 	smlabb	r4, r2, r1, r4
 8010440:	f10c 0201 	add.w	r2, ip, #1
 8010444:	4296      	cmp	r6, r2
 8010446:	fb11 3305 	smlabb	r3, r1, r5, r3
 801044a:	f340 80d4 	ble.w	80105f6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32a>
 801044e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010452:	8881      	ldrh	r1, [r0, #4]
 8010454:	88c5      	ldrh	r5, [r0, #6]
 8010456:	fb11 4402 	smlabb	r4, r1, r2, r4
 801045a:	fb12 3305 	smlabb	r3, r2, r5, r3
 801045e:	9a03      	ldr	r2, [sp, #12]
 8010460:	f10c 0c02 	add.w	ip, ip, #2
 8010464:	4562      	cmp	r2, ip
 8010466:	f340 80ee 	ble.w	8010646 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x37a>
 801046a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801046e:	8905      	ldrh	r5, [r0, #8]
 8010470:	8941      	ldrh	r1, [r0, #10]
 8010472:	fb15 4402 	smlabb	r4, r5, r2, r4
 8010476:	fb12 3301 	smlabb	r3, r2, r1, r3
 801047a:	300c      	adds	r0, #12
 801047c:	9a00      	ldr	r2, [sp, #0]
 801047e:	f85a 6c08 	ldr.w	r6, [sl, #-8]
 8010482:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 8010486:	f85b 1c08 	ldr.w	r1, [fp, #-8]
 801048a:	2a15      	cmp	r2, #21
 801048c:	f340 80a6 	ble.w	80105dc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x310>
 8010490:	1e95      	subs	r5, r2, #2
 8010492:	2701      	movs	r7, #1
 8010494:	3a01      	subs	r2, #1
 8010496:	fa07 f505 	lsl.w	r5, r7, r5
 801049a:	fb54 5406 	smmla	r4, r4, r6, r5
 801049e:	4114      	asrs	r4, r2
 80104a0:	440c      	add	r4, r1
 80104a2:	f304 0407 	ssat	r4, #8, r4
 80104a6:	9a01      	ldr	r2, [sp, #4]
 80104a8:	f802 4c02 	strb.w	r4, [r2, #-2]
 80104ac:	9a00      	ldr	r2, [sp, #0]
 80104ae:	f932 6c02 	ldrsh.w	r6, [r2, #-2]
 80104b2:	2e15      	cmp	r6, #21
 80104b4:	f340 8082 	ble.w	80105bc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f0>
 80104b8:	1eb2      	subs	r2, r6, #2
 80104ba:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 80104be:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 80104c2:	3e01      	subs	r6, #1
 80104c4:	2501      	movs	r5, #1
 80104c6:	fa05 f202 	lsl.w	r2, r5, r2
 80104ca:	fb53 2201 	smmla	r2, r3, r1, r2
 80104ce:	4132      	asrs	r2, r6
 80104d0:	4422      	add	r2, r4
 80104d2:	f302 0207 	ssat	r2, #8, r2
 80104d6:	9b01      	ldr	r3, [sp, #4]
 80104d8:	f803 2c01 	strb.w	r2, [r3, #-1]
 80104dc:	461a      	mov	r2, r3
 80104de:	3202      	adds	r2, #2
 80104e0:	9201      	str	r2, [sp, #4]
 80104e2:	9a00      	ldr	r2, [sp, #0]
 80104e4:	9b02      	ldr	r3, [sp, #8]
 80104e6:	3204      	adds	r2, #4
 80104e8:	9200      	str	r2, [sp, #0]
 80104ea:	9a06      	ldr	r2, [sp, #24]
 80104ec:	3308      	adds	r3, #8
 80104ee:	429a      	cmp	r2, r3
 80104f0:	9302      	str	r3, [sp, #8]
 80104f2:	f10a 0a08 	add.w	sl, sl, #8
 80104f6:	f10b 0b08 	add.w	fp, fp, #8
 80104fa:	f47f af1c 	bne.w	8010336 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6a>
 80104fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010500:	991d      	ldr	r1, [sp, #116]	; 0x74
 8010502:	3301      	adds	r3, #1
 8010504:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8010508:	991a      	ldr	r1, [sp, #104]	; 0x68
 801050a:	00da      	lsls	r2, r3, #3
 801050c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010510:	931a      	str	r3, [sp, #104]	; 0x68
 8010512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010514:	4413      	add	r3, r2
 8010516:	930b      	str	r3, [sp, #44]	; 0x2c
 8010518:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801051a:	4413      	add	r3, r2
 801051c:	931b      	str	r3, [sp, #108]	; 0x6c
 801051e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010520:	4413      	add	r3, r2
 8010522:	931c      	str	r3, [sp, #112]	; 0x70
 8010524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010526:	07db      	lsls	r3, r3, #31
 8010528:	d544      	bpl.n	80105b4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e8>
 801052a:	9a03      	ldr	r2, [sp, #12]
 801052c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801052e:	0892      	lsrs	r2, r2, #2
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	d015      	beq.n	8010560 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x294>
 8010534:	1e56      	subs	r6, r2, #1
 8010536:	b2b6      	uxth	r6, r6
 8010538:	3601      	adds	r6, #1
 801053a:	00f6      	lsls	r6, r6, #3
 801053c:	9905      	ldr	r1, [sp, #20]
 801053e:	1987      	adds	r7, r0, r6
 8010540:	6805      	ldr	r5, [r0, #0]
 8010542:	6842      	ldr	r2, [r0, #4]
 8010544:	f8d1 c000 	ldr.w	ip, [r1]
 8010548:	3008      	adds	r0, #8
 801054a:	fb25 330c 	smlad	r3, r5, ip, r3
 801054e:	684d      	ldr	r5, [r1, #4]
 8010550:	3108      	adds	r1, #8
 8010552:	fb22 3305 	smlad	r3, r2, r5, r3
 8010556:	42b8      	cmp	r0, r7
 8010558:	d1f2      	bne.n	8010540 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x274>
 801055a:	9a05      	ldr	r2, [sp, #20]
 801055c:	4432      	add	r2, r6
 801055e:	9205      	str	r2, [sp, #20]
 8010560:	9a03      	ldr	r2, [sp, #12]
 8010562:	f012 0203 	ands.w	r2, r2, #3
 8010566:	d010      	beq.n	801058a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2be>
 8010568:	9e05      	ldr	r6, [sp, #20]
 801056a:	8801      	ldrh	r1, [r0, #0]
 801056c:	8835      	ldrh	r5, [r6, #0]
 801056e:	2a01      	cmp	r2, #1
 8010570:	fb15 3301 	smlabb	r3, r5, r1, r3
 8010574:	d009      	beq.n	801058a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2be>
 8010576:	8875      	ldrh	r5, [r6, #2]
 8010578:	8841      	ldrh	r1, [r0, #2]
 801057a:	2a02      	cmp	r2, #2
 801057c:	fb15 3301 	smlabb	r3, r5, r1, r3
 8010580:	d003      	beq.n	801058a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2be>
 8010582:	8881      	ldrh	r1, [r0, #4]
 8010584:	88b2      	ldrh	r2, [r6, #4]
 8010586:	fb11 3302 	smlabb	r3, r1, r2, r3
 801058a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801058c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801058e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010592:	680e      	ldr	r6, [r1, #0]
 8010594:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010596:	2a15      	cmp	r2, #21
 8010598:	680d      	ldr	r5, [r1, #0]
 801059a:	f104 0101 	add.w	r1, r4, #1
 801059e:	dc54      	bgt.n	801064a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x37e>
 80105a0:	2a00      	cmp	r2, #0
 80105a2:	dd62      	ble.n	801066a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x39e>
 80105a4:	005b      	lsls	r3, r3, #1
 80105a6:	fb53 5306 	smmla	r3, r3, r6, r5
 80105aa:	4113      	asrs	r3, r2
 80105ac:	f303 0307 	ssat	r3, #8, r3
 80105b0:	7023      	strb	r3, [r4, #0]
 80105b2:	460c      	mov	r4, r1
 80105b4:	4620      	mov	r0, r4
 80105b6:	b00f      	add	sp, #60	; 0x3c
 80105b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105bc:	2e00      	cmp	r6, #0
 80105be:	dd1c      	ble.n	80105fa <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32e>
 80105c0:	f85a 4c04 	ldr.w	r4, [sl, #-4]
 80105c4:	f85b 5c04 	ldr.w	r5, [fp, #-4]
 80105c8:	005b      	lsls	r3, r3, #1
 80105ca:	fb53 5304 	smmla	r3, r3, r4, r5
 80105ce:	4133      	asrs	r3, r6
 80105d0:	f303 0307 	ssat	r3, #8, r3
 80105d4:	9a01      	ldr	r2, [sp, #4]
 80105d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80105da:	e780      	b.n	80104de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x212>
 80105dc:	2a00      	cmp	r2, #0
 80105de:	dd1f      	ble.n	8010620 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x354>
 80105e0:	0064      	lsls	r4, r4, #1
 80105e2:	fb54 1406 	smmla	r4, r4, r6, r1
 80105e6:	fa44 f202 	asr.w	r2, r4, r2
 80105ea:	f302 0207 	ssat	r2, #8, r2
 80105ee:	9901      	ldr	r1, [sp, #4]
 80105f0:	f801 2c02 	strb.w	r2, [r1, #-2]
 80105f4:	e75a      	b.n	80104ac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e0>
 80105f6:	3004      	adds	r0, #4
 80105f8:	e740      	b.n	801047c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1b0>
 80105fa:	f1c6 0601 	rsb	r6, r6, #1
 80105fe:	40b3      	lsls	r3, r6
 8010600:	f303 031f 	ssat	r3, #32, r3
 8010604:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8010608:	fb53 f212 	smmulr	r2, r3, r2
 801060c:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8010610:	441a      	add	r2, r3
 8010612:	f302 0207 	ssat	r2, #8, r2
 8010616:	9b01      	ldr	r3, [sp, #4]
 8010618:	f803 2c01 	strb.w	r2, [r3, #-1]
 801061c:	461a      	mov	r2, r3
 801061e:	e75e      	b.n	80104de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x212>
 8010620:	f1c2 0201 	rsb	r2, r2, #1
 8010624:	fa04 f202 	lsl.w	r2, r4, r2
 8010628:	f302 021f 	ssat	r2, #32, r2
 801062c:	fb52 f216 	smmulr	r2, r2, r6
 8010630:	440a      	add	r2, r1
 8010632:	f302 0207 	ssat	r2, #8, r2
 8010636:	9901      	ldr	r1, [sp, #4]
 8010638:	f801 2c02 	strb.w	r2, [r1, #-2]
 801063c:	e736      	b.n	80104ac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e0>
 801063e:	9f05      	ldr	r7, [sp, #20]
 8010640:	f04f 0c00 	mov.w	ip, #0
 8010644:	e6cc      	b.n	80103e0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x114>
 8010646:	3008      	adds	r0, #8
 8010648:	e718      	b.n	801047c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1b0>
 801064a:	1e97      	subs	r7, r2, #2
 801064c:	2001      	movs	r0, #1
 801064e:	3a01      	subs	r2, #1
 8010650:	40b8      	lsls	r0, r7
 8010652:	fb53 0306 	smmla	r3, r3, r6, r0
 8010656:	4113      	asrs	r3, r2
 8010658:	442b      	add	r3, r5
 801065a:	f303 0307 	ssat	r3, #8, r3
 801065e:	7023      	strb	r3, [r4, #0]
 8010660:	460c      	mov	r4, r1
 8010662:	4620      	mov	r0, r4
 8010664:	b00f      	add	sp, #60	; 0x3c
 8010666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801066a:	f1c2 0201 	rsb	r2, r2, #1
 801066e:	4093      	lsls	r3, r2
 8010670:	f303 031f 	ssat	r3, #32, r3
 8010674:	fb53 f316 	smmulr	r3, r3, r6
 8010678:	442b      	add	r3, r5
 801067a:	f303 0307 	ssat	r3, #8, r3
 801067e:	7023      	strb	r3, [r4, #0]
 8010680:	460c      	mov	r4, r1
 8010682:	4620      	mov	r0, r4
 8010684:	b00f      	add	sp, #60	; 0x3c
 8010686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801068a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801068c:	e74a      	b.n	8010524 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x258>
 801068e:	bf00      	nop

08010690 <st_int8_avepool>:
 8010690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010694:	b097      	sub	sp, #92	; 0x5c
 8010696:	e9cd 1006 	strd	r1, r0, [sp, #24]
 801069a:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 801069e:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 80106a2:	9402      	str	r4, [sp, #8]
 80106a4:	960e      	str	r6, [sp, #56]	; 0x38
 80106a6:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 80106aa:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 80106ae:	f8bd 50a0 	ldrh.w	r5, [sp, #160]	; 0xa0
 80106b2:	9411      	str	r4, [sp, #68]	; 0x44
 80106b4:	9614      	str	r6, [sp, #80]	; 0x50
 80106b6:	f8bd 4088 	ldrh.w	r4, [sp, #136]	; 0x88
 80106ba:	f8bd 609c 	ldrh.w	r6, [sp, #156]	; 0x9c
 80106be:	9412      	str	r4, [sp, #72]	; 0x48
 80106c0:	960c      	str	r6, [sp, #48]	; 0x30
 80106c2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80106c6:	f99d 60a4 	ldrsb.w	r6, [sp, #164]	; 0xa4
 80106ca:	9413      	str	r4, [sp, #76]	; 0x4c
 80106cc:	9608      	str	r6, [sp, #32]
 80106ce:	9515      	str	r5, [sp, #84]	; 0x54
 80106d0:	f8bd 4090 	ldrh.w	r4, [sp, #144]	; 0x90
 80106d4:	f99d 60a8 	ldrsb.w	r6, [sp, #168]	; 0xa8
 80106d8:	ee80 5a20 	vdiv.f32	s10, s0, s1
 80106dc:	2d00      	cmp	r5, #0
 80106de:	f000 80bc 	beq.w	801085a <st_int8_avepool+0x1ca>
 80106e2:	4264      	negs	r4, r4
 80106e4:	469b      	mov	fp, r3
 80106e6:	2000      	movs	r0, #0
 80106e8:	b2a3      	uxth	r3, r4
 80106ea:	4692      	mov	sl, r2
 80106ec:	9010      	str	r0, [sp, #64]	; 0x40
 80106ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80106f0:	ee06 6a10 	vmov	s12, r6
 80106f4:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80108b4 <st_int8_avepool+0x224>
 80106f8:	ed9f 4a6f 	vldr	s8, [pc, #444]	; 80108b8 <st_int8_avepool+0x228>
 80106fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80106fe:	2c00      	cmp	r4, #0
 8010700:	f000 809d 	beq.w	801083e <st_int8_avepool+0x1ae>
 8010704:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010706:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010708:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801070a:	eddd 7a08 	vldr	s15, [sp, #32]
 801070e:	18e9      	adds	r1, r5, r3
 8010710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010712:	425a      	negs	r2, r3
 8010714:	b292      	uxth	r2, r2
 8010716:	1af3      	subs	r3, r6, r3
 8010718:	b29b      	uxth	r3, r3
 801071a:	2600      	movs	r6, #0
 801071c:	fb04 f000 	mul.w	r0, r4, r0
 8010720:	9209      	str	r2, [sp, #36]	; 0x24
 8010722:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8010726:	b22a      	sxth	r2, r5
 8010728:	930a      	str	r3, [sp, #40]	; 0x28
 801072a:	960b      	str	r6, [sp, #44]	; 0x2c
 801072c:	900d      	str	r0, [sp, #52]	; 0x34
 801072e:	fa0f f981 	sxth.w	r9, r1
 8010732:	4633      	mov	r3, r6
 8010734:	9205      	str	r2, [sp, #20]
 8010736:	9a02      	ldr	r2, [sp, #8]
 8010738:	2a00      	cmp	r2, #0
 801073a:	d06d      	beq.n	8010818 <st_int8_avepool+0x188>
 801073c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801073e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8010742:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8010746:	4413      	add	r3, r2
 8010748:	9a02      	ldr	r2, [sp, #8]
 801074a:	2700      	movs	r7, #0
 801074c:	fb02 f303 	mul.w	r3, r2, r3
 8010750:	9304      	str	r3, [sp, #16]
 8010752:	ea01 75e1 	and.w	r5, r1, r1, asr #31
 8010756:	46b8      	mov	r8, r7
 8010758:	9a05      	ldr	r2, [sp, #20]
 801075a:	4591      	cmp	r9, r2
 801075c:	f340 808c 	ble.w	8010878 <st_int8_avepool+0x1e8>
 8010760:	9b07      	ldr	r3, [sp, #28]
 8010762:	2000      	movs	r0, #0
 8010764:	4443      	add	r3, r8
 8010766:	4684      	mov	ip, r0
 8010768:	9303      	str	r3, [sp, #12]
 801076a:	428e      	cmp	r6, r1
 801076c:	da1a      	bge.n	80107a4 <st_int8_avepool+0x114>
 801076e:	2a00      	cmp	r2, #0
 8010770:	fb0a f402 	mul.w	r4, sl, r2
 8010774:	db16      	blt.n	80107a4 <st_int8_avepool+0x114>
 8010776:	455a      	cmp	r2, fp
 8010778:	da14      	bge.n	80107a4 <st_int8_avepool+0x114>
 801077a:	2e00      	cmp	r6, #0
 801077c:	4633      	mov	r3, r6
 801077e:	db6f      	blt.n	8010860 <st_int8_avepool+0x1d0>
 8010780:	9401      	str	r4, [sp, #4]
 8010782:	459a      	cmp	sl, r3
 8010784:	dd0a      	ble.n	801079c <st_int8_avepool+0x10c>
 8010786:	9c01      	ldr	r4, [sp, #4]
 8010788:	eb04 0e03 	add.w	lr, r4, r3
 801078c:	9c02      	ldr	r4, [sp, #8]
 801078e:	fb04 fe0e 	mul.w	lr, r4, lr
 8010792:	9c03      	ldr	r4, [sp, #12]
 8010794:	f914 e00e 	ldrsb.w	lr, [r4, lr]
 8010798:	3001      	adds	r0, #1
 801079a:	44f4      	add	ip, lr
 801079c:	3301      	adds	r3, #1
 801079e:	b21b      	sxth	r3, r3
 80107a0:	4299      	cmp	r1, r3
 80107a2:	dcee      	bgt.n	8010782 <st_int8_avepool+0xf2>
 80107a4:	3201      	adds	r2, #1
 80107a6:	b212      	sxth	r2, r2
 80107a8:	4591      	cmp	r9, r2
 80107aa:	dcde      	bgt.n	801076a <st_int8_avepool+0xda>
 80107ac:	eeb4 0a60 	vcmp.f32	s0, s1
 80107b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107b4:	d104      	bne.n	80107c0 <st_int8_avepool+0x130>
 80107b6:	9b08      	ldr	r3, [sp, #32]
 80107b8:	ee16 2a10 	vmov	r2, s12
 80107bc:	4293      	cmp	r3, r2
 80107be:	d068      	beq.n	8010892 <st_int8_avepool+0x202>
 80107c0:	ee07 ca90 	vmov	s15, ip
 80107c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80107c8:	ee07 0a90 	vmov	s15, r0
 80107cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80107d4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80107d8:	eef8 7ac6 	vcvt.f32.s32	s15, s12
 80107dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80107e0:	eee6 7a85 	vfma.f32	s15, s13, s10
 80107e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80107e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ec:	bfb8      	it	lt
 80107ee:	eeb0 7a65 	vmovlt.f32	s14, s11
 80107f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80107fa:	ee17 3a90 	vmov	r3, s15
 80107fe:	f303 0307 	ssat	r3, #8, r3
 8010802:	9a06      	ldr	r2, [sp, #24]
 8010804:	9804      	ldr	r0, [sp, #16]
 8010806:	4402      	add	r2, r0
 8010808:	3701      	adds	r7, #1
 801080a:	f802 3008 	strb.w	r3, [r2, r8]
 801080e:	9b02      	ldr	r3, [sp, #8]
 8010810:	b23f      	sxth	r7, r7
 8010812:	429f      	cmp	r7, r3
 8010814:	46b8      	mov	r8, r7
 8010816:	db9f      	blt.n	8010758 <st_int8_avepool+0xc8>
 8010818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801081a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801081c:	3301      	adds	r3, #1
 801081e:	b219      	sxth	r1, r3
 8010820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010822:	910b      	str	r1, [sp, #44]	; 0x2c
 8010824:	461a      	mov	r2, r3
 8010826:	4402      	add	r2, r0
 8010828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801082a:	b292      	uxth	r2, r2
 801082c:	9209      	str	r2, [sp, #36]	; 0x24
 801082e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010830:	4403      	add	r3, r0
 8010832:	b29b      	uxth	r3, r3
 8010834:	4291      	cmp	r1, r2
 8010836:	930a      	str	r3, [sp, #40]	; 0x28
 8010838:	460b      	mov	r3, r1
 801083a:	f6ff af7c 	blt.w	8010736 <st_int8_avepool+0xa6>
 801083e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010840:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010842:	3301      	adds	r3, #1
 8010844:	b21a      	sxth	r2, r3
 8010846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010848:	9210      	str	r2, [sp, #64]	; 0x40
 801084a:	440b      	add	r3, r1
 801084c:	b29b      	uxth	r3, r3
 801084e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010850:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010852:	4293      	cmp	r3, r2
 8010854:	4610      	mov	r0, r2
 8010856:	f73f af51 	bgt.w	80106fc <st_int8_avepool+0x6c>
 801085a:	b017      	add	sp, #92	; 0x5c
 801085c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010860:	3301      	adds	r3, #1
 8010862:	b21b      	sxth	r3, r3
 8010864:	429d      	cmp	r5, r3
 8010866:	dcfb      	bgt.n	8010860 <st_int8_avepool+0x1d0>
 8010868:	4299      	cmp	r1, r3
 801086a:	dc89      	bgt.n	8010780 <st_int8_avepool+0xf0>
 801086c:	3201      	adds	r2, #1
 801086e:	b212      	sxth	r2, r2
 8010870:	4591      	cmp	r9, r2
 8010872:	f73f af7a 	bgt.w	801076a <st_int8_avepool+0xda>
 8010876:	e799      	b.n	80107ac <st_int8_avepool+0x11c>
 8010878:	eeb4 0a60 	vcmp.f32	s0, s1
 801087c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010880:	d104      	bne.n	801088c <st_int8_avepool+0x1fc>
 8010882:	9b08      	ldr	r3, [sp, #32]
 8010884:	ee16 2a10 	vmov	r2, s12
 8010888:	4293      	cmp	r3, r2
 801088a:	d00a      	beq.n	80108a2 <st_int8_avepool+0x212>
 801088c:	eef0 6a44 	vmov.f32	s13, s8
 8010890:	e7a0      	b.n	80107d4 <st_int8_avepool+0x144>
 8010892:	f1bc 0f00 	cmp.w	ip, #0
 8010896:	db05      	blt.n	80108a4 <st_int8_avepool+0x214>
 8010898:	eb0c 0c60 	add.w	ip, ip, r0, asr #1
 801089c:	fb9c f3f0 	sdiv	r3, ip, r0
 80108a0:	e7ad      	b.n	80107fe <st_int8_avepool+0x16e>
 80108a2:	deff      	udf	#255	; 0xff
 80108a4:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 80108a8:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 80108ac:	fb93 f3f0 	sdiv	r3, r3, r0
 80108b0:	e7a5      	b.n	80107fe <st_int8_avepool+0x16e>
 80108b2:	bf00      	nop
 80108b4:	befffffc 	.word	0xbefffffc
 80108b8:	7fc00000 	.word	0x7fc00000

080108bc <st_int8_maxpool>:
 80108bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c0:	b097      	sub	sp, #92	; 0x5c
 80108c2:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80108c6:	f8bd 0094 	ldrh.w	r0, [sp, #148]	; 0x94
 80108ca:	900c      	str	r0, [sp, #48]	; 0x30
 80108cc:	f8bd 0098 	ldrh.w	r0, [sp, #152]	; 0x98
 80108d0:	9015      	str	r0, [sp, #84]	; 0x54
 80108d2:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 80108d6:	900a      	str	r0, [sp, #40]	; 0x28
 80108d8:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 80108dc:	900e      	str	r0, [sp, #56]	; 0x38
 80108de:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80108e2:	f99d 00a4 	ldrsb.w	r0, [sp, #164]	; 0xa4
 80108e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80108e8:	9001      	str	r0, [sp, #4]
 80108ea:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 80108ee:	f99d 00a8 	ldrsb.w	r0, [sp, #168]	; 0xa8
 80108f2:	9314      	str	r3, [sp, #80]	; 0x50
 80108f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f8:	4692      	mov	sl, r2
 80108fa:	9007      	str	r0, [sp, #28]
 80108fc:	eec0 6a20 	vdiv.f32	s13, s0, s1
 8010900:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 8010904:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 8010908:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801090c:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8010910:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010912:	f2c0 80c8 	blt.w	8010aa6 <st_int8_maxpool+0x1ea>
 8010916:	2800      	cmp	r0, #0
 8010918:	f000 80b5 	beq.w	8010a86 <st_int8_maxpool+0x1ca>
 801091c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801091e:	2800      	cmp	r0, #0
 8010920:	f000 80b1 	beq.w	8010a86 <st_int8_maxpool+0x1ca>
 8010924:	f1bb 0f00 	cmp.w	fp, #0
 8010928:	f000 80ad 	beq.w	8010a86 <st_int8_maxpool+0x1ca>
 801092c:	4252      	negs	r2, r2
 801092e:	eddd 7a07 	vldr	s15, [sp, #28]
 8010932:	eddf 5ab8 	vldr	s11, [pc, #736]	; 8010c14 <st_int8_maxpool+0x358>
 8010936:	b292      	uxth	r2, r2
 8010938:	2000      	movs	r0, #0
 801093a:	920f      	str	r2, [sp, #60]	; 0x3c
 801093c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8010940:	1aca      	subs	r2, r1, r3
 8010942:	425b      	negs	r3, r3
 8010944:	9211      	str	r2, [sp, #68]	; 0x44
 8010946:	9012      	str	r0, [sp, #72]	; 0x48
 8010948:	9310      	str	r3, [sp, #64]	; 0x40
 801094a:	4602      	mov	r2, r0
 801094c:	46d9      	mov	r9, fp
 801094e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010950:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010952:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010954:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8010958:	fb02 f204 	mul.w	r2, r2, r4
 801095c:	920d      	str	r2, [sp, #52]	; 0x34
 801095e:	b20a      	sxth	r2, r1
 8010960:	9206      	str	r2, [sp, #24]
 8010962:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8010966:	9208      	str	r2, [sp, #32]
 8010968:	440b      	add	r3, r1
 801096a:	2000      	movs	r0, #0
 801096c:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8010970:	900b      	str	r0, [sp, #44]	; 0x2c
 8010972:	fa0f fb83 	sxth.w	fp, r3
 8010976:	9209      	str	r2, [sp, #36]	; 0x24
 8010978:	4603      	mov	r3, r0
 801097a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801097c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8010980:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8010984:	4413      	add	r3, r2
 8010986:	f04f 0c00 	mov.w	ip, #0
 801098a:	fb09 f303 	mul.w	r3, r9, r3
 801098e:	9305      	str	r3, [sp, #20]
 8010990:	ea04 76e4 	and.w	r6, r4, r4, asr #31
 8010994:	f8cd c000 	str.w	ip, [sp]
 8010998:	9a06      	ldr	r2, [sp, #24]
 801099a:	455a      	cmp	r2, fp
 801099c:	f06f 0e7f 	mvn.w	lr, #127	; 0x7f
 80109a0:	da20      	bge.n	80109e4 <st_int8_maxpool+0x128>
 80109a2:	9b04      	ldr	r3, [sp, #16]
 80109a4:	9900      	ldr	r1, [sp, #0]
 80109a6:	440b      	add	r3, r1
 80109a8:	9302      	str	r3, [sp, #8]
 80109aa:	42a7      	cmp	r7, r4
 80109ac:	da16      	bge.n	80109dc <st_int8_maxpool+0x120>
 80109ae:	2a00      	cmp	r2, #0
 80109b0:	fb02 f50a 	mul.w	r5, r2, sl
 80109b4:	db12      	blt.n	80109dc <st_int8_maxpool+0x120>
 80109b6:	4542      	cmp	r2, r8
 80109b8:	da10      	bge.n	80109dc <st_int8_maxpool+0x120>
 80109ba:	2f00      	cmp	r7, #0
 80109bc:	463b      	mov	r3, r7
 80109be:	db65      	blt.n	8010a8c <st_int8_maxpool+0x1d0>
 80109c0:	18e9      	adds	r1, r5, r3
 80109c2:	1c58      	adds	r0, r3, #1
 80109c4:	459a      	cmp	sl, r3
 80109c6:	fb09 f101 	mul.w	r1, r9, r1
 80109ca:	b203      	sxth	r3, r0
 80109cc:	dd04      	ble.n	80109d8 <st_int8_maxpool+0x11c>
 80109ce:	9802      	ldr	r0, [sp, #8]
 80109d0:	5641      	ldrsb	r1, [r0, r1]
 80109d2:	458e      	cmp	lr, r1
 80109d4:	bfb8      	it	lt
 80109d6:	468e      	movlt	lr, r1
 80109d8:	429c      	cmp	r4, r3
 80109da:	dcf1      	bgt.n	80109c0 <st_int8_maxpool+0x104>
 80109dc:	3201      	adds	r2, #1
 80109de:	b212      	sxth	r2, r2
 80109e0:	455a      	cmp	r2, fp
 80109e2:	dbe2      	blt.n	80109aa <st_int8_maxpool+0xee>
 80109e4:	9b00      	ldr	r3, [sp, #0]
 80109e6:	9a05      	ldr	r2, [sp, #20]
 80109e8:	eeb4 0a60 	vcmp.f32	s0, s1
 80109ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109f0:	4413      	add	r3, r2
 80109f2:	d103      	bne.n	80109fc <st_int8_maxpool+0x140>
 80109f4:	9a01      	ldr	r2, [sp, #4]
 80109f6:	9907      	ldr	r1, [sp, #28]
 80109f8:	428a      	cmp	r2, r1
 80109fa:	d050      	beq.n	8010a9e <st_int8_maxpool+0x1e2>
 80109fc:	9a01      	ldr	r2, [sp, #4]
 80109fe:	ebae 0e02 	sub.w	lr, lr, r2
 8010a02:	ee07 ea90 	vmov	s15, lr
 8010a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a0a:	eeb0 5a46 	vmov.f32	s10, s12
 8010a0e:	eea7 5aa6 	vfma.f32	s10, s15, s13
 8010a12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010a16:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8010a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a1e:	bfb8      	it	lt
 8010a20:	eeb0 7a65 	vmovlt.f32	s14, s11
 8010a24:	ee77 7a05 	vadd.f32	s15, s14, s10
 8010a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a2c:	ee17 2a90 	vmov	r2, s15
 8010a30:	f302 0207 	ssat	r2, #8, r2
 8010a34:	9903      	ldr	r1, [sp, #12]
 8010a36:	54ca      	strb	r2, [r1, r3]
 8010a38:	f10c 0c01 	add.w	ip, ip, #1
 8010a3c:	fa0f fc8c 	sxth.w	ip, ip
 8010a40:	45cc      	cmp	ip, r9
 8010a42:	f8cd c000 	str.w	ip, [sp]
 8010a46:	dba7      	blt.n	8010998 <st_int8_maxpool+0xdc>
 8010a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010a4c:	3301      	adds	r3, #1
 8010a4e:	b219      	sxth	r1, r3
 8010a50:	9b08      	ldr	r3, [sp, #32]
 8010a52:	910b      	str	r1, [sp, #44]	; 0x2c
 8010a54:	461a      	mov	r2, r3
 8010a56:	4402      	add	r2, r0
 8010a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a5a:	b292      	uxth	r2, r2
 8010a5c:	9208      	str	r2, [sp, #32]
 8010a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a60:	4403      	add	r3, r0
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	4291      	cmp	r1, r2
 8010a66:	9309      	str	r3, [sp, #36]	; 0x24
 8010a68:	460b      	mov	r3, r1
 8010a6a:	db86      	blt.n	801097a <st_int8_maxpool+0xbe>
 8010a6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a6e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010a70:	3301      	adds	r3, #1
 8010a72:	b21a      	sxth	r2, r3
 8010a74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a76:	9212      	str	r2, [sp, #72]	; 0x48
 8010a78:	440b      	add	r3, r1
 8010a7a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	428a      	cmp	r2, r1
 8010a80:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a82:	f6ff af64 	blt.w	801094e <st_int8_maxpool+0x92>
 8010a86:	b017      	add	sp, #92	; 0x5c
 8010a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a8c:	3301      	adds	r3, #1
 8010a8e:	b21b      	sxth	r3, r3
 8010a90:	429e      	cmp	r6, r3
 8010a92:	dda1      	ble.n	80109d8 <st_int8_maxpool+0x11c>
 8010a94:	3301      	adds	r3, #1
 8010a96:	b21b      	sxth	r3, r3
 8010a98:	429e      	cmp	r6, r3
 8010a9a:	dcf7      	bgt.n	8010a8c <st_int8_maxpool+0x1d0>
 8010a9c:	e79c      	b.n	80109d8 <st_int8_maxpool+0x11c>
 8010a9e:	9a03      	ldr	r2, [sp, #12]
 8010aa0:	f802 e003 	strb.w	lr, [r2, r3]
 8010aa4:	e7c8      	b.n	8010a38 <st_int8_maxpool+0x17c>
 8010aa6:	2800      	cmp	r0, #0
 8010aa8:	d0ed      	beq.n	8010a86 <st_int8_maxpool+0x1ca>
 8010aaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010aac:	2800      	cmp	r0, #0
 8010aae:	d0ea      	beq.n	8010a86 <st_int8_maxpool+0x1ca>
 8010ab0:	f1bb 0f00 	cmp.w	fp, #0
 8010ab4:	d0e7      	beq.n	8010a86 <st_int8_maxpool+0x1ca>
 8010ab6:	4252      	negs	r2, r2
 8010ab8:	eddd 7a07 	vldr	s15, [sp, #28]
 8010abc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8010c14 <st_int8_maxpool+0x358>
 8010ac0:	b292      	uxth	r2, r2
 8010ac2:	2000      	movs	r0, #0
 8010ac4:	920d      	str	r2, [sp, #52]	; 0x34
 8010ac6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8010aca:	1aca      	subs	r2, r1, r3
 8010acc:	425b      	negs	r3, r3
 8010ace:	9211      	str	r2, [sp, #68]	; 0x44
 8010ad0:	9012      	str	r0, [sp, #72]	; 0x48
 8010ad2:	9310      	str	r3, [sp, #64]	; 0x40
 8010ad4:	4602      	mov	r2, r0
 8010ad6:	46d9      	mov	r9, fp
 8010ad8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010ada:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010adc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ade:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8010ae2:	fb02 f204 	mul.w	r2, r2, r4
 8010ae6:	920f      	str	r2, [sp, #60]	; 0x3c
 8010ae8:	b20a      	sxth	r2, r1
 8010aea:	9206      	str	r2, [sp, #24]
 8010aec:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8010af0:	9209      	str	r2, [sp, #36]	; 0x24
 8010af2:	18cb      	adds	r3, r1, r3
 8010af4:	2000      	movs	r0, #0
 8010af6:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8010afa:	900b      	str	r0, [sp, #44]	; 0x2c
 8010afc:	fa0f fb83 	sxth.w	fp, r3
 8010b00:	9208      	str	r2, [sp, #32]
 8010b02:	4603      	mov	r3, r0
 8010b04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b06:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8010b0a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8010b0e:	4413      	add	r3, r2
 8010b10:	f04f 0c00 	mov.w	ip, #0
 8010b14:	fb09 f303 	mul.w	r3, r9, r3
 8010b18:	9305      	str	r3, [sp, #20]
 8010b1a:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8010b1e:	f8cd c000 	str.w	ip, [sp]
 8010b22:	9a06      	ldr	r2, [sp, #24]
 8010b24:	455a      	cmp	r2, fp
 8010b26:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 8010b2a:	da20      	bge.n	8010b6e <st_int8_maxpool+0x2b2>
 8010b2c:	9b04      	ldr	r3, [sp, #16]
 8010b2e:	9900      	ldr	r1, [sp, #0]
 8010b30:	440b      	add	r3, r1
 8010b32:	9302      	str	r3, [sp, #8]
 8010b34:	42a6      	cmp	r6, r4
 8010b36:	da16      	bge.n	8010b66 <st_int8_maxpool+0x2aa>
 8010b38:	2a00      	cmp	r2, #0
 8010b3a:	fb02 f50a 	mul.w	r5, r2, sl
 8010b3e:	db12      	blt.n	8010b66 <st_int8_maxpool+0x2aa>
 8010b40:	4542      	cmp	r2, r8
 8010b42:	da10      	bge.n	8010b66 <st_int8_maxpool+0x2aa>
 8010b44:	2e00      	cmp	r6, #0
 8010b46:	4633      	mov	r3, r6
 8010b48:	db66      	blt.n	8010c18 <st_int8_maxpool+0x35c>
 8010b4a:	18e9      	adds	r1, r5, r3
 8010b4c:	1c58      	adds	r0, r3, #1
 8010b4e:	459a      	cmp	sl, r3
 8010b50:	fb09 f101 	mul.w	r1, r9, r1
 8010b54:	b203      	sxth	r3, r0
 8010b56:	dd04      	ble.n	8010b62 <st_int8_maxpool+0x2a6>
 8010b58:	9802      	ldr	r0, [sp, #8]
 8010b5a:	5641      	ldrsb	r1, [r0, r1]
 8010b5c:	458e      	cmp	lr, r1
 8010b5e:	bfa8      	it	ge
 8010b60:	468e      	movge	lr, r1
 8010b62:	429c      	cmp	r4, r3
 8010b64:	dcf1      	bgt.n	8010b4a <st_int8_maxpool+0x28e>
 8010b66:	3201      	adds	r2, #1
 8010b68:	b212      	sxth	r2, r2
 8010b6a:	455a      	cmp	r2, fp
 8010b6c:	dbe2      	blt.n	8010b34 <st_int8_maxpool+0x278>
 8010b6e:	9b00      	ldr	r3, [sp, #0]
 8010b70:	9a05      	ldr	r2, [sp, #20]
 8010b72:	eeb4 0a60 	vcmp.f32	s0, s1
 8010b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b7a:	4413      	add	r3, r2
 8010b7c:	d103      	bne.n	8010b86 <st_int8_maxpool+0x2ca>
 8010b7e:	9a01      	ldr	r2, [sp, #4]
 8010b80:	9907      	ldr	r1, [sp, #28]
 8010b82:	428a      	cmp	r2, r1
 8010b84:	d053      	beq.n	8010c2e <st_int8_maxpool+0x372>
 8010b86:	9a01      	ldr	r2, [sp, #4]
 8010b88:	ebae 0e02 	sub.w	lr, lr, r2
 8010b8c:	ee07 ea90 	vmov	s15, lr
 8010b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b94:	eeb0 5a46 	vmov.f32	s10, s12
 8010b98:	eea7 5aa6 	vfma.f32	s10, s15, s13
 8010b9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010ba0:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8010ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ba8:	bfb8      	it	lt
 8010baa:	eeb0 7a65 	vmovlt.f32	s14, s11
 8010bae:	ee77 7a05 	vadd.f32	s15, s14, s10
 8010bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bb6:	ee17 2a90 	vmov	r2, s15
 8010bba:	f302 0207 	ssat	r2, #8, r2
 8010bbe:	9903      	ldr	r1, [sp, #12]
 8010bc0:	54ca      	strb	r2, [r1, r3]
 8010bc2:	f10c 0c01 	add.w	ip, ip, #1
 8010bc6:	fa0f fc8c 	sxth.w	ip, ip
 8010bca:	45cc      	cmp	ip, r9
 8010bcc:	f8cd c000 	str.w	ip, [sp]
 8010bd0:	dba7      	blt.n	8010b22 <st_int8_maxpool+0x266>
 8010bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bd4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	b219      	sxth	r1, r3
 8010bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bdc:	910b      	str	r1, [sp, #44]	; 0x2c
 8010bde:	461a      	mov	r2, r3
 8010be0:	4402      	add	r2, r0
 8010be2:	9b08      	ldr	r3, [sp, #32]
 8010be4:	b292      	uxth	r2, r2
 8010be6:	9209      	str	r2, [sp, #36]	; 0x24
 8010be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010bea:	4403      	add	r3, r0
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	4291      	cmp	r1, r2
 8010bf0:	9308      	str	r3, [sp, #32]
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	db86      	blt.n	8010b04 <st_int8_maxpool+0x248>
 8010bf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010bf8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	b21a      	sxth	r2, r3
 8010bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c00:	9212      	str	r2, [sp, #72]	; 0x48
 8010c02:	440b      	add	r3, r1
 8010c04:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	428a      	cmp	r2, r1
 8010c0a:	930d      	str	r3, [sp, #52]	; 0x34
 8010c0c:	f6ff af64 	blt.w	8010ad8 <st_int8_maxpool+0x21c>
 8010c10:	e739      	b.n	8010a86 <st_int8_maxpool+0x1ca>
 8010c12:	bf00      	nop
 8010c14:	befffffc 	.word	0xbefffffc
 8010c18:	3301      	adds	r3, #1
 8010c1a:	b21b      	sxth	r3, r3
 8010c1c:	42bb      	cmp	r3, r7
 8010c1e:	dbfb      	blt.n	8010c18 <st_int8_maxpool+0x35c>
 8010c20:	42a3      	cmp	r3, r4
 8010c22:	db92      	blt.n	8010b4a <st_int8_maxpool+0x28e>
 8010c24:	3201      	adds	r2, #1
 8010c26:	b212      	sxth	r2, r2
 8010c28:	455a      	cmp	r2, fp
 8010c2a:	db83      	blt.n	8010b34 <st_int8_maxpool+0x278>
 8010c2c:	e79f      	b.n	8010b6e <st_int8_maxpool+0x2b2>
 8010c2e:	9a03      	ldr	r2, [sp, #12]
 8010c30:	f802 e003 	strb.w	lr, [r2, r3]
 8010c34:	e7c5      	b.n	8010bc2 <st_int8_maxpool+0x306>
 8010c36:	bf00      	nop

08010c38 <st_dsp_arm_copy_q7>:
 8010c38:	b470      	push	{r4, r5, r6}
 8010c3a:	0896      	lsrs	r6, r2, #2
 8010c3c:	d01b      	beq.n	8010c76 <st_dsp_arm_copy_q7+0x3e>
 8010c3e:	00b6      	lsls	r6, r6, #2
 8010c40:	1985      	adds	r5, r0, r6
 8010c42:	460b      	mov	r3, r1
 8010c44:	f850 4b04 	ldr.w	r4, [r0], #4
 8010c48:	f843 4b04 	str.w	r4, [r3], #4
 8010c4c:	42a8      	cmp	r0, r5
 8010c4e:	d1f9      	bne.n	8010c44 <st_dsp_arm_copy_q7+0xc>
 8010c50:	4431      	add	r1, r6
 8010c52:	f012 0203 	ands.w	r2, r2, #3
 8010c56:	d00c      	beq.n	8010c72 <st_dsp_arm_copy_q7+0x3a>
 8010c58:	f995 3000 	ldrsb.w	r3, [r5]
 8010c5c:	700b      	strb	r3, [r1, #0]
 8010c5e:	2a01      	cmp	r2, #1
 8010c60:	d007      	beq.n	8010c72 <st_dsp_arm_copy_q7+0x3a>
 8010c62:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8010c66:	704b      	strb	r3, [r1, #1]
 8010c68:	2a02      	cmp	r2, #2
 8010c6a:	bf1c      	itt	ne
 8010c6c:	f995 3002 	ldrsbne.w	r3, [r5, #2]
 8010c70:	708b      	strbne	r3, [r1, #2]
 8010c72:	bc70      	pop	{r4, r5, r6}
 8010c74:	4770      	bx	lr
 8010c76:	4605      	mov	r5, r0
 8010c78:	e7eb      	b.n	8010c52 <st_dsp_arm_copy_q7+0x1a>
 8010c7a:	bf00      	nop

08010c7c <st_dsp_arm_fill_q15>:
 8010c7c:	b470      	push	{r4, r5, r6}
 8010c7e:	b285      	uxth	r5, r0
 8010c80:	0896      	lsrs	r6, r2, #2
 8010c82:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8010c86:	d009      	beq.n	8010c9c <st_dsp_arm_fill_q15+0x20>
 8010c88:	460b      	mov	r3, r1
 8010c8a:	4634      	mov	r4, r6
 8010c8c:	3c01      	subs	r4, #1
 8010c8e:	601d      	str	r5, [r3, #0]
 8010c90:	605d      	str	r5, [r3, #4]
 8010c92:	f103 0308 	add.w	r3, r3, #8
 8010c96:	d1f9      	bne.n	8010c8c <st_dsp_arm_fill_q15+0x10>
 8010c98:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010c9c:	f012 0203 	ands.w	r2, r2, #3
 8010ca0:	d006      	beq.n	8010cb0 <st_dsp_arm_fill_q15+0x34>
 8010ca2:	2a01      	cmp	r2, #1
 8010ca4:	8008      	strh	r0, [r1, #0]
 8010ca6:	d003      	beq.n	8010cb0 <st_dsp_arm_fill_q15+0x34>
 8010ca8:	2a02      	cmp	r2, #2
 8010caa:	8048      	strh	r0, [r1, #2]
 8010cac:	bf18      	it	ne
 8010cae:	8088      	strhne	r0, [r1, #4]
 8010cb0:	bc70      	pop	{r4, r5, r6}
 8010cb2:	4770      	bx	lr

08010cb4 <st_dsp_arm_float_to_q15>:
 8010cb4:	b4f0      	push	{r4, r5, r6, r7}
 8010cb6:	0897      	lsrs	r7, r2, #2
 8010cb8:	d073      	beq.n	8010da2 <st_dsp_arm_float_to_q15+0xee>
 8010cba:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8010e40 <st_dsp_arm_float_to_q15+0x18c>
 8010cbe:	f100 0510 	add.w	r5, r0, #16
 8010cc2:	f101 0408 	add.w	r4, r1, #8
 8010cc6:	463e      	mov	r6, r7
 8010cc8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010ccc:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8010cd0:	ed55 7a04 	vldr	s15, [r5, #-16]
 8010cd4:	ee27 7a86 	vmul.f32	s14, s15, s12
 8010cd8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce0:	bfd4      	ite	le
 8010ce2:	eef0 7a65 	vmovle.f32	s15, s11
 8010ce6:	eef0 7a66 	vmovgt.f32	s15, s13
 8010cea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010cee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010cf2:	ee17 3a90 	vmov	r3, s15
 8010cf6:	f303 030f 	ssat	r3, #16, r3
 8010cfa:	f824 3c08 	strh.w	r3, [r4, #-8]
 8010cfe:	ed55 7a03 	vldr	s15, [r5, #-12]
 8010d02:	ee27 7a86 	vmul.f32	s14, s15, s12
 8010d06:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d0e:	bfd4      	ite	le
 8010d10:	eef0 7a65 	vmovle.f32	s15, s11
 8010d14:	eef0 7a66 	vmovgt.f32	s15, s13
 8010d18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d20:	ee17 3a90 	vmov	r3, s15
 8010d24:	f303 030f 	ssat	r3, #16, r3
 8010d28:	f824 3c06 	strh.w	r3, [r4, #-6]
 8010d2c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8010d30:	ee27 7a86 	vmul.f32	s14, s15, s12
 8010d34:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d3c:	bfd4      	ite	le
 8010d3e:	eef0 7a65 	vmovle.f32	s15, s11
 8010d42:	eef0 7a66 	vmovgt.f32	s15, s13
 8010d46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d4e:	ee17 3a90 	vmov	r3, s15
 8010d52:	f303 030f 	ssat	r3, #16, r3
 8010d56:	f824 3c04 	strh.w	r3, [r4, #-4]
 8010d5a:	ed55 7a01 	vldr	s15, [r5, #-4]
 8010d5e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010d62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d6a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010d6e:	bfd8      	it	le
 8010d70:	ee77 7ae6 	vsuble.f32	s15, s15, s13
 8010d74:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010d78:	bfd6      	itet	le
 8010d7a:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8010d7e:	ee17 3a10 	vmovgt	r3, s14
 8010d82:	ee17 3a90 	vmovle	r3, s15
 8010d86:	f303 030f 	ssat	r3, #16, r3
 8010d8a:	3e01      	subs	r6, #1
 8010d8c:	f824 3c02 	strh.w	r3, [r4, #-2]
 8010d90:	f105 0510 	add.w	r5, r5, #16
 8010d94:	f104 0408 	add.w	r4, r4, #8
 8010d98:	d19a      	bne.n	8010cd0 <st_dsp_arm_float_to_q15+0x1c>
 8010d9a:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8010d9e:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8010da2:	f012 0203 	ands.w	r2, r2, #3
 8010da6:	d049      	beq.n	8010e3c <st_dsp_arm_float_to_q15+0x188>
 8010da8:	edd0 7a00 	vldr	s15, [r0]
 8010dac:	eddf 5a24 	vldr	s11, [pc, #144]	; 8010e40 <st_dsp_arm_float_to_q15+0x18c>
 8010db0:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8010db4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010db8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc0:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8010dc4:	bfd4      	ite	le
 8010dc6:	eef0 7a46 	vmovle.f32	s15, s12
 8010dca:	eef0 7a47 	vmovgt.f32	s15, s14
 8010dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010dd6:	ee17 3a90 	vmov	r3, s15
 8010dda:	f303 030f 	ssat	r3, #16, r3
 8010dde:	2a01      	cmp	r2, #1
 8010de0:	800b      	strh	r3, [r1, #0]
 8010de2:	d02b      	beq.n	8010e3c <st_dsp_arm_float_to_q15+0x188>
 8010de4:	edd0 7a01 	vldr	s15, [r0, #4]
 8010de8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010dec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010df4:	bfd4      	ite	le
 8010df6:	eef0 6a46 	vmovle.f32	s13, s12
 8010dfa:	eef0 6a47 	vmovgt.f32	s13, s14
 8010dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e06:	ee17 3a90 	vmov	r3, s15
 8010e0a:	f303 030f 	ssat	r3, #16, r3
 8010e0e:	2a02      	cmp	r2, #2
 8010e10:	804b      	strh	r3, [r1, #2]
 8010e12:	d013      	beq.n	8010e3c <st_dsp_arm_float_to_q15+0x188>
 8010e14:	edd0 7a02 	vldr	s15, [r0, #8]
 8010e18:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8010e1c:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8010e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e24:	bfd8      	it	le
 8010e26:	eeb0 7a46 	vmovle.f32	s14, s12
 8010e2a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8010e2e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010e32:	ee17 3a10 	vmov	r3, s14
 8010e36:	f303 030f 	ssat	r3, #16, r3
 8010e3a:	808b      	strh	r3, [r1, #4]
 8010e3c:	bcf0      	pop	{r4, r5, r6, r7}
 8010e3e:	4770      	bx	lr
 8010e40:	47000000 	.word	0x47000000

08010e44 <st_dsp_arm_float_to_q7>:
 8010e44:	b4f0      	push	{r4, r5, r6, r7}
 8010e46:	0897      	lsrs	r7, r2, #2
 8010e48:	d070      	beq.n	8010f2c <st_dsp_arm_float_to_q7+0xe8>
 8010e4a:	1d0c      	adds	r4, r1, #4
 8010e4c:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8010e50:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8010ff8 <st_dsp_arm_float_to_q7+0x1b4>
 8010e54:	eb04 060c 	add.w	r6, r4, ip
 8010e58:	f100 0510 	add.w	r5, r0, #16
 8010e5c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010e60:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8010e64:	ed55 7a04 	vldr	s15, [r5, #-16]
 8010e68:	ee27 7a86 	vmul.f32	s14, s15, s12
 8010e6c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e74:	bfd4      	ite	le
 8010e76:	eef0 7a65 	vmovle.f32	s15, s11
 8010e7a:	eef0 7a66 	vmovgt.f32	s15, s13
 8010e7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e86:	ee17 3a90 	vmov	r3, s15
 8010e8a:	b21b      	sxth	r3, r3
 8010e8c:	f303 0307 	ssat	r3, #8, r3
 8010e90:	f804 3c04 	strb.w	r3, [r4, #-4]
 8010e94:	ed55 7a03 	vldr	s15, [r5, #-12]
 8010e98:	ee27 7a86 	vmul.f32	s14, s15, s12
 8010e9c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea4:	bfd4      	ite	le
 8010ea6:	eef0 7a65 	vmovle.f32	s15, s11
 8010eaa:	eef0 7a66 	vmovgt.f32	s15, s13
 8010eae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010eb6:	ee17 3a90 	vmov	r3, s15
 8010eba:	b21b      	sxth	r3, r3
 8010ebc:	f303 0307 	ssat	r3, #8, r3
 8010ec0:	f804 3c03 	strb.w	r3, [r4, #-3]
 8010ec4:	ed55 7a02 	vldr	s15, [r5, #-8]
 8010ec8:	ee27 7a86 	vmul.f32	s14, s15, s12
 8010ecc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed4:	bfd4      	ite	le
 8010ed6:	eef0 7a65 	vmovle.f32	s15, s11
 8010eda:	eef0 7a66 	vmovgt.f32	s15, s13
 8010ede:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ee6:	ee17 3a90 	vmov	r3, s15
 8010eea:	b21b      	sxth	r3, r3
 8010eec:	f303 0307 	ssat	r3, #8, r3
 8010ef0:	f804 3c02 	strb.w	r3, [r4, #-2]
 8010ef4:	ed55 7a01 	vldr	s15, [r5, #-4]
 8010ef8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010efc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010f00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010f04:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f0c:	ee17 3a10 	vmov	r3, s14
 8010f10:	b21b      	sxth	r3, r3
 8010f12:	dd5f      	ble.n	8010fd4 <st_dsp_arm_float_to_q7+0x190>
 8010f14:	f303 0307 	ssat	r3, #8, r3
 8010f18:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010f1c:	3404      	adds	r4, #4
 8010f1e:	42a6      	cmp	r6, r4
 8010f20:	f105 0510 	add.w	r5, r5, #16
 8010f24:	d19e      	bne.n	8010e64 <st_dsp_arm_float_to_q7+0x20>
 8010f26:	4461      	add	r1, ip
 8010f28:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8010f2c:	f012 0203 	ands.w	r2, r2, #3
 8010f30:	d04e      	beq.n	8010fd0 <st_dsp_arm_float_to_q7+0x18c>
 8010f32:	edd0 7a00 	vldr	s15, [r0]
 8010f36:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8010ff8 <st_dsp_arm_float_to_q7+0x1b4>
 8010f3a:	ee67 6a85 	vmul.f32	s13, s15, s10
 8010f3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010f42:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4a:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8010f4e:	bfd4      	ite	le
 8010f50:	eef0 7a65 	vmovle.f32	s15, s11
 8010f54:	eef0 7a47 	vmovgt.f32	s15, s14
 8010f58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f60:	ee17 3a90 	vmov	r3, s15
 8010f64:	b21b      	sxth	r3, r3
 8010f66:	f303 0307 	ssat	r3, #8, r3
 8010f6a:	2a01      	cmp	r2, #1
 8010f6c:	700b      	strb	r3, [r1, #0]
 8010f6e:	d02f      	beq.n	8010fd0 <st_dsp_arm_float_to_q7+0x18c>
 8010f70:	edd0 6a01 	vldr	s13, [r0, #4]
 8010f74:	ee26 6a85 	vmul.f32	s12, s13, s10
 8010f78:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8010f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f80:	bfd4      	ite	le
 8010f82:	eef0 6a65 	vmovle.f32	s13, s11
 8010f86:	eef0 6a47 	vmovgt.f32	s13, s14
 8010f8a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010f8e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8010f92:	ee16 3a90 	vmov	r3, s13
 8010f96:	b21b      	sxth	r3, r3
 8010f98:	f303 0307 	ssat	r3, #8, r3
 8010f9c:	2a02      	cmp	r2, #2
 8010f9e:	704b      	strb	r3, [r1, #1]
 8010fa0:	d016      	beq.n	8010fd0 <st_dsp_arm_float_to_q7+0x18c>
 8010fa2:	edd0 7a02 	vldr	s15, [r0, #8]
 8010fa6:	ee27 5a85 	vmul.f32	s10, s15, s10
 8010faa:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8010fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb2:	bfd4      	ite	le
 8010fb4:	eef0 7a65 	vmovle.f32	s15, s11
 8010fb8:	eef0 7a47 	vmovgt.f32	s15, s14
 8010fbc:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010fc4:	ee17 3a90 	vmov	r3, s15
 8010fc8:	b21b      	sxth	r3, r3
 8010fca:	f303 0307 	ssat	r3, #8, r3
 8010fce:	708b      	strb	r3, [r1, #2]
 8010fd0:	bcf0      	pop	{r4, r5, r6, r7}
 8010fd2:	4770      	bx	lr
 8010fd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010fdc:	ee17 3a90 	vmov	r3, s15
 8010fe0:	b21b      	sxth	r3, r3
 8010fe2:	f303 0307 	ssat	r3, #8, r3
 8010fe6:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010fea:	3404      	adds	r4, #4
 8010fec:	42b4      	cmp	r4, r6
 8010fee:	f105 0510 	add.w	r5, r5, #16
 8010ff2:	f47f af37 	bne.w	8010e64 <st_dsp_arm_float_to_q7+0x20>
 8010ff6:	e796      	b.n	8010f26 <st_dsp_arm_float_to_q7+0xe2>
 8010ff8:	43000000 	.word	0x43000000

08010ffc <st_dsp_arm_q15_to_float>:
 8010ffc:	b470      	push	{r4, r5, r6}
 8010ffe:	0896      	lsrs	r6, r2, #2
 8011000:	d038      	beq.n	8011074 <st_dsp_arm_q15_to_float+0x78>
 8011002:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80110c8 <st_dsp_arm_q15_to_float+0xcc>
 8011006:	f100 0408 	add.w	r4, r0, #8
 801100a:	f101 0310 	add.w	r3, r1, #16
 801100e:	4635      	mov	r5, r6
 8011010:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 8011014:	ee07 ca90 	vmov	s15, ip
 8011018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801101c:	3d01      	subs	r5, #1
 801101e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011022:	f104 0408 	add.w	r4, r4, #8
 8011026:	ed43 7a04 	vstr	s15, [r3, #-16]
 801102a:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 801102e:	ee07 ca90 	vmov	s15, ip
 8011032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011036:	f103 0310 	add.w	r3, r3, #16
 801103a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801103e:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8011042:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 8011046:	ee07 ca90 	vmov	s15, ip
 801104a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801104e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011052:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8011056:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 801105a:	ee07 ca90 	vmov	s15, ip
 801105e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011066:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 801106a:	d1d1      	bne.n	8011010 <st_dsp_arm_q15_to_float+0x14>
 801106c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8011070:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8011074:	f012 0203 	ands.w	r2, r2, #3
 8011078:	d023      	beq.n	80110c2 <st_dsp_arm_q15_to_float+0xc6>
 801107a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801107e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80110c8 <st_dsp_arm_q15_to_float+0xcc>
 8011082:	ee07 3a90 	vmov	s15, r3
 8011086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801108a:	2a01      	cmp	r2, #1
 801108c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011090:	edc1 7a00 	vstr	s15, [r1]
 8011094:	d015      	beq.n	80110c2 <st_dsp_arm_q15_to_float+0xc6>
 8011096:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801109a:	ee07 3a90 	vmov	s15, r3
 801109e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110a2:	2a02      	cmp	r2, #2
 80110a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80110a8:	edc1 7a01 	vstr	s15, [r1, #4]
 80110ac:	d009      	beq.n	80110c2 <st_dsp_arm_q15_to_float+0xc6>
 80110ae:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80110b2:	ee07 3a90 	vmov	s15, r3
 80110b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80110be:	edc1 7a02 	vstr	s15, [r1, #8]
 80110c2:	bc70      	pop	{r4, r5, r6}
 80110c4:	4770      	bx	lr
 80110c6:	bf00      	nop
 80110c8:	38000000 	.word	0x38000000

080110cc <st_dsp_arm_q7_to_float>:
 80110cc:	b470      	push	{r4, r5, r6}
 80110ce:	0895      	lsrs	r5, r2, #2
 80110d0:	d036      	beq.n	8011140 <st_dsp_arm_q7_to_float+0x74>
 80110d2:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 80110d6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8011194 <st_dsp_arm_q7_to_float+0xc8>
 80110da:	3004      	adds	r0, #4
 80110dc:	1d34      	adds	r4, r6, #4
 80110de:	f101 0310 	add.w	r3, r1, #16
 80110e2:	f910 cc04 	ldrsb.w	ip, [r0, #-4]
 80110e6:	ee07 ca90 	vmov	s15, ip
 80110ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110ee:	3004      	adds	r0, #4
 80110f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80110f4:	3310      	adds	r3, #16
 80110f6:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 80110fa:	f910 cc07 	ldrsb.w	ip, [r0, #-7]
 80110fe:	ee07 ca90 	vmov	s15, ip
 8011102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011106:	ee67 7a87 	vmul.f32	s15, s15, s14
 801110a:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 801110e:	f910 cc06 	ldrsb.w	ip, [r0, #-6]
 8011112:	ee07 ca90 	vmov	s15, ip
 8011116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801111a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801111e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8011122:	f910 cc05 	ldrsb.w	ip, [r0, #-5]
 8011126:	ee07 ca90 	vmov	s15, ip
 801112a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801112e:	42a0      	cmp	r0, r4
 8011130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011134:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8011138:	d1d3      	bne.n	80110e2 <st_dsp_arm_q7_to_float+0x16>
 801113a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 801113e:	4630      	mov	r0, r6
 8011140:	f012 0203 	ands.w	r2, r2, #3
 8011144:	d023      	beq.n	801118e <st_dsp_arm_q7_to_float+0xc2>
 8011146:	f990 3000 	ldrsb.w	r3, [r0]
 801114a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8011194 <st_dsp_arm_q7_to_float+0xc8>
 801114e:	ee07 3a90 	vmov	s15, r3
 8011152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011156:	2a01      	cmp	r2, #1
 8011158:	ee67 7a87 	vmul.f32	s15, s15, s14
 801115c:	edc1 7a00 	vstr	s15, [r1]
 8011160:	d015      	beq.n	801118e <st_dsp_arm_q7_to_float+0xc2>
 8011162:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011166:	ee07 3a90 	vmov	s15, r3
 801116a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801116e:	2a02      	cmp	r2, #2
 8011170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011174:	edc1 7a01 	vstr	s15, [r1, #4]
 8011178:	d009      	beq.n	801118e <st_dsp_arm_q7_to_float+0xc2>
 801117a:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801117e:	ee07 3a90 	vmov	s15, r3
 8011182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011186:	ee67 7a87 	vmul.f32	s15, s15, s14
 801118a:	edc1 7a02 	vstr	s15, [r1, #8]
 801118e:	bc70      	pop	{r4, r5, r6}
 8011190:	4770      	bx	lr
 8011192:	bf00      	nop
 8011194:	3c000000 	.word	0x3c000000

08011198 <ai_version_get>:
 8011198:	0212      	lsls	r2, r2, #8
 801119a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801119e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80111a2:	4770      	bx	lr

080111a4 <get_tensor_byte_size>:
 80111a4:	6983      	ldr	r3, [r0, #24]
 80111a6:	68c1      	ldr	r1, [r0, #12]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	6940      	ldr	r0, [r0, #20]
 80111ac:	4a06      	ldr	r2, [pc, #24]	; (80111c8 <get_tensor_byte_size+0x24>)
 80111ae:	68c9      	ldr	r1, [r1, #12]
 80111b0:	68c0      	ldr	r0, [r0, #12]
 80111b2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80111b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80111ba:	fb00 f001 	mul.w	r0, r0, r1
 80111be:	4293      	cmp	r3, r2
 80111c0:	bf04      	itt	eq
 80111c2:	3007      	addeq	r0, #7
 80111c4:	08c0      	lsreq	r0, r0, #3
 80111c6:	4770      	bx	lr
 80111c8:	000400c0 	.word	0x000400c0

080111cc <ai_array_to_buffer_fmt>:
 80111cc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80111d0:	2b02      	cmp	r3, #2
 80111d2:	d036      	beq.n	8011242 <ai_array_to_buffer_fmt+0x76>
 80111d4:	4a21      	ldr	r2, [pc, #132]	; (801125c <ai_array_to_buffer_fmt+0x90>)
 80111d6:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80111da:	4293      	cmp	r3, r2
 80111dc:	d00f      	beq.n	80111fe <ai_array_to_buffer_fmt+0x32>
 80111de:	dd12      	ble.n	8011206 <ai_array_to_buffer_fmt+0x3a>
 80111e0:	4a1f      	ldr	r2, [pc, #124]	; (8011260 <ai_array_to_buffer_fmt+0x94>)
 80111e2:	4293      	cmp	r3, r2
 80111e4:	d00b      	beq.n	80111fe <ai_array_to_buffer_fmt+0x32>
 80111e6:	dd1e      	ble.n	8011226 <ai_array_to_buffer_fmt+0x5a>
 80111e8:	4a1e      	ldr	r2, [pc, #120]	; (8011264 <ai_array_to_buffer_fmt+0x98>)
 80111ea:	4293      	cmp	r3, r2
 80111ec:	d007      	beq.n	80111fe <ai_array_to_buffer_fmt+0x32>
 80111ee:	dd30      	ble.n	8011252 <ai_array_to_buffer_fmt+0x86>
 80111f0:	4a1d      	ldr	r2, [pc, #116]	; (8011268 <ai_array_to_buffer_fmt+0x9c>)
 80111f2:	4293      	cmp	r3, r2
 80111f4:	d003      	beq.n	80111fe <ai_array_to_buffer_fmt+0x32>
 80111f6:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 80111fa:	4293      	cmp	r3, r2
 80111fc:	d11f      	bne.n	801123e <ai_array_to_buffer_fmt+0x72>
 80111fe:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8011202:	4318      	orrs	r0, r3
 8011204:	4770      	bx	lr
 8011206:	4a19      	ldr	r2, [pc, #100]	; (801126c <ai_array_to_buffer_fmt+0xa0>)
 8011208:	4293      	cmp	r3, r2
 801120a:	d0f8      	beq.n	80111fe <ai_array_to_buffer_fmt+0x32>
 801120c:	dd0b      	ble.n	8011226 <ai_array_to_buffer_fmt+0x5a>
 801120e:	4a18      	ldr	r2, [pc, #96]	; (8011270 <ai_array_to_buffer_fmt+0xa4>)
 8011210:	4293      	cmp	r3, r2
 8011212:	d0f4      	beq.n	80111fe <ai_array_to_buffer_fmt+0x32>
 8011214:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8011218:	4293      	cmp	r3, r2
 801121a:	d0f0      	beq.n	80111fe <ai_array_to_buffer_fmt+0x32>
 801121c:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8011220:	4293      	cmp	r3, r2
 8011222:	d10c      	bne.n	801123e <ai_array_to_buffer_fmt+0x72>
 8011224:	e7eb      	b.n	80111fe <ai_array_to_buffer_fmt+0x32>
 8011226:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 801122a:	4293      	cmp	r3, r2
 801122c:	d0e7      	beq.n	80111fe <ai_array_to_buffer_fmt+0x32>
 801122e:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8011232:	4293      	cmp	r3, r2
 8011234:	d0e3      	beq.n	80111fe <ai_array_to_buffer_fmt+0x32>
 8011236:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 801123a:	4293      	cmp	r3, r2
 801123c:	d0df      	beq.n	80111fe <ai_array_to_buffer_fmt+0x32>
 801123e:	2340      	movs	r3, #64	; 0x40
 8011240:	e7dd      	b.n	80111fe <ai_array_to_buffer_fmt+0x32>
 8011242:	4b0c      	ldr	r3, [pc, #48]	; (8011274 <ai_array_to_buffer_fmt+0xa8>)
 8011244:	4003      	ands	r3, r0
 8011246:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801124a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801124e:	4318      	orrs	r0, r3
 8011250:	4770      	bx	lr
 8011252:	3a0f      	subs	r2, #15
 8011254:	4293      	cmp	r3, r2
 8011256:	d0d2      	beq.n	80111fe <ai_array_to_buffer_fmt+0x32>
 8011258:	e7f1      	b.n	801123e <ai_array_to_buffer_fmt+0x72>
 801125a:	bf00      	nop
 801125c:	00060440 	.word	0x00060440
 8011260:	00840447 	.word	0x00840447
 8011264:	0084084f 	.word	0x0084084f
 8011268:	00841040 	.word	0x00841040
 801126c:	00040447 	.word	0x00040447
 8011270:	0004084f 	.word	0x0004084f
 8011274:	00803fff 	.word	0x00803fff

08011278 <ai_array_get_data_byte_size>:
 8011278:	b161      	cbz	r1, 8011294 <ai_array_get_data_byte_size+0x1c>
 801127a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801127e:	fb01 f103 	mul.w	r1, r1, r3
 8011282:	3107      	adds	r1, #7
 8011284:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8011288:	f021 0107 	bic.w	r1, r1, #7
 801128c:	40c1      	lsrs	r1, r0
 801128e:	3107      	adds	r1, #7
 8011290:	08c8      	lsrs	r0, r1, #3
 8011292:	4770      	bx	lr
 8011294:	4608      	mov	r0, r1
 8011296:	4770      	bx	lr

08011298 <core_tensor_clone>:
 8011298:	680b      	ldr	r3, [r1, #0]
 801129a:	6003      	str	r3, [r0, #0]
 801129c:	684b      	ldr	r3, [r1, #4]
 801129e:	6043      	str	r3, [r0, #4]
 80112a0:	698b      	ldr	r3, [r1, #24]
 80112a2:	6183      	str	r3, [r0, #24]
 80112a4:	688b      	ldr	r3, [r1, #8]
 80112a6:	6882      	ldr	r2, [r0, #8]
 80112a8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80112ac:	f363 221f 	bfi	r2, r3, #8, #24
 80112b0:	b410      	push	{r4}
 80112b2:	6082      	str	r2, [r0, #8]
 80112b4:	b15b      	cbz	r3, 80112ce <core_tensor_clone+0x36>
 80112b6:	2300      	movs	r3, #0
 80112b8:	68cc      	ldr	r4, [r1, #12]
 80112ba:	68c2      	ldr	r2, [r0, #12]
 80112bc:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 80112c0:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 80112c4:	6882      	ldr	r2, [r0, #8]
 80112c6:	3301      	adds	r3, #1
 80112c8:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 80112cc:	d3f4      	bcc.n	80112b8 <core_tensor_clone+0x20>
 80112ce:	690b      	ldr	r3, [r1, #16]
 80112d0:	6902      	ldr	r2, [r0, #16]
 80112d2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80112d6:	f363 221f 	bfi	r2, r3, #8, #24
 80112da:	6102      	str	r2, [r0, #16]
 80112dc:	b15b      	cbz	r3, 80112f6 <core_tensor_clone+0x5e>
 80112de:	2300      	movs	r3, #0
 80112e0:	694c      	ldr	r4, [r1, #20]
 80112e2:	6942      	ldr	r2, [r0, #20]
 80112e4:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 80112e8:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 80112ec:	6902      	ldr	r2, [r0, #16]
 80112ee:	3301      	adds	r3, #1
 80112f0:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 80112f4:	d3f4      	bcc.n	80112e0 <core_tensor_clone+0x48>
 80112f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112fa:	4770      	bx	lr

080112fc <core_array_clone>:
 80112fc:	b410      	push	{r4}
 80112fe:	4604      	mov	r4, r0
 8011300:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8011302:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011306:	f85d 4b04 	ldr.w	r4, [sp], #4
 801130a:	4770      	bx	lr

0801130c <__errno>:
 801130c:	4b01      	ldr	r3, [pc, #4]	; (8011314 <__errno+0x8>)
 801130e:	6818      	ldr	r0, [r3, #0]
 8011310:	4770      	bx	lr
 8011312:	bf00      	nop
 8011314:	20001490 	.word	0x20001490

08011318 <__libc_init_array>:
 8011318:	b570      	push	{r4, r5, r6, lr}
 801131a:	4d0d      	ldr	r5, [pc, #52]	; (8011350 <__libc_init_array+0x38>)
 801131c:	4c0d      	ldr	r4, [pc, #52]	; (8011354 <__libc_init_array+0x3c>)
 801131e:	1b64      	subs	r4, r4, r5
 8011320:	10a4      	asrs	r4, r4, #2
 8011322:	2600      	movs	r6, #0
 8011324:	42a6      	cmp	r6, r4
 8011326:	d109      	bne.n	801133c <__libc_init_array+0x24>
 8011328:	4d0b      	ldr	r5, [pc, #44]	; (8011358 <__libc_init_array+0x40>)
 801132a:	4c0c      	ldr	r4, [pc, #48]	; (801135c <__libc_init_array+0x44>)
 801132c:	f003 fc64 	bl	8014bf8 <_init>
 8011330:	1b64      	subs	r4, r4, r5
 8011332:	10a4      	asrs	r4, r4, #2
 8011334:	2600      	movs	r6, #0
 8011336:	42a6      	cmp	r6, r4
 8011338:	d105      	bne.n	8011346 <__libc_init_array+0x2e>
 801133a:	bd70      	pop	{r4, r5, r6, pc}
 801133c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011340:	4798      	blx	r3
 8011342:	3601      	adds	r6, #1
 8011344:	e7ee      	b.n	8011324 <__libc_init_array+0xc>
 8011346:	f855 3b04 	ldr.w	r3, [r5], #4
 801134a:	4798      	blx	r3
 801134c:	3601      	adds	r6, #1
 801134e:	e7f2      	b.n	8011336 <__libc_init_array+0x1e>
 8011350:	080ca574 	.word	0x080ca574
 8011354:	080ca574 	.word	0x080ca574
 8011358:	080ca574 	.word	0x080ca574
 801135c:	080ca578 	.word	0x080ca578

08011360 <malloc>:
 8011360:	4b02      	ldr	r3, [pc, #8]	; (801136c <malloc+0xc>)
 8011362:	4601      	mov	r1, r0
 8011364:	6818      	ldr	r0, [r3, #0]
 8011366:	f000 b869 	b.w	801143c <_malloc_r>
 801136a:	bf00      	nop
 801136c:	20001490 	.word	0x20001490

08011370 <memcpy>:
 8011370:	440a      	add	r2, r1
 8011372:	4291      	cmp	r1, r2
 8011374:	f100 33ff 	add.w	r3, r0, #4294967295
 8011378:	d100      	bne.n	801137c <memcpy+0xc>
 801137a:	4770      	bx	lr
 801137c:	b510      	push	{r4, lr}
 801137e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011386:	4291      	cmp	r1, r2
 8011388:	d1f9      	bne.n	801137e <memcpy+0xe>
 801138a:	bd10      	pop	{r4, pc}

0801138c <memset>:
 801138c:	4402      	add	r2, r0
 801138e:	4603      	mov	r3, r0
 8011390:	4293      	cmp	r3, r2
 8011392:	d100      	bne.n	8011396 <memset+0xa>
 8011394:	4770      	bx	lr
 8011396:	f803 1b01 	strb.w	r1, [r3], #1
 801139a:	e7f9      	b.n	8011390 <memset+0x4>

0801139c <_free_r>:
 801139c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801139e:	2900      	cmp	r1, #0
 80113a0:	d048      	beq.n	8011434 <_free_r+0x98>
 80113a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80113a6:	9001      	str	r0, [sp, #4]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f1a1 0404 	sub.w	r4, r1, #4
 80113ae:	bfb8      	it	lt
 80113b0:	18e4      	addlt	r4, r4, r3
 80113b2:	f001 fcc7 	bl	8012d44 <__malloc_lock>
 80113b6:	4a20      	ldr	r2, [pc, #128]	; (8011438 <_free_r+0x9c>)
 80113b8:	9801      	ldr	r0, [sp, #4]
 80113ba:	6813      	ldr	r3, [r2, #0]
 80113bc:	4615      	mov	r5, r2
 80113be:	b933      	cbnz	r3, 80113ce <_free_r+0x32>
 80113c0:	6063      	str	r3, [r4, #4]
 80113c2:	6014      	str	r4, [r2, #0]
 80113c4:	b003      	add	sp, #12
 80113c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80113ca:	f001 bcc1 	b.w	8012d50 <__malloc_unlock>
 80113ce:	42a3      	cmp	r3, r4
 80113d0:	d90b      	bls.n	80113ea <_free_r+0x4e>
 80113d2:	6821      	ldr	r1, [r4, #0]
 80113d4:	1862      	adds	r2, r4, r1
 80113d6:	4293      	cmp	r3, r2
 80113d8:	bf04      	itt	eq
 80113da:	681a      	ldreq	r2, [r3, #0]
 80113dc:	685b      	ldreq	r3, [r3, #4]
 80113de:	6063      	str	r3, [r4, #4]
 80113e0:	bf04      	itt	eq
 80113e2:	1852      	addeq	r2, r2, r1
 80113e4:	6022      	streq	r2, [r4, #0]
 80113e6:	602c      	str	r4, [r5, #0]
 80113e8:	e7ec      	b.n	80113c4 <_free_r+0x28>
 80113ea:	461a      	mov	r2, r3
 80113ec:	685b      	ldr	r3, [r3, #4]
 80113ee:	b10b      	cbz	r3, 80113f4 <_free_r+0x58>
 80113f0:	42a3      	cmp	r3, r4
 80113f2:	d9fa      	bls.n	80113ea <_free_r+0x4e>
 80113f4:	6811      	ldr	r1, [r2, #0]
 80113f6:	1855      	adds	r5, r2, r1
 80113f8:	42a5      	cmp	r5, r4
 80113fa:	d10b      	bne.n	8011414 <_free_r+0x78>
 80113fc:	6824      	ldr	r4, [r4, #0]
 80113fe:	4421      	add	r1, r4
 8011400:	1854      	adds	r4, r2, r1
 8011402:	42a3      	cmp	r3, r4
 8011404:	6011      	str	r1, [r2, #0]
 8011406:	d1dd      	bne.n	80113c4 <_free_r+0x28>
 8011408:	681c      	ldr	r4, [r3, #0]
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	6053      	str	r3, [r2, #4]
 801140e:	4421      	add	r1, r4
 8011410:	6011      	str	r1, [r2, #0]
 8011412:	e7d7      	b.n	80113c4 <_free_r+0x28>
 8011414:	d902      	bls.n	801141c <_free_r+0x80>
 8011416:	230c      	movs	r3, #12
 8011418:	6003      	str	r3, [r0, #0]
 801141a:	e7d3      	b.n	80113c4 <_free_r+0x28>
 801141c:	6825      	ldr	r5, [r4, #0]
 801141e:	1961      	adds	r1, r4, r5
 8011420:	428b      	cmp	r3, r1
 8011422:	bf04      	itt	eq
 8011424:	6819      	ldreq	r1, [r3, #0]
 8011426:	685b      	ldreq	r3, [r3, #4]
 8011428:	6063      	str	r3, [r4, #4]
 801142a:	bf04      	itt	eq
 801142c:	1949      	addeq	r1, r1, r5
 801142e:	6021      	streq	r1, [r4, #0]
 8011430:	6054      	str	r4, [r2, #4]
 8011432:	e7c7      	b.n	80113c4 <_free_r+0x28>
 8011434:	b003      	add	sp, #12
 8011436:	bd30      	pop	{r4, r5, pc}
 8011438:	2000ab94 	.word	0x2000ab94

0801143c <_malloc_r>:
 801143c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801143e:	1ccd      	adds	r5, r1, #3
 8011440:	f025 0503 	bic.w	r5, r5, #3
 8011444:	3508      	adds	r5, #8
 8011446:	2d0c      	cmp	r5, #12
 8011448:	bf38      	it	cc
 801144a:	250c      	movcc	r5, #12
 801144c:	2d00      	cmp	r5, #0
 801144e:	4606      	mov	r6, r0
 8011450:	db01      	blt.n	8011456 <_malloc_r+0x1a>
 8011452:	42a9      	cmp	r1, r5
 8011454:	d903      	bls.n	801145e <_malloc_r+0x22>
 8011456:	230c      	movs	r3, #12
 8011458:	6033      	str	r3, [r6, #0]
 801145a:	2000      	movs	r0, #0
 801145c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801145e:	f001 fc71 	bl	8012d44 <__malloc_lock>
 8011462:	4921      	ldr	r1, [pc, #132]	; (80114e8 <_malloc_r+0xac>)
 8011464:	680a      	ldr	r2, [r1, #0]
 8011466:	4614      	mov	r4, r2
 8011468:	b99c      	cbnz	r4, 8011492 <_malloc_r+0x56>
 801146a:	4f20      	ldr	r7, [pc, #128]	; (80114ec <_malloc_r+0xb0>)
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	b923      	cbnz	r3, 801147a <_malloc_r+0x3e>
 8011470:	4621      	mov	r1, r4
 8011472:	4630      	mov	r0, r6
 8011474:	f000 fcbe 	bl	8011df4 <_sbrk_r>
 8011478:	6038      	str	r0, [r7, #0]
 801147a:	4629      	mov	r1, r5
 801147c:	4630      	mov	r0, r6
 801147e:	f000 fcb9 	bl	8011df4 <_sbrk_r>
 8011482:	1c43      	adds	r3, r0, #1
 8011484:	d123      	bne.n	80114ce <_malloc_r+0x92>
 8011486:	230c      	movs	r3, #12
 8011488:	6033      	str	r3, [r6, #0]
 801148a:	4630      	mov	r0, r6
 801148c:	f001 fc60 	bl	8012d50 <__malloc_unlock>
 8011490:	e7e3      	b.n	801145a <_malloc_r+0x1e>
 8011492:	6823      	ldr	r3, [r4, #0]
 8011494:	1b5b      	subs	r3, r3, r5
 8011496:	d417      	bmi.n	80114c8 <_malloc_r+0x8c>
 8011498:	2b0b      	cmp	r3, #11
 801149a:	d903      	bls.n	80114a4 <_malloc_r+0x68>
 801149c:	6023      	str	r3, [r4, #0]
 801149e:	441c      	add	r4, r3
 80114a0:	6025      	str	r5, [r4, #0]
 80114a2:	e004      	b.n	80114ae <_malloc_r+0x72>
 80114a4:	6863      	ldr	r3, [r4, #4]
 80114a6:	42a2      	cmp	r2, r4
 80114a8:	bf0c      	ite	eq
 80114aa:	600b      	streq	r3, [r1, #0]
 80114ac:	6053      	strne	r3, [r2, #4]
 80114ae:	4630      	mov	r0, r6
 80114b0:	f001 fc4e 	bl	8012d50 <__malloc_unlock>
 80114b4:	f104 000b 	add.w	r0, r4, #11
 80114b8:	1d23      	adds	r3, r4, #4
 80114ba:	f020 0007 	bic.w	r0, r0, #7
 80114be:	1ac2      	subs	r2, r0, r3
 80114c0:	d0cc      	beq.n	801145c <_malloc_r+0x20>
 80114c2:	1a1b      	subs	r3, r3, r0
 80114c4:	50a3      	str	r3, [r4, r2]
 80114c6:	e7c9      	b.n	801145c <_malloc_r+0x20>
 80114c8:	4622      	mov	r2, r4
 80114ca:	6864      	ldr	r4, [r4, #4]
 80114cc:	e7cc      	b.n	8011468 <_malloc_r+0x2c>
 80114ce:	1cc4      	adds	r4, r0, #3
 80114d0:	f024 0403 	bic.w	r4, r4, #3
 80114d4:	42a0      	cmp	r0, r4
 80114d6:	d0e3      	beq.n	80114a0 <_malloc_r+0x64>
 80114d8:	1a21      	subs	r1, r4, r0
 80114da:	4630      	mov	r0, r6
 80114dc:	f000 fc8a 	bl	8011df4 <_sbrk_r>
 80114e0:	3001      	adds	r0, #1
 80114e2:	d1dd      	bne.n	80114a0 <_malloc_r+0x64>
 80114e4:	e7cf      	b.n	8011486 <_malloc_r+0x4a>
 80114e6:	bf00      	nop
 80114e8:	2000ab94 	.word	0x2000ab94
 80114ec:	2000ab98 	.word	0x2000ab98

080114f0 <__cvt>:
 80114f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114f4:	ec55 4b10 	vmov	r4, r5, d0
 80114f8:	2d00      	cmp	r5, #0
 80114fa:	460e      	mov	r6, r1
 80114fc:	4619      	mov	r1, r3
 80114fe:	462b      	mov	r3, r5
 8011500:	bfbb      	ittet	lt
 8011502:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011506:	461d      	movlt	r5, r3
 8011508:	2300      	movge	r3, #0
 801150a:	232d      	movlt	r3, #45	; 0x2d
 801150c:	700b      	strb	r3, [r1, #0]
 801150e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011510:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011514:	4691      	mov	r9, r2
 8011516:	f023 0820 	bic.w	r8, r3, #32
 801151a:	bfbc      	itt	lt
 801151c:	4622      	movlt	r2, r4
 801151e:	4614      	movlt	r4, r2
 8011520:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011524:	d005      	beq.n	8011532 <__cvt+0x42>
 8011526:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801152a:	d100      	bne.n	801152e <__cvt+0x3e>
 801152c:	3601      	adds	r6, #1
 801152e:	2102      	movs	r1, #2
 8011530:	e000      	b.n	8011534 <__cvt+0x44>
 8011532:	2103      	movs	r1, #3
 8011534:	ab03      	add	r3, sp, #12
 8011536:	9301      	str	r3, [sp, #4]
 8011538:	ab02      	add	r3, sp, #8
 801153a:	9300      	str	r3, [sp, #0]
 801153c:	ec45 4b10 	vmov	d0, r4, r5
 8011540:	4653      	mov	r3, sl
 8011542:	4632      	mov	r2, r6
 8011544:	f000 fd14 	bl	8011f70 <_dtoa_r>
 8011548:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801154c:	4607      	mov	r7, r0
 801154e:	d102      	bne.n	8011556 <__cvt+0x66>
 8011550:	f019 0f01 	tst.w	r9, #1
 8011554:	d022      	beq.n	801159c <__cvt+0xac>
 8011556:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801155a:	eb07 0906 	add.w	r9, r7, r6
 801155e:	d110      	bne.n	8011582 <__cvt+0x92>
 8011560:	783b      	ldrb	r3, [r7, #0]
 8011562:	2b30      	cmp	r3, #48	; 0x30
 8011564:	d10a      	bne.n	801157c <__cvt+0x8c>
 8011566:	2200      	movs	r2, #0
 8011568:	2300      	movs	r3, #0
 801156a:	4620      	mov	r0, r4
 801156c:	4629      	mov	r1, r5
 801156e:	f7ef faab 	bl	8000ac8 <__aeabi_dcmpeq>
 8011572:	b918      	cbnz	r0, 801157c <__cvt+0x8c>
 8011574:	f1c6 0601 	rsb	r6, r6, #1
 8011578:	f8ca 6000 	str.w	r6, [sl]
 801157c:	f8da 3000 	ldr.w	r3, [sl]
 8011580:	4499      	add	r9, r3
 8011582:	2200      	movs	r2, #0
 8011584:	2300      	movs	r3, #0
 8011586:	4620      	mov	r0, r4
 8011588:	4629      	mov	r1, r5
 801158a:	f7ef fa9d 	bl	8000ac8 <__aeabi_dcmpeq>
 801158e:	b108      	cbz	r0, 8011594 <__cvt+0xa4>
 8011590:	f8cd 900c 	str.w	r9, [sp, #12]
 8011594:	2230      	movs	r2, #48	; 0x30
 8011596:	9b03      	ldr	r3, [sp, #12]
 8011598:	454b      	cmp	r3, r9
 801159a:	d307      	bcc.n	80115ac <__cvt+0xbc>
 801159c:	9b03      	ldr	r3, [sp, #12]
 801159e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80115a0:	1bdb      	subs	r3, r3, r7
 80115a2:	4638      	mov	r0, r7
 80115a4:	6013      	str	r3, [r2, #0]
 80115a6:	b004      	add	sp, #16
 80115a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115ac:	1c59      	adds	r1, r3, #1
 80115ae:	9103      	str	r1, [sp, #12]
 80115b0:	701a      	strb	r2, [r3, #0]
 80115b2:	e7f0      	b.n	8011596 <__cvt+0xa6>

080115b4 <__exponent>:
 80115b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115b6:	4603      	mov	r3, r0
 80115b8:	2900      	cmp	r1, #0
 80115ba:	bfb8      	it	lt
 80115bc:	4249      	neglt	r1, r1
 80115be:	f803 2b02 	strb.w	r2, [r3], #2
 80115c2:	bfb4      	ite	lt
 80115c4:	222d      	movlt	r2, #45	; 0x2d
 80115c6:	222b      	movge	r2, #43	; 0x2b
 80115c8:	2909      	cmp	r1, #9
 80115ca:	7042      	strb	r2, [r0, #1]
 80115cc:	dd2a      	ble.n	8011624 <__exponent+0x70>
 80115ce:	f10d 0407 	add.w	r4, sp, #7
 80115d2:	46a4      	mov	ip, r4
 80115d4:	270a      	movs	r7, #10
 80115d6:	46a6      	mov	lr, r4
 80115d8:	460a      	mov	r2, r1
 80115da:	fb91 f6f7 	sdiv	r6, r1, r7
 80115de:	fb07 1516 	mls	r5, r7, r6, r1
 80115e2:	3530      	adds	r5, #48	; 0x30
 80115e4:	2a63      	cmp	r2, #99	; 0x63
 80115e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80115ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80115ee:	4631      	mov	r1, r6
 80115f0:	dcf1      	bgt.n	80115d6 <__exponent+0x22>
 80115f2:	3130      	adds	r1, #48	; 0x30
 80115f4:	f1ae 0502 	sub.w	r5, lr, #2
 80115f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80115fc:	1c44      	adds	r4, r0, #1
 80115fe:	4629      	mov	r1, r5
 8011600:	4561      	cmp	r1, ip
 8011602:	d30a      	bcc.n	801161a <__exponent+0x66>
 8011604:	f10d 0209 	add.w	r2, sp, #9
 8011608:	eba2 020e 	sub.w	r2, r2, lr
 801160c:	4565      	cmp	r5, ip
 801160e:	bf88      	it	hi
 8011610:	2200      	movhi	r2, #0
 8011612:	4413      	add	r3, r2
 8011614:	1a18      	subs	r0, r3, r0
 8011616:	b003      	add	sp, #12
 8011618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801161a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801161e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011622:	e7ed      	b.n	8011600 <__exponent+0x4c>
 8011624:	2330      	movs	r3, #48	; 0x30
 8011626:	3130      	adds	r1, #48	; 0x30
 8011628:	7083      	strb	r3, [r0, #2]
 801162a:	70c1      	strb	r1, [r0, #3]
 801162c:	1d03      	adds	r3, r0, #4
 801162e:	e7f1      	b.n	8011614 <__exponent+0x60>

08011630 <_printf_float>:
 8011630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011634:	ed2d 8b02 	vpush	{d8}
 8011638:	b08d      	sub	sp, #52	; 0x34
 801163a:	460c      	mov	r4, r1
 801163c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011640:	4616      	mov	r6, r2
 8011642:	461f      	mov	r7, r3
 8011644:	4605      	mov	r5, r0
 8011646:	f001 fb75 	bl	8012d34 <_localeconv_r>
 801164a:	f8d0 a000 	ldr.w	sl, [r0]
 801164e:	4650      	mov	r0, sl
 8011650:	f7ee fdbe 	bl	80001d0 <strlen>
 8011654:	2300      	movs	r3, #0
 8011656:	930a      	str	r3, [sp, #40]	; 0x28
 8011658:	6823      	ldr	r3, [r4, #0]
 801165a:	9305      	str	r3, [sp, #20]
 801165c:	f8d8 3000 	ldr.w	r3, [r8]
 8011660:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011664:	3307      	adds	r3, #7
 8011666:	f023 0307 	bic.w	r3, r3, #7
 801166a:	f103 0208 	add.w	r2, r3, #8
 801166e:	f8c8 2000 	str.w	r2, [r8]
 8011672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011676:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801167a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801167e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011682:	9307      	str	r3, [sp, #28]
 8011684:	f8cd 8018 	str.w	r8, [sp, #24]
 8011688:	ee08 0a10 	vmov	s16, r0
 801168c:	4b9f      	ldr	r3, [pc, #636]	; (801190c <_printf_float+0x2dc>)
 801168e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011692:	f04f 32ff 	mov.w	r2, #4294967295
 8011696:	f7ef fa49 	bl	8000b2c <__aeabi_dcmpun>
 801169a:	bb88      	cbnz	r0, 8011700 <_printf_float+0xd0>
 801169c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80116a0:	4b9a      	ldr	r3, [pc, #616]	; (801190c <_printf_float+0x2dc>)
 80116a2:	f04f 32ff 	mov.w	r2, #4294967295
 80116a6:	f7ef fa23 	bl	8000af0 <__aeabi_dcmple>
 80116aa:	bb48      	cbnz	r0, 8011700 <_printf_float+0xd0>
 80116ac:	2200      	movs	r2, #0
 80116ae:	2300      	movs	r3, #0
 80116b0:	4640      	mov	r0, r8
 80116b2:	4649      	mov	r1, r9
 80116b4:	f7ef fa12 	bl	8000adc <__aeabi_dcmplt>
 80116b8:	b110      	cbz	r0, 80116c0 <_printf_float+0x90>
 80116ba:	232d      	movs	r3, #45	; 0x2d
 80116bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116c0:	4b93      	ldr	r3, [pc, #588]	; (8011910 <_printf_float+0x2e0>)
 80116c2:	4894      	ldr	r0, [pc, #592]	; (8011914 <_printf_float+0x2e4>)
 80116c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80116c8:	bf94      	ite	ls
 80116ca:	4698      	movls	r8, r3
 80116cc:	4680      	movhi	r8, r0
 80116ce:	2303      	movs	r3, #3
 80116d0:	6123      	str	r3, [r4, #16]
 80116d2:	9b05      	ldr	r3, [sp, #20]
 80116d4:	f023 0204 	bic.w	r2, r3, #4
 80116d8:	6022      	str	r2, [r4, #0]
 80116da:	f04f 0900 	mov.w	r9, #0
 80116de:	9700      	str	r7, [sp, #0]
 80116e0:	4633      	mov	r3, r6
 80116e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80116e4:	4621      	mov	r1, r4
 80116e6:	4628      	mov	r0, r5
 80116e8:	f000 f9d8 	bl	8011a9c <_printf_common>
 80116ec:	3001      	adds	r0, #1
 80116ee:	f040 8090 	bne.w	8011812 <_printf_float+0x1e2>
 80116f2:	f04f 30ff 	mov.w	r0, #4294967295
 80116f6:	b00d      	add	sp, #52	; 0x34
 80116f8:	ecbd 8b02 	vpop	{d8}
 80116fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011700:	4642      	mov	r2, r8
 8011702:	464b      	mov	r3, r9
 8011704:	4640      	mov	r0, r8
 8011706:	4649      	mov	r1, r9
 8011708:	f7ef fa10 	bl	8000b2c <__aeabi_dcmpun>
 801170c:	b140      	cbz	r0, 8011720 <_printf_float+0xf0>
 801170e:	464b      	mov	r3, r9
 8011710:	2b00      	cmp	r3, #0
 8011712:	bfbc      	itt	lt
 8011714:	232d      	movlt	r3, #45	; 0x2d
 8011716:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801171a:	487f      	ldr	r0, [pc, #508]	; (8011918 <_printf_float+0x2e8>)
 801171c:	4b7f      	ldr	r3, [pc, #508]	; (801191c <_printf_float+0x2ec>)
 801171e:	e7d1      	b.n	80116c4 <_printf_float+0x94>
 8011720:	6863      	ldr	r3, [r4, #4]
 8011722:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011726:	9206      	str	r2, [sp, #24]
 8011728:	1c5a      	adds	r2, r3, #1
 801172a:	d13f      	bne.n	80117ac <_printf_float+0x17c>
 801172c:	2306      	movs	r3, #6
 801172e:	6063      	str	r3, [r4, #4]
 8011730:	9b05      	ldr	r3, [sp, #20]
 8011732:	6861      	ldr	r1, [r4, #4]
 8011734:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011738:	2300      	movs	r3, #0
 801173a:	9303      	str	r3, [sp, #12]
 801173c:	ab0a      	add	r3, sp, #40	; 0x28
 801173e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011742:	ab09      	add	r3, sp, #36	; 0x24
 8011744:	ec49 8b10 	vmov	d0, r8, r9
 8011748:	9300      	str	r3, [sp, #0]
 801174a:	6022      	str	r2, [r4, #0]
 801174c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011750:	4628      	mov	r0, r5
 8011752:	f7ff fecd 	bl	80114f0 <__cvt>
 8011756:	9b06      	ldr	r3, [sp, #24]
 8011758:	9909      	ldr	r1, [sp, #36]	; 0x24
 801175a:	2b47      	cmp	r3, #71	; 0x47
 801175c:	4680      	mov	r8, r0
 801175e:	d108      	bne.n	8011772 <_printf_float+0x142>
 8011760:	1cc8      	adds	r0, r1, #3
 8011762:	db02      	blt.n	801176a <_printf_float+0x13a>
 8011764:	6863      	ldr	r3, [r4, #4]
 8011766:	4299      	cmp	r1, r3
 8011768:	dd41      	ble.n	80117ee <_printf_float+0x1be>
 801176a:	f1ab 0b02 	sub.w	fp, fp, #2
 801176e:	fa5f fb8b 	uxtb.w	fp, fp
 8011772:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011776:	d820      	bhi.n	80117ba <_printf_float+0x18a>
 8011778:	3901      	subs	r1, #1
 801177a:	465a      	mov	r2, fp
 801177c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011780:	9109      	str	r1, [sp, #36]	; 0x24
 8011782:	f7ff ff17 	bl	80115b4 <__exponent>
 8011786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011788:	1813      	adds	r3, r2, r0
 801178a:	2a01      	cmp	r2, #1
 801178c:	4681      	mov	r9, r0
 801178e:	6123      	str	r3, [r4, #16]
 8011790:	dc02      	bgt.n	8011798 <_printf_float+0x168>
 8011792:	6822      	ldr	r2, [r4, #0]
 8011794:	07d2      	lsls	r2, r2, #31
 8011796:	d501      	bpl.n	801179c <_printf_float+0x16c>
 8011798:	3301      	adds	r3, #1
 801179a:	6123      	str	r3, [r4, #16]
 801179c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d09c      	beq.n	80116de <_printf_float+0xae>
 80117a4:	232d      	movs	r3, #45	; 0x2d
 80117a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117aa:	e798      	b.n	80116de <_printf_float+0xae>
 80117ac:	9a06      	ldr	r2, [sp, #24]
 80117ae:	2a47      	cmp	r2, #71	; 0x47
 80117b0:	d1be      	bne.n	8011730 <_printf_float+0x100>
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d1bc      	bne.n	8011730 <_printf_float+0x100>
 80117b6:	2301      	movs	r3, #1
 80117b8:	e7b9      	b.n	801172e <_printf_float+0xfe>
 80117ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80117be:	d118      	bne.n	80117f2 <_printf_float+0x1c2>
 80117c0:	2900      	cmp	r1, #0
 80117c2:	6863      	ldr	r3, [r4, #4]
 80117c4:	dd0b      	ble.n	80117de <_printf_float+0x1ae>
 80117c6:	6121      	str	r1, [r4, #16]
 80117c8:	b913      	cbnz	r3, 80117d0 <_printf_float+0x1a0>
 80117ca:	6822      	ldr	r2, [r4, #0]
 80117cc:	07d0      	lsls	r0, r2, #31
 80117ce:	d502      	bpl.n	80117d6 <_printf_float+0x1a6>
 80117d0:	3301      	adds	r3, #1
 80117d2:	440b      	add	r3, r1
 80117d4:	6123      	str	r3, [r4, #16]
 80117d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80117d8:	f04f 0900 	mov.w	r9, #0
 80117dc:	e7de      	b.n	801179c <_printf_float+0x16c>
 80117de:	b913      	cbnz	r3, 80117e6 <_printf_float+0x1b6>
 80117e0:	6822      	ldr	r2, [r4, #0]
 80117e2:	07d2      	lsls	r2, r2, #31
 80117e4:	d501      	bpl.n	80117ea <_printf_float+0x1ba>
 80117e6:	3302      	adds	r3, #2
 80117e8:	e7f4      	b.n	80117d4 <_printf_float+0x1a4>
 80117ea:	2301      	movs	r3, #1
 80117ec:	e7f2      	b.n	80117d4 <_printf_float+0x1a4>
 80117ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80117f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117f4:	4299      	cmp	r1, r3
 80117f6:	db05      	blt.n	8011804 <_printf_float+0x1d4>
 80117f8:	6823      	ldr	r3, [r4, #0]
 80117fa:	6121      	str	r1, [r4, #16]
 80117fc:	07d8      	lsls	r0, r3, #31
 80117fe:	d5ea      	bpl.n	80117d6 <_printf_float+0x1a6>
 8011800:	1c4b      	adds	r3, r1, #1
 8011802:	e7e7      	b.n	80117d4 <_printf_float+0x1a4>
 8011804:	2900      	cmp	r1, #0
 8011806:	bfd4      	ite	le
 8011808:	f1c1 0202 	rsble	r2, r1, #2
 801180c:	2201      	movgt	r2, #1
 801180e:	4413      	add	r3, r2
 8011810:	e7e0      	b.n	80117d4 <_printf_float+0x1a4>
 8011812:	6823      	ldr	r3, [r4, #0]
 8011814:	055a      	lsls	r2, r3, #21
 8011816:	d407      	bmi.n	8011828 <_printf_float+0x1f8>
 8011818:	6923      	ldr	r3, [r4, #16]
 801181a:	4642      	mov	r2, r8
 801181c:	4631      	mov	r1, r6
 801181e:	4628      	mov	r0, r5
 8011820:	47b8      	blx	r7
 8011822:	3001      	adds	r0, #1
 8011824:	d12c      	bne.n	8011880 <_printf_float+0x250>
 8011826:	e764      	b.n	80116f2 <_printf_float+0xc2>
 8011828:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801182c:	f240 80e0 	bls.w	80119f0 <_printf_float+0x3c0>
 8011830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011834:	2200      	movs	r2, #0
 8011836:	2300      	movs	r3, #0
 8011838:	f7ef f946 	bl	8000ac8 <__aeabi_dcmpeq>
 801183c:	2800      	cmp	r0, #0
 801183e:	d034      	beq.n	80118aa <_printf_float+0x27a>
 8011840:	4a37      	ldr	r2, [pc, #220]	; (8011920 <_printf_float+0x2f0>)
 8011842:	2301      	movs	r3, #1
 8011844:	4631      	mov	r1, r6
 8011846:	4628      	mov	r0, r5
 8011848:	47b8      	blx	r7
 801184a:	3001      	adds	r0, #1
 801184c:	f43f af51 	beq.w	80116f2 <_printf_float+0xc2>
 8011850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011854:	429a      	cmp	r2, r3
 8011856:	db02      	blt.n	801185e <_printf_float+0x22e>
 8011858:	6823      	ldr	r3, [r4, #0]
 801185a:	07d8      	lsls	r0, r3, #31
 801185c:	d510      	bpl.n	8011880 <_printf_float+0x250>
 801185e:	ee18 3a10 	vmov	r3, s16
 8011862:	4652      	mov	r2, sl
 8011864:	4631      	mov	r1, r6
 8011866:	4628      	mov	r0, r5
 8011868:	47b8      	blx	r7
 801186a:	3001      	adds	r0, #1
 801186c:	f43f af41 	beq.w	80116f2 <_printf_float+0xc2>
 8011870:	f04f 0800 	mov.w	r8, #0
 8011874:	f104 091a 	add.w	r9, r4, #26
 8011878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801187a:	3b01      	subs	r3, #1
 801187c:	4543      	cmp	r3, r8
 801187e:	dc09      	bgt.n	8011894 <_printf_float+0x264>
 8011880:	6823      	ldr	r3, [r4, #0]
 8011882:	079b      	lsls	r3, r3, #30
 8011884:	f100 8105 	bmi.w	8011a92 <_printf_float+0x462>
 8011888:	68e0      	ldr	r0, [r4, #12]
 801188a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801188c:	4298      	cmp	r0, r3
 801188e:	bfb8      	it	lt
 8011890:	4618      	movlt	r0, r3
 8011892:	e730      	b.n	80116f6 <_printf_float+0xc6>
 8011894:	2301      	movs	r3, #1
 8011896:	464a      	mov	r2, r9
 8011898:	4631      	mov	r1, r6
 801189a:	4628      	mov	r0, r5
 801189c:	47b8      	blx	r7
 801189e:	3001      	adds	r0, #1
 80118a0:	f43f af27 	beq.w	80116f2 <_printf_float+0xc2>
 80118a4:	f108 0801 	add.w	r8, r8, #1
 80118a8:	e7e6      	b.n	8011878 <_printf_float+0x248>
 80118aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	dc39      	bgt.n	8011924 <_printf_float+0x2f4>
 80118b0:	4a1b      	ldr	r2, [pc, #108]	; (8011920 <_printf_float+0x2f0>)
 80118b2:	2301      	movs	r3, #1
 80118b4:	4631      	mov	r1, r6
 80118b6:	4628      	mov	r0, r5
 80118b8:	47b8      	blx	r7
 80118ba:	3001      	adds	r0, #1
 80118bc:	f43f af19 	beq.w	80116f2 <_printf_float+0xc2>
 80118c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80118c4:	4313      	orrs	r3, r2
 80118c6:	d102      	bne.n	80118ce <_printf_float+0x29e>
 80118c8:	6823      	ldr	r3, [r4, #0]
 80118ca:	07d9      	lsls	r1, r3, #31
 80118cc:	d5d8      	bpl.n	8011880 <_printf_float+0x250>
 80118ce:	ee18 3a10 	vmov	r3, s16
 80118d2:	4652      	mov	r2, sl
 80118d4:	4631      	mov	r1, r6
 80118d6:	4628      	mov	r0, r5
 80118d8:	47b8      	blx	r7
 80118da:	3001      	adds	r0, #1
 80118dc:	f43f af09 	beq.w	80116f2 <_printf_float+0xc2>
 80118e0:	f04f 0900 	mov.w	r9, #0
 80118e4:	f104 0a1a 	add.w	sl, r4, #26
 80118e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118ea:	425b      	negs	r3, r3
 80118ec:	454b      	cmp	r3, r9
 80118ee:	dc01      	bgt.n	80118f4 <_printf_float+0x2c4>
 80118f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118f2:	e792      	b.n	801181a <_printf_float+0x1ea>
 80118f4:	2301      	movs	r3, #1
 80118f6:	4652      	mov	r2, sl
 80118f8:	4631      	mov	r1, r6
 80118fa:	4628      	mov	r0, r5
 80118fc:	47b8      	blx	r7
 80118fe:	3001      	adds	r0, #1
 8011900:	f43f aef7 	beq.w	80116f2 <_printf_float+0xc2>
 8011904:	f109 0901 	add.w	r9, r9, #1
 8011908:	e7ee      	b.n	80118e8 <_printf_float+0x2b8>
 801190a:	bf00      	nop
 801190c:	7fefffff 	.word	0x7fefffff
 8011910:	080ca15c 	.word	0x080ca15c
 8011914:	080ca160 	.word	0x080ca160
 8011918:	080ca168 	.word	0x080ca168
 801191c:	080ca164 	.word	0x080ca164
 8011920:	080ca16c 	.word	0x080ca16c
 8011924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011926:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011928:	429a      	cmp	r2, r3
 801192a:	bfa8      	it	ge
 801192c:	461a      	movge	r2, r3
 801192e:	2a00      	cmp	r2, #0
 8011930:	4691      	mov	r9, r2
 8011932:	dc37      	bgt.n	80119a4 <_printf_float+0x374>
 8011934:	f04f 0b00 	mov.w	fp, #0
 8011938:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801193c:	f104 021a 	add.w	r2, r4, #26
 8011940:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011942:	9305      	str	r3, [sp, #20]
 8011944:	eba3 0309 	sub.w	r3, r3, r9
 8011948:	455b      	cmp	r3, fp
 801194a:	dc33      	bgt.n	80119b4 <_printf_float+0x384>
 801194c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011950:	429a      	cmp	r2, r3
 8011952:	db3b      	blt.n	80119cc <_printf_float+0x39c>
 8011954:	6823      	ldr	r3, [r4, #0]
 8011956:	07da      	lsls	r2, r3, #31
 8011958:	d438      	bmi.n	80119cc <_printf_float+0x39c>
 801195a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801195c:	9b05      	ldr	r3, [sp, #20]
 801195e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011960:	1ad3      	subs	r3, r2, r3
 8011962:	eba2 0901 	sub.w	r9, r2, r1
 8011966:	4599      	cmp	r9, r3
 8011968:	bfa8      	it	ge
 801196a:	4699      	movge	r9, r3
 801196c:	f1b9 0f00 	cmp.w	r9, #0
 8011970:	dc35      	bgt.n	80119de <_printf_float+0x3ae>
 8011972:	f04f 0800 	mov.w	r8, #0
 8011976:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801197a:	f104 0a1a 	add.w	sl, r4, #26
 801197e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011982:	1a9b      	subs	r3, r3, r2
 8011984:	eba3 0309 	sub.w	r3, r3, r9
 8011988:	4543      	cmp	r3, r8
 801198a:	f77f af79 	ble.w	8011880 <_printf_float+0x250>
 801198e:	2301      	movs	r3, #1
 8011990:	4652      	mov	r2, sl
 8011992:	4631      	mov	r1, r6
 8011994:	4628      	mov	r0, r5
 8011996:	47b8      	blx	r7
 8011998:	3001      	adds	r0, #1
 801199a:	f43f aeaa 	beq.w	80116f2 <_printf_float+0xc2>
 801199e:	f108 0801 	add.w	r8, r8, #1
 80119a2:	e7ec      	b.n	801197e <_printf_float+0x34e>
 80119a4:	4613      	mov	r3, r2
 80119a6:	4631      	mov	r1, r6
 80119a8:	4642      	mov	r2, r8
 80119aa:	4628      	mov	r0, r5
 80119ac:	47b8      	blx	r7
 80119ae:	3001      	adds	r0, #1
 80119b0:	d1c0      	bne.n	8011934 <_printf_float+0x304>
 80119b2:	e69e      	b.n	80116f2 <_printf_float+0xc2>
 80119b4:	2301      	movs	r3, #1
 80119b6:	4631      	mov	r1, r6
 80119b8:	4628      	mov	r0, r5
 80119ba:	9205      	str	r2, [sp, #20]
 80119bc:	47b8      	blx	r7
 80119be:	3001      	adds	r0, #1
 80119c0:	f43f ae97 	beq.w	80116f2 <_printf_float+0xc2>
 80119c4:	9a05      	ldr	r2, [sp, #20]
 80119c6:	f10b 0b01 	add.w	fp, fp, #1
 80119ca:	e7b9      	b.n	8011940 <_printf_float+0x310>
 80119cc:	ee18 3a10 	vmov	r3, s16
 80119d0:	4652      	mov	r2, sl
 80119d2:	4631      	mov	r1, r6
 80119d4:	4628      	mov	r0, r5
 80119d6:	47b8      	blx	r7
 80119d8:	3001      	adds	r0, #1
 80119da:	d1be      	bne.n	801195a <_printf_float+0x32a>
 80119dc:	e689      	b.n	80116f2 <_printf_float+0xc2>
 80119de:	9a05      	ldr	r2, [sp, #20]
 80119e0:	464b      	mov	r3, r9
 80119e2:	4442      	add	r2, r8
 80119e4:	4631      	mov	r1, r6
 80119e6:	4628      	mov	r0, r5
 80119e8:	47b8      	blx	r7
 80119ea:	3001      	adds	r0, #1
 80119ec:	d1c1      	bne.n	8011972 <_printf_float+0x342>
 80119ee:	e680      	b.n	80116f2 <_printf_float+0xc2>
 80119f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119f2:	2a01      	cmp	r2, #1
 80119f4:	dc01      	bgt.n	80119fa <_printf_float+0x3ca>
 80119f6:	07db      	lsls	r3, r3, #31
 80119f8:	d538      	bpl.n	8011a6c <_printf_float+0x43c>
 80119fa:	2301      	movs	r3, #1
 80119fc:	4642      	mov	r2, r8
 80119fe:	4631      	mov	r1, r6
 8011a00:	4628      	mov	r0, r5
 8011a02:	47b8      	blx	r7
 8011a04:	3001      	adds	r0, #1
 8011a06:	f43f ae74 	beq.w	80116f2 <_printf_float+0xc2>
 8011a0a:	ee18 3a10 	vmov	r3, s16
 8011a0e:	4652      	mov	r2, sl
 8011a10:	4631      	mov	r1, r6
 8011a12:	4628      	mov	r0, r5
 8011a14:	47b8      	blx	r7
 8011a16:	3001      	adds	r0, #1
 8011a18:	f43f ae6b 	beq.w	80116f2 <_printf_float+0xc2>
 8011a1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011a20:	2200      	movs	r2, #0
 8011a22:	2300      	movs	r3, #0
 8011a24:	f7ef f850 	bl	8000ac8 <__aeabi_dcmpeq>
 8011a28:	b9d8      	cbnz	r0, 8011a62 <_printf_float+0x432>
 8011a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a2c:	f108 0201 	add.w	r2, r8, #1
 8011a30:	3b01      	subs	r3, #1
 8011a32:	4631      	mov	r1, r6
 8011a34:	4628      	mov	r0, r5
 8011a36:	47b8      	blx	r7
 8011a38:	3001      	adds	r0, #1
 8011a3a:	d10e      	bne.n	8011a5a <_printf_float+0x42a>
 8011a3c:	e659      	b.n	80116f2 <_printf_float+0xc2>
 8011a3e:	2301      	movs	r3, #1
 8011a40:	4652      	mov	r2, sl
 8011a42:	4631      	mov	r1, r6
 8011a44:	4628      	mov	r0, r5
 8011a46:	47b8      	blx	r7
 8011a48:	3001      	adds	r0, #1
 8011a4a:	f43f ae52 	beq.w	80116f2 <_printf_float+0xc2>
 8011a4e:	f108 0801 	add.w	r8, r8, #1
 8011a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a54:	3b01      	subs	r3, #1
 8011a56:	4543      	cmp	r3, r8
 8011a58:	dcf1      	bgt.n	8011a3e <_printf_float+0x40e>
 8011a5a:	464b      	mov	r3, r9
 8011a5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011a60:	e6dc      	b.n	801181c <_printf_float+0x1ec>
 8011a62:	f04f 0800 	mov.w	r8, #0
 8011a66:	f104 0a1a 	add.w	sl, r4, #26
 8011a6a:	e7f2      	b.n	8011a52 <_printf_float+0x422>
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	4642      	mov	r2, r8
 8011a70:	e7df      	b.n	8011a32 <_printf_float+0x402>
 8011a72:	2301      	movs	r3, #1
 8011a74:	464a      	mov	r2, r9
 8011a76:	4631      	mov	r1, r6
 8011a78:	4628      	mov	r0, r5
 8011a7a:	47b8      	blx	r7
 8011a7c:	3001      	adds	r0, #1
 8011a7e:	f43f ae38 	beq.w	80116f2 <_printf_float+0xc2>
 8011a82:	f108 0801 	add.w	r8, r8, #1
 8011a86:	68e3      	ldr	r3, [r4, #12]
 8011a88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011a8a:	1a5b      	subs	r3, r3, r1
 8011a8c:	4543      	cmp	r3, r8
 8011a8e:	dcf0      	bgt.n	8011a72 <_printf_float+0x442>
 8011a90:	e6fa      	b.n	8011888 <_printf_float+0x258>
 8011a92:	f04f 0800 	mov.w	r8, #0
 8011a96:	f104 0919 	add.w	r9, r4, #25
 8011a9a:	e7f4      	b.n	8011a86 <_printf_float+0x456>

08011a9c <_printf_common>:
 8011a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aa0:	4616      	mov	r6, r2
 8011aa2:	4699      	mov	r9, r3
 8011aa4:	688a      	ldr	r2, [r1, #8]
 8011aa6:	690b      	ldr	r3, [r1, #16]
 8011aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011aac:	4293      	cmp	r3, r2
 8011aae:	bfb8      	it	lt
 8011ab0:	4613      	movlt	r3, r2
 8011ab2:	6033      	str	r3, [r6, #0]
 8011ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ab8:	4607      	mov	r7, r0
 8011aba:	460c      	mov	r4, r1
 8011abc:	b10a      	cbz	r2, 8011ac2 <_printf_common+0x26>
 8011abe:	3301      	adds	r3, #1
 8011ac0:	6033      	str	r3, [r6, #0]
 8011ac2:	6823      	ldr	r3, [r4, #0]
 8011ac4:	0699      	lsls	r1, r3, #26
 8011ac6:	bf42      	ittt	mi
 8011ac8:	6833      	ldrmi	r3, [r6, #0]
 8011aca:	3302      	addmi	r3, #2
 8011acc:	6033      	strmi	r3, [r6, #0]
 8011ace:	6825      	ldr	r5, [r4, #0]
 8011ad0:	f015 0506 	ands.w	r5, r5, #6
 8011ad4:	d106      	bne.n	8011ae4 <_printf_common+0x48>
 8011ad6:	f104 0a19 	add.w	sl, r4, #25
 8011ada:	68e3      	ldr	r3, [r4, #12]
 8011adc:	6832      	ldr	r2, [r6, #0]
 8011ade:	1a9b      	subs	r3, r3, r2
 8011ae0:	42ab      	cmp	r3, r5
 8011ae2:	dc26      	bgt.n	8011b32 <_printf_common+0x96>
 8011ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011ae8:	1e13      	subs	r3, r2, #0
 8011aea:	6822      	ldr	r2, [r4, #0]
 8011aec:	bf18      	it	ne
 8011aee:	2301      	movne	r3, #1
 8011af0:	0692      	lsls	r2, r2, #26
 8011af2:	d42b      	bmi.n	8011b4c <_printf_common+0xb0>
 8011af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011af8:	4649      	mov	r1, r9
 8011afa:	4638      	mov	r0, r7
 8011afc:	47c0      	blx	r8
 8011afe:	3001      	adds	r0, #1
 8011b00:	d01e      	beq.n	8011b40 <_printf_common+0xa4>
 8011b02:	6823      	ldr	r3, [r4, #0]
 8011b04:	68e5      	ldr	r5, [r4, #12]
 8011b06:	6832      	ldr	r2, [r6, #0]
 8011b08:	f003 0306 	and.w	r3, r3, #6
 8011b0c:	2b04      	cmp	r3, #4
 8011b0e:	bf08      	it	eq
 8011b10:	1aad      	subeq	r5, r5, r2
 8011b12:	68a3      	ldr	r3, [r4, #8]
 8011b14:	6922      	ldr	r2, [r4, #16]
 8011b16:	bf0c      	ite	eq
 8011b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b1c:	2500      	movne	r5, #0
 8011b1e:	4293      	cmp	r3, r2
 8011b20:	bfc4      	itt	gt
 8011b22:	1a9b      	subgt	r3, r3, r2
 8011b24:	18ed      	addgt	r5, r5, r3
 8011b26:	2600      	movs	r6, #0
 8011b28:	341a      	adds	r4, #26
 8011b2a:	42b5      	cmp	r5, r6
 8011b2c:	d11a      	bne.n	8011b64 <_printf_common+0xc8>
 8011b2e:	2000      	movs	r0, #0
 8011b30:	e008      	b.n	8011b44 <_printf_common+0xa8>
 8011b32:	2301      	movs	r3, #1
 8011b34:	4652      	mov	r2, sl
 8011b36:	4649      	mov	r1, r9
 8011b38:	4638      	mov	r0, r7
 8011b3a:	47c0      	blx	r8
 8011b3c:	3001      	adds	r0, #1
 8011b3e:	d103      	bne.n	8011b48 <_printf_common+0xac>
 8011b40:	f04f 30ff 	mov.w	r0, #4294967295
 8011b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b48:	3501      	adds	r5, #1
 8011b4a:	e7c6      	b.n	8011ada <_printf_common+0x3e>
 8011b4c:	18e1      	adds	r1, r4, r3
 8011b4e:	1c5a      	adds	r2, r3, #1
 8011b50:	2030      	movs	r0, #48	; 0x30
 8011b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b56:	4422      	add	r2, r4
 8011b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b60:	3302      	adds	r3, #2
 8011b62:	e7c7      	b.n	8011af4 <_printf_common+0x58>
 8011b64:	2301      	movs	r3, #1
 8011b66:	4622      	mov	r2, r4
 8011b68:	4649      	mov	r1, r9
 8011b6a:	4638      	mov	r0, r7
 8011b6c:	47c0      	blx	r8
 8011b6e:	3001      	adds	r0, #1
 8011b70:	d0e6      	beq.n	8011b40 <_printf_common+0xa4>
 8011b72:	3601      	adds	r6, #1
 8011b74:	e7d9      	b.n	8011b2a <_printf_common+0x8e>
	...

08011b78 <_printf_i>:
 8011b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b7c:	460c      	mov	r4, r1
 8011b7e:	4691      	mov	r9, r2
 8011b80:	7e27      	ldrb	r7, [r4, #24]
 8011b82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011b84:	2f78      	cmp	r7, #120	; 0x78
 8011b86:	4680      	mov	r8, r0
 8011b88:	469a      	mov	sl, r3
 8011b8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011b8e:	d807      	bhi.n	8011ba0 <_printf_i+0x28>
 8011b90:	2f62      	cmp	r7, #98	; 0x62
 8011b92:	d80a      	bhi.n	8011baa <_printf_i+0x32>
 8011b94:	2f00      	cmp	r7, #0
 8011b96:	f000 80d8 	beq.w	8011d4a <_printf_i+0x1d2>
 8011b9a:	2f58      	cmp	r7, #88	; 0x58
 8011b9c:	f000 80a3 	beq.w	8011ce6 <_printf_i+0x16e>
 8011ba0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ba8:	e03a      	b.n	8011c20 <_printf_i+0xa8>
 8011baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011bae:	2b15      	cmp	r3, #21
 8011bb0:	d8f6      	bhi.n	8011ba0 <_printf_i+0x28>
 8011bb2:	a001      	add	r0, pc, #4	; (adr r0, 8011bb8 <_printf_i+0x40>)
 8011bb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011bb8:	08011c11 	.word	0x08011c11
 8011bbc:	08011c25 	.word	0x08011c25
 8011bc0:	08011ba1 	.word	0x08011ba1
 8011bc4:	08011ba1 	.word	0x08011ba1
 8011bc8:	08011ba1 	.word	0x08011ba1
 8011bcc:	08011ba1 	.word	0x08011ba1
 8011bd0:	08011c25 	.word	0x08011c25
 8011bd4:	08011ba1 	.word	0x08011ba1
 8011bd8:	08011ba1 	.word	0x08011ba1
 8011bdc:	08011ba1 	.word	0x08011ba1
 8011be0:	08011ba1 	.word	0x08011ba1
 8011be4:	08011d31 	.word	0x08011d31
 8011be8:	08011c55 	.word	0x08011c55
 8011bec:	08011d13 	.word	0x08011d13
 8011bf0:	08011ba1 	.word	0x08011ba1
 8011bf4:	08011ba1 	.word	0x08011ba1
 8011bf8:	08011d53 	.word	0x08011d53
 8011bfc:	08011ba1 	.word	0x08011ba1
 8011c00:	08011c55 	.word	0x08011c55
 8011c04:	08011ba1 	.word	0x08011ba1
 8011c08:	08011ba1 	.word	0x08011ba1
 8011c0c:	08011d1b 	.word	0x08011d1b
 8011c10:	680b      	ldr	r3, [r1, #0]
 8011c12:	1d1a      	adds	r2, r3, #4
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	600a      	str	r2, [r1, #0]
 8011c18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c20:	2301      	movs	r3, #1
 8011c22:	e0a3      	b.n	8011d6c <_printf_i+0x1f4>
 8011c24:	6825      	ldr	r5, [r4, #0]
 8011c26:	6808      	ldr	r0, [r1, #0]
 8011c28:	062e      	lsls	r6, r5, #24
 8011c2a:	f100 0304 	add.w	r3, r0, #4
 8011c2e:	d50a      	bpl.n	8011c46 <_printf_i+0xce>
 8011c30:	6805      	ldr	r5, [r0, #0]
 8011c32:	600b      	str	r3, [r1, #0]
 8011c34:	2d00      	cmp	r5, #0
 8011c36:	da03      	bge.n	8011c40 <_printf_i+0xc8>
 8011c38:	232d      	movs	r3, #45	; 0x2d
 8011c3a:	426d      	negs	r5, r5
 8011c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c40:	485e      	ldr	r0, [pc, #376]	; (8011dbc <_printf_i+0x244>)
 8011c42:	230a      	movs	r3, #10
 8011c44:	e019      	b.n	8011c7a <_printf_i+0x102>
 8011c46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011c4a:	6805      	ldr	r5, [r0, #0]
 8011c4c:	600b      	str	r3, [r1, #0]
 8011c4e:	bf18      	it	ne
 8011c50:	b22d      	sxthne	r5, r5
 8011c52:	e7ef      	b.n	8011c34 <_printf_i+0xbc>
 8011c54:	680b      	ldr	r3, [r1, #0]
 8011c56:	6825      	ldr	r5, [r4, #0]
 8011c58:	1d18      	adds	r0, r3, #4
 8011c5a:	6008      	str	r0, [r1, #0]
 8011c5c:	0628      	lsls	r0, r5, #24
 8011c5e:	d501      	bpl.n	8011c64 <_printf_i+0xec>
 8011c60:	681d      	ldr	r5, [r3, #0]
 8011c62:	e002      	b.n	8011c6a <_printf_i+0xf2>
 8011c64:	0669      	lsls	r1, r5, #25
 8011c66:	d5fb      	bpl.n	8011c60 <_printf_i+0xe8>
 8011c68:	881d      	ldrh	r5, [r3, #0]
 8011c6a:	4854      	ldr	r0, [pc, #336]	; (8011dbc <_printf_i+0x244>)
 8011c6c:	2f6f      	cmp	r7, #111	; 0x6f
 8011c6e:	bf0c      	ite	eq
 8011c70:	2308      	moveq	r3, #8
 8011c72:	230a      	movne	r3, #10
 8011c74:	2100      	movs	r1, #0
 8011c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c7a:	6866      	ldr	r6, [r4, #4]
 8011c7c:	60a6      	str	r6, [r4, #8]
 8011c7e:	2e00      	cmp	r6, #0
 8011c80:	bfa2      	ittt	ge
 8011c82:	6821      	ldrge	r1, [r4, #0]
 8011c84:	f021 0104 	bicge.w	r1, r1, #4
 8011c88:	6021      	strge	r1, [r4, #0]
 8011c8a:	b90d      	cbnz	r5, 8011c90 <_printf_i+0x118>
 8011c8c:	2e00      	cmp	r6, #0
 8011c8e:	d04d      	beq.n	8011d2c <_printf_i+0x1b4>
 8011c90:	4616      	mov	r6, r2
 8011c92:	fbb5 f1f3 	udiv	r1, r5, r3
 8011c96:	fb03 5711 	mls	r7, r3, r1, r5
 8011c9a:	5dc7      	ldrb	r7, [r0, r7]
 8011c9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011ca0:	462f      	mov	r7, r5
 8011ca2:	42bb      	cmp	r3, r7
 8011ca4:	460d      	mov	r5, r1
 8011ca6:	d9f4      	bls.n	8011c92 <_printf_i+0x11a>
 8011ca8:	2b08      	cmp	r3, #8
 8011caa:	d10b      	bne.n	8011cc4 <_printf_i+0x14c>
 8011cac:	6823      	ldr	r3, [r4, #0]
 8011cae:	07df      	lsls	r7, r3, #31
 8011cb0:	d508      	bpl.n	8011cc4 <_printf_i+0x14c>
 8011cb2:	6923      	ldr	r3, [r4, #16]
 8011cb4:	6861      	ldr	r1, [r4, #4]
 8011cb6:	4299      	cmp	r1, r3
 8011cb8:	bfde      	ittt	le
 8011cba:	2330      	movle	r3, #48	; 0x30
 8011cbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011cc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011cc4:	1b92      	subs	r2, r2, r6
 8011cc6:	6122      	str	r2, [r4, #16]
 8011cc8:	f8cd a000 	str.w	sl, [sp]
 8011ccc:	464b      	mov	r3, r9
 8011cce:	aa03      	add	r2, sp, #12
 8011cd0:	4621      	mov	r1, r4
 8011cd2:	4640      	mov	r0, r8
 8011cd4:	f7ff fee2 	bl	8011a9c <_printf_common>
 8011cd8:	3001      	adds	r0, #1
 8011cda:	d14c      	bne.n	8011d76 <_printf_i+0x1fe>
 8011cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce0:	b004      	add	sp, #16
 8011ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ce6:	4835      	ldr	r0, [pc, #212]	; (8011dbc <_printf_i+0x244>)
 8011ce8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011cec:	6823      	ldr	r3, [r4, #0]
 8011cee:	680e      	ldr	r6, [r1, #0]
 8011cf0:	061f      	lsls	r7, r3, #24
 8011cf2:	f856 5b04 	ldr.w	r5, [r6], #4
 8011cf6:	600e      	str	r6, [r1, #0]
 8011cf8:	d514      	bpl.n	8011d24 <_printf_i+0x1ac>
 8011cfa:	07d9      	lsls	r1, r3, #31
 8011cfc:	bf44      	itt	mi
 8011cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8011d02:	6023      	strmi	r3, [r4, #0]
 8011d04:	b91d      	cbnz	r5, 8011d0e <_printf_i+0x196>
 8011d06:	6823      	ldr	r3, [r4, #0]
 8011d08:	f023 0320 	bic.w	r3, r3, #32
 8011d0c:	6023      	str	r3, [r4, #0]
 8011d0e:	2310      	movs	r3, #16
 8011d10:	e7b0      	b.n	8011c74 <_printf_i+0xfc>
 8011d12:	6823      	ldr	r3, [r4, #0]
 8011d14:	f043 0320 	orr.w	r3, r3, #32
 8011d18:	6023      	str	r3, [r4, #0]
 8011d1a:	2378      	movs	r3, #120	; 0x78
 8011d1c:	4828      	ldr	r0, [pc, #160]	; (8011dc0 <_printf_i+0x248>)
 8011d1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011d22:	e7e3      	b.n	8011cec <_printf_i+0x174>
 8011d24:	065e      	lsls	r6, r3, #25
 8011d26:	bf48      	it	mi
 8011d28:	b2ad      	uxthmi	r5, r5
 8011d2a:	e7e6      	b.n	8011cfa <_printf_i+0x182>
 8011d2c:	4616      	mov	r6, r2
 8011d2e:	e7bb      	b.n	8011ca8 <_printf_i+0x130>
 8011d30:	680b      	ldr	r3, [r1, #0]
 8011d32:	6826      	ldr	r6, [r4, #0]
 8011d34:	6960      	ldr	r0, [r4, #20]
 8011d36:	1d1d      	adds	r5, r3, #4
 8011d38:	600d      	str	r5, [r1, #0]
 8011d3a:	0635      	lsls	r5, r6, #24
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	d501      	bpl.n	8011d44 <_printf_i+0x1cc>
 8011d40:	6018      	str	r0, [r3, #0]
 8011d42:	e002      	b.n	8011d4a <_printf_i+0x1d2>
 8011d44:	0671      	lsls	r1, r6, #25
 8011d46:	d5fb      	bpl.n	8011d40 <_printf_i+0x1c8>
 8011d48:	8018      	strh	r0, [r3, #0]
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	6123      	str	r3, [r4, #16]
 8011d4e:	4616      	mov	r6, r2
 8011d50:	e7ba      	b.n	8011cc8 <_printf_i+0x150>
 8011d52:	680b      	ldr	r3, [r1, #0]
 8011d54:	1d1a      	adds	r2, r3, #4
 8011d56:	600a      	str	r2, [r1, #0]
 8011d58:	681e      	ldr	r6, [r3, #0]
 8011d5a:	6862      	ldr	r2, [r4, #4]
 8011d5c:	2100      	movs	r1, #0
 8011d5e:	4630      	mov	r0, r6
 8011d60:	f7ee fa3e 	bl	80001e0 <memchr>
 8011d64:	b108      	cbz	r0, 8011d6a <_printf_i+0x1f2>
 8011d66:	1b80      	subs	r0, r0, r6
 8011d68:	6060      	str	r0, [r4, #4]
 8011d6a:	6863      	ldr	r3, [r4, #4]
 8011d6c:	6123      	str	r3, [r4, #16]
 8011d6e:	2300      	movs	r3, #0
 8011d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d74:	e7a8      	b.n	8011cc8 <_printf_i+0x150>
 8011d76:	6923      	ldr	r3, [r4, #16]
 8011d78:	4632      	mov	r2, r6
 8011d7a:	4649      	mov	r1, r9
 8011d7c:	4640      	mov	r0, r8
 8011d7e:	47d0      	blx	sl
 8011d80:	3001      	adds	r0, #1
 8011d82:	d0ab      	beq.n	8011cdc <_printf_i+0x164>
 8011d84:	6823      	ldr	r3, [r4, #0]
 8011d86:	079b      	lsls	r3, r3, #30
 8011d88:	d413      	bmi.n	8011db2 <_printf_i+0x23a>
 8011d8a:	68e0      	ldr	r0, [r4, #12]
 8011d8c:	9b03      	ldr	r3, [sp, #12]
 8011d8e:	4298      	cmp	r0, r3
 8011d90:	bfb8      	it	lt
 8011d92:	4618      	movlt	r0, r3
 8011d94:	e7a4      	b.n	8011ce0 <_printf_i+0x168>
 8011d96:	2301      	movs	r3, #1
 8011d98:	4632      	mov	r2, r6
 8011d9a:	4649      	mov	r1, r9
 8011d9c:	4640      	mov	r0, r8
 8011d9e:	47d0      	blx	sl
 8011da0:	3001      	adds	r0, #1
 8011da2:	d09b      	beq.n	8011cdc <_printf_i+0x164>
 8011da4:	3501      	adds	r5, #1
 8011da6:	68e3      	ldr	r3, [r4, #12]
 8011da8:	9903      	ldr	r1, [sp, #12]
 8011daa:	1a5b      	subs	r3, r3, r1
 8011dac:	42ab      	cmp	r3, r5
 8011dae:	dcf2      	bgt.n	8011d96 <_printf_i+0x21e>
 8011db0:	e7eb      	b.n	8011d8a <_printf_i+0x212>
 8011db2:	2500      	movs	r5, #0
 8011db4:	f104 0619 	add.w	r6, r4, #25
 8011db8:	e7f5      	b.n	8011da6 <_printf_i+0x22e>
 8011dba:	bf00      	nop
 8011dbc:	080ca16e 	.word	0x080ca16e
 8011dc0:	080ca17f 	.word	0x080ca17f

08011dc4 <iprintf>:
 8011dc4:	b40f      	push	{r0, r1, r2, r3}
 8011dc6:	4b0a      	ldr	r3, [pc, #40]	; (8011df0 <iprintf+0x2c>)
 8011dc8:	b513      	push	{r0, r1, r4, lr}
 8011dca:	681c      	ldr	r4, [r3, #0]
 8011dcc:	b124      	cbz	r4, 8011dd8 <iprintf+0x14>
 8011dce:	69a3      	ldr	r3, [r4, #24]
 8011dd0:	b913      	cbnz	r3, 8011dd8 <iprintf+0x14>
 8011dd2:	4620      	mov	r0, r4
 8011dd4:	f000 ff10 	bl	8012bf8 <__sinit>
 8011dd8:	ab05      	add	r3, sp, #20
 8011dda:	9a04      	ldr	r2, [sp, #16]
 8011ddc:	68a1      	ldr	r1, [r4, #8]
 8011dde:	9301      	str	r3, [sp, #4]
 8011de0:	4620      	mov	r0, r4
 8011de2:	f001 fcf3 	bl	80137cc <_vfiprintf_r>
 8011de6:	b002      	add	sp, #8
 8011de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dec:	b004      	add	sp, #16
 8011dee:	4770      	bx	lr
 8011df0:	20001490 	.word	0x20001490

08011df4 <_sbrk_r>:
 8011df4:	b538      	push	{r3, r4, r5, lr}
 8011df6:	4d06      	ldr	r5, [pc, #24]	; (8011e10 <_sbrk_r+0x1c>)
 8011df8:	2300      	movs	r3, #0
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	4608      	mov	r0, r1
 8011dfe:	602b      	str	r3, [r5, #0]
 8011e00:	f7ef fe4c 	bl	8001a9c <_sbrk>
 8011e04:	1c43      	adds	r3, r0, #1
 8011e06:	d102      	bne.n	8011e0e <_sbrk_r+0x1a>
 8011e08:	682b      	ldr	r3, [r5, #0]
 8011e0a:	b103      	cbz	r3, 8011e0e <_sbrk_r+0x1a>
 8011e0c:	6023      	str	r3, [r4, #0]
 8011e0e:	bd38      	pop	{r3, r4, r5, pc}
 8011e10:	20011314 	.word	0x20011314

08011e14 <siprintf>:
 8011e14:	b40e      	push	{r1, r2, r3}
 8011e16:	b500      	push	{lr}
 8011e18:	b09c      	sub	sp, #112	; 0x70
 8011e1a:	ab1d      	add	r3, sp, #116	; 0x74
 8011e1c:	9002      	str	r0, [sp, #8]
 8011e1e:	9006      	str	r0, [sp, #24]
 8011e20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011e24:	4809      	ldr	r0, [pc, #36]	; (8011e4c <siprintf+0x38>)
 8011e26:	9107      	str	r1, [sp, #28]
 8011e28:	9104      	str	r1, [sp, #16]
 8011e2a:	4909      	ldr	r1, [pc, #36]	; (8011e50 <siprintf+0x3c>)
 8011e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e30:	9105      	str	r1, [sp, #20]
 8011e32:	6800      	ldr	r0, [r0, #0]
 8011e34:	9301      	str	r3, [sp, #4]
 8011e36:	a902      	add	r1, sp, #8
 8011e38:	f001 fb9e 	bl	8013578 <_svfiprintf_r>
 8011e3c:	9b02      	ldr	r3, [sp, #8]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	701a      	strb	r2, [r3, #0]
 8011e42:	b01c      	add	sp, #112	; 0x70
 8011e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e48:	b003      	add	sp, #12
 8011e4a:	4770      	bx	lr
 8011e4c:	20001490 	.word	0x20001490
 8011e50:	ffff0208 	.word	0xffff0208

08011e54 <quorem>:
 8011e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e58:	6903      	ldr	r3, [r0, #16]
 8011e5a:	690c      	ldr	r4, [r1, #16]
 8011e5c:	42a3      	cmp	r3, r4
 8011e5e:	4607      	mov	r7, r0
 8011e60:	f2c0 8081 	blt.w	8011f66 <quorem+0x112>
 8011e64:	3c01      	subs	r4, #1
 8011e66:	f101 0814 	add.w	r8, r1, #20
 8011e6a:	f100 0514 	add.w	r5, r0, #20
 8011e6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e72:	9301      	str	r3, [sp, #4]
 8011e74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011e78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e7c:	3301      	adds	r3, #1
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011e84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011e88:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e8c:	d331      	bcc.n	8011ef2 <quorem+0x9e>
 8011e8e:	f04f 0e00 	mov.w	lr, #0
 8011e92:	4640      	mov	r0, r8
 8011e94:	46ac      	mov	ip, r5
 8011e96:	46f2      	mov	sl, lr
 8011e98:	f850 2b04 	ldr.w	r2, [r0], #4
 8011e9c:	b293      	uxth	r3, r2
 8011e9e:	fb06 e303 	mla	r3, r6, r3, lr
 8011ea2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	ebaa 0303 	sub.w	r3, sl, r3
 8011eac:	0c12      	lsrs	r2, r2, #16
 8011eae:	f8dc a000 	ldr.w	sl, [ip]
 8011eb2:	fb06 e202 	mla	r2, r6, r2, lr
 8011eb6:	fa13 f38a 	uxtah	r3, r3, sl
 8011eba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011ebe:	fa1f fa82 	uxth.w	sl, r2
 8011ec2:	f8dc 2000 	ldr.w	r2, [ip]
 8011ec6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011eca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ece:	b29b      	uxth	r3, r3
 8011ed0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ed4:	4581      	cmp	r9, r0
 8011ed6:	f84c 3b04 	str.w	r3, [ip], #4
 8011eda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011ede:	d2db      	bcs.n	8011e98 <quorem+0x44>
 8011ee0:	f855 300b 	ldr.w	r3, [r5, fp]
 8011ee4:	b92b      	cbnz	r3, 8011ef2 <quorem+0x9e>
 8011ee6:	9b01      	ldr	r3, [sp, #4]
 8011ee8:	3b04      	subs	r3, #4
 8011eea:	429d      	cmp	r5, r3
 8011eec:	461a      	mov	r2, r3
 8011eee:	d32e      	bcc.n	8011f4e <quorem+0xfa>
 8011ef0:	613c      	str	r4, [r7, #16]
 8011ef2:	4638      	mov	r0, r7
 8011ef4:	f001 f9b0 	bl	8013258 <__mcmp>
 8011ef8:	2800      	cmp	r0, #0
 8011efa:	db24      	blt.n	8011f46 <quorem+0xf2>
 8011efc:	3601      	adds	r6, #1
 8011efe:	4628      	mov	r0, r5
 8011f00:	f04f 0c00 	mov.w	ip, #0
 8011f04:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f08:	f8d0 e000 	ldr.w	lr, [r0]
 8011f0c:	b293      	uxth	r3, r2
 8011f0e:	ebac 0303 	sub.w	r3, ip, r3
 8011f12:	0c12      	lsrs	r2, r2, #16
 8011f14:	fa13 f38e 	uxtah	r3, r3, lr
 8011f18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011f1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f20:	b29b      	uxth	r3, r3
 8011f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f26:	45c1      	cmp	r9, r8
 8011f28:	f840 3b04 	str.w	r3, [r0], #4
 8011f2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011f30:	d2e8      	bcs.n	8011f04 <quorem+0xb0>
 8011f32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f3a:	b922      	cbnz	r2, 8011f46 <quorem+0xf2>
 8011f3c:	3b04      	subs	r3, #4
 8011f3e:	429d      	cmp	r5, r3
 8011f40:	461a      	mov	r2, r3
 8011f42:	d30a      	bcc.n	8011f5a <quorem+0x106>
 8011f44:	613c      	str	r4, [r7, #16]
 8011f46:	4630      	mov	r0, r6
 8011f48:	b003      	add	sp, #12
 8011f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f4e:	6812      	ldr	r2, [r2, #0]
 8011f50:	3b04      	subs	r3, #4
 8011f52:	2a00      	cmp	r2, #0
 8011f54:	d1cc      	bne.n	8011ef0 <quorem+0x9c>
 8011f56:	3c01      	subs	r4, #1
 8011f58:	e7c7      	b.n	8011eea <quorem+0x96>
 8011f5a:	6812      	ldr	r2, [r2, #0]
 8011f5c:	3b04      	subs	r3, #4
 8011f5e:	2a00      	cmp	r2, #0
 8011f60:	d1f0      	bne.n	8011f44 <quorem+0xf0>
 8011f62:	3c01      	subs	r4, #1
 8011f64:	e7eb      	b.n	8011f3e <quorem+0xea>
 8011f66:	2000      	movs	r0, #0
 8011f68:	e7ee      	b.n	8011f48 <quorem+0xf4>
 8011f6a:	0000      	movs	r0, r0
 8011f6c:	0000      	movs	r0, r0
	...

08011f70 <_dtoa_r>:
 8011f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f74:	ed2d 8b02 	vpush	{d8}
 8011f78:	ec57 6b10 	vmov	r6, r7, d0
 8011f7c:	b095      	sub	sp, #84	; 0x54
 8011f7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011f80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011f84:	9105      	str	r1, [sp, #20]
 8011f86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011f8a:	4604      	mov	r4, r0
 8011f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8011f8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f90:	b975      	cbnz	r5, 8011fb0 <_dtoa_r+0x40>
 8011f92:	2010      	movs	r0, #16
 8011f94:	f7ff f9e4 	bl	8011360 <malloc>
 8011f98:	4602      	mov	r2, r0
 8011f9a:	6260      	str	r0, [r4, #36]	; 0x24
 8011f9c:	b920      	cbnz	r0, 8011fa8 <_dtoa_r+0x38>
 8011f9e:	4bb2      	ldr	r3, [pc, #712]	; (8012268 <_dtoa_r+0x2f8>)
 8011fa0:	21ea      	movs	r1, #234	; 0xea
 8011fa2:	48b2      	ldr	r0, [pc, #712]	; (801226c <_dtoa_r+0x2fc>)
 8011fa4:	f001 fe58 	bl	8013c58 <__assert_func>
 8011fa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011fac:	6005      	str	r5, [r0, #0]
 8011fae:	60c5      	str	r5, [r0, #12]
 8011fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fb2:	6819      	ldr	r1, [r3, #0]
 8011fb4:	b151      	cbz	r1, 8011fcc <_dtoa_r+0x5c>
 8011fb6:	685a      	ldr	r2, [r3, #4]
 8011fb8:	604a      	str	r2, [r1, #4]
 8011fba:	2301      	movs	r3, #1
 8011fbc:	4093      	lsls	r3, r2
 8011fbe:	608b      	str	r3, [r1, #8]
 8011fc0:	4620      	mov	r0, r4
 8011fc2:	f000 ff0b 	bl	8012ddc <_Bfree>
 8011fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fc8:	2200      	movs	r2, #0
 8011fca:	601a      	str	r2, [r3, #0]
 8011fcc:	1e3b      	subs	r3, r7, #0
 8011fce:	bfb9      	ittee	lt
 8011fd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011fd4:	9303      	strlt	r3, [sp, #12]
 8011fd6:	2300      	movge	r3, #0
 8011fd8:	f8c8 3000 	strge.w	r3, [r8]
 8011fdc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011fe0:	4ba3      	ldr	r3, [pc, #652]	; (8012270 <_dtoa_r+0x300>)
 8011fe2:	bfbc      	itt	lt
 8011fe4:	2201      	movlt	r2, #1
 8011fe6:	f8c8 2000 	strlt.w	r2, [r8]
 8011fea:	ea33 0309 	bics.w	r3, r3, r9
 8011fee:	d11b      	bne.n	8012028 <_dtoa_r+0xb8>
 8011ff0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ff2:	f242 730f 	movw	r3, #9999	; 0x270f
 8011ff6:	6013      	str	r3, [r2, #0]
 8011ff8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ffc:	4333      	orrs	r3, r6
 8011ffe:	f000 857a 	beq.w	8012af6 <_dtoa_r+0xb86>
 8012002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012004:	b963      	cbnz	r3, 8012020 <_dtoa_r+0xb0>
 8012006:	4b9b      	ldr	r3, [pc, #620]	; (8012274 <_dtoa_r+0x304>)
 8012008:	e024      	b.n	8012054 <_dtoa_r+0xe4>
 801200a:	4b9b      	ldr	r3, [pc, #620]	; (8012278 <_dtoa_r+0x308>)
 801200c:	9300      	str	r3, [sp, #0]
 801200e:	3308      	adds	r3, #8
 8012010:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012012:	6013      	str	r3, [r2, #0]
 8012014:	9800      	ldr	r0, [sp, #0]
 8012016:	b015      	add	sp, #84	; 0x54
 8012018:	ecbd 8b02 	vpop	{d8}
 801201c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012020:	4b94      	ldr	r3, [pc, #592]	; (8012274 <_dtoa_r+0x304>)
 8012022:	9300      	str	r3, [sp, #0]
 8012024:	3303      	adds	r3, #3
 8012026:	e7f3      	b.n	8012010 <_dtoa_r+0xa0>
 8012028:	ed9d 7b02 	vldr	d7, [sp, #8]
 801202c:	2200      	movs	r2, #0
 801202e:	ec51 0b17 	vmov	r0, r1, d7
 8012032:	2300      	movs	r3, #0
 8012034:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012038:	f7ee fd46 	bl	8000ac8 <__aeabi_dcmpeq>
 801203c:	4680      	mov	r8, r0
 801203e:	b158      	cbz	r0, 8012058 <_dtoa_r+0xe8>
 8012040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012042:	2301      	movs	r3, #1
 8012044:	6013      	str	r3, [r2, #0]
 8012046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012048:	2b00      	cmp	r3, #0
 801204a:	f000 8551 	beq.w	8012af0 <_dtoa_r+0xb80>
 801204e:	488b      	ldr	r0, [pc, #556]	; (801227c <_dtoa_r+0x30c>)
 8012050:	6018      	str	r0, [r3, #0]
 8012052:	1e43      	subs	r3, r0, #1
 8012054:	9300      	str	r3, [sp, #0]
 8012056:	e7dd      	b.n	8012014 <_dtoa_r+0xa4>
 8012058:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801205c:	aa12      	add	r2, sp, #72	; 0x48
 801205e:	a913      	add	r1, sp, #76	; 0x4c
 8012060:	4620      	mov	r0, r4
 8012062:	f001 f99d 	bl	80133a0 <__d2b>
 8012066:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801206a:	4683      	mov	fp, r0
 801206c:	2d00      	cmp	r5, #0
 801206e:	d07c      	beq.n	801216a <_dtoa_r+0x1fa>
 8012070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012072:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8012076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801207a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801207e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012082:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012086:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801208a:	4b7d      	ldr	r3, [pc, #500]	; (8012280 <_dtoa_r+0x310>)
 801208c:	2200      	movs	r2, #0
 801208e:	4630      	mov	r0, r6
 8012090:	4639      	mov	r1, r7
 8012092:	f7ee f8f9 	bl	8000288 <__aeabi_dsub>
 8012096:	a36e      	add	r3, pc, #440	; (adr r3, 8012250 <_dtoa_r+0x2e0>)
 8012098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209c:	f7ee faac 	bl	80005f8 <__aeabi_dmul>
 80120a0:	a36d      	add	r3, pc, #436	; (adr r3, 8012258 <_dtoa_r+0x2e8>)
 80120a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a6:	f7ee f8f1 	bl	800028c <__adddf3>
 80120aa:	4606      	mov	r6, r0
 80120ac:	4628      	mov	r0, r5
 80120ae:	460f      	mov	r7, r1
 80120b0:	f7ee fa38 	bl	8000524 <__aeabi_i2d>
 80120b4:	a36a      	add	r3, pc, #424	; (adr r3, 8012260 <_dtoa_r+0x2f0>)
 80120b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ba:	f7ee fa9d 	bl	80005f8 <__aeabi_dmul>
 80120be:	4602      	mov	r2, r0
 80120c0:	460b      	mov	r3, r1
 80120c2:	4630      	mov	r0, r6
 80120c4:	4639      	mov	r1, r7
 80120c6:	f7ee f8e1 	bl	800028c <__adddf3>
 80120ca:	4606      	mov	r6, r0
 80120cc:	460f      	mov	r7, r1
 80120ce:	f7ee fd43 	bl	8000b58 <__aeabi_d2iz>
 80120d2:	2200      	movs	r2, #0
 80120d4:	4682      	mov	sl, r0
 80120d6:	2300      	movs	r3, #0
 80120d8:	4630      	mov	r0, r6
 80120da:	4639      	mov	r1, r7
 80120dc:	f7ee fcfe 	bl	8000adc <__aeabi_dcmplt>
 80120e0:	b148      	cbz	r0, 80120f6 <_dtoa_r+0x186>
 80120e2:	4650      	mov	r0, sl
 80120e4:	f7ee fa1e 	bl	8000524 <__aeabi_i2d>
 80120e8:	4632      	mov	r2, r6
 80120ea:	463b      	mov	r3, r7
 80120ec:	f7ee fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80120f0:	b908      	cbnz	r0, 80120f6 <_dtoa_r+0x186>
 80120f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80120f6:	f1ba 0f16 	cmp.w	sl, #22
 80120fa:	d854      	bhi.n	80121a6 <_dtoa_r+0x236>
 80120fc:	4b61      	ldr	r3, [pc, #388]	; (8012284 <_dtoa_r+0x314>)
 80120fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012106:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801210a:	f7ee fce7 	bl	8000adc <__aeabi_dcmplt>
 801210e:	2800      	cmp	r0, #0
 8012110:	d04b      	beq.n	80121aa <_dtoa_r+0x23a>
 8012112:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012116:	2300      	movs	r3, #0
 8012118:	930e      	str	r3, [sp, #56]	; 0x38
 801211a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801211c:	1b5d      	subs	r5, r3, r5
 801211e:	1e6b      	subs	r3, r5, #1
 8012120:	9304      	str	r3, [sp, #16]
 8012122:	bf43      	ittte	mi
 8012124:	2300      	movmi	r3, #0
 8012126:	f1c5 0801 	rsbmi	r8, r5, #1
 801212a:	9304      	strmi	r3, [sp, #16]
 801212c:	f04f 0800 	movpl.w	r8, #0
 8012130:	f1ba 0f00 	cmp.w	sl, #0
 8012134:	db3b      	blt.n	80121ae <_dtoa_r+0x23e>
 8012136:	9b04      	ldr	r3, [sp, #16]
 8012138:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801213c:	4453      	add	r3, sl
 801213e:	9304      	str	r3, [sp, #16]
 8012140:	2300      	movs	r3, #0
 8012142:	9306      	str	r3, [sp, #24]
 8012144:	9b05      	ldr	r3, [sp, #20]
 8012146:	2b09      	cmp	r3, #9
 8012148:	d869      	bhi.n	801221e <_dtoa_r+0x2ae>
 801214a:	2b05      	cmp	r3, #5
 801214c:	bfc4      	itt	gt
 801214e:	3b04      	subgt	r3, #4
 8012150:	9305      	strgt	r3, [sp, #20]
 8012152:	9b05      	ldr	r3, [sp, #20]
 8012154:	f1a3 0302 	sub.w	r3, r3, #2
 8012158:	bfcc      	ite	gt
 801215a:	2500      	movgt	r5, #0
 801215c:	2501      	movle	r5, #1
 801215e:	2b03      	cmp	r3, #3
 8012160:	d869      	bhi.n	8012236 <_dtoa_r+0x2c6>
 8012162:	e8df f003 	tbb	[pc, r3]
 8012166:	4e2c      	.short	0x4e2c
 8012168:	5a4c      	.short	0x5a4c
 801216a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801216e:	441d      	add	r5, r3
 8012170:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012174:	2b20      	cmp	r3, #32
 8012176:	bfc1      	itttt	gt
 8012178:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801217c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012180:	fa09 f303 	lslgt.w	r3, r9, r3
 8012184:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012188:	bfda      	itte	le
 801218a:	f1c3 0320 	rsble	r3, r3, #32
 801218e:	fa06 f003 	lslle.w	r0, r6, r3
 8012192:	4318      	orrgt	r0, r3
 8012194:	f7ee f9b6 	bl	8000504 <__aeabi_ui2d>
 8012198:	2301      	movs	r3, #1
 801219a:	4606      	mov	r6, r0
 801219c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80121a0:	3d01      	subs	r5, #1
 80121a2:	9310      	str	r3, [sp, #64]	; 0x40
 80121a4:	e771      	b.n	801208a <_dtoa_r+0x11a>
 80121a6:	2301      	movs	r3, #1
 80121a8:	e7b6      	b.n	8012118 <_dtoa_r+0x1a8>
 80121aa:	900e      	str	r0, [sp, #56]	; 0x38
 80121ac:	e7b5      	b.n	801211a <_dtoa_r+0x1aa>
 80121ae:	f1ca 0300 	rsb	r3, sl, #0
 80121b2:	9306      	str	r3, [sp, #24]
 80121b4:	2300      	movs	r3, #0
 80121b6:	eba8 080a 	sub.w	r8, r8, sl
 80121ba:	930d      	str	r3, [sp, #52]	; 0x34
 80121bc:	e7c2      	b.n	8012144 <_dtoa_r+0x1d4>
 80121be:	2300      	movs	r3, #0
 80121c0:	9308      	str	r3, [sp, #32]
 80121c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	dc39      	bgt.n	801223c <_dtoa_r+0x2cc>
 80121c8:	f04f 0901 	mov.w	r9, #1
 80121cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80121d0:	464b      	mov	r3, r9
 80121d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80121d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80121d8:	2200      	movs	r2, #0
 80121da:	6042      	str	r2, [r0, #4]
 80121dc:	2204      	movs	r2, #4
 80121de:	f102 0614 	add.w	r6, r2, #20
 80121e2:	429e      	cmp	r6, r3
 80121e4:	6841      	ldr	r1, [r0, #4]
 80121e6:	d92f      	bls.n	8012248 <_dtoa_r+0x2d8>
 80121e8:	4620      	mov	r0, r4
 80121ea:	f000 fdb7 	bl	8012d5c <_Balloc>
 80121ee:	9000      	str	r0, [sp, #0]
 80121f0:	2800      	cmp	r0, #0
 80121f2:	d14b      	bne.n	801228c <_dtoa_r+0x31c>
 80121f4:	4b24      	ldr	r3, [pc, #144]	; (8012288 <_dtoa_r+0x318>)
 80121f6:	4602      	mov	r2, r0
 80121f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80121fc:	e6d1      	b.n	8011fa2 <_dtoa_r+0x32>
 80121fe:	2301      	movs	r3, #1
 8012200:	e7de      	b.n	80121c0 <_dtoa_r+0x250>
 8012202:	2300      	movs	r3, #0
 8012204:	9308      	str	r3, [sp, #32]
 8012206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012208:	eb0a 0903 	add.w	r9, sl, r3
 801220c:	f109 0301 	add.w	r3, r9, #1
 8012210:	2b01      	cmp	r3, #1
 8012212:	9301      	str	r3, [sp, #4]
 8012214:	bfb8      	it	lt
 8012216:	2301      	movlt	r3, #1
 8012218:	e7dd      	b.n	80121d6 <_dtoa_r+0x266>
 801221a:	2301      	movs	r3, #1
 801221c:	e7f2      	b.n	8012204 <_dtoa_r+0x294>
 801221e:	2501      	movs	r5, #1
 8012220:	2300      	movs	r3, #0
 8012222:	9305      	str	r3, [sp, #20]
 8012224:	9508      	str	r5, [sp, #32]
 8012226:	f04f 39ff 	mov.w	r9, #4294967295
 801222a:	2200      	movs	r2, #0
 801222c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012230:	2312      	movs	r3, #18
 8012232:	9209      	str	r2, [sp, #36]	; 0x24
 8012234:	e7cf      	b.n	80121d6 <_dtoa_r+0x266>
 8012236:	2301      	movs	r3, #1
 8012238:	9308      	str	r3, [sp, #32]
 801223a:	e7f4      	b.n	8012226 <_dtoa_r+0x2b6>
 801223c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012240:	f8cd 9004 	str.w	r9, [sp, #4]
 8012244:	464b      	mov	r3, r9
 8012246:	e7c6      	b.n	80121d6 <_dtoa_r+0x266>
 8012248:	3101      	adds	r1, #1
 801224a:	6041      	str	r1, [r0, #4]
 801224c:	0052      	lsls	r2, r2, #1
 801224e:	e7c6      	b.n	80121de <_dtoa_r+0x26e>
 8012250:	636f4361 	.word	0x636f4361
 8012254:	3fd287a7 	.word	0x3fd287a7
 8012258:	8b60c8b3 	.word	0x8b60c8b3
 801225c:	3fc68a28 	.word	0x3fc68a28
 8012260:	509f79fb 	.word	0x509f79fb
 8012264:	3fd34413 	.word	0x3fd34413
 8012268:	080ca19d 	.word	0x080ca19d
 801226c:	080ca1b4 	.word	0x080ca1b4
 8012270:	7ff00000 	.word	0x7ff00000
 8012274:	080ca199 	.word	0x080ca199
 8012278:	080ca190 	.word	0x080ca190
 801227c:	080ca16d 	.word	0x080ca16d
 8012280:	3ff80000 	.word	0x3ff80000
 8012284:	080ca310 	.word	0x080ca310
 8012288:	080ca213 	.word	0x080ca213
 801228c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801228e:	9a00      	ldr	r2, [sp, #0]
 8012290:	601a      	str	r2, [r3, #0]
 8012292:	9b01      	ldr	r3, [sp, #4]
 8012294:	2b0e      	cmp	r3, #14
 8012296:	f200 80ad 	bhi.w	80123f4 <_dtoa_r+0x484>
 801229a:	2d00      	cmp	r5, #0
 801229c:	f000 80aa 	beq.w	80123f4 <_dtoa_r+0x484>
 80122a0:	f1ba 0f00 	cmp.w	sl, #0
 80122a4:	dd36      	ble.n	8012314 <_dtoa_r+0x3a4>
 80122a6:	4ac3      	ldr	r2, [pc, #780]	; (80125b4 <_dtoa_r+0x644>)
 80122a8:	f00a 030f 	and.w	r3, sl, #15
 80122ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80122b0:	ed93 7b00 	vldr	d7, [r3]
 80122b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80122b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80122bc:	eeb0 8a47 	vmov.f32	s16, s14
 80122c0:	eef0 8a67 	vmov.f32	s17, s15
 80122c4:	d016      	beq.n	80122f4 <_dtoa_r+0x384>
 80122c6:	4bbc      	ldr	r3, [pc, #752]	; (80125b8 <_dtoa_r+0x648>)
 80122c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80122cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80122d0:	f7ee fabc 	bl	800084c <__aeabi_ddiv>
 80122d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122d8:	f007 070f 	and.w	r7, r7, #15
 80122dc:	2503      	movs	r5, #3
 80122de:	4eb6      	ldr	r6, [pc, #728]	; (80125b8 <_dtoa_r+0x648>)
 80122e0:	b957      	cbnz	r7, 80122f8 <_dtoa_r+0x388>
 80122e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122e6:	ec53 2b18 	vmov	r2, r3, d8
 80122ea:	f7ee faaf 	bl	800084c <__aeabi_ddiv>
 80122ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122f2:	e029      	b.n	8012348 <_dtoa_r+0x3d8>
 80122f4:	2502      	movs	r5, #2
 80122f6:	e7f2      	b.n	80122de <_dtoa_r+0x36e>
 80122f8:	07f9      	lsls	r1, r7, #31
 80122fa:	d508      	bpl.n	801230e <_dtoa_r+0x39e>
 80122fc:	ec51 0b18 	vmov	r0, r1, d8
 8012300:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012304:	f7ee f978 	bl	80005f8 <__aeabi_dmul>
 8012308:	ec41 0b18 	vmov	d8, r0, r1
 801230c:	3501      	adds	r5, #1
 801230e:	107f      	asrs	r7, r7, #1
 8012310:	3608      	adds	r6, #8
 8012312:	e7e5      	b.n	80122e0 <_dtoa_r+0x370>
 8012314:	f000 80a6 	beq.w	8012464 <_dtoa_r+0x4f4>
 8012318:	f1ca 0600 	rsb	r6, sl, #0
 801231c:	4ba5      	ldr	r3, [pc, #660]	; (80125b4 <_dtoa_r+0x644>)
 801231e:	4fa6      	ldr	r7, [pc, #664]	; (80125b8 <_dtoa_r+0x648>)
 8012320:	f006 020f 	and.w	r2, r6, #15
 8012324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801232c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012330:	f7ee f962 	bl	80005f8 <__aeabi_dmul>
 8012334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012338:	1136      	asrs	r6, r6, #4
 801233a:	2300      	movs	r3, #0
 801233c:	2502      	movs	r5, #2
 801233e:	2e00      	cmp	r6, #0
 8012340:	f040 8085 	bne.w	801244e <_dtoa_r+0x4de>
 8012344:	2b00      	cmp	r3, #0
 8012346:	d1d2      	bne.n	80122ee <_dtoa_r+0x37e>
 8012348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801234a:	2b00      	cmp	r3, #0
 801234c:	f000 808c 	beq.w	8012468 <_dtoa_r+0x4f8>
 8012350:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012354:	4b99      	ldr	r3, [pc, #612]	; (80125bc <_dtoa_r+0x64c>)
 8012356:	2200      	movs	r2, #0
 8012358:	4630      	mov	r0, r6
 801235a:	4639      	mov	r1, r7
 801235c:	f7ee fbbe 	bl	8000adc <__aeabi_dcmplt>
 8012360:	2800      	cmp	r0, #0
 8012362:	f000 8081 	beq.w	8012468 <_dtoa_r+0x4f8>
 8012366:	9b01      	ldr	r3, [sp, #4]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d07d      	beq.n	8012468 <_dtoa_r+0x4f8>
 801236c:	f1b9 0f00 	cmp.w	r9, #0
 8012370:	dd3c      	ble.n	80123ec <_dtoa_r+0x47c>
 8012372:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012376:	9307      	str	r3, [sp, #28]
 8012378:	2200      	movs	r2, #0
 801237a:	4b91      	ldr	r3, [pc, #580]	; (80125c0 <_dtoa_r+0x650>)
 801237c:	4630      	mov	r0, r6
 801237e:	4639      	mov	r1, r7
 8012380:	f7ee f93a 	bl	80005f8 <__aeabi_dmul>
 8012384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012388:	3501      	adds	r5, #1
 801238a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801238e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012392:	4628      	mov	r0, r5
 8012394:	f7ee f8c6 	bl	8000524 <__aeabi_i2d>
 8012398:	4632      	mov	r2, r6
 801239a:	463b      	mov	r3, r7
 801239c:	f7ee f92c 	bl	80005f8 <__aeabi_dmul>
 80123a0:	4b88      	ldr	r3, [pc, #544]	; (80125c4 <_dtoa_r+0x654>)
 80123a2:	2200      	movs	r2, #0
 80123a4:	f7ed ff72 	bl	800028c <__adddf3>
 80123a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80123ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123b0:	9303      	str	r3, [sp, #12]
 80123b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d15c      	bne.n	8012472 <_dtoa_r+0x502>
 80123b8:	4b83      	ldr	r3, [pc, #524]	; (80125c8 <_dtoa_r+0x658>)
 80123ba:	2200      	movs	r2, #0
 80123bc:	4630      	mov	r0, r6
 80123be:	4639      	mov	r1, r7
 80123c0:	f7ed ff62 	bl	8000288 <__aeabi_dsub>
 80123c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123c8:	4606      	mov	r6, r0
 80123ca:	460f      	mov	r7, r1
 80123cc:	f7ee fba4 	bl	8000b18 <__aeabi_dcmpgt>
 80123d0:	2800      	cmp	r0, #0
 80123d2:	f040 8296 	bne.w	8012902 <_dtoa_r+0x992>
 80123d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80123da:	4630      	mov	r0, r6
 80123dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123e0:	4639      	mov	r1, r7
 80123e2:	f7ee fb7b 	bl	8000adc <__aeabi_dcmplt>
 80123e6:	2800      	cmp	r0, #0
 80123e8:	f040 8288 	bne.w	80128fc <_dtoa_r+0x98c>
 80123ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80123f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80123f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	f2c0 8158 	blt.w	80126ac <_dtoa_r+0x73c>
 80123fc:	f1ba 0f0e 	cmp.w	sl, #14
 8012400:	f300 8154 	bgt.w	80126ac <_dtoa_r+0x73c>
 8012404:	4b6b      	ldr	r3, [pc, #428]	; (80125b4 <_dtoa_r+0x644>)
 8012406:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801240a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801240e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012410:	2b00      	cmp	r3, #0
 8012412:	f280 80e3 	bge.w	80125dc <_dtoa_r+0x66c>
 8012416:	9b01      	ldr	r3, [sp, #4]
 8012418:	2b00      	cmp	r3, #0
 801241a:	f300 80df 	bgt.w	80125dc <_dtoa_r+0x66c>
 801241e:	f040 826d 	bne.w	80128fc <_dtoa_r+0x98c>
 8012422:	4b69      	ldr	r3, [pc, #420]	; (80125c8 <_dtoa_r+0x658>)
 8012424:	2200      	movs	r2, #0
 8012426:	4640      	mov	r0, r8
 8012428:	4649      	mov	r1, r9
 801242a:	f7ee f8e5 	bl	80005f8 <__aeabi_dmul>
 801242e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012432:	f7ee fb67 	bl	8000b04 <__aeabi_dcmpge>
 8012436:	9e01      	ldr	r6, [sp, #4]
 8012438:	4637      	mov	r7, r6
 801243a:	2800      	cmp	r0, #0
 801243c:	f040 8243 	bne.w	80128c6 <_dtoa_r+0x956>
 8012440:	9d00      	ldr	r5, [sp, #0]
 8012442:	2331      	movs	r3, #49	; 0x31
 8012444:	f805 3b01 	strb.w	r3, [r5], #1
 8012448:	f10a 0a01 	add.w	sl, sl, #1
 801244c:	e23f      	b.n	80128ce <_dtoa_r+0x95e>
 801244e:	07f2      	lsls	r2, r6, #31
 8012450:	d505      	bpl.n	801245e <_dtoa_r+0x4ee>
 8012452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012456:	f7ee f8cf 	bl	80005f8 <__aeabi_dmul>
 801245a:	3501      	adds	r5, #1
 801245c:	2301      	movs	r3, #1
 801245e:	1076      	asrs	r6, r6, #1
 8012460:	3708      	adds	r7, #8
 8012462:	e76c      	b.n	801233e <_dtoa_r+0x3ce>
 8012464:	2502      	movs	r5, #2
 8012466:	e76f      	b.n	8012348 <_dtoa_r+0x3d8>
 8012468:	9b01      	ldr	r3, [sp, #4]
 801246a:	f8cd a01c 	str.w	sl, [sp, #28]
 801246e:	930c      	str	r3, [sp, #48]	; 0x30
 8012470:	e78d      	b.n	801238e <_dtoa_r+0x41e>
 8012472:	9900      	ldr	r1, [sp, #0]
 8012474:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012478:	4b4e      	ldr	r3, [pc, #312]	; (80125b4 <_dtoa_r+0x644>)
 801247a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801247e:	4401      	add	r1, r0
 8012480:	9102      	str	r1, [sp, #8]
 8012482:	9908      	ldr	r1, [sp, #32]
 8012484:	eeb0 8a47 	vmov.f32	s16, s14
 8012488:	eef0 8a67 	vmov.f32	s17, s15
 801248c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012490:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012494:	2900      	cmp	r1, #0
 8012496:	d045      	beq.n	8012524 <_dtoa_r+0x5b4>
 8012498:	494c      	ldr	r1, [pc, #304]	; (80125cc <_dtoa_r+0x65c>)
 801249a:	2000      	movs	r0, #0
 801249c:	f7ee f9d6 	bl	800084c <__aeabi_ddiv>
 80124a0:	ec53 2b18 	vmov	r2, r3, d8
 80124a4:	f7ed fef0 	bl	8000288 <__aeabi_dsub>
 80124a8:	9d00      	ldr	r5, [sp, #0]
 80124aa:	ec41 0b18 	vmov	d8, r0, r1
 80124ae:	4639      	mov	r1, r7
 80124b0:	4630      	mov	r0, r6
 80124b2:	f7ee fb51 	bl	8000b58 <__aeabi_d2iz>
 80124b6:	900c      	str	r0, [sp, #48]	; 0x30
 80124b8:	f7ee f834 	bl	8000524 <__aeabi_i2d>
 80124bc:	4602      	mov	r2, r0
 80124be:	460b      	mov	r3, r1
 80124c0:	4630      	mov	r0, r6
 80124c2:	4639      	mov	r1, r7
 80124c4:	f7ed fee0 	bl	8000288 <__aeabi_dsub>
 80124c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124ca:	3330      	adds	r3, #48	; 0x30
 80124cc:	f805 3b01 	strb.w	r3, [r5], #1
 80124d0:	ec53 2b18 	vmov	r2, r3, d8
 80124d4:	4606      	mov	r6, r0
 80124d6:	460f      	mov	r7, r1
 80124d8:	f7ee fb00 	bl	8000adc <__aeabi_dcmplt>
 80124dc:	2800      	cmp	r0, #0
 80124de:	d165      	bne.n	80125ac <_dtoa_r+0x63c>
 80124e0:	4632      	mov	r2, r6
 80124e2:	463b      	mov	r3, r7
 80124e4:	4935      	ldr	r1, [pc, #212]	; (80125bc <_dtoa_r+0x64c>)
 80124e6:	2000      	movs	r0, #0
 80124e8:	f7ed fece 	bl	8000288 <__aeabi_dsub>
 80124ec:	ec53 2b18 	vmov	r2, r3, d8
 80124f0:	f7ee faf4 	bl	8000adc <__aeabi_dcmplt>
 80124f4:	2800      	cmp	r0, #0
 80124f6:	f040 80b9 	bne.w	801266c <_dtoa_r+0x6fc>
 80124fa:	9b02      	ldr	r3, [sp, #8]
 80124fc:	429d      	cmp	r5, r3
 80124fe:	f43f af75 	beq.w	80123ec <_dtoa_r+0x47c>
 8012502:	4b2f      	ldr	r3, [pc, #188]	; (80125c0 <_dtoa_r+0x650>)
 8012504:	ec51 0b18 	vmov	r0, r1, d8
 8012508:	2200      	movs	r2, #0
 801250a:	f7ee f875 	bl	80005f8 <__aeabi_dmul>
 801250e:	4b2c      	ldr	r3, [pc, #176]	; (80125c0 <_dtoa_r+0x650>)
 8012510:	ec41 0b18 	vmov	d8, r0, r1
 8012514:	2200      	movs	r2, #0
 8012516:	4630      	mov	r0, r6
 8012518:	4639      	mov	r1, r7
 801251a:	f7ee f86d 	bl	80005f8 <__aeabi_dmul>
 801251e:	4606      	mov	r6, r0
 8012520:	460f      	mov	r7, r1
 8012522:	e7c4      	b.n	80124ae <_dtoa_r+0x53e>
 8012524:	ec51 0b17 	vmov	r0, r1, d7
 8012528:	f7ee f866 	bl	80005f8 <__aeabi_dmul>
 801252c:	9b02      	ldr	r3, [sp, #8]
 801252e:	9d00      	ldr	r5, [sp, #0]
 8012530:	930c      	str	r3, [sp, #48]	; 0x30
 8012532:	ec41 0b18 	vmov	d8, r0, r1
 8012536:	4639      	mov	r1, r7
 8012538:	4630      	mov	r0, r6
 801253a:	f7ee fb0d 	bl	8000b58 <__aeabi_d2iz>
 801253e:	9011      	str	r0, [sp, #68]	; 0x44
 8012540:	f7ed fff0 	bl	8000524 <__aeabi_i2d>
 8012544:	4602      	mov	r2, r0
 8012546:	460b      	mov	r3, r1
 8012548:	4630      	mov	r0, r6
 801254a:	4639      	mov	r1, r7
 801254c:	f7ed fe9c 	bl	8000288 <__aeabi_dsub>
 8012550:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012552:	3330      	adds	r3, #48	; 0x30
 8012554:	f805 3b01 	strb.w	r3, [r5], #1
 8012558:	9b02      	ldr	r3, [sp, #8]
 801255a:	429d      	cmp	r5, r3
 801255c:	4606      	mov	r6, r0
 801255e:	460f      	mov	r7, r1
 8012560:	f04f 0200 	mov.w	r2, #0
 8012564:	d134      	bne.n	80125d0 <_dtoa_r+0x660>
 8012566:	4b19      	ldr	r3, [pc, #100]	; (80125cc <_dtoa_r+0x65c>)
 8012568:	ec51 0b18 	vmov	r0, r1, d8
 801256c:	f7ed fe8e 	bl	800028c <__adddf3>
 8012570:	4602      	mov	r2, r0
 8012572:	460b      	mov	r3, r1
 8012574:	4630      	mov	r0, r6
 8012576:	4639      	mov	r1, r7
 8012578:	f7ee face 	bl	8000b18 <__aeabi_dcmpgt>
 801257c:	2800      	cmp	r0, #0
 801257e:	d175      	bne.n	801266c <_dtoa_r+0x6fc>
 8012580:	ec53 2b18 	vmov	r2, r3, d8
 8012584:	4911      	ldr	r1, [pc, #68]	; (80125cc <_dtoa_r+0x65c>)
 8012586:	2000      	movs	r0, #0
 8012588:	f7ed fe7e 	bl	8000288 <__aeabi_dsub>
 801258c:	4602      	mov	r2, r0
 801258e:	460b      	mov	r3, r1
 8012590:	4630      	mov	r0, r6
 8012592:	4639      	mov	r1, r7
 8012594:	f7ee faa2 	bl	8000adc <__aeabi_dcmplt>
 8012598:	2800      	cmp	r0, #0
 801259a:	f43f af27 	beq.w	80123ec <_dtoa_r+0x47c>
 801259e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80125a0:	1e6b      	subs	r3, r5, #1
 80125a2:	930c      	str	r3, [sp, #48]	; 0x30
 80125a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80125a8:	2b30      	cmp	r3, #48	; 0x30
 80125aa:	d0f8      	beq.n	801259e <_dtoa_r+0x62e>
 80125ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80125b0:	e04a      	b.n	8012648 <_dtoa_r+0x6d8>
 80125b2:	bf00      	nop
 80125b4:	080ca310 	.word	0x080ca310
 80125b8:	080ca2e8 	.word	0x080ca2e8
 80125bc:	3ff00000 	.word	0x3ff00000
 80125c0:	40240000 	.word	0x40240000
 80125c4:	401c0000 	.word	0x401c0000
 80125c8:	40140000 	.word	0x40140000
 80125cc:	3fe00000 	.word	0x3fe00000
 80125d0:	4baf      	ldr	r3, [pc, #700]	; (8012890 <_dtoa_r+0x920>)
 80125d2:	f7ee f811 	bl	80005f8 <__aeabi_dmul>
 80125d6:	4606      	mov	r6, r0
 80125d8:	460f      	mov	r7, r1
 80125da:	e7ac      	b.n	8012536 <_dtoa_r+0x5c6>
 80125dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80125e0:	9d00      	ldr	r5, [sp, #0]
 80125e2:	4642      	mov	r2, r8
 80125e4:	464b      	mov	r3, r9
 80125e6:	4630      	mov	r0, r6
 80125e8:	4639      	mov	r1, r7
 80125ea:	f7ee f92f 	bl	800084c <__aeabi_ddiv>
 80125ee:	f7ee fab3 	bl	8000b58 <__aeabi_d2iz>
 80125f2:	9002      	str	r0, [sp, #8]
 80125f4:	f7ed ff96 	bl	8000524 <__aeabi_i2d>
 80125f8:	4642      	mov	r2, r8
 80125fa:	464b      	mov	r3, r9
 80125fc:	f7ed fffc 	bl	80005f8 <__aeabi_dmul>
 8012600:	4602      	mov	r2, r0
 8012602:	460b      	mov	r3, r1
 8012604:	4630      	mov	r0, r6
 8012606:	4639      	mov	r1, r7
 8012608:	f7ed fe3e 	bl	8000288 <__aeabi_dsub>
 801260c:	9e02      	ldr	r6, [sp, #8]
 801260e:	9f01      	ldr	r7, [sp, #4]
 8012610:	3630      	adds	r6, #48	; 0x30
 8012612:	f805 6b01 	strb.w	r6, [r5], #1
 8012616:	9e00      	ldr	r6, [sp, #0]
 8012618:	1bae      	subs	r6, r5, r6
 801261a:	42b7      	cmp	r7, r6
 801261c:	4602      	mov	r2, r0
 801261e:	460b      	mov	r3, r1
 8012620:	d137      	bne.n	8012692 <_dtoa_r+0x722>
 8012622:	f7ed fe33 	bl	800028c <__adddf3>
 8012626:	4642      	mov	r2, r8
 8012628:	464b      	mov	r3, r9
 801262a:	4606      	mov	r6, r0
 801262c:	460f      	mov	r7, r1
 801262e:	f7ee fa73 	bl	8000b18 <__aeabi_dcmpgt>
 8012632:	b9c8      	cbnz	r0, 8012668 <_dtoa_r+0x6f8>
 8012634:	4642      	mov	r2, r8
 8012636:	464b      	mov	r3, r9
 8012638:	4630      	mov	r0, r6
 801263a:	4639      	mov	r1, r7
 801263c:	f7ee fa44 	bl	8000ac8 <__aeabi_dcmpeq>
 8012640:	b110      	cbz	r0, 8012648 <_dtoa_r+0x6d8>
 8012642:	9b02      	ldr	r3, [sp, #8]
 8012644:	07d9      	lsls	r1, r3, #31
 8012646:	d40f      	bmi.n	8012668 <_dtoa_r+0x6f8>
 8012648:	4620      	mov	r0, r4
 801264a:	4659      	mov	r1, fp
 801264c:	f000 fbc6 	bl	8012ddc <_Bfree>
 8012650:	2300      	movs	r3, #0
 8012652:	702b      	strb	r3, [r5, #0]
 8012654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012656:	f10a 0001 	add.w	r0, sl, #1
 801265a:	6018      	str	r0, [r3, #0]
 801265c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801265e:	2b00      	cmp	r3, #0
 8012660:	f43f acd8 	beq.w	8012014 <_dtoa_r+0xa4>
 8012664:	601d      	str	r5, [r3, #0]
 8012666:	e4d5      	b.n	8012014 <_dtoa_r+0xa4>
 8012668:	f8cd a01c 	str.w	sl, [sp, #28]
 801266c:	462b      	mov	r3, r5
 801266e:	461d      	mov	r5, r3
 8012670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012674:	2a39      	cmp	r2, #57	; 0x39
 8012676:	d108      	bne.n	801268a <_dtoa_r+0x71a>
 8012678:	9a00      	ldr	r2, [sp, #0]
 801267a:	429a      	cmp	r2, r3
 801267c:	d1f7      	bne.n	801266e <_dtoa_r+0x6fe>
 801267e:	9a07      	ldr	r2, [sp, #28]
 8012680:	9900      	ldr	r1, [sp, #0]
 8012682:	3201      	adds	r2, #1
 8012684:	9207      	str	r2, [sp, #28]
 8012686:	2230      	movs	r2, #48	; 0x30
 8012688:	700a      	strb	r2, [r1, #0]
 801268a:	781a      	ldrb	r2, [r3, #0]
 801268c:	3201      	adds	r2, #1
 801268e:	701a      	strb	r2, [r3, #0]
 8012690:	e78c      	b.n	80125ac <_dtoa_r+0x63c>
 8012692:	4b7f      	ldr	r3, [pc, #508]	; (8012890 <_dtoa_r+0x920>)
 8012694:	2200      	movs	r2, #0
 8012696:	f7ed ffaf 	bl	80005f8 <__aeabi_dmul>
 801269a:	2200      	movs	r2, #0
 801269c:	2300      	movs	r3, #0
 801269e:	4606      	mov	r6, r0
 80126a0:	460f      	mov	r7, r1
 80126a2:	f7ee fa11 	bl	8000ac8 <__aeabi_dcmpeq>
 80126a6:	2800      	cmp	r0, #0
 80126a8:	d09b      	beq.n	80125e2 <_dtoa_r+0x672>
 80126aa:	e7cd      	b.n	8012648 <_dtoa_r+0x6d8>
 80126ac:	9a08      	ldr	r2, [sp, #32]
 80126ae:	2a00      	cmp	r2, #0
 80126b0:	f000 80c4 	beq.w	801283c <_dtoa_r+0x8cc>
 80126b4:	9a05      	ldr	r2, [sp, #20]
 80126b6:	2a01      	cmp	r2, #1
 80126b8:	f300 80a8 	bgt.w	801280c <_dtoa_r+0x89c>
 80126bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80126be:	2a00      	cmp	r2, #0
 80126c0:	f000 80a0 	beq.w	8012804 <_dtoa_r+0x894>
 80126c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80126c8:	9e06      	ldr	r6, [sp, #24]
 80126ca:	4645      	mov	r5, r8
 80126cc:	9a04      	ldr	r2, [sp, #16]
 80126ce:	2101      	movs	r1, #1
 80126d0:	441a      	add	r2, r3
 80126d2:	4620      	mov	r0, r4
 80126d4:	4498      	add	r8, r3
 80126d6:	9204      	str	r2, [sp, #16]
 80126d8:	f000 fc3c 	bl	8012f54 <__i2b>
 80126dc:	4607      	mov	r7, r0
 80126de:	2d00      	cmp	r5, #0
 80126e0:	dd0b      	ble.n	80126fa <_dtoa_r+0x78a>
 80126e2:	9b04      	ldr	r3, [sp, #16]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	dd08      	ble.n	80126fa <_dtoa_r+0x78a>
 80126e8:	42ab      	cmp	r3, r5
 80126ea:	9a04      	ldr	r2, [sp, #16]
 80126ec:	bfa8      	it	ge
 80126ee:	462b      	movge	r3, r5
 80126f0:	eba8 0803 	sub.w	r8, r8, r3
 80126f4:	1aed      	subs	r5, r5, r3
 80126f6:	1ad3      	subs	r3, r2, r3
 80126f8:	9304      	str	r3, [sp, #16]
 80126fa:	9b06      	ldr	r3, [sp, #24]
 80126fc:	b1fb      	cbz	r3, 801273e <_dtoa_r+0x7ce>
 80126fe:	9b08      	ldr	r3, [sp, #32]
 8012700:	2b00      	cmp	r3, #0
 8012702:	f000 809f 	beq.w	8012844 <_dtoa_r+0x8d4>
 8012706:	2e00      	cmp	r6, #0
 8012708:	dd11      	ble.n	801272e <_dtoa_r+0x7be>
 801270a:	4639      	mov	r1, r7
 801270c:	4632      	mov	r2, r6
 801270e:	4620      	mov	r0, r4
 8012710:	f000 fcdc 	bl	80130cc <__pow5mult>
 8012714:	465a      	mov	r2, fp
 8012716:	4601      	mov	r1, r0
 8012718:	4607      	mov	r7, r0
 801271a:	4620      	mov	r0, r4
 801271c:	f000 fc30 	bl	8012f80 <__multiply>
 8012720:	4659      	mov	r1, fp
 8012722:	9007      	str	r0, [sp, #28]
 8012724:	4620      	mov	r0, r4
 8012726:	f000 fb59 	bl	8012ddc <_Bfree>
 801272a:	9b07      	ldr	r3, [sp, #28]
 801272c:	469b      	mov	fp, r3
 801272e:	9b06      	ldr	r3, [sp, #24]
 8012730:	1b9a      	subs	r2, r3, r6
 8012732:	d004      	beq.n	801273e <_dtoa_r+0x7ce>
 8012734:	4659      	mov	r1, fp
 8012736:	4620      	mov	r0, r4
 8012738:	f000 fcc8 	bl	80130cc <__pow5mult>
 801273c:	4683      	mov	fp, r0
 801273e:	2101      	movs	r1, #1
 8012740:	4620      	mov	r0, r4
 8012742:	f000 fc07 	bl	8012f54 <__i2b>
 8012746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012748:	2b00      	cmp	r3, #0
 801274a:	4606      	mov	r6, r0
 801274c:	dd7c      	ble.n	8012848 <_dtoa_r+0x8d8>
 801274e:	461a      	mov	r2, r3
 8012750:	4601      	mov	r1, r0
 8012752:	4620      	mov	r0, r4
 8012754:	f000 fcba 	bl	80130cc <__pow5mult>
 8012758:	9b05      	ldr	r3, [sp, #20]
 801275a:	2b01      	cmp	r3, #1
 801275c:	4606      	mov	r6, r0
 801275e:	dd76      	ble.n	801284e <_dtoa_r+0x8de>
 8012760:	2300      	movs	r3, #0
 8012762:	9306      	str	r3, [sp, #24]
 8012764:	6933      	ldr	r3, [r6, #16]
 8012766:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801276a:	6918      	ldr	r0, [r3, #16]
 801276c:	f000 fba2 	bl	8012eb4 <__hi0bits>
 8012770:	f1c0 0020 	rsb	r0, r0, #32
 8012774:	9b04      	ldr	r3, [sp, #16]
 8012776:	4418      	add	r0, r3
 8012778:	f010 001f 	ands.w	r0, r0, #31
 801277c:	f000 8086 	beq.w	801288c <_dtoa_r+0x91c>
 8012780:	f1c0 0320 	rsb	r3, r0, #32
 8012784:	2b04      	cmp	r3, #4
 8012786:	dd7f      	ble.n	8012888 <_dtoa_r+0x918>
 8012788:	f1c0 001c 	rsb	r0, r0, #28
 801278c:	9b04      	ldr	r3, [sp, #16]
 801278e:	4403      	add	r3, r0
 8012790:	4480      	add	r8, r0
 8012792:	4405      	add	r5, r0
 8012794:	9304      	str	r3, [sp, #16]
 8012796:	f1b8 0f00 	cmp.w	r8, #0
 801279a:	dd05      	ble.n	80127a8 <_dtoa_r+0x838>
 801279c:	4659      	mov	r1, fp
 801279e:	4642      	mov	r2, r8
 80127a0:	4620      	mov	r0, r4
 80127a2:	f000 fced 	bl	8013180 <__lshift>
 80127a6:	4683      	mov	fp, r0
 80127a8:	9b04      	ldr	r3, [sp, #16]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	dd05      	ble.n	80127ba <_dtoa_r+0x84a>
 80127ae:	4631      	mov	r1, r6
 80127b0:	461a      	mov	r2, r3
 80127b2:	4620      	mov	r0, r4
 80127b4:	f000 fce4 	bl	8013180 <__lshift>
 80127b8:	4606      	mov	r6, r0
 80127ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d069      	beq.n	8012894 <_dtoa_r+0x924>
 80127c0:	4631      	mov	r1, r6
 80127c2:	4658      	mov	r0, fp
 80127c4:	f000 fd48 	bl	8013258 <__mcmp>
 80127c8:	2800      	cmp	r0, #0
 80127ca:	da63      	bge.n	8012894 <_dtoa_r+0x924>
 80127cc:	2300      	movs	r3, #0
 80127ce:	4659      	mov	r1, fp
 80127d0:	220a      	movs	r2, #10
 80127d2:	4620      	mov	r0, r4
 80127d4:	f000 fb24 	bl	8012e20 <__multadd>
 80127d8:	9b08      	ldr	r3, [sp, #32]
 80127da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80127de:	4683      	mov	fp, r0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	f000 818f 	beq.w	8012b04 <_dtoa_r+0xb94>
 80127e6:	4639      	mov	r1, r7
 80127e8:	2300      	movs	r3, #0
 80127ea:	220a      	movs	r2, #10
 80127ec:	4620      	mov	r0, r4
 80127ee:	f000 fb17 	bl	8012e20 <__multadd>
 80127f2:	f1b9 0f00 	cmp.w	r9, #0
 80127f6:	4607      	mov	r7, r0
 80127f8:	f300 808e 	bgt.w	8012918 <_dtoa_r+0x9a8>
 80127fc:	9b05      	ldr	r3, [sp, #20]
 80127fe:	2b02      	cmp	r3, #2
 8012800:	dc50      	bgt.n	80128a4 <_dtoa_r+0x934>
 8012802:	e089      	b.n	8012918 <_dtoa_r+0x9a8>
 8012804:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012806:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801280a:	e75d      	b.n	80126c8 <_dtoa_r+0x758>
 801280c:	9b01      	ldr	r3, [sp, #4]
 801280e:	1e5e      	subs	r6, r3, #1
 8012810:	9b06      	ldr	r3, [sp, #24]
 8012812:	42b3      	cmp	r3, r6
 8012814:	bfbf      	itttt	lt
 8012816:	9b06      	ldrlt	r3, [sp, #24]
 8012818:	9606      	strlt	r6, [sp, #24]
 801281a:	1af2      	sublt	r2, r6, r3
 801281c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801281e:	bfb6      	itet	lt
 8012820:	189b      	addlt	r3, r3, r2
 8012822:	1b9e      	subge	r6, r3, r6
 8012824:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012826:	9b01      	ldr	r3, [sp, #4]
 8012828:	bfb8      	it	lt
 801282a:	2600      	movlt	r6, #0
 801282c:	2b00      	cmp	r3, #0
 801282e:	bfb5      	itete	lt
 8012830:	eba8 0503 	sublt.w	r5, r8, r3
 8012834:	9b01      	ldrge	r3, [sp, #4]
 8012836:	2300      	movlt	r3, #0
 8012838:	4645      	movge	r5, r8
 801283a:	e747      	b.n	80126cc <_dtoa_r+0x75c>
 801283c:	9e06      	ldr	r6, [sp, #24]
 801283e:	9f08      	ldr	r7, [sp, #32]
 8012840:	4645      	mov	r5, r8
 8012842:	e74c      	b.n	80126de <_dtoa_r+0x76e>
 8012844:	9a06      	ldr	r2, [sp, #24]
 8012846:	e775      	b.n	8012734 <_dtoa_r+0x7c4>
 8012848:	9b05      	ldr	r3, [sp, #20]
 801284a:	2b01      	cmp	r3, #1
 801284c:	dc18      	bgt.n	8012880 <_dtoa_r+0x910>
 801284e:	9b02      	ldr	r3, [sp, #8]
 8012850:	b9b3      	cbnz	r3, 8012880 <_dtoa_r+0x910>
 8012852:	9b03      	ldr	r3, [sp, #12]
 8012854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012858:	b9a3      	cbnz	r3, 8012884 <_dtoa_r+0x914>
 801285a:	9b03      	ldr	r3, [sp, #12]
 801285c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012860:	0d1b      	lsrs	r3, r3, #20
 8012862:	051b      	lsls	r3, r3, #20
 8012864:	b12b      	cbz	r3, 8012872 <_dtoa_r+0x902>
 8012866:	9b04      	ldr	r3, [sp, #16]
 8012868:	3301      	adds	r3, #1
 801286a:	9304      	str	r3, [sp, #16]
 801286c:	f108 0801 	add.w	r8, r8, #1
 8012870:	2301      	movs	r3, #1
 8012872:	9306      	str	r3, [sp, #24]
 8012874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012876:	2b00      	cmp	r3, #0
 8012878:	f47f af74 	bne.w	8012764 <_dtoa_r+0x7f4>
 801287c:	2001      	movs	r0, #1
 801287e:	e779      	b.n	8012774 <_dtoa_r+0x804>
 8012880:	2300      	movs	r3, #0
 8012882:	e7f6      	b.n	8012872 <_dtoa_r+0x902>
 8012884:	9b02      	ldr	r3, [sp, #8]
 8012886:	e7f4      	b.n	8012872 <_dtoa_r+0x902>
 8012888:	d085      	beq.n	8012796 <_dtoa_r+0x826>
 801288a:	4618      	mov	r0, r3
 801288c:	301c      	adds	r0, #28
 801288e:	e77d      	b.n	801278c <_dtoa_r+0x81c>
 8012890:	40240000 	.word	0x40240000
 8012894:	9b01      	ldr	r3, [sp, #4]
 8012896:	2b00      	cmp	r3, #0
 8012898:	dc38      	bgt.n	801290c <_dtoa_r+0x99c>
 801289a:	9b05      	ldr	r3, [sp, #20]
 801289c:	2b02      	cmp	r3, #2
 801289e:	dd35      	ble.n	801290c <_dtoa_r+0x99c>
 80128a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80128a4:	f1b9 0f00 	cmp.w	r9, #0
 80128a8:	d10d      	bne.n	80128c6 <_dtoa_r+0x956>
 80128aa:	4631      	mov	r1, r6
 80128ac:	464b      	mov	r3, r9
 80128ae:	2205      	movs	r2, #5
 80128b0:	4620      	mov	r0, r4
 80128b2:	f000 fab5 	bl	8012e20 <__multadd>
 80128b6:	4601      	mov	r1, r0
 80128b8:	4606      	mov	r6, r0
 80128ba:	4658      	mov	r0, fp
 80128bc:	f000 fccc 	bl	8013258 <__mcmp>
 80128c0:	2800      	cmp	r0, #0
 80128c2:	f73f adbd 	bgt.w	8012440 <_dtoa_r+0x4d0>
 80128c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128c8:	9d00      	ldr	r5, [sp, #0]
 80128ca:	ea6f 0a03 	mvn.w	sl, r3
 80128ce:	f04f 0800 	mov.w	r8, #0
 80128d2:	4631      	mov	r1, r6
 80128d4:	4620      	mov	r0, r4
 80128d6:	f000 fa81 	bl	8012ddc <_Bfree>
 80128da:	2f00      	cmp	r7, #0
 80128dc:	f43f aeb4 	beq.w	8012648 <_dtoa_r+0x6d8>
 80128e0:	f1b8 0f00 	cmp.w	r8, #0
 80128e4:	d005      	beq.n	80128f2 <_dtoa_r+0x982>
 80128e6:	45b8      	cmp	r8, r7
 80128e8:	d003      	beq.n	80128f2 <_dtoa_r+0x982>
 80128ea:	4641      	mov	r1, r8
 80128ec:	4620      	mov	r0, r4
 80128ee:	f000 fa75 	bl	8012ddc <_Bfree>
 80128f2:	4639      	mov	r1, r7
 80128f4:	4620      	mov	r0, r4
 80128f6:	f000 fa71 	bl	8012ddc <_Bfree>
 80128fa:	e6a5      	b.n	8012648 <_dtoa_r+0x6d8>
 80128fc:	2600      	movs	r6, #0
 80128fe:	4637      	mov	r7, r6
 8012900:	e7e1      	b.n	80128c6 <_dtoa_r+0x956>
 8012902:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012904:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012908:	4637      	mov	r7, r6
 801290a:	e599      	b.n	8012440 <_dtoa_r+0x4d0>
 801290c:	9b08      	ldr	r3, [sp, #32]
 801290e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012912:	2b00      	cmp	r3, #0
 8012914:	f000 80fd 	beq.w	8012b12 <_dtoa_r+0xba2>
 8012918:	2d00      	cmp	r5, #0
 801291a:	dd05      	ble.n	8012928 <_dtoa_r+0x9b8>
 801291c:	4639      	mov	r1, r7
 801291e:	462a      	mov	r2, r5
 8012920:	4620      	mov	r0, r4
 8012922:	f000 fc2d 	bl	8013180 <__lshift>
 8012926:	4607      	mov	r7, r0
 8012928:	9b06      	ldr	r3, [sp, #24]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d05c      	beq.n	80129e8 <_dtoa_r+0xa78>
 801292e:	6879      	ldr	r1, [r7, #4]
 8012930:	4620      	mov	r0, r4
 8012932:	f000 fa13 	bl	8012d5c <_Balloc>
 8012936:	4605      	mov	r5, r0
 8012938:	b928      	cbnz	r0, 8012946 <_dtoa_r+0x9d6>
 801293a:	4b80      	ldr	r3, [pc, #512]	; (8012b3c <_dtoa_r+0xbcc>)
 801293c:	4602      	mov	r2, r0
 801293e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012942:	f7ff bb2e 	b.w	8011fa2 <_dtoa_r+0x32>
 8012946:	693a      	ldr	r2, [r7, #16]
 8012948:	3202      	adds	r2, #2
 801294a:	0092      	lsls	r2, r2, #2
 801294c:	f107 010c 	add.w	r1, r7, #12
 8012950:	300c      	adds	r0, #12
 8012952:	f7fe fd0d 	bl	8011370 <memcpy>
 8012956:	2201      	movs	r2, #1
 8012958:	4629      	mov	r1, r5
 801295a:	4620      	mov	r0, r4
 801295c:	f000 fc10 	bl	8013180 <__lshift>
 8012960:	9b00      	ldr	r3, [sp, #0]
 8012962:	3301      	adds	r3, #1
 8012964:	9301      	str	r3, [sp, #4]
 8012966:	9b00      	ldr	r3, [sp, #0]
 8012968:	444b      	add	r3, r9
 801296a:	9307      	str	r3, [sp, #28]
 801296c:	9b02      	ldr	r3, [sp, #8]
 801296e:	f003 0301 	and.w	r3, r3, #1
 8012972:	46b8      	mov	r8, r7
 8012974:	9306      	str	r3, [sp, #24]
 8012976:	4607      	mov	r7, r0
 8012978:	9b01      	ldr	r3, [sp, #4]
 801297a:	4631      	mov	r1, r6
 801297c:	3b01      	subs	r3, #1
 801297e:	4658      	mov	r0, fp
 8012980:	9302      	str	r3, [sp, #8]
 8012982:	f7ff fa67 	bl	8011e54 <quorem>
 8012986:	4603      	mov	r3, r0
 8012988:	3330      	adds	r3, #48	; 0x30
 801298a:	9004      	str	r0, [sp, #16]
 801298c:	4641      	mov	r1, r8
 801298e:	4658      	mov	r0, fp
 8012990:	9308      	str	r3, [sp, #32]
 8012992:	f000 fc61 	bl	8013258 <__mcmp>
 8012996:	463a      	mov	r2, r7
 8012998:	4681      	mov	r9, r0
 801299a:	4631      	mov	r1, r6
 801299c:	4620      	mov	r0, r4
 801299e:	f000 fc77 	bl	8013290 <__mdiff>
 80129a2:	68c2      	ldr	r2, [r0, #12]
 80129a4:	9b08      	ldr	r3, [sp, #32]
 80129a6:	4605      	mov	r5, r0
 80129a8:	bb02      	cbnz	r2, 80129ec <_dtoa_r+0xa7c>
 80129aa:	4601      	mov	r1, r0
 80129ac:	4658      	mov	r0, fp
 80129ae:	f000 fc53 	bl	8013258 <__mcmp>
 80129b2:	9b08      	ldr	r3, [sp, #32]
 80129b4:	4602      	mov	r2, r0
 80129b6:	4629      	mov	r1, r5
 80129b8:	4620      	mov	r0, r4
 80129ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80129be:	f000 fa0d 	bl	8012ddc <_Bfree>
 80129c2:	9b05      	ldr	r3, [sp, #20]
 80129c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129c6:	9d01      	ldr	r5, [sp, #4]
 80129c8:	ea43 0102 	orr.w	r1, r3, r2
 80129cc:	9b06      	ldr	r3, [sp, #24]
 80129ce:	430b      	orrs	r3, r1
 80129d0:	9b08      	ldr	r3, [sp, #32]
 80129d2:	d10d      	bne.n	80129f0 <_dtoa_r+0xa80>
 80129d4:	2b39      	cmp	r3, #57	; 0x39
 80129d6:	d029      	beq.n	8012a2c <_dtoa_r+0xabc>
 80129d8:	f1b9 0f00 	cmp.w	r9, #0
 80129dc:	dd01      	ble.n	80129e2 <_dtoa_r+0xa72>
 80129de:	9b04      	ldr	r3, [sp, #16]
 80129e0:	3331      	adds	r3, #49	; 0x31
 80129e2:	9a02      	ldr	r2, [sp, #8]
 80129e4:	7013      	strb	r3, [r2, #0]
 80129e6:	e774      	b.n	80128d2 <_dtoa_r+0x962>
 80129e8:	4638      	mov	r0, r7
 80129ea:	e7b9      	b.n	8012960 <_dtoa_r+0x9f0>
 80129ec:	2201      	movs	r2, #1
 80129ee:	e7e2      	b.n	80129b6 <_dtoa_r+0xa46>
 80129f0:	f1b9 0f00 	cmp.w	r9, #0
 80129f4:	db06      	blt.n	8012a04 <_dtoa_r+0xa94>
 80129f6:	9905      	ldr	r1, [sp, #20]
 80129f8:	ea41 0909 	orr.w	r9, r1, r9
 80129fc:	9906      	ldr	r1, [sp, #24]
 80129fe:	ea59 0101 	orrs.w	r1, r9, r1
 8012a02:	d120      	bne.n	8012a46 <_dtoa_r+0xad6>
 8012a04:	2a00      	cmp	r2, #0
 8012a06:	ddec      	ble.n	80129e2 <_dtoa_r+0xa72>
 8012a08:	4659      	mov	r1, fp
 8012a0a:	2201      	movs	r2, #1
 8012a0c:	4620      	mov	r0, r4
 8012a0e:	9301      	str	r3, [sp, #4]
 8012a10:	f000 fbb6 	bl	8013180 <__lshift>
 8012a14:	4631      	mov	r1, r6
 8012a16:	4683      	mov	fp, r0
 8012a18:	f000 fc1e 	bl	8013258 <__mcmp>
 8012a1c:	2800      	cmp	r0, #0
 8012a1e:	9b01      	ldr	r3, [sp, #4]
 8012a20:	dc02      	bgt.n	8012a28 <_dtoa_r+0xab8>
 8012a22:	d1de      	bne.n	80129e2 <_dtoa_r+0xa72>
 8012a24:	07da      	lsls	r2, r3, #31
 8012a26:	d5dc      	bpl.n	80129e2 <_dtoa_r+0xa72>
 8012a28:	2b39      	cmp	r3, #57	; 0x39
 8012a2a:	d1d8      	bne.n	80129de <_dtoa_r+0xa6e>
 8012a2c:	9a02      	ldr	r2, [sp, #8]
 8012a2e:	2339      	movs	r3, #57	; 0x39
 8012a30:	7013      	strb	r3, [r2, #0]
 8012a32:	462b      	mov	r3, r5
 8012a34:	461d      	mov	r5, r3
 8012a36:	3b01      	subs	r3, #1
 8012a38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012a3c:	2a39      	cmp	r2, #57	; 0x39
 8012a3e:	d050      	beq.n	8012ae2 <_dtoa_r+0xb72>
 8012a40:	3201      	adds	r2, #1
 8012a42:	701a      	strb	r2, [r3, #0]
 8012a44:	e745      	b.n	80128d2 <_dtoa_r+0x962>
 8012a46:	2a00      	cmp	r2, #0
 8012a48:	dd03      	ble.n	8012a52 <_dtoa_r+0xae2>
 8012a4a:	2b39      	cmp	r3, #57	; 0x39
 8012a4c:	d0ee      	beq.n	8012a2c <_dtoa_r+0xabc>
 8012a4e:	3301      	adds	r3, #1
 8012a50:	e7c7      	b.n	80129e2 <_dtoa_r+0xa72>
 8012a52:	9a01      	ldr	r2, [sp, #4]
 8012a54:	9907      	ldr	r1, [sp, #28]
 8012a56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012a5a:	428a      	cmp	r2, r1
 8012a5c:	d02a      	beq.n	8012ab4 <_dtoa_r+0xb44>
 8012a5e:	4659      	mov	r1, fp
 8012a60:	2300      	movs	r3, #0
 8012a62:	220a      	movs	r2, #10
 8012a64:	4620      	mov	r0, r4
 8012a66:	f000 f9db 	bl	8012e20 <__multadd>
 8012a6a:	45b8      	cmp	r8, r7
 8012a6c:	4683      	mov	fp, r0
 8012a6e:	f04f 0300 	mov.w	r3, #0
 8012a72:	f04f 020a 	mov.w	r2, #10
 8012a76:	4641      	mov	r1, r8
 8012a78:	4620      	mov	r0, r4
 8012a7a:	d107      	bne.n	8012a8c <_dtoa_r+0xb1c>
 8012a7c:	f000 f9d0 	bl	8012e20 <__multadd>
 8012a80:	4680      	mov	r8, r0
 8012a82:	4607      	mov	r7, r0
 8012a84:	9b01      	ldr	r3, [sp, #4]
 8012a86:	3301      	adds	r3, #1
 8012a88:	9301      	str	r3, [sp, #4]
 8012a8a:	e775      	b.n	8012978 <_dtoa_r+0xa08>
 8012a8c:	f000 f9c8 	bl	8012e20 <__multadd>
 8012a90:	4639      	mov	r1, r7
 8012a92:	4680      	mov	r8, r0
 8012a94:	2300      	movs	r3, #0
 8012a96:	220a      	movs	r2, #10
 8012a98:	4620      	mov	r0, r4
 8012a9a:	f000 f9c1 	bl	8012e20 <__multadd>
 8012a9e:	4607      	mov	r7, r0
 8012aa0:	e7f0      	b.n	8012a84 <_dtoa_r+0xb14>
 8012aa2:	f1b9 0f00 	cmp.w	r9, #0
 8012aa6:	9a00      	ldr	r2, [sp, #0]
 8012aa8:	bfcc      	ite	gt
 8012aaa:	464d      	movgt	r5, r9
 8012aac:	2501      	movle	r5, #1
 8012aae:	4415      	add	r5, r2
 8012ab0:	f04f 0800 	mov.w	r8, #0
 8012ab4:	4659      	mov	r1, fp
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	4620      	mov	r0, r4
 8012aba:	9301      	str	r3, [sp, #4]
 8012abc:	f000 fb60 	bl	8013180 <__lshift>
 8012ac0:	4631      	mov	r1, r6
 8012ac2:	4683      	mov	fp, r0
 8012ac4:	f000 fbc8 	bl	8013258 <__mcmp>
 8012ac8:	2800      	cmp	r0, #0
 8012aca:	dcb2      	bgt.n	8012a32 <_dtoa_r+0xac2>
 8012acc:	d102      	bne.n	8012ad4 <_dtoa_r+0xb64>
 8012ace:	9b01      	ldr	r3, [sp, #4]
 8012ad0:	07db      	lsls	r3, r3, #31
 8012ad2:	d4ae      	bmi.n	8012a32 <_dtoa_r+0xac2>
 8012ad4:	462b      	mov	r3, r5
 8012ad6:	461d      	mov	r5, r3
 8012ad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012adc:	2a30      	cmp	r2, #48	; 0x30
 8012ade:	d0fa      	beq.n	8012ad6 <_dtoa_r+0xb66>
 8012ae0:	e6f7      	b.n	80128d2 <_dtoa_r+0x962>
 8012ae2:	9a00      	ldr	r2, [sp, #0]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d1a5      	bne.n	8012a34 <_dtoa_r+0xac4>
 8012ae8:	f10a 0a01 	add.w	sl, sl, #1
 8012aec:	2331      	movs	r3, #49	; 0x31
 8012aee:	e779      	b.n	80129e4 <_dtoa_r+0xa74>
 8012af0:	4b13      	ldr	r3, [pc, #76]	; (8012b40 <_dtoa_r+0xbd0>)
 8012af2:	f7ff baaf 	b.w	8012054 <_dtoa_r+0xe4>
 8012af6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	f47f aa86 	bne.w	801200a <_dtoa_r+0x9a>
 8012afe:	4b11      	ldr	r3, [pc, #68]	; (8012b44 <_dtoa_r+0xbd4>)
 8012b00:	f7ff baa8 	b.w	8012054 <_dtoa_r+0xe4>
 8012b04:	f1b9 0f00 	cmp.w	r9, #0
 8012b08:	dc03      	bgt.n	8012b12 <_dtoa_r+0xba2>
 8012b0a:	9b05      	ldr	r3, [sp, #20]
 8012b0c:	2b02      	cmp	r3, #2
 8012b0e:	f73f aec9 	bgt.w	80128a4 <_dtoa_r+0x934>
 8012b12:	9d00      	ldr	r5, [sp, #0]
 8012b14:	4631      	mov	r1, r6
 8012b16:	4658      	mov	r0, fp
 8012b18:	f7ff f99c 	bl	8011e54 <quorem>
 8012b1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012b20:	f805 3b01 	strb.w	r3, [r5], #1
 8012b24:	9a00      	ldr	r2, [sp, #0]
 8012b26:	1aaa      	subs	r2, r5, r2
 8012b28:	4591      	cmp	r9, r2
 8012b2a:	ddba      	ble.n	8012aa2 <_dtoa_r+0xb32>
 8012b2c:	4659      	mov	r1, fp
 8012b2e:	2300      	movs	r3, #0
 8012b30:	220a      	movs	r2, #10
 8012b32:	4620      	mov	r0, r4
 8012b34:	f000 f974 	bl	8012e20 <__multadd>
 8012b38:	4683      	mov	fp, r0
 8012b3a:	e7eb      	b.n	8012b14 <_dtoa_r+0xba4>
 8012b3c:	080ca213 	.word	0x080ca213
 8012b40:	080ca16c 	.word	0x080ca16c
 8012b44:	080ca190 	.word	0x080ca190

08012b48 <std>:
 8012b48:	2300      	movs	r3, #0
 8012b4a:	b510      	push	{r4, lr}
 8012b4c:	4604      	mov	r4, r0
 8012b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8012b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b56:	6083      	str	r3, [r0, #8]
 8012b58:	8181      	strh	r1, [r0, #12]
 8012b5a:	6643      	str	r3, [r0, #100]	; 0x64
 8012b5c:	81c2      	strh	r2, [r0, #14]
 8012b5e:	6183      	str	r3, [r0, #24]
 8012b60:	4619      	mov	r1, r3
 8012b62:	2208      	movs	r2, #8
 8012b64:	305c      	adds	r0, #92	; 0x5c
 8012b66:	f7fe fc11 	bl	801138c <memset>
 8012b6a:	4b05      	ldr	r3, [pc, #20]	; (8012b80 <std+0x38>)
 8012b6c:	6263      	str	r3, [r4, #36]	; 0x24
 8012b6e:	4b05      	ldr	r3, [pc, #20]	; (8012b84 <std+0x3c>)
 8012b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8012b72:	4b05      	ldr	r3, [pc, #20]	; (8012b88 <std+0x40>)
 8012b74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012b76:	4b05      	ldr	r3, [pc, #20]	; (8012b8c <std+0x44>)
 8012b78:	6224      	str	r4, [r4, #32]
 8012b7a:	6323      	str	r3, [r4, #48]	; 0x30
 8012b7c:	bd10      	pop	{r4, pc}
 8012b7e:	bf00      	nop
 8012b80:	08013a2d 	.word	0x08013a2d
 8012b84:	08013a4f 	.word	0x08013a4f
 8012b88:	08013a87 	.word	0x08013a87
 8012b8c:	08013aab 	.word	0x08013aab

08012b90 <_cleanup_r>:
 8012b90:	4901      	ldr	r1, [pc, #4]	; (8012b98 <_cleanup_r+0x8>)
 8012b92:	f000 b8af 	b.w	8012cf4 <_fwalk_reent>
 8012b96:	bf00      	nop
 8012b98:	08013dc1 	.word	0x08013dc1

08012b9c <__sfmoreglue>:
 8012b9c:	b570      	push	{r4, r5, r6, lr}
 8012b9e:	1e4a      	subs	r2, r1, #1
 8012ba0:	2568      	movs	r5, #104	; 0x68
 8012ba2:	4355      	muls	r5, r2
 8012ba4:	460e      	mov	r6, r1
 8012ba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012baa:	f7fe fc47 	bl	801143c <_malloc_r>
 8012bae:	4604      	mov	r4, r0
 8012bb0:	b140      	cbz	r0, 8012bc4 <__sfmoreglue+0x28>
 8012bb2:	2100      	movs	r1, #0
 8012bb4:	e9c0 1600 	strd	r1, r6, [r0]
 8012bb8:	300c      	adds	r0, #12
 8012bba:	60a0      	str	r0, [r4, #8]
 8012bbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012bc0:	f7fe fbe4 	bl	801138c <memset>
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	bd70      	pop	{r4, r5, r6, pc}

08012bc8 <__sfp_lock_acquire>:
 8012bc8:	4801      	ldr	r0, [pc, #4]	; (8012bd0 <__sfp_lock_acquire+0x8>)
 8012bca:	f000 b8b8 	b.w	8012d3e <__retarget_lock_acquire_recursive>
 8012bce:	bf00      	nop
 8012bd0:	20011310 	.word	0x20011310

08012bd4 <__sfp_lock_release>:
 8012bd4:	4801      	ldr	r0, [pc, #4]	; (8012bdc <__sfp_lock_release+0x8>)
 8012bd6:	f000 b8b3 	b.w	8012d40 <__retarget_lock_release_recursive>
 8012bda:	bf00      	nop
 8012bdc:	20011310 	.word	0x20011310

08012be0 <__sinit_lock_acquire>:
 8012be0:	4801      	ldr	r0, [pc, #4]	; (8012be8 <__sinit_lock_acquire+0x8>)
 8012be2:	f000 b8ac 	b.w	8012d3e <__retarget_lock_acquire_recursive>
 8012be6:	bf00      	nop
 8012be8:	2001130b 	.word	0x2001130b

08012bec <__sinit_lock_release>:
 8012bec:	4801      	ldr	r0, [pc, #4]	; (8012bf4 <__sinit_lock_release+0x8>)
 8012bee:	f000 b8a7 	b.w	8012d40 <__retarget_lock_release_recursive>
 8012bf2:	bf00      	nop
 8012bf4:	2001130b 	.word	0x2001130b

08012bf8 <__sinit>:
 8012bf8:	b510      	push	{r4, lr}
 8012bfa:	4604      	mov	r4, r0
 8012bfc:	f7ff fff0 	bl	8012be0 <__sinit_lock_acquire>
 8012c00:	69a3      	ldr	r3, [r4, #24]
 8012c02:	b11b      	cbz	r3, 8012c0c <__sinit+0x14>
 8012c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c08:	f7ff bff0 	b.w	8012bec <__sinit_lock_release>
 8012c0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012c10:	6523      	str	r3, [r4, #80]	; 0x50
 8012c12:	4b13      	ldr	r3, [pc, #76]	; (8012c60 <__sinit+0x68>)
 8012c14:	4a13      	ldr	r2, [pc, #76]	; (8012c64 <__sinit+0x6c>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	62a2      	str	r2, [r4, #40]	; 0x28
 8012c1a:	42a3      	cmp	r3, r4
 8012c1c:	bf04      	itt	eq
 8012c1e:	2301      	moveq	r3, #1
 8012c20:	61a3      	streq	r3, [r4, #24]
 8012c22:	4620      	mov	r0, r4
 8012c24:	f000 f820 	bl	8012c68 <__sfp>
 8012c28:	6060      	str	r0, [r4, #4]
 8012c2a:	4620      	mov	r0, r4
 8012c2c:	f000 f81c 	bl	8012c68 <__sfp>
 8012c30:	60a0      	str	r0, [r4, #8]
 8012c32:	4620      	mov	r0, r4
 8012c34:	f000 f818 	bl	8012c68 <__sfp>
 8012c38:	2200      	movs	r2, #0
 8012c3a:	60e0      	str	r0, [r4, #12]
 8012c3c:	2104      	movs	r1, #4
 8012c3e:	6860      	ldr	r0, [r4, #4]
 8012c40:	f7ff ff82 	bl	8012b48 <std>
 8012c44:	68a0      	ldr	r0, [r4, #8]
 8012c46:	2201      	movs	r2, #1
 8012c48:	2109      	movs	r1, #9
 8012c4a:	f7ff ff7d 	bl	8012b48 <std>
 8012c4e:	68e0      	ldr	r0, [r4, #12]
 8012c50:	2202      	movs	r2, #2
 8012c52:	2112      	movs	r1, #18
 8012c54:	f7ff ff78 	bl	8012b48 <std>
 8012c58:	2301      	movs	r3, #1
 8012c5a:	61a3      	str	r3, [r4, #24]
 8012c5c:	e7d2      	b.n	8012c04 <__sinit+0xc>
 8012c5e:	bf00      	nop
 8012c60:	080ca158 	.word	0x080ca158
 8012c64:	08012b91 	.word	0x08012b91

08012c68 <__sfp>:
 8012c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c6a:	4607      	mov	r7, r0
 8012c6c:	f7ff ffac 	bl	8012bc8 <__sfp_lock_acquire>
 8012c70:	4b1e      	ldr	r3, [pc, #120]	; (8012cec <__sfp+0x84>)
 8012c72:	681e      	ldr	r6, [r3, #0]
 8012c74:	69b3      	ldr	r3, [r6, #24]
 8012c76:	b913      	cbnz	r3, 8012c7e <__sfp+0x16>
 8012c78:	4630      	mov	r0, r6
 8012c7a:	f7ff ffbd 	bl	8012bf8 <__sinit>
 8012c7e:	3648      	adds	r6, #72	; 0x48
 8012c80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012c84:	3b01      	subs	r3, #1
 8012c86:	d503      	bpl.n	8012c90 <__sfp+0x28>
 8012c88:	6833      	ldr	r3, [r6, #0]
 8012c8a:	b30b      	cbz	r3, 8012cd0 <__sfp+0x68>
 8012c8c:	6836      	ldr	r6, [r6, #0]
 8012c8e:	e7f7      	b.n	8012c80 <__sfp+0x18>
 8012c90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012c94:	b9d5      	cbnz	r5, 8012ccc <__sfp+0x64>
 8012c96:	4b16      	ldr	r3, [pc, #88]	; (8012cf0 <__sfp+0x88>)
 8012c98:	60e3      	str	r3, [r4, #12]
 8012c9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012c9e:	6665      	str	r5, [r4, #100]	; 0x64
 8012ca0:	f000 f84c 	bl	8012d3c <__retarget_lock_init_recursive>
 8012ca4:	f7ff ff96 	bl	8012bd4 <__sfp_lock_release>
 8012ca8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012cac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012cb0:	6025      	str	r5, [r4, #0]
 8012cb2:	61a5      	str	r5, [r4, #24]
 8012cb4:	2208      	movs	r2, #8
 8012cb6:	4629      	mov	r1, r5
 8012cb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012cbc:	f7fe fb66 	bl	801138c <memset>
 8012cc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012cc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012cc8:	4620      	mov	r0, r4
 8012cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ccc:	3468      	adds	r4, #104	; 0x68
 8012cce:	e7d9      	b.n	8012c84 <__sfp+0x1c>
 8012cd0:	2104      	movs	r1, #4
 8012cd2:	4638      	mov	r0, r7
 8012cd4:	f7ff ff62 	bl	8012b9c <__sfmoreglue>
 8012cd8:	4604      	mov	r4, r0
 8012cda:	6030      	str	r0, [r6, #0]
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d1d5      	bne.n	8012c8c <__sfp+0x24>
 8012ce0:	f7ff ff78 	bl	8012bd4 <__sfp_lock_release>
 8012ce4:	230c      	movs	r3, #12
 8012ce6:	603b      	str	r3, [r7, #0]
 8012ce8:	e7ee      	b.n	8012cc8 <__sfp+0x60>
 8012cea:	bf00      	nop
 8012cec:	080ca158 	.word	0x080ca158
 8012cf0:	ffff0001 	.word	0xffff0001

08012cf4 <_fwalk_reent>:
 8012cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cf8:	4606      	mov	r6, r0
 8012cfa:	4688      	mov	r8, r1
 8012cfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012d00:	2700      	movs	r7, #0
 8012d02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d06:	f1b9 0901 	subs.w	r9, r9, #1
 8012d0a:	d505      	bpl.n	8012d18 <_fwalk_reent+0x24>
 8012d0c:	6824      	ldr	r4, [r4, #0]
 8012d0e:	2c00      	cmp	r4, #0
 8012d10:	d1f7      	bne.n	8012d02 <_fwalk_reent+0xe>
 8012d12:	4638      	mov	r0, r7
 8012d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d18:	89ab      	ldrh	r3, [r5, #12]
 8012d1a:	2b01      	cmp	r3, #1
 8012d1c:	d907      	bls.n	8012d2e <_fwalk_reent+0x3a>
 8012d1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d22:	3301      	adds	r3, #1
 8012d24:	d003      	beq.n	8012d2e <_fwalk_reent+0x3a>
 8012d26:	4629      	mov	r1, r5
 8012d28:	4630      	mov	r0, r6
 8012d2a:	47c0      	blx	r8
 8012d2c:	4307      	orrs	r7, r0
 8012d2e:	3568      	adds	r5, #104	; 0x68
 8012d30:	e7e9      	b.n	8012d06 <_fwalk_reent+0x12>
	...

08012d34 <_localeconv_r>:
 8012d34:	4800      	ldr	r0, [pc, #0]	; (8012d38 <_localeconv_r+0x4>)
 8012d36:	4770      	bx	lr
 8012d38:	200015e4 	.word	0x200015e4

08012d3c <__retarget_lock_init_recursive>:
 8012d3c:	4770      	bx	lr

08012d3e <__retarget_lock_acquire_recursive>:
 8012d3e:	4770      	bx	lr

08012d40 <__retarget_lock_release_recursive>:
 8012d40:	4770      	bx	lr
	...

08012d44 <__malloc_lock>:
 8012d44:	4801      	ldr	r0, [pc, #4]	; (8012d4c <__malloc_lock+0x8>)
 8012d46:	f7ff bffa 	b.w	8012d3e <__retarget_lock_acquire_recursive>
 8012d4a:	bf00      	nop
 8012d4c:	2001130c 	.word	0x2001130c

08012d50 <__malloc_unlock>:
 8012d50:	4801      	ldr	r0, [pc, #4]	; (8012d58 <__malloc_unlock+0x8>)
 8012d52:	f7ff bff5 	b.w	8012d40 <__retarget_lock_release_recursive>
 8012d56:	bf00      	nop
 8012d58:	2001130c 	.word	0x2001130c

08012d5c <_Balloc>:
 8012d5c:	b570      	push	{r4, r5, r6, lr}
 8012d5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d60:	4604      	mov	r4, r0
 8012d62:	460d      	mov	r5, r1
 8012d64:	b976      	cbnz	r6, 8012d84 <_Balloc+0x28>
 8012d66:	2010      	movs	r0, #16
 8012d68:	f7fe fafa 	bl	8011360 <malloc>
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	6260      	str	r0, [r4, #36]	; 0x24
 8012d70:	b920      	cbnz	r0, 8012d7c <_Balloc+0x20>
 8012d72:	4b18      	ldr	r3, [pc, #96]	; (8012dd4 <_Balloc+0x78>)
 8012d74:	4818      	ldr	r0, [pc, #96]	; (8012dd8 <_Balloc+0x7c>)
 8012d76:	2166      	movs	r1, #102	; 0x66
 8012d78:	f000 ff6e 	bl	8013c58 <__assert_func>
 8012d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d80:	6006      	str	r6, [r0, #0]
 8012d82:	60c6      	str	r6, [r0, #12]
 8012d84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012d86:	68f3      	ldr	r3, [r6, #12]
 8012d88:	b183      	cbz	r3, 8012dac <_Balloc+0x50>
 8012d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d8c:	68db      	ldr	r3, [r3, #12]
 8012d8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d92:	b9b8      	cbnz	r0, 8012dc4 <_Balloc+0x68>
 8012d94:	2101      	movs	r1, #1
 8012d96:	fa01 f605 	lsl.w	r6, r1, r5
 8012d9a:	1d72      	adds	r2, r6, #5
 8012d9c:	0092      	lsls	r2, r2, #2
 8012d9e:	4620      	mov	r0, r4
 8012da0:	f000 fb5a 	bl	8013458 <_calloc_r>
 8012da4:	b160      	cbz	r0, 8012dc0 <_Balloc+0x64>
 8012da6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012daa:	e00e      	b.n	8012dca <_Balloc+0x6e>
 8012dac:	2221      	movs	r2, #33	; 0x21
 8012dae:	2104      	movs	r1, #4
 8012db0:	4620      	mov	r0, r4
 8012db2:	f000 fb51 	bl	8013458 <_calloc_r>
 8012db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012db8:	60f0      	str	r0, [r6, #12]
 8012dba:	68db      	ldr	r3, [r3, #12]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d1e4      	bne.n	8012d8a <_Balloc+0x2e>
 8012dc0:	2000      	movs	r0, #0
 8012dc2:	bd70      	pop	{r4, r5, r6, pc}
 8012dc4:	6802      	ldr	r2, [r0, #0]
 8012dc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012dca:	2300      	movs	r3, #0
 8012dcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012dd0:	e7f7      	b.n	8012dc2 <_Balloc+0x66>
 8012dd2:	bf00      	nop
 8012dd4:	080ca19d 	.word	0x080ca19d
 8012dd8:	080ca284 	.word	0x080ca284

08012ddc <_Bfree>:
 8012ddc:	b570      	push	{r4, r5, r6, lr}
 8012dde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012de0:	4605      	mov	r5, r0
 8012de2:	460c      	mov	r4, r1
 8012de4:	b976      	cbnz	r6, 8012e04 <_Bfree+0x28>
 8012de6:	2010      	movs	r0, #16
 8012de8:	f7fe faba 	bl	8011360 <malloc>
 8012dec:	4602      	mov	r2, r0
 8012dee:	6268      	str	r0, [r5, #36]	; 0x24
 8012df0:	b920      	cbnz	r0, 8012dfc <_Bfree+0x20>
 8012df2:	4b09      	ldr	r3, [pc, #36]	; (8012e18 <_Bfree+0x3c>)
 8012df4:	4809      	ldr	r0, [pc, #36]	; (8012e1c <_Bfree+0x40>)
 8012df6:	218a      	movs	r1, #138	; 0x8a
 8012df8:	f000 ff2e 	bl	8013c58 <__assert_func>
 8012dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e00:	6006      	str	r6, [r0, #0]
 8012e02:	60c6      	str	r6, [r0, #12]
 8012e04:	b13c      	cbz	r4, 8012e16 <_Bfree+0x3a>
 8012e06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012e08:	6862      	ldr	r2, [r4, #4]
 8012e0a:	68db      	ldr	r3, [r3, #12]
 8012e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e10:	6021      	str	r1, [r4, #0]
 8012e12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012e16:	bd70      	pop	{r4, r5, r6, pc}
 8012e18:	080ca19d 	.word	0x080ca19d
 8012e1c:	080ca284 	.word	0x080ca284

08012e20 <__multadd>:
 8012e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e24:	690e      	ldr	r6, [r1, #16]
 8012e26:	4607      	mov	r7, r0
 8012e28:	4698      	mov	r8, r3
 8012e2a:	460c      	mov	r4, r1
 8012e2c:	f101 0014 	add.w	r0, r1, #20
 8012e30:	2300      	movs	r3, #0
 8012e32:	6805      	ldr	r5, [r0, #0]
 8012e34:	b2a9      	uxth	r1, r5
 8012e36:	fb02 8101 	mla	r1, r2, r1, r8
 8012e3a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012e3e:	0c2d      	lsrs	r5, r5, #16
 8012e40:	fb02 c505 	mla	r5, r2, r5, ip
 8012e44:	b289      	uxth	r1, r1
 8012e46:	3301      	adds	r3, #1
 8012e48:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012e4c:	429e      	cmp	r6, r3
 8012e4e:	f840 1b04 	str.w	r1, [r0], #4
 8012e52:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012e56:	dcec      	bgt.n	8012e32 <__multadd+0x12>
 8012e58:	f1b8 0f00 	cmp.w	r8, #0
 8012e5c:	d022      	beq.n	8012ea4 <__multadd+0x84>
 8012e5e:	68a3      	ldr	r3, [r4, #8]
 8012e60:	42b3      	cmp	r3, r6
 8012e62:	dc19      	bgt.n	8012e98 <__multadd+0x78>
 8012e64:	6861      	ldr	r1, [r4, #4]
 8012e66:	4638      	mov	r0, r7
 8012e68:	3101      	adds	r1, #1
 8012e6a:	f7ff ff77 	bl	8012d5c <_Balloc>
 8012e6e:	4605      	mov	r5, r0
 8012e70:	b928      	cbnz	r0, 8012e7e <__multadd+0x5e>
 8012e72:	4602      	mov	r2, r0
 8012e74:	4b0d      	ldr	r3, [pc, #52]	; (8012eac <__multadd+0x8c>)
 8012e76:	480e      	ldr	r0, [pc, #56]	; (8012eb0 <__multadd+0x90>)
 8012e78:	21b5      	movs	r1, #181	; 0xb5
 8012e7a:	f000 feed 	bl	8013c58 <__assert_func>
 8012e7e:	6922      	ldr	r2, [r4, #16]
 8012e80:	3202      	adds	r2, #2
 8012e82:	f104 010c 	add.w	r1, r4, #12
 8012e86:	0092      	lsls	r2, r2, #2
 8012e88:	300c      	adds	r0, #12
 8012e8a:	f7fe fa71 	bl	8011370 <memcpy>
 8012e8e:	4621      	mov	r1, r4
 8012e90:	4638      	mov	r0, r7
 8012e92:	f7ff ffa3 	bl	8012ddc <_Bfree>
 8012e96:	462c      	mov	r4, r5
 8012e98:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012e9c:	3601      	adds	r6, #1
 8012e9e:	f8c3 8014 	str.w	r8, [r3, #20]
 8012ea2:	6126      	str	r6, [r4, #16]
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eaa:	bf00      	nop
 8012eac:	080ca213 	.word	0x080ca213
 8012eb0:	080ca284 	.word	0x080ca284

08012eb4 <__hi0bits>:
 8012eb4:	0c03      	lsrs	r3, r0, #16
 8012eb6:	041b      	lsls	r3, r3, #16
 8012eb8:	b9d3      	cbnz	r3, 8012ef0 <__hi0bits+0x3c>
 8012eba:	0400      	lsls	r0, r0, #16
 8012ebc:	2310      	movs	r3, #16
 8012ebe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012ec2:	bf04      	itt	eq
 8012ec4:	0200      	lsleq	r0, r0, #8
 8012ec6:	3308      	addeq	r3, #8
 8012ec8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012ecc:	bf04      	itt	eq
 8012ece:	0100      	lsleq	r0, r0, #4
 8012ed0:	3304      	addeq	r3, #4
 8012ed2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012ed6:	bf04      	itt	eq
 8012ed8:	0080      	lsleq	r0, r0, #2
 8012eda:	3302      	addeq	r3, #2
 8012edc:	2800      	cmp	r0, #0
 8012ede:	db05      	blt.n	8012eec <__hi0bits+0x38>
 8012ee0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012ee4:	f103 0301 	add.w	r3, r3, #1
 8012ee8:	bf08      	it	eq
 8012eea:	2320      	moveq	r3, #32
 8012eec:	4618      	mov	r0, r3
 8012eee:	4770      	bx	lr
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	e7e4      	b.n	8012ebe <__hi0bits+0xa>

08012ef4 <__lo0bits>:
 8012ef4:	6803      	ldr	r3, [r0, #0]
 8012ef6:	f013 0207 	ands.w	r2, r3, #7
 8012efa:	4601      	mov	r1, r0
 8012efc:	d00b      	beq.n	8012f16 <__lo0bits+0x22>
 8012efe:	07da      	lsls	r2, r3, #31
 8012f00:	d424      	bmi.n	8012f4c <__lo0bits+0x58>
 8012f02:	0798      	lsls	r0, r3, #30
 8012f04:	bf49      	itett	mi
 8012f06:	085b      	lsrmi	r3, r3, #1
 8012f08:	089b      	lsrpl	r3, r3, #2
 8012f0a:	2001      	movmi	r0, #1
 8012f0c:	600b      	strmi	r3, [r1, #0]
 8012f0e:	bf5c      	itt	pl
 8012f10:	600b      	strpl	r3, [r1, #0]
 8012f12:	2002      	movpl	r0, #2
 8012f14:	4770      	bx	lr
 8012f16:	b298      	uxth	r0, r3
 8012f18:	b9b0      	cbnz	r0, 8012f48 <__lo0bits+0x54>
 8012f1a:	0c1b      	lsrs	r3, r3, #16
 8012f1c:	2010      	movs	r0, #16
 8012f1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012f22:	bf04      	itt	eq
 8012f24:	0a1b      	lsreq	r3, r3, #8
 8012f26:	3008      	addeq	r0, #8
 8012f28:	071a      	lsls	r2, r3, #28
 8012f2a:	bf04      	itt	eq
 8012f2c:	091b      	lsreq	r3, r3, #4
 8012f2e:	3004      	addeq	r0, #4
 8012f30:	079a      	lsls	r2, r3, #30
 8012f32:	bf04      	itt	eq
 8012f34:	089b      	lsreq	r3, r3, #2
 8012f36:	3002      	addeq	r0, #2
 8012f38:	07da      	lsls	r2, r3, #31
 8012f3a:	d403      	bmi.n	8012f44 <__lo0bits+0x50>
 8012f3c:	085b      	lsrs	r3, r3, #1
 8012f3e:	f100 0001 	add.w	r0, r0, #1
 8012f42:	d005      	beq.n	8012f50 <__lo0bits+0x5c>
 8012f44:	600b      	str	r3, [r1, #0]
 8012f46:	4770      	bx	lr
 8012f48:	4610      	mov	r0, r2
 8012f4a:	e7e8      	b.n	8012f1e <__lo0bits+0x2a>
 8012f4c:	2000      	movs	r0, #0
 8012f4e:	4770      	bx	lr
 8012f50:	2020      	movs	r0, #32
 8012f52:	4770      	bx	lr

08012f54 <__i2b>:
 8012f54:	b510      	push	{r4, lr}
 8012f56:	460c      	mov	r4, r1
 8012f58:	2101      	movs	r1, #1
 8012f5a:	f7ff feff 	bl	8012d5c <_Balloc>
 8012f5e:	4602      	mov	r2, r0
 8012f60:	b928      	cbnz	r0, 8012f6e <__i2b+0x1a>
 8012f62:	4b05      	ldr	r3, [pc, #20]	; (8012f78 <__i2b+0x24>)
 8012f64:	4805      	ldr	r0, [pc, #20]	; (8012f7c <__i2b+0x28>)
 8012f66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012f6a:	f000 fe75 	bl	8013c58 <__assert_func>
 8012f6e:	2301      	movs	r3, #1
 8012f70:	6144      	str	r4, [r0, #20]
 8012f72:	6103      	str	r3, [r0, #16]
 8012f74:	bd10      	pop	{r4, pc}
 8012f76:	bf00      	nop
 8012f78:	080ca213 	.word	0x080ca213
 8012f7c:	080ca284 	.word	0x080ca284

08012f80 <__multiply>:
 8012f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f84:	4614      	mov	r4, r2
 8012f86:	690a      	ldr	r2, [r1, #16]
 8012f88:	6923      	ldr	r3, [r4, #16]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	bfb8      	it	lt
 8012f8e:	460b      	movlt	r3, r1
 8012f90:	460d      	mov	r5, r1
 8012f92:	bfbc      	itt	lt
 8012f94:	4625      	movlt	r5, r4
 8012f96:	461c      	movlt	r4, r3
 8012f98:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012f9c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012fa0:	68ab      	ldr	r3, [r5, #8]
 8012fa2:	6869      	ldr	r1, [r5, #4]
 8012fa4:	eb0a 0709 	add.w	r7, sl, r9
 8012fa8:	42bb      	cmp	r3, r7
 8012faa:	b085      	sub	sp, #20
 8012fac:	bfb8      	it	lt
 8012fae:	3101      	addlt	r1, #1
 8012fb0:	f7ff fed4 	bl	8012d5c <_Balloc>
 8012fb4:	b930      	cbnz	r0, 8012fc4 <__multiply+0x44>
 8012fb6:	4602      	mov	r2, r0
 8012fb8:	4b42      	ldr	r3, [pc, #264]	; (80130c4 <__multiply+0x144>)
 8012fba:	4843      	ldr	r0, [pc, #268]	; (80130c8 <__multiply+0x148>)
 8012fbc:	f240 115d 	movw	r1, #349	; 0x15d
 8012fc0:	f000 fe4a 	bl	8013c58 <__assert_func>
 8012fc4:	f100 0614 	add.w	r6, r0, #20
 8012fc8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012fcc:	4633      	mov	r3, r6
 8012fce:	2200      	movs	r2, #0
 8012fd0:	4543      	cmp	r3, r8
 8012fd2:	d31e      	bcc.n	8013012 <__multiply+0x92>
 8012fd4:	f105 0c14 	add.w	ip, r5, #20
 8012fd8:	f104 0314 	add.w	r3, r4, #20
 8012fdc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012fe0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012fe4:	9202      	str	r2, [sp, #8]
 8012fe6:	ebac 0205 	sub.w	r2, ip, r5
 8012fea:	3a15      	subs	r2, #21
 8012fec:	f022 0203 	bic.w	r2, r2, #3
 8012ff0:	3204      	adds	r2, #4
 8012ff2:	f105 0115 	add.w	r1, r5, #21
 8012ff6:	458c      	cmp	ip, r1
 8012ff8:	bf38      	it	cc
 8012ffa:	2204      	movcc	r2, #4
 8012ffc:	9201      	str	r2, [sp, #4]
 8012ffe:	9a02      	ldr	r2, [sp, #8]
 8013000:	9303      	str	r3, [sp, #12]
 8013002:	429a      	cmp	r2, r3
 8013004:	d808      	bhi.n	8013018 <__multiply+0x98>
 8013006:	2f00      	cmp	r7, #0
 8013008:	dc55      	bgt.n	80130b6 <__multiply+0x136>
 801300a:	6107      	str	r7, [r0, #16]
 801300c:	b005      	add	sp, #20
 801300e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013012:	f843 2b04 	str.w	r2, [r3], #4
 8013016:	e7db      	b.n	8012fd0 <__multiply+0x50>
 8013018:	f8b3 a000 	ldrh.w	sl, [r3]
 801301c:	f1ba 0f00 	cmp.w	sl, #0
 8013020:	d020      	beq.n	8013064 <__multiply+0xe4>
 8013022:	f105 0e14 	add.w	lr, r5, #20
 8013026:	46b1      	mov	r9, r6
 8013028:	2200      	movs	r2, #0
 801302a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801302e:	f8d9 b000 	ldr.w	fp, [r9]
 8013032:	b2a1      	uxth	r1, r4
 8013034:	fa1f fb8b 	uxth.w	fp, fp
 8013038:	fb0a b101 	mla	r1, sl, r1, fp
 801303c:	4411      	add	r1, r2
 801303e:	f8d9 2000 	ldr.w	r2, [r9]
 8013042:	0c24      	lsrs	r4, r4, #16
 8013044:	0c12      	lsrs	r2, r2, #16
 8013046:	fb0a 2404 	mla	r4, sl, r4, r2
 801304a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801304e:	b289      	uxth	r1, r1
 8013050:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013054:	45f4      	cmp	ip, lr
 8013056:	f849 1b04 	str.w	r1, [r9], #4
 801305a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801305e:	d8e4      	bhi.n	801302a <__multiply+0xaa>
 8013060:	9901      	ldr	r1, [sp, #4]
 8013062:	5072      	str	r2, [r6, r1]
 8013064:	9a03      	ldr	r2, [sp, #12]
 8013066:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801306a:	3304      	adds	r3, #4
 801306c:	f1b9 0f00 	cmp.w	r9, #0
 8013070:	d01f      	beq.n	80130b2 <__multiply+0x132>
 8013072:	6834      	ldr	r4, [r6, #0]
 8013074:	f105 0114 	add.w	r1, r5, #20
 8013078:	46b6      	mov	lr, r6
 801307a:	f04f 0a00 	mov.w	sl, #0
 801307e:	880a      	ldrh	r2, [r1, #0]
 8013080:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013084:	fb09 b202 	mla	r2, r9, r2, fp
 8013088:	4492      	add	sl, r2
 801308a:	b2a4      	uxth	r4, r4
 801308c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013090:	f84e 4b04 	str.w	r4, [lr], #4
 8013094:	f851 4b04 	ldr.w	r4, [r1], #4
 8013098:	f8be 2000 	ldrh.w	r2, [lr]
 801309c:	0c24      	lsrs	r4, r4, #16
 801309e:	fb09 2404 	mla	r4, r9, r4, r2
 80130a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80130a6:	458c      	cmp	ip, r1
 80130a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80130ac:	d8e7      	bhi.n	801307e <__multiply+0xfe>
 80130ae:	9a01      	ldr	r2, [sp, #4]
 80130b0:	50b4      	str	r4, [r6, r2]
 80130b2:	3604      	adds	r6, #4
 80130b4:	e7a3      	b.n	8012ffe <__multiply+0x7e>
 80130b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d1a5      	bne.n	801300a <__multiply+0x8a>
 80130be:	3f01      	subs	r7, #1
 80130c0:	e7a1      	b.n	8013006 <__multiply+0x86>
 80130c2:	bf00      	nop
 80130c4:	080ca213 	.word	0x080ca213
 80130c8:	080ca284 	.word	0x080ca284

080130cc <__pow5mult>:
 80130cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130d0:	4615      	mov	r5, r2
 80130d2:	f012 0203 	ands.w	r2, r2, #3
 80130d6:	4606      	mov	r6, r0
 80130d8:	460f      	mov	r7, r1
 80130da:	d007      	beq.n	80130ec <__pow5mult+0x20>
 80130dc:	4c25      	ldr	r4, [pc, #148]	; (8013174 <__pow5mult+0xa8>)
 80130de:	3a01      	subs	r2, #1
 80130e0:	2300      	movs	r3, #0
 80130e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80130e6:	f7ff fe9b 	bl	8012e20 <__multadd>
 80130ea:	4607      	mov	r7, r0
 80130ec:	10ad      	asrs	r5, r5, #2
 80130ee:	d03d      	beq.n	801316c <__pow5mult+0xa0>
 80130f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80130f2:	b97c      	cbnz	r4, 8013114 <__pow5mult+0x48>
 80130f4:	2010      	movs	r0, #16
 80130f6:	f7fe f933 	bl	8011360 <malloc>
 80130fa:	4602      	mov	r2, r0
 80130fc:	6270      	str	r0, [r6, #36]	; 0x24
 80130fe:	b928      	cbnz	r0, 801310c <__pow5mult+0x40>
 8013100:	4b1d      	ldr	r3, [pc, #116]	; (8013178 <__pow5mult+0xac>)
 8013102:	481e      	ldr	r0, [pc, #120]	; (801317c <__pow5mult+0xb0>)
 8013104:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013108:	f000 fda6 	bl	8013c58 <__assert_func>
 801310c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013110:	6004      	str	r4, [r0, #0]
 8013112:	60c4      	str	r4, [r0, #12]
 8013114:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013118:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801311c:	b94c      	cbnz	r4, 8013132 <__pow5mult+0x66>
 801311e:	f240 2171 	movw	r1, #625	; 0x271
 8013122:	4630      	mov	r0, r6
 8013124:	f7ff ff16 	bl	8012f54 <__i2b>
 8013128:	2300      	movs	r3, #0
 801312a:	f8c8 0008 	str.w	r0, [r8, #8]
 801312e:	4604      	mov	r4, r0
 8013130:	6003      	str	r3, [r0, #0]
 8013132:	f04f 0900 	mov.w	r9, #0
 8013136:	07eb      	lsls	r3, r5, #31
 8013138:	d50a      	bpl.n	8013150 <__pow5mult+0x84>
 801313a:	4639      	mov	r1, r7
 801313c:	4622      	mov	r2, r4
 801313e:	4630      	mov	r0, r6
 8013140:	f7ff ff1e 	bl	8012f80 <__multiply>
 8013144:	4639      	mov	r1, r7
 8013146:	4680      	mov	r8, r0
 8013148:	4630      	mov	r0, r6
 801314a:	f7ff fe47 	bl	8012ddc <_Bfree>
 801314e:	4647      	mov	r7, r8
 8013150:	106d      	asrs	r5, r5, #1
 8013152:	d00b      	beq.n	801316c <__pow5mult+0xa0>
 8013154:	6820      	ldr	r0, [r4, #0]
 8013156:	b938      	cbnz	r0, 8013168 <__pow5mult+0x9c>
 8013158:	4622      	mov	r2, r4
 801315a:	4621      	mov	r1, r4
 801315c:	4630      	mov	r0, r6
 801315e:	f7ff ff0f 	bl	8012f80 <__multiply>
 8013162:	6020      	str	r0, [r4, #0]
 8013164:	f8c0 9000 	str.w	r9, [r0]
 8013168:	4604      	mov	r4, r0
 801316a:	e7e4      	b.n	8013136 <__pow5mult+0x6a>
 801316c:	4638      	mov	r0, r7
 801316e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013172:	bf00      	nop
 8013174:	080ca3d8 	.word	0x080ca3d8
 8013178:	080ca19d 	.word	0x080ca19d
 801317c:	080ca284 	.word	0x080ca284

08013180 <__lshift>:
 8013180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013184:	460c      	mov	r4, r1
 8013186:	6849      	ldr	r1, [r1, #4]
 8013188:	6923      	ldr	r3, [r4, #16]
 801318a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801318e:	68a3      	ldr	r3, [r4, #8]
 8013190:	4607      	mov	r7, r0
 8013192:	4691      	mov	r9, r2
 8013194:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013198:	f108 0601 	add.w	r6, r8, #1
 801319c:	42b3      	cmp	r3, r6
 801319e:	db0b      	blt.n	80131b8 <__lshift+0x38>
 80131a0:	4638      	mov	r0, r7
 80131a2:	f7ff fddb 	bl	8012d5c <_Balloc>
 80131a6:	4605      	mov	r5, r0
 80131a8:	b948      	cbnz	r0, 80131be <__lshift+0x3e>
 80131aa:	4602      	mov	r2, r0
 80131ac:	4b28      	ldr	r3, [pc, #160]	; (8013250 <__lshift+0xd0>)
 80131ae:	4829      	ldr	r0, [pc, #164]	; (8013254 <__lshift+0xd4>)
 80131b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80131b4:	f000 fd50 	bl	8013c58 <__assert_func>
 80131b8:	3101      	adds	r1, #1
 80131ba:	005b      	lsls	r3, r3, #1
 80131bc:	e7ee      	b.n	801319c <__lshift+0x1c>
 80131be:	2300      	movs	r3, #0
 80131c0:	f100 0114 	add.w	r1, r0, #20
 80131c4:	f100 0210 	add.w	r2, r0, #16
 80131c8:	4618      	mov	r0, r3
 80131ca:	4553      	cmp	r3, sl
 80131cc:	db33      	blt.n	8013236 <__lshift+0xb6>
 80131ce:	6920      	ldr	r0, [r4, #16]
 80131d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80131d4:	f104 0314 	add.w	r3, r4, #20
 80131d8:	f019 091f 	ands.w	r9, r9, #31
 80131dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80131e4:	d02b      	beq.n	801323e <__lshift+0xbe>
 80131e6:	f1c9 0e20 	rsb	lr, r9, #32
 80131ea:	468a      	mov	sl, r1
 80131ec:	2200      	movs	r2, #0
 80131ee:	6818      	ldr	r0, [r3, #0]
 80131f0:	fa00 f009 	lsl.w	r0, r0, r9
 80131f4:	4302      	orrs	r2, r0
 80131f6:	f84a 2b04 	str.w	r2, [sl], #4
 80131fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80131fe:	459c      	cmp	ip, r3
 8013200:	fa22 f20e 	lsr.w	r2, r2, lr
 8013204:	d8f3      	bhi.n	80131ee <__lshift+0x6e>
 8013206:	ebac 0304 	sub.w	r3, ip, r4
 801320a:	3b15      	subs	r3, #21
 801320c:	f023 0303 	bic.w	r3, r3, #3
 8013210:	3304      	adds	r3, #4
 8013212:	f104 0015 	add.w	r0, r4, #21
 8013216:	4584      	cmp	ip, r0
 8013218:	bf38      	it	cc
 801321a:	2304      	movcc	r3, #4
 801321c:	50ca      	str	r2, [r1, r3]
 801321e:	b10a      	cbz	r2, 8013224 <__lshift+0xa4>
 8013220:	f108 0602 	add.w	r6, r8, #2
 8013224:	3e01      	subs	r6, #1
 8013226:	4638      	mov	r0, r7
 8013228:	612e      	str	r6, [r5, #16]
 801322a:	4621      	mov	r1, r4
 801322c:	f7ff fdd6 	bl	8012ddc <_Bfree>
 8013230:	4628      	mov	r0, r5
 8013232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013236:	f842 0f04 	str.w	r0, [r2, #4]!
 801323a:	3301      	adds	r3, #1
 801323c:	e7c5      	b.n	80131ca <__lshift+0x4a>
 801323e:	3904      	subs	r1, #4
 8013240:	f853 2b04 	ldr.w	r2, [r3], #4
 8013244:	f841 2f04 	str.w	r2, [r1, #4]!
 8013248:	459c      	cmp	ip, r3
 801324a:	d8f9      	bhi.n	8013240 <__lshift+0xc0>
 801324c:	e7ea      	b.n	8013224 <__lshift+0xa4>
 801324e:	bf00      	nop
 8013250:	080ca213 	.word	0x080ca213
 8013254:	080ca284 	.word	0x080ca284

08013258 <__mcmp>:
 8013258:	b530      	push	{r4, r5, lr}
 801325a:	6902      	ldr	r2, [r0, #16]
 801325c:	690c      	ldr	r4, [r1, #16]
 801325e:	1b12      	subs	r2, r2, r4
 8013260:	d10e      	bne.n	8013280 <__mcmp+0x28>
 8013262:	f100 0314 	add.w	r3, r0, #20
 8013266:	3114      	adds	r1, #20
 8013268:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801326c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013270:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013274:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013278:	42a5      	cmp	r5, r4
 801327a:	d003      	beq.n	8013284 <__mcmp+0x2c>
 801327c:	d305      	bcc.n	801328a <__mcmp+0x32>
 801327e:	2201      	movs	r2, #1
 8013280:	4610      	mov	r0, r2
 8013282:	bd30      	pop	{r4, r5, pc}
 8013284:	4283      	cmp	r3, r0
 8013286:	d3f3      	bcc.n	8013270 <__mcmp+0x18>
 8013288:	e7fa      	b.n	8013280 <__mcmp+0x28>
 801328a:	f04f 32ff 	mov.w	r2, #4294967295
 801328e:	e7f7      	b.n	8013280 <__mcmp+0x28>

08013290 <__mdiff>:
 8013290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013294:	460c      	mov	r4, r1
 8013296:	4606      	mov	r6, r0
 8013298:	4611      	mov	r1, r2
 801329a:	4620      	mov	r0, r4
 801329c:	4617      	mov	r7, r2
 801329e:	f7ff ffdb 	bl	8013258 <__mcmp>
 80132a2:	1e05      	subs	r5, r0, #0
 80132a4:	d110      	bne.n	80132c8 <__mdiff+0x38>
 80132a6:	4629      	mov	r1, r5
 80132a8:	4630      	mov	r0, r6
 80132aa:	f7ff fd57 	bl	8012d5c <_Balloc>
 80132ae:	b930      	cbnz	r0, 80132be <__mdiff+0x2e>
 80132b0:	4b39      	ldr	r3, [pc, #228]	; (8013398 <__mdiff+0x108>)
 80132b2:	4602      	mov	r2, r0
 80132b4:	f240 2132 	movw	r1, #562	; 0x232
 80132b8:	4838      	ldr	r0, [pc, #224]	; (801339c <__mdiff+0x10c>)
 80132ba:	f000 fccd 	bl	8013c58 <__assert_func>
 80132be:	2301      	movs	r3, #1
 80132c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80132c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132c8:	bfa4      	itt	ge
 80132ca:	463b      	movge	r3, r7
 80132cc:	4627      	movge	r7, r4
 80132ce:	4630      	mov	r0, r6
 80132d0:	6879      	ldr	r1, [r7, #4]
 80132d2:	bfa6      	itte	ge
 80132d4:	461c      	movge	r4, r3
 80132d6:	2500      	movge	r5, #0
 80132d8:	2501      	movlt	r5, #1
 80132da:	f7ff fd3f 	bl	8012d5c <_Balloc>
 80132de:	b920      	cbnz	r0, 80132ea <__mdiff+0x5a>
 80132e0:	4b2d      	ldr	r3, [pc, #180]	; (8013398 <__mdiff+0x108>)
 80132e2:	4602      	mov	r2, r0
 80132e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80132e8:	e7e6      	b.n	80132b8 <__mdiff+0x28>
 80132ea:	693e      	ldr	r6, [r7, #16]
 80132ec:	60c5      	str	r5, [r0, #12]
 80132ee:	6925      	ldr	r5, [r4, #16]
 80132f0:	f107 0114 	add.w	r1, r7, #20
 80132f4:	f104 0914 	add.w	r9, r4, #20
 80132f8:	f100 0e14 	add.w	lr, r0, #20
 80132fc:	f107 0210 	add.w	r2, r7, #16
 8013300:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013304:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013308:	46f2      	mov	sl, lr
 801330a:	2700      	movs	r7, #0
 801330c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013310:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013314:	fa1f f883 	uxth.w	r8, r3
 8013318:	fa17 f78b 	uxtah	r7, r7, fp
 801331c:	0c1b      	lsrs	r3, r3, #16
 801331e:	eba7 0808 	sub.w	r8, r7, r8
 8013322:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013326:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801332a:	fa1f f888 	uxth.w	r8, r8
 801332e:	141f      	asrs	r7, r3, #16
 8013330:	454d      	cmp	r5, r9
 8013332:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013336:	f84a 3b04 	str.w	r3, [sl], #4
 801333a:	d8e7      	bhi.n	801330c <__mdiff+0x7c>
 801333c:	1b2b      	subs	r3, r5, r4
 801333e:	3b15      	subs	r3, #21
 8013340:	f023 0303 	bic.w	r3, r3, #3
 8013344:	3304      	adds	r3, #4
 8013346:	3415      	adds	r4, #21
 8013348:	42a5      	cmp	r5, r4
 801334a:	bf38      	it	cc
 801334c:	2304      	movcc	r3, #4
 801334e:	4419      	add	r1, r3
 8013350:	4473      	add	r3, lr
 8013352:	469e      	mov	lr, r3
 8013354:	460d      	mov	r5, r1
 8013356:	4565      	cmp	r5, ip
 8013358:	d30e      	bcc.n	8013378 <__mdiff+0xe8>
 801335a:	f10c 0203 	add.w	r2, ip, #3
 801335e:	1a52      	subs	r2, r2, r1
 8013360:	f022 0203 	bic.w	r2, r2, #3
 8013364:	3903      	subs	r1, #3
 8013366:	458c      	cmp	ip, r1
 8013368:	bf38      	it	cc
 801336a:	2200      	movcc	r2, #0
 801336c:	441a      	add	r2, r3
 801336e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013372:	b17b      	cbz	r3, 8013394 <__mdiff+0x104>
 8013374:	6106      	str	r6, [r0, #16]
 8013376:	e7a5      	b.n	80132c4 <__mdiff+0x34>
 8013378:	f855 8b04 	ldr.w	r8, [r5], #4
 801337c:	fa17 f488 	uxtah	r4, r7, r8
 8013380:	1422      	asrs	r2, r4, #16
 8013382:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013386:	b2a4      	uxth	r4, r4
 8013388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801338c:	f84e 4b04 	str.w	r4, [lr], #4
 8013390:	1417      	asrs	r7, r2, #16
 8013392:	e7e0      	b.n	8013356 <__mdiff+0xc6>
 8013394:	3e01      	subs	r6, #1
 8013396:	e7ea      	b.n	801336e <__mdiff+0xde>
 8013398:	080ca213 	.word	0x080ca213
 801339c:	080ca284 	.word	0x080ca284

080133a0 <__d2b>:
 80133a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80133a4:	4689      	mov	r9, r1
 80133a6:	2101      	movs	r1, #1
 80133a8:	ec57 6b10 	vmov	r6, r7, d0
 80133ac:	4690      	mov	r8, r2
 80133ae:	f7ff fcd5 	bl	8012d5c <_Balloc>
 80133b2:	4604      	mov	r4, r0
 80133b4:	b930      	cbnz	r0, 80133c4 <__d2b+0x24>
 80133b6:	4602      	mov	r2, r0
 80133b8:	4b25      	ldr	r3, [pc, #148]	; (8013450 <__d2b+0xb0>)
 80133ba:	4826      	ldr	r0, [pc, #152]	; (8013454 <__d2b+0xb4>)
 80133bc:	f240 310a 	movw	r1, #778	; 0x30a
 80133c0:	f000 fc4a 	bl	8013c58 <__assert_func>
 80133c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80133c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80133cc:	bb35      	cbnz	r5, 801341c <__d2b+0x7c>
 80133ce:	2e00      	cmp	r6, #0
 80133d0:	9301      	str	r3, [sp, #4]
 80133d2:	d028      	beq.n	8013426 <__d2b+0x86>
 80133d4:	4668      	mov	r0, sp
 80133d6:	9600      	str	r6, [sp, #0]
 80133d8:	f7ff fd8c 	bl	8012ef4 <__lo0bits>
 80133dc:	9900      	ldr	r1, [sp, #0]
 80133de:	b300      	cbz	r0, 8013422 <__d2b+0x82>
 80133e0:	9a01      	ldr	r2, [sp, #4]
 80133e2:	f1c0 0320 	rsb	r3, r0, #32
 80133e6:	fa02 f303 	lsl.w	r3, r2, r3
 80133ea:	430b      	orrs	r3, r1
 80133ec:	40c2      	lsrs	r2, r0
 80133ee:	6163      	str	r3, [r4, #20]
 80133f0:	9201      	str	r2, [sp, #4]
 80133f2:	9b01      	ldr	r3, [sp, #4]
 80133f4:	61a3      	str	r3, [r4, #24]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	bf14      	ite	ne
 80133fa:	2202      	movne	r2, #2
 80133fc:	2201      	moveq	r2, #1
 80133fe:	6122      	str	r2, [r4, #16]
 8013400:	b1d5      	cbz	r5, 8013438 <__d2b+0x98>
 8013402:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013406:	4405      	add	r5, r0
 8013408:	f8c9 5000 	str.w	r5, [r9]
 801340c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013410:	f8c8 0000 	str.w	r0, [r8]
 8013414:	4620      	mov	r0, r4
 8013416:	b003      	add	sp, #12
 8013418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801341c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013420:	e7d5      	b.n	80133ce <__d2b+0x2e>
 8013422:	6161      	str	r1, [r4, #20]
 8013424:	e7e5      	b.n	80133f2 <__d2b+0x52>
 8013426:	a801      	add	r0, sp, #4
 8013428:	f7ff fd64 	bl	8012ef4 <__lo0bits>
 801342c:	9b01      	ldr	r3, [sp, #4]
 801342e:	6163      	str	r3, [r4, #20]
 8013430:	2201      	movs	r2, #1
 8013432:	6122      	str	r2, [r4, #16]
 8013434:	3020      	adds	r0, #32
 8013436:	e7e3      	b.n	8013400 <__d2b+0x60>
 8013438:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801343c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013440:	f8c9 0000 	str.w	r0, [r9]
 8013444:	6918      	ldr	r0, [r3, #16]
 8013446:	f7ff fd35 	bl	8012eb4 <__hi0bits>
 801344a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801344e:	e7df      	b.n	8013410 <__d2b+0x70>
 8013450:	080ca213 	.word	0x080ca213
 8013454:	080ca284 	.word	0x080ca284

08013458 <_calloc_r>:
 8013458:	b513      	push	{r0, r1, r4, lr}
 801345a:	434a      	muls	r2, r1
 801345c:	4611      	mov	r1, r2
 801345e:	9201      	str	r2, [sp, #4]
 8013460:	f7fd ffec 	bl	801143c <_malloc_r>
 8013464:	4604      	mov	r4, r0
 8013466:	b118      	cbz	r0, 8013470 <_calloc_r+0x18>
 8013468:	9a01      	ldr	r2, [sp, #4]
 801346a:	2100      	movs	r1, #0
 801346c:	f7fd ff8e 	bl	801138c <memset>
 8013470:	4620      	mov	r0, r4
 8013472:	b002      	add	sp, #8
 8013474:	bd10      	pop	{r4, pc}

08013476 <_realloc_r>:
 8013476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013478:	4607      	mov	r7, r0
 801347a:	4614      	mov	r4, r2
 801347c:	460e      	mov	r6, r1
 801347e:	b921      	cbnz	r1, 801348a <_realloc_r+0x14>
 8013480:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013484:	4611      	mov	r1, r2
 8013486:	f7fd bfd9 	b.w	801143c <_malloc_r>
 801348a:	b922      	cbnz	r2, 8013496 <_realloc_r+0x20>
 801348c:	f7fd ff86 	bl	801139c <_free_r>
 8013490:	4625      	mov	r5, r4
 8013492:	4628      	mov	r0, r5
 8013494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013496:	f000 fd83 	bl	8013fa0 <_malloc_usable_size_r>
 801349a:	42a0      	cmp	r0, r4
 801349c:	d20f      	bcs.n	80134be <_realloc_r+0x48>
 801349e:	4621      	mov	r1, r4
 80134a0:	4638      	mov	r0, r7
 80134a2:	f7fd ffcb 	bl	801143c <_malloc_r>
 80134a6:	4605      	mov	r5, r0
 80134a8:	2800      	cmp	r0, #0
 80134aa:	d0f2      	beq.n	8013492 <_realloc_r+0x1c>
 80134ac:	4631      	mov	r1, r6
 80134ae:	4622      	mov	r2, r4
 80134b0:	f7fd ff5e 	bl	8011370 <memcpy>
 80134b4:	4631      	mov	r1, r6
 80134b6:	4638      	mov	r0, r7
 80134b8:	f7fd ff70 	bl	801139c <_free_r>
 80134bc:	e7e9      	b.n	8013492 <_realloc_r+0x1c>
 80134be:	4635      	mov	r5, r6
 80134c0:	e7e7      	b.n	8013492 <_realloc_r+0x1c>

080134c2 <__ssputs_r>:
 80134c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134c6:	688e      	ldr	r6, [r1, #8]
 80134c8:	429e      	cmp	r6, r3
 80134ca:	4682      	mov	sl, r0
 80134cc:	460c      	mov	r4, r1
 80134ce:	4690      	mov	r8, r2
 80134d0:	461f      	mov	r7, r3
 80134d2:	d838      	bhi.n	8013546 <__ssputs_r+0x84>
 80134d4:	898a      	ldrh	r2, [r1, #12]
 80134d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80134da:	d032      	beq.n	8013542 <__ssputs_r+0x80>
 80134dc:	6825      	ldr	r5, [r4, #0]
 80134de:	6909      	ldr	r1, [r1, #16]
 80134e0:	eba5 0901 	sub.w	r9, r5, r1
 80134e4:	6965      	ldr	r5, [r4, #20]
 80134e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80134ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80134ee:	3301      	adds	r3, #1
 80134f0:	444b      	add	r3, r9
 80134f2:	106d      	asrs	r5, r5, #1
 80134f4:	429d      	cmp	r5, r3
 80134f6:	bf38      	it	cc
 80134f8:	461d      	movcc	r5, r3
 80134fa:	0553      	lsls	r3, r2, #21
 80134fc:	d531      	bpl.n	8013562 <__ssputs_r+0xa0>
 80134fe:	4629      	mov	r1, r5
 8013500:	f7fd ff9c 	bl	801143c <_malloc_r>
 8013504:	4606      	mov	r6, r0
 8013506:	b950      	cbnz	r0, 801351e <__ssputs_r+0x5c>
 8013508:	230c      	movs	r3, #12
 801350a:	f8ca 3000 	str.w	r3, [sl]
 801350e:	89a3      	ldrh	r3, [r4, #12]
 8013510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013514:	81a3      	strh	r3, [r4, #12]
 8013516:	f04f 30ff 	mov.w	r0, #4294967295
 801351a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801351e:	6921      	ldr	r1, [r4, #16]
 8013520:	464a      	mov	r2, r9
 8013522:	f7fd ff25 	bl	8011370 <memcpy>
 8013526:	89a3      	ldrh	r3, [r4, #12]
 8013528:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801352c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013530:	81a3      	strh	r3, [r4, #12]
 8013532:	6126      	str	r6, [r4, #16]
 8013534:	6165      	str	r5, [r4, #20]
 8013536:	444e      	add	r6, r9
 8013538:	eba5 0509 	sub.w	r5, r5, r9
 801353c:	6026      	str	r6, [r4, #0]
 801353e:	60a5      	str	r5, [r4, #8]
 8013540:	463e      	mov	r6, r7
 8013542:	42be      	cmp	r6, r7
 8013544:	d900      	bls.n	8013548 <__ssputs_r+0x86>
 8013546:	463e      	mov	r6, r7
 8013548:	4632      	mov	r2, r6
 801354a:	6820      	ldr	r0, [r4, #0]
 801354c:	4641      	mov	r1, r8
 801354e:	f000 fd0d 	bl	8013f6c <memmove>
 8013552:	68a3      	ldr	r3, [r4, #8]
 8013554:	6822      	ldr	r2, [r4, #0]
 8013556:	1b9b      	subs	r3, r3, r6
 8013558:	4432      	add	r2, r6
 801355a:	60a3      	str	r3, [r4, #8]
 801355c:	6022      	str	r2, [r4, #0]
 801355e:	2000      	movs	r0, #0
 8013560:	e7db      	b.n	801351a <__ssputs_r+0x58>
 8013562:	462a      	mov	r2, r5
 8013564:	f7ff ff87 	bl	8013476 <_realloc_r>
 8013568:	4606      	mov	r6, r0
 801356a:	2800      	cmp	r0, #0
 801356c:	d1e1      	bne.n	8013532 <__ssputs_r+0x70>
 801356e:	6921      	ldr	r1, [r4, #16]
 8013570:	4650      	mov	r0, sl
 8013572:	f7fd ff13 	bl	801139c <_free_r>
 8013576:	e7c7      	b.n	8013508 <__ssputs_r+0x46>

08013578 <_svfiprintf_r>:
 8013578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801357c:	4698      	mov	r8, r3
 801357e:	898b      	ldrh	r3, [r1, #12]
 8013580:	061b      	lsls	r3, r3, #24
 8013582:	b09d      	sub	sp, #116	; 0x74
 8013584:	4607      	mov	r7, r0
 8013586:	460d      	mov	r5, r1
 8013588:	4614      	mov	r4, r2
 801358a:	d50e      	bpl.n	80135aa <_svfiprintf_r+0x32>
 801358c:	690b      	ldr	r3, [r1, #16]
 801358e:	b963      	cbnz	r3, 80135aa <_svfiprintf_r+0x32>
 8013590:	2140      	movs	r1, #64	; 0x40
 8013592:	f7fd ff53 	bl	801143c <_malloc_r>
 8013596:	6028      	str	r0, [r5, #0]
 8013598:	6128      	str	r0, [r5, #16]
 801359a:	b920      	cbnz	r0, 80135a6 <_svfiprintf_r+0x2e>
 801359c:	230c      	movs	r3, #12
 801359e:	603b      	str	r3, [r7, #0]
 80135a0:	f04f 30ff 	mov.w	r0, #4294967295
 80135a4:	e0d1      	b.n	801374a <_svfiprintf_r+0x1d2>
 80135a6:	2340      	movs	r3, #64	; 0x40
 80135a8:	616b      	str	r3, [r5, #20]
 80135aa:	2300      	movs	r3, #0
 80135ac:	9309      	str	r3, [sp, #36]	; 0x24
 80135ae:	2320      	movs	r3, #32
 80135b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80135b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80135b8:	2330      	movs	r3, #48	; 0x30
 80135ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013764 <_svfiprintf_r+0x1ec>
 80135be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80135c2:	f04f 0901 	mov.w	r9, #1
 80135c6:	4623      	mov	r3, r4
 80135c8:	469a      	mov	sl, r3
 80135ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135ce:	b10a      	cbz	r2, 80135d4 <_svfiprintf_r+0x5c>
 80135d0:	2a25      	cmp	r2, #37	; 0x25
 80135d2:	d1f9      	bne.n	80135c8 <_svfiprintf_r+0x50>
 80135d4:	ebba 0b04 	subs.w	fp, sl, r4
 80135d8:	d00b      	beq.n	80135f2 <_svfiprintf_r+0x7a>
 80135da:	465b      	mov	r3, fp
 80135dc:	4622      	mov	r2, r4
 80135de:	4629      	mov	r1, r5
 80135e0:	4638      	mov	r0, r7
 80135e2:	f7ff ff6e 	bl	80134c2 <__ssputs_r>
 80135e6:	3001      	adds	r0, #1
 80135e8:	f000 80aa 	beq.w	8013740 <_svfiprintf_r+0x1c8>
 80135ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135ee:	445a      	add	r2, fp
 80135f0:	9209      	str	r2, [sp, #36]	; 0x24
 80135f2:	f89a 3000 	ldrb.w	r3, [sl]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	f000 80a2 	beq.w	8013740 <_svfiprintf_r+0x1c8>
 80135fc:	2300      	movs	r3, #0
 80135fe:	f04f 32ff 	mov.w	r2, #4294967295
 8013602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013606:	f10a 0a01 	add.w	sl, sl, #1
 801360a:	9304      	str	r3, [sp, #16]
 801360c:	9307      	str	r3, [sp, #28]
 801360e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013612:	931a      	str	r3, [sp, #104]	; 0x68
 8013614:	4654      	mov	r4, sl
 8013616:	2205      	movs	r2, #5
 8013618:	f814 1b01 	ldrb.w	r1, [r4], #1
 801361c:	4851      	ldr	r0, [pc, #324]	; (8013764 <_svfiprintf_r+0x1ec>)
 801361e:	f7ec fddf 	bl	80001e0 <memchr>
 8013622:	9a04      	ldr	r2, [sp, #16]
 8013624:	b9d8      	cbnz	r0, 801365e <_svfiprintf_r+0xe6>
 8013626:	06d0      	lsls	r0, r2, #27
 8013628:	bf44      	itt	mi
 801362a:	2320      	movmi	r3, #32
 801362c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013630:	0711      	lsls	r1, r2, #28
 8013632:	bf44      	itt	mi
 8013634:	232b      	movmi	r3, #43	; 0x2b
 8013636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801363a:	f89a 3000 	ldrb.w	r3, [sl]
 801363e:	2b2a      	cmp	r3, #42	; 0x2a
 8013640:	d015      	beq.n	801366e <_svfiprintf_r+0xf6>
 8013642:	9a07      	ldr	r2, [sp, #28]
 8013644:	4654      	mov	r4, sl
 8013646:	2000      	movs	r0, #0
 8013648:	f04f 0c0a 	mov.w	ip, #10
 801364c:	4621      	mov	r1, r4
 801364e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013652:	3b30      	subs	r3, #48	; 0x30
 8013654:	2b09      	cmp	r3, #9
 8013656:	d94e      	bls.n	80136f6 <_svfiprintf_r+0x17e>
 8013658:	b1b0      	cbz	r0, 8013688 <_svfiprintf_r+0x110>
 801365a:	9207      	str	r2, [sp, #28]
 801365c:	e014      	b.n	8013688 <_svfiprintf_r+0x110>
 801365e:	eba0 0308 	sub.w	r3, r0, r8
 8013662:	fa09 f303 	lsl.w	r3, r9, r3
 8013666:	4313      	orrs	r3, r2
 8013668:	9304      	str	r3, [sp, #16]
 801366a:	46a2      	mov	sl, r4
 801366c:	e7d2      	b.n	8013614 <_svfiprintf_r+0x9c>
 801366e:	9b03      	ldr	r3, [sp, #12]
 8013670:	1d19      	adds	r1, r3, #4
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	9103      	str	r1, [sp, #12]
 8013676:	2b00      	cmp	r3, #0
 8013678:	bfbb      	ittet	lt
 801367a:	425b      	neglt	r3, r3
 801367c:	f042 0202 	orrlt.w	r2, r2, #2
 8013680:	9307      	strge	r3, [sp, #28]
 8013682:	9307      	strlt	r3, [sp, #28]
 8013684:	bfb8      	it	lt
 8013686:	9204      	strlt	r2, [sp, #16]
 8013688:	7823      	ldrb	r3, [r4, #0]
 801368a:	2b2e      	cmp	r3, #46	; 0x2e
 801368c:	d10c      	bne.n	80136a8 <_svfiprintf_r+0x130>
 801368e:	7863      	ldrb	r3, [r4, #1]
 8013690:	2b2a      	cmp	r3, #42	; 0x2a
 8013692:	d135      	bne.n	8013700 <_svfiprintf_r+0x188>
 8013694:	9b03      	ldr	r3, [sp, #12]
 8013696:	1d1a      	adds	r2, r3, #4
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	9203      	str	r2, [sp, #12]
 801369c:	2b00      	cmp	r3, #0
 801369e:	bfb8      	it	lt
 80136a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80136a4:	3402      	adds	r4, #2
 80136a6:	9305      	str	r3, [sp, #20]
 80136a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013774 <_svfiprintf_r+0x1fc>
 80136ac:	7821      	ldrb	r1, [r4, #0]
 80136ae:	2203      	movs	r2, #3
 80136b0:	4650      	mov	r0, sl
 80136b2:	f7ec fd95 	bl	80001e0 <memchr>
 80136b6:	b140      	cbz	r0, 80136ca <_svfiprintf_r+0x152>
 80136b8:	2340      	movs	r3, #64	; 0x40
 80136ba:	eba0 000a 	sub.w	r0, r0, sl
 80136be:	fa03 f000 	lsl.w	r0, r3, r0
 80136c2:	9b04      	ldr	r3, [sp, #16]
 80136c4:	4303      	orrs	r3, r0
 80136c6:	3401      	adds	r4, #1
 80136c8:	9304      	str	r3, [sp, #16]
 80136ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136ce:	4826      	ldr	r0, [pc, #152]	; (8013768 <_svfiprintf_r+0x1f0>)
 80136d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80136d4:	2206      	movs	r2, #6
 80136d6:	f7ec fd83 	bl	80001e0 <memchr>
 80136da:	2800      	cmp	r0, #0
 80136dc:	d038      	beq.n	8013750 <_svfiprintf_r+0x1d8>
 80136de:	4b23      	ldr	r3, [pc, #140]	; (801376c <_svfiprintf_r+0x1f4>)
 80136e0:	bb1b      	cbnz	r3, 801372a <_svfiprintf_r+0x1b2>
 80136e2:	9b03      	ldr	r3, [sp, #12]
 80136e4:	3307      	adds	r3, #7
 80136e6:	f023 0307 	bic.w	r3, r3, #7
 80136ea:	3308      	adds	r3, #8
 80136ec:	9303      	str	r3, [sp, #12]
 80136ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136f0:	4433      	add	r3, r6
 80136f2:	9309      	str	r3, [sp, #36]	; 0x24
 80136f4:	e767      	b.n	80135c6 <_svfiprintf_r+0x4e>
 80136f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80136fa:	460c      	mov	r4, r1
 80136fc:	2001      	movs	r0, #1
 80136fe:	e7a5      	b.n	801364c <_svfiprintf_r+0xd4>
 8013700:	2300      	movs	r3, #0
 8013702:	3401      	adds	r4, #1
 8013704:	9305      	str	r3, [sp, #20]
 8013706:	4619      	mov	r1, r3
 8013708:	f04f 0c0a 	mov.w	ip, #10
 801370c:	4620      	mov	r0, r4
 801370e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013712:	3a30      	subs	r2, #48	; 0x30
 8013714:	2a09      	cmp	r2, #9
 8013716:	d903      	bls.n	8013720 <_svfiprintf_r+0x1a8>
 8013718:	2b00      	cmp	r3, #0
 801371a:	d0c5      	beq.n	80136a8 <_svfiprintf_r+0x130>
 801371c:	9105      	str	r1, [sp, #20]
 801371e:	e7c3      	b.n	80136a8 <_svfiprintf_r+0x130>
 8013720:	fb0c 2101 	mla	r1, ip, r1, r2
 8013724:	4604      	mov	r4, r0
 8013726:	2301      	movs	r3, #1
 8013728:	e7f0      	b.n	801370c <_svfiprintf_r+0x194>
 801372a:	ab03      	add	r3, sp, #12
 801372c:	9300      	str	r3, [sp, #0]
 801372e:	462a      	mov	r2, r5
 8013730:	4b0f      	ldr	r3, [pc, #60]	; (8013770 <_svfiprintf_r+0x1f8>)
 8013732:	a904      	add	r1, sp, #16
 8013734:	4638      	mov	r0, r7
 8013736:	f7fd ff7b 	bl	8011630 <_printf_float>
 801373a:	1c42      	adds	r2, r0, #1
 801373c:	4606      	mov	r6, r0
 801373e:	d1d6      	bne.n	80136ee <_svfiprintf_r+0x176>
 8013740:	89ab      	ldrh	r3, [r5, #12]
 8013742:	065b      	lsls	r3, r3, #25
 8013744:	f53f af2c 	bmi.w	80135a0 <_svfiprintf_r+0x28>
 8013748:	9809      	ldr	r0, [sp, #36]	; 0x24
 801374a:	b01d      	add	sp, #116	; 0x74
 801374c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013750:	ab03      	add	r3, sp, #12
 8013752:	9300      	str	r3, [sp, #0]
 8013754:	462a      	mov	r2, r5
 8013756:	4b06      	ldr	r3, [pc, #24]	; (8013770 <_svfiprintf_r+0x1f8>)
 8013758:	a904      	add	r1, sp, #16
 801375a:	4638      	mov	r0, r7
 801375c:	f7fe fa0c 	bl	8011b78 <_printf_i>
 8013760:	e7eb      	b.n	801373a <_svfiprintf_r+0x1c2>
 8013762:	bf00      	nop
 8013764:	080ca3e4 	.word	0x080ca3e4
 8013768:	080ca3ee 	.word	0x080ca3ee
 801376c:	08011631 	.word	0x08011631
 8013770:	080134c3 	.word	0x080134c3
 8013774:	080ca3ea 	.word	0x080ca3ea

08013778 <__sfputc_r>:
 8013778:	6893      	ldr	r3, [r2, #8]
 801377a:	3b01      	subs	r3, #1
 801377c:	2b00      	cmp	r3, #0
 801377e:	b410      	push	{r4}
 8013780:	6093      	str	r3, [r2, #8]
 8013782:	da08      	bge.n	8013796 <__sfputc_r+0x1e>
 8013784:	6994      	ldr	r4, [r2, #24]
 8013786:	42a3      	cmp	r3, r4
 8013788:	db01      	blt.n	801378e <__sfputc_r+0x16>
 801378a:	290a      	cmp	r1, #10
 801378c:	d103      	bne.n	8013796 <__sfputc_r+0x1e>
 801378e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013792:	f000 b98f 	b.w	8013ab4 <__swbuf_r>
 8013796:	6813      	ldr	r3, [r2, #0]
 8013798:	1c58      	adds	r0, r3, #1
 801379a:	6010      	str	r0, [r2, #0]
 801379c:	7019      	strb	r1, [r3, #0]
 801379e:	4608      	mov	r0, r1
 80137a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137a4:	4770      	bx	lr

080137a6 <__sfputs_r>:
 80137a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137a8:	4606      	mov	r6, r0
 80137aa:	460f      	mov	r7, r1
 80137ac:	4614      	mov	r4, r2
 80137ae:	18d5      	adds	r5, r2, r3
 80137b0:	42ac      	cmp	r4, r5
 80137b2:	d101      	bne.n	80137b8 <__sfputs_r+0x12>
 80137b4:	2000      	movs	r0, #0
 80137b6:	e007      	b.n	80137c8 <__sfputs_r+0x22>
 80137b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137bc:	463a      	mov	r2, r7
 80137be:	4630      	mov	r0, r6
 80137c0:	f7ff ffda 	bl	8013778 <__sfputc_r>
 80137c4:	1c43      	adds	r3, r0, #1
 80137c6:	d1f3      	bne.n	80137b0 <__sfputs_r+0xa>
 80137c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080137cc <_vfiprintf_r>:
 80137cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137d0:	460d      	mov	r5, r1
 80137d2:	b09d      	sub	sp, #116	; 0x74
 80137d4:	4614      	mov	r4, r2
 80137d6:	4698      	mov	r8, r3
 80137d8:	4606      	mov	r6, r0
 80137da:	b118      	cbz	r0, 80137e4 <_vfiprintf_r+0x18>
 80137dc:	6983      	ldr	r3, [r0, #24]
 80137de:	b90b      	cbnz	r3, 80137e4 <_vfiprintf_r+0x18>
 80137e0:	f7ff fa0a 	bl	8012bf8 <__sinit>
 80137e4:	4b89      	ldr	r3, [pc, #548]	; (8013a0c <_vfiprintf_r+0x240>)
 80137e6:	429d      	cmp	r5, r3
 80137e8:	d11b      	bne.n	8013822 <_vfiprintf_r+0x56>
 80137ea:	6875      	ldr	r5, [r6, #4]
 80137ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137ee:	07d9      	lsls	r1, r3, #31
 80137f0:	d405      	bmi.n	80137fe <_vfiprintf_r+0x32>
 80137f2:	89ab      	ldrh	r3, [r5, #12]
 80137f4:	059a      	lsls	r2, r3, #22
 80137f6:	d402      	bmi.n	80137fe <_vfiprintf_r+0x32>
 80137f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137fa:	f7ff faa0 	bl	8012d3e <__retarget_lock_acquire_recursive>
 80137fe:	89ab      	ldrh	r3, [r5, #12]
 8013800:	071b      	lsls	r3, r3, #28
 8013802:	d501      	bpl.n	8013808 <_vfiprintf_r+0x3c>
 8013804:	692b      	ldr	r3, [r5, #16]
 8013806:	b9eb      	cbnz	r3, 8013844 <_vfiprintf_r+0x78>
 8013808:	4629      	mov	r1, r5
 801380a:	4630      	mov	r0, r6
 801380c:	f000 f9b6 	bl	8013b7c <__swsetup_r>
 8013810:	b1c0      	cbz	r0, 8013844 <_vfiprintf_r+0x78>
 8013812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013814:	07dc      	lsls	r4, r3, #31
 8013816:	d50e      	bpl.n	8013836 <_vfiprintf_r+0x6a>
 8013818:	f04f 30ff 	mov.w	r0, #4294967295
 801381c:	b01d      	add	sp, #116	; 0x74
 801381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013822:	4b7b      	ldr	r3, [pc, #492]	; (8013a10 <_vfiprintf_r+0x244>)
 8013824:	429d      	cmp	r5, r3
 8013826:	d101      	bne.n	801382c <_vfiprintf_r+0x60>
 8013828:	68b5      	ldr	r5, [r6, #8]
 801382a:	e7df      	b.n	80137ec <_vfiprintf_r+0x20>
 801382c:	4b79      	ldr	r3, [pc, #484]	; (8013a14 <_vfiprintf_r+0x248>)
 801382e:	429d      	cmp	r5, r3
 8013830:	bf08      	it	eq
 8013832:	68f5      	ldreq	r5, [r6, #12]
 8013834:	e7da      	b.n	80137ec <_vfiprintf_r+0x20>
 8013836:	89ab      	ldrh	r3, [r5, #12]
 8013838:	0598      	lsls	r0, r3, #22
 801383a:	d4ed      	bmi.n	8013818 <_vfiprintf_r+0x4c>
 801383c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801383e:	f7ff fa7f 	bl	8012d40 <__retarget_lock_release_recursive>
 8013842:	e7e9      	b.n	8013818 <_vfiprintf_r+0x4c>
 8013844:	2300      	movs	r3, #0
 8013846:	9309      	str	r3, [sp, #36]	; 0x24
 8013848:	2320      	movs	r3, #32
 801384a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801384e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013852:	2330      	movs	r3, #48	; 0x30
 8013854:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013a18 <_vfiprintf_r+0x24c>
 8013858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801385c:	f04f 0901 	mov.w	r9, #1
 8013860:	4623      	mov	r3, r4
 8013862:	469a      	mov	sl, r3
 8013864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013868:	b10a      	cbz	r2, 801386e <_vfiprintf_r+0xa2>
 801386a:	2a25      	cmp	r2, #37	; 0x25
 801386c:	d1f9      	bne.n	8013862 <_vfiprintf_r+0x96>
 801386e:	ebba 0b04 	subs.w	fp, sl, r4
 8013872:	d00b      	beq.n	801388c <_vfiprintf_r+0xc0>
 8013874:	465b      	mov	r3, fp
 8013876:	4622      	mov	r2, r4
 8013878:	4629      	mov	r1, r5
 801387a:	4630      	mov	r0, r6
 801387c:	f7ff ff93 	bl	80137a6 <__sfputs_r>
 8013880:	3001      	adds	r0, #1
 8013882:	f000 80aa 	beq.w	80139da <_vfiprintf_r+0x20e>
 8013886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013888:	445a      	add	r2, fp
 801388a:	9209      	str	r2, [sp, #36]	; 0x24
 801388c:	f89a 3000 	ldrb.w	r3, [sl]
 8013890:	2b00      	cmp	r3, #0
 8013892:	f000 80a2 	beq.w	80139da <_vfiprintf_r+0x20e>
 8013896:	2300      	movs	r3, #0
 8013898:	f04f 32ff 	mov.w	r2, #4294967295
 801389c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80138a0:	f10a 0a01 	add.w	sl, sl, #1
 80138a4:	9304      	str	r3, [sp, #16]
 80138a6:	9307      	str	r3, [sp, #28]
 80138a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80138ac:	931a      	str	r3, [sp, #104]	; 0x68
 80138ae:	4654      	mov	r4, sl
 80138b0:	2205      	movs	r2, #5
 80138b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138b6:	4858      	ldr	r0, [pc, #352]	; (8013a18 <_vfiprintf_r+0x24c>)
 80138b8:	f7ec fc92 	bl	80001e0 <memchr>
 80138bc:	9a04      	ldr	r2, [sp, #16]
 80138be:	b9d8      	cbnz	r0, 80138f8 <_vfiprintf_r+0x12c>
 80138c0:	06d1      	lsls	r1, r2, #27
 80138c2:	bf44      	itt	mi
 80138c4:	2320      	movmi	r3, #32
 80138c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80138ca:	0713      	lsls	r3, r2, #28
 80138cc:	bf44      	itt	mi
 80138ce:	232b      	movmi	r3, #43	; 0x2b
 80138d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80138d4:	f89a 3000 	ldrb.w	r3, [sl]
 80138d8:	2b2a      	cmp	r3, #42	; 0x2a
 80138da:	d015      	beq.n	8013908 <_vfiprintf_r+0x13c>
 80138dc:	9a07      	ldr	r2, [sp, #28]
 80138de:	4654      	mov	r4, sl
 80138e0:	2000      	movs	r0, #0
 80138e2:	f04f 0c0a 	mov.w	ip, #10
 80138e6:	4621      	mov	r1, r4
 80138e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138ec:	3b30      	subs	r3, #48	; 0x30
 80138ee:	2b09      	cmp	r3, #9
 80138f0:	d94e      	bls.n	8013990 <_vfiprintf_r+0x1c4>
 80138f2:	b1b0      	cbz	r0, 8013922 <_vfiprintf_r+0x156>
 80138f4:	9207      	str	r2, [sp, #28]
 80138f6:	e014      	b.n	8013922 <_vfiprintf_r+0x156>
 80138f8:	eba0 0308 	sub.w	r3, r0, r8
 80138fc:	fa09 f303 	lsl.w	r3, r9, r3
 8013900:	4313      	orrs	r3, r2
 8013902:	9304      	str	r3, [sp, #16]
 8013904:	46a2      	mov	sl, r4
 8013906:	e7d2      	b.n	80138ae <_vfiprintf_r+0xe2>
 8013908:	9b03      	ldr	r3, [sp, #12]
 801390a:	1d19      	adds	r1, r3, #4
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	9103      	str	r1, [sp, #12]
 8013910:	2b00      	cmp	r3, #0
 8013912:	bfbb      	ittet	lt
 8013914:	425b      	neglt	r3, r3
 8013916:	f042 0202 	orrlt.w	r2, r2, #2
 801391a:	9307      	strge	r3, [sp, #28]
 801391c:	9307      	strlt	r3, [sp, #28]
 801391e:	bfb8      	it	lt
 8013920:	9204      	strlt	r2, [sp, #16]
 8013922:	7823      	ldrb	r3, [r4, #0]
 8013924:	2b2e      	cmp	r3, #46	; 0x2e
 8013926:	d10c      	bne.n	8013942 <_vfiprintf_r+0x176>
 8013928:	7863      	ldrb	r3, [r4, #1]
 801392a:	2b2a      	cmp	r3, #42	; 0x2a
 801392c:	d135      	bne.n	801399a <_vfiprintf_r+0x1ce>
 801392e:	9b03      	ldr	r3, [sp, #12]
 8013930:	1d1a      	adds	r2, r3, #4
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	9203      	str	r2, [sp, #12]
 8013936:	2b00      	cmp	r3, #0
 8013938:	bfb8      	it	lt
 801393a:	f04f 33ff 	movlt.w	r3, #4294967295
 801393e:	3402      	adds	r4, #2
 8013940:	9305      	str	r3, [sp, #20]
 8013942:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013a28 <_vfiprintf_r+0x25c>
 8013946:	7821      	ldrb	r1, [r4, #0]
 8013948:	2203      	movs	r2, #3
 801394a:	4650      	mov	r0, sl
 801394c:	f7ec fc48 	bl	80001e0 <memchr>
 8013950:	b140      	cbz	r0, 8013964 <_vfiprintf_r+0x198>
 8013952:	2340      	movs	r3, #64	; 0x40
 8013954:	eba0 000a 	sub.w	r0, r0, sl
 8013958:	fa03 f000 	lsl.w	r0, r3, r0
 801395c:	9b04      	ldr	r3, [sp, #16]
 801395e:	4303      	orrs	r3, r0
 8013960:	3401      	adds	r4, #1
 8013962:	9304      	str	r3, [sp, #16]
 8013964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013968:	482c      	ldr	r0, [pc, #176]	; (8013a1c <_vfiprintf_r+0x250>)
 801396a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801396e:	2206      	movs	r2, #6
 8013970:	f7ec fc36 	bl	80001e0 <memchr>
 8013974:	2800      	cmp	r0, #0
 8013976:	d03f      	beq.n	80139f8 <_vfiprintf_r+0x22c>
 8013978:	4b29      	ldr	r3, [pc, #164]	; (8013a20 <_vfiprintf_r+0x254>)
 801397a:	bb1b      	cbnz	r3, 80139c4 <_vfiprintf_r+0x1f8>
 801397c:	9b03      	ldr	r3, [sp, #12]
 801397e:	3307      	adds	r3, #7
 8013980:	f023 0307 	bic.w	r3, r3, #7
 8013984:	3308      	adds	r3, #8
 8013986:	9303      	str	r3, [sp, #12]
 8013988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801398a:	443b      	add	r3, r7
 801398c:	9309      	str	r3, [sp, #36]	; 0x24
 801398e:	e767      	b.n	8013860 <_vfiprintf_r+0x94>
 8013990:	fb0c 3202 	mla	r2, ip, r2, r3
 8013994:	460c      	mov	r4, r1
 8013996:	2001      	movs	r0, #1
 8013998:	e7a5      	b.n	80138e6 <_vfiprintf_r+0x11a>
 801399a:	2300      	movs	r3, #0
 801399c:	3401      	adds	r4, #1
 801399e:	9305      	str	r3, [sp, #20]
 80139a0:	4619      	mov	r1, r3
 80139a2:	f04f 0c0a 	mov.w	ip, #10
 80139a6:	4620      	mov	r0, r4
 80139a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139ac:	3a30      	subs	r2, #48	; 0x30
 80139ae:	2a09      	cmp	r2, #9
 80139b0:	d903      	bls.n	80139ba <_vfiprintf_r+0x1ee>
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d0c5      	beq.n	8013942 <_vfiprintf_r+0x176>
 80139b6:	9105      	str	r1, [sp, #20]
 80139b8:	e7c3      	b.n	8013942 <_vfiprintf_r+0x176>
 80139ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80139be:	4604      	mov	r4, r0
 80139c0:	2301      	movs	r3, #1
 80139c2:	e7f0      	b.n	80139a6 <_vfiprintf_r+0x1da>
 80139c4:	ab03      	add	r3, sp, #12
 80139c6:	9300      	str	r3, [sp, #0]
 80139c8:	462a      	mov	r2, r5
 80139ca:	4b16      	ldr	r3, [pc, #88]	; (8013a24 <_vfiprintf_r+0x258>)
 80139cc:	a904      	add	r1, sp, #16
 80139ce:	4630      	mov	r0, r6
 80139d0:	f7fd fe2e 	bl	8011630 <_printf_float>
 80139d4:	4607      	mov	r7, r0
 80139d6:	1c78      	adds	r0, r7, #1
 80139d8:	d1d6      	bne.n	8013988 <_vfiprintf_r+0x1bc>
 80139da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80139dc:	07d9      	lsls	r1, r3, #31
 80139de:	d405      	bmi.n	80139ec <_vfiprintf_r+0x220>
 80139e0:	89ab      	ldrh	r3, [r5, #12]
 80139e2:	059a      	lsls	r2, r3, #22
 80139e4:	d402      	bmi.n	80139ec <_vfiprintf_r+0x220>
 80139e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80139e8:	f7ff f9aa 	bl	8012d40 <__retarget_lock_release_recursive>
 80139ec:	89ab      	ldrh	r3, [r5, #12]
 80139ee:	065b      	lsls	r3, r3, #25
 80139f0:	f53f af12 	bmi.w	8013818 <_vfiprintf_r+0x4c>
 80139f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139f6:	e711      	b.n	801381c <_vfiprintf_r+0x50>
 80139f8:	ab03      	add	r3, sp, #12
 80139fa:	9300      	str	r3, [sp, #0]
 80139fc:	462a      	mov	r2, r5
 80139fe:	4b09      	ldr	r3, [pc, #36]	; (8013a24 <_vfiprintf_r+0x258>)
 8013a00:	a904      	add	r1, sp, #16
 8013a02:	4630      	mov	r0, r6
 8013a04:	f7fe f8b8 	bl	8011b78 <_printf_i>
 8013a08:	e7e4      	b.n	80139d4 <_vfiprintf_r+0x208>
 8013a0a:	bf00      	nop
 8013a0c:	080ca244 	.word	0x080ca244
 8013a10:	080ca264 	.word	0x080ca264
 8013a14:	080ca224 	.word	0x080ca224
 8013a18:	080ca3e4 	.word	0x080ca3e4
 8013a1c:	080ca3ee 	.word	0x080ca3ee
 8013a20:	08011631 	.word	0x08011631
 8013a24:	080137a7 	.word	0x080137a7
 8013a28:	080ca3ea 	.word	0x080ca3ea

08013a2c <__sread>:
 8013a2c:	b510      	push	{r4, lr}
 8013a2e:	460c      	mov	r4, r1
 8013a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a34:	f000 fabc 	bl	8013fb0 <_read_r>
 8013a38:	2800      	cmp	r0, #0
 8013a3a:	bfab      	itete	ge
 8013a3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8013a40:	181b      	addge	r3, r3, r0
 8013a42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a46:	bfac      	ite	ge
 8013a48:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a4a:	81a3      	strhlt	r3, [r4, #12]
 8013a4c:	bd10      	pop	{r4, pc}

08013a4e <__swrite>:
 8013a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a52:	461f      	mov	r7, r3
 8013a54:	898b      	ldrh	r3, [r1, #12]
 8013a56:	05db      	lsls	r3, r3, #23
 8013a58:	4605      	mov	r5, r0
 8013a5a:	460c      	mov	r4, r1
 8013a5c:	4616      	mov	r6, r2
 8013a5e:	d505      	bpl.n	8013a6c <__swrite+0x1e>
 8013a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a64:	2302      	movs	r3, #2
 8013a66:	2200      	movs	r2, #0
 8013a68:	f000 f9f8 	bl	8013e5c <_lseek_r>
 8013a6c:	89a3      	ldrh	r3, [r4, #12]
 8013a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013a76:	81a3      	strh	r3, [r4, #12]
 8013a78:	4632      	mov	r2, r6
 8013a7a:	463b      	mov	r3, r7
 8013a7c:	4628      	mov	r0, r5
 8013a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a82:	f000 b869 	b.w	8013b58 <_write_r>

08013a86 <__sseek>:
 8013a86:	b510      	push	{r4, lr}
 8013a88:	460c      	mov	r4, r1
 8013a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a8e:	f000 f9e5 	bl	8013e5c <_lseek_r>
 8013a92:	1c43      	adds	r3, r0, #1
 8013a94:	89a3      	ldrh	r3, [r4, #12]
 8013a96:	bf15      	itete	ne
 8013a98:	6560      	strne	r0, [r4, #84]	; 0x54
 8013a9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013a9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013aa2:	81a3      	strheq	r3, [r4, #12]
 8013aa4:	bf18      	it	ne
 8013aa6:	81a3      	strhne	r3, [r4, #12]
 8013aa8:	bd10      	pop	{r4, pc}

08013aaa <__sclose>:
 8013aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aae:	f000 b8f1 	b.w	8013c94 <_close_r>
	...

08013ab4 <__swbuf_r>:
 8013ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ab6:	460e      	mov	r6, r1
 8013ab8:	4614      	mov	r4, r2
 8013aba:	4605      	mov	r5, r0
 8013abc:	b118      	cbz	r0, 8013ac6 <__swbuf_r+0x12>
 8013abe:	6983      	ldr	r3, [r0, #24]
 8013ac0:	b90b      	cbnz	r3, 8013ac6 <__swbuf_r+0x12>
 8013ac2:	f7ff f899 	bl	8012bf8 <__sinit>
 8013ac6:	4b21      	ldr	r3, [pc, #132]	; (8013b4c <__swbuf_r+0x98>)
 8013ac8:	429c      	cmp	r4, r3
 8013aca:	d12b      	bne.n	8013b24 <__swbuf_r+0x70>
 8013acc:	686c      	ldr	r4, [r5, #4]
 8013ace:	69a3      	ldr	r3, [r4, #24]
 8013ad0:	60a3      	str	r3, [r4, #8]
 8013ad2:	89a3      	ldrh	r3, [r4, #12]
 8013ad4:	071a      	lsls	r2, r3, #28
 8013ad6:	d52f      	bpl.n	8013b38 <__swbuf_r+0x84>
 8013ad8:	6923      	ldr	r3, [r4, #16]
 8013ada:	b36b      	cbz	r3, 8013b38 <__swbuf_r+0x84>
 8013adc:	6923      	ldr	r3, [r4, #16]
 8013ade:	6820      	ldr	r0, [r4, #0]
 8013ae0:	1ac0      	subs	r0, r0, r3
 8013ae2:	6963      	ldr	r3, [r4, #20]
 8013ae4:	b2f6      	uxtb	r6, r6
 8013ae6:	4283      	cmp	r3, r0
 8013ae8:	4637      	mov	r7, r6
 8013aea:	dc04      	bgt.n	8013af6 <__swbuf_r+0x42>
 8013aec:	4621      	mov	r1, r4
 8013aee:	4628      	mov	r0, r5
 8013af0:	f000 f966 	bl	8013dc0 <_fflush_r>
 8013af4:	bb30      	cbnz	r0, 8013b44 <__swbuf_r+0x90>
 8013af6:	68a3      	ldr	r3, [r4, #8]
 8013af8:	3b01      	subs	r3, #1
 8013afa:	60a3      	str	r3, [r4, #8]
 8013afc:	6823      	ldr	r3, [r4, #0]
 8013afe:	1c5a      	adds	r2, r3, #1
 8013b00:	6022      	str	r2, [r4, #0]
 8013b02:	701e      	strb	r6, [r3, #0]
 8013b04:	6963      	ldr	r3, [r4, #20]
 8013b06:	3001      	adds	r0, #1
 8013b08:	4283      	cmp	r3, r0
 8013b0a:	d004      	beq.n	8013b16 <__swbuf_r+0x62>
 8013b0c:	89a3      	ldrh	r3, [r4, #12]
 8013b0e:	07db      	lsls	r3, r3, #31
 8013b10:	d506      	bpl.n	8013b20 <__swbuf_r+0x6c>
 8013b12:	2e0a      	cmp	r6, #10
 8013b14:	d104      	bne.n	8013b20 <__swbuf_r+0x6c>
 8013b16:	4621      	mov	r1, r4
 8013b18:	4628      	mov	r0, r5
 8013b1a:	f000 f951 	bl	8013dc0 <_fflush_r>
 8013b1e:	b988      	cbnz	r0, 8013b44 <__swbuf_r+0x90>
 8013b20:	4638      	mov	r0, r7
 8013b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b24:	4b0a      	ldr	r3, [pc, #40]	; (8013b50 <__swbuf_r+0x9c>)
 8013b26:	429c      	cmp	r4, r3
 8013b28:	d101      	bne.n	8013b2e <__swbuf_r+0x7a>
 8013b2a:	68ac      	ldr	r4, [r5, #8]
 8013b2c:	e7cf      	b.n	8013ace <__swbuf_r+0x1a>
 8013b2e:	4b09      	ldr	r3, [pc, #36]	; (8013b54 <__swbuf_r+0xa0>)
 8013b30:	429c      	cmp	r4, r3
 8013b32:	bf08      	it	eq
 8013b34:	68ec      	ldreq	r4, [r5, #12]
 8013b36:	e7ca      	b.n	8013ace <__swbuf_r+0x1a>
 8013b38:	4621      	mov	r1, r4
 8013b3a:	4628      	mov	r0, r5
 8013b3c:	f000 f81e 	bl	8013b7c <__swsetup_r>
 8013b40:	2800      	cmp	r0, #0
 8013b42:	d0cb      	beq.n	8013adc <__swbuf_r+0x28>
 8013b44:	f04f 37ff 	mov.w	r7, #4294967295
 8013b48:	e7ea      	b.n	8013b20 <__swbuf_r+0x6c>
 8013b4a:	bf00      	nop
 8013b4c:	080ca244 	.word	0x080ca244
 8013b50:	080ca264 	.word	0x080ca264
 8013b54:	080ca224 	.word	0x080ca224

08013b58 <_write_r>:
 8013b58:	b538      	push	{r3, r4, r5, lr}
 8013b5a:	4d07      	ldr	r5, [pc, #28]	; (8013b78 <_write_r+0x20>)
 8013b5c:	4604      	mov	r4, r0
 8013b5e:	4608      	mov	r0, r1
 8013b60:	4611      	mov	r1, r2
 8013b62:	2200      	movs	r2, #0
 8013b64:	602a      	str	r2, [r5, #0]
 8013b66:	461a      	mov	r2, r3
 8013b68:	f001 f83c 	bl	8014be4 <_write>
 8013b6c:	1c43      	adds	r3, r0, #1
 8013b6e:	d102      	bne.n	8013b76 <_write_r+0x1e>
 8013b70:	682b      	ldr	r3, [r5, #0]
 8013b72:	b103      	cbz	r3, 8013b76 <_write_r+0x1e>
 8013b74:	6023      	str	r3, [r4, #0]
 8013b76:	bd38      	pop	{r3, r4, r5, pc}
 8013b78:	20011314 	.word	0x20011314

08013b7c <__swsetup_r>:
 8013b7c:	4b32      	ldr	r3, [pc, #200]	; (8013c48 <__swsetup_r+0xcc>)
 8013b7e:	b570      	push	{r4, r5, r6, lr}
 8013b80:	681d      	ldr	r5, [r3, #0]
 8013b82:	4606      	mov	r6, r0
 8013b84:	460c      	mov	r4, r1
 8013b86:	b125      	cbz	r5, 8013b92 <__swsetup_r+0x16>
 8013b88:	69ab      	ldr	r3, [r5, #24]
 8013b8a:	b913      	cbnz	r3, 8013b92 <__swsetup_r+0x16>
 8013b8c:	4628      	mov	r0, r5
 8013b8e:	f7ff f833 	bl	8012bf8 <__sinit>
 8013b92:	4b2e      	ldr	r3, [pc, #184]	; (8013c4c <__swsetup_r+0xd0>)
 8013b94:	429c      	cmp	r4, r3
 8013b96:	d10f      	bne.n	8013bb8 <__swsetup_r+0x3c>
 8013b98:	686c      	ldr	r4, [r5, #4]
 8013b9a:	89a3      	ldrh	r3, [r4, #12]
 8013b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ba0:	0719      	lsls	r1, r3, #28
 8013ba2:	d42c      	bmi.n	8013bfe <__swsetup_r+0x82>
 8013ba4:	06dd      	lsls	r5, r3, #27
 8013ba6:	d411      	bmi.n	8013bcc <__swsetup_r+0x50>
 8013ba8:	2309      	movs	r3, #9
 8013baa:	6033      	str	r3, [r6, #0]
 8013bac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013bb0:	81a3      	strh	r3, [r4, #12]
 8013bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8013bb6:	e03e      	b.n	8013c36 <__swsetup_r+0xba>
 8013bb8:	4b25      	ldr	r3, [pc, #148]	; (8013c50 <__swsetup_r+0xd4>)
 8013bba:	429c      	cmp	r4, r3
 8013bbc:	d101      	bne.n	8013bc2 <__swsetup_r+0x46>
 8013bbe:	68ac      	ldr	r4, [r5, #8]
 8013bc0:	e7eb      	b.n	8013b9a <__swsetup_r+0x1e>
 8013bc2:	4b24      	ldr	r3, [pc, #144]	; (8013c54 <__swsetup_r+0xd8>)
 8013bc4:	429c      	cmp	r4, r3
 8013bc6:	bf08      	it	eq
 8013bc8:	68ec      	ldreq	r4, [r5, #12]
 8013bca:	e7e6      	b.n	8013b9a <__swsetup_r+0x1e>
 8013bcc:	0758      	lsls	r0, r3, #29
 8013bce:	d512      	bpl.n	8013bf6 <__swsetup_r+0x7a>
 8013bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013bd2:	b141      	cbz	r1, 8013be6 <__swsetup_r+0x6a>
 8013bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013bd8:	4299      	cmp	r1, r3
 8013bda:	d002      	beq.n	8013be2 <__swsetup_r+0x66>
 8013bdc:	4630      	mov	r0, r6
 8013bde:	f7fd fbdd 	bl	801139c <_free_r>
 8013be2:	2300      	movs	r3, #0
 8013be4:	6363      	str	r3, [r4, #52]	; 0x34
 8013be6:	89a3      	ldrh	r3, [r4, #12]
 8013be8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013bec:	81a3      	strh	r3, [r4, #12]
 8013bee:	2300      	movs	r3, #0
 8013bf0:	6063      	str	r3, [r4, #4]
 8013bf2:	6923      	ldr	r3, [r4, #16]
 8013bf4:	6023      	str	r3, [r4, #0]
 8013bf6:	89a3      	ldrh	r3, [r4, #12]
 8013bf8:	f043 0308 	orr.w	r3, r3, #8
 8013bfc:	81a3      	strh	r3, [r4, #12]
 8013bfe:	6923      	ldr	r3, [r4, #16]
 8013c00:	b94b      	cbnz	r3, 8013c16 <__swsetup_r+0x9a>
 8013c02:	89a3      	ldrh	r3, [r4, #12]
 8013c04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c0c:	d003      	beq.n	8013c16 <__swsetup_r+0x9a>
 8013c0e:	4621      	mov	r1, r4
 8013c10:	4630      	mov	r0, r6
 8013c12:	f000 f959 	bl	8013ec8 <__smakebuf_r>
 8013c16:	89a0      	ldrh	r0, [r4, #12]
 8013c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c1c:	f010 0301 	ands.w	r3, r0, #1
 8013c20:	d00a      	beq.n	8013c38 <__swsetup_r+0xbc>
 8013c22:	2300      	movs	r3, #0
 8013c24:	60a3      	str	r3, [r4, #8]
 8013c26:	6963      	ldr	r3, [r4, #20]
 8013c28:	425b      	negs	r3, r3
 8013c2a:	61a3      	str	r3, [r4, #24]
 8013c2c:	6923      	ldr	r3, [r4, #16]
 8013c2e:	b943      	cbnz	r3, 8013c42 <__swsetup_r+0xc6>
 8013c30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013c34:	d1ba      	bne.n	8013bac <__swsetup_r+0x30>
 8013c36:	bd70      	pop	{r4, r5, r6, pc}
 8013c38:	0781      	lsls	r1, r0, #30
 8013c3a:	bf58      	it	pl
 8013c3c:	6963      	ldrpl	r3, [r4, #20]
 8013c3e:	60a3      	str	r3, [r4, #8]
 8013c40:	e7f4      	b.n	8013c2c <__swsetup_r+0xb0>
 8013c42:	2000      	movs	r0, #0
 8013c44:	e7f7      	b.n	8013c36 <__swsetup_r+0xba>
 8013c46:	bf00      	nop
 8013c48:	20001490 	.word	0x20001490
 8013c4c:	080ca244 	.word	0x080ca244
 8013c50:	080ca264 	.word	0x080ca264
 8013c54:	080ca224 	.word	0x080ca224

08013c58 <__assert_func>:
 8013c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c5a:	4614      	mov	r4, r2
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	4b09      	ldr	r3, [pc, #36]	; (8013c84 <__assert_func+0x2c>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	4605      	mov	r5, r0
 8013c64:	68d8      	ldr	r0, [r3, #12]
 8013c66:	b14c      	cbz	r4, 8013c7c <__assert_func+0x24>
 8013c68:	4b07      	ldr	r3, [pc, #28]	; (8013c88 <__assert_func+0x30>)
 8013c6a:	9100      	str	r1, [sp, #0]
 8013c6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013c70:	4906      	ldr	r1, [pc, #24]	; (8013c8c <__assert_func+0x34>)
 8013c72:	462b      	mov	r3, r5
 8013c74:	f000 f8e0 	bl	8013e38 <fiprintf>
 8013c78:	f000 f9b9 	bl	8013fee <abort>
 8013c7c:	4b04      	ldr	r3, [pc, #16]	; (8013c90 <__assert_func+0x38>)
 8013c7e:	461c      	mov	r4, r3
 8013c80:	e7f3      	b.n	8013c6a <__assert_func+0x12>
 8013c82:	bf00      	nop
 8013c84:	20001490 	.word	0x20001490
 8013c88:	080ca3f5 	.word	0x080ca3f5
 8013c8c:	080ca402 	.word	0x080ca402
 8013c90:	080ca430 	.word	0x080ca430

08013c94 <_close_r>:
 8013c94:	b538      	push	{r3, r4, r5, lr}
 8013c96:	4d06      	ldr	r5, [pc, #24]	; (8013cb0 <_close_r+0x1c>)
 8013c98:	2300      	movs	r3, #0
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	4608      	mov	r0, r1
 8013c9e:	602b      	str	r3, [r5, #0]
 8013ca0:	f000 ff68 	bl	8014b74 <_close>
 8013ca4:	1c43      	adds	r3, r0, #1
 8013ca6:	d102      	bne.n	8013cae <_close_r+0x1a>
 8013ca8:	682b      	ldr	r3, [r5, #0]
 8013caa:	b103      	cbz	r3, 8013cae <_close_r+0x1a>
 8013cac:	6023      	str	r3, [r4, #0]
 8013cae:	bd38      	pop	{r3, r4, r5, pc}
 8013cb0:	20011314 	.word	0x20011314

08013cb4 <__sflush_r>:
 8013cb4:	898a      	ldrh	r2, [r1, #12]
 8013cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cba:	4605      	mov	r5, r0
 8013cbc:	0710      	lsls	r0, r2, #28
 8013cbe:	460c      	mov	r4, r1
 8013cc0:	d458      	bmi.n	8013d74 <__sflush_r+0xc0>
 8013cc2:	684b      	ldr	r3, [r1, #4]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	dc05      	bgt.n	8013cd4 <__sflush_r+0x20>
 8013cc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	dc02      	bgt.n	8013cd4 <__sflush_r+0x20>
 8013cce:	2000      	movs	r0, #0
 8013cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013cd6:	2e00      	cmp	r6, #0
 8013cd8:	d0f9      	beq.n	8013cce <__sflush_r+0x1a>
 8013cda:	2300      	movs	r3, #0
 8013cdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013ce0:	682f      	ldr	r7, [r5, #0]
 8013ce2:	602b      	str	r3, [r5, #0]
 8013ce4:	d032      	beq.n	8013d4c <__sflush_r+0x98>
 8013ce6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013ce8:	89a3      	ldrh	r3, [r4, #12]
 8013cea:	075a      	lsls	r2, r3, #29
 8013cec:	d505      	bpl.n	8013cfa <__sflush_r+0x46>
 8013cee:	6863      	ldr	r3, [r4, #4]
 8013cf0:	1ac0      	subs	r0, r0, r3
 8013cf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013cf4:	b10b      	cbz	r3, 8013cfa <__sflush_r+0x46>
 8013cf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013cf8:	1ac0      	subs	r0, r0, r3
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	4602      	mov	r2, r0
 8013cfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d00:	6a21      	ldr	r1, [r4, #32]
 8013d02:	4628      	mov	r0, r5
 8013d04:	47b0      	blx	r6
 8013d06:	1c43      	adds	r3, r0, #1
 8013d08:	89a3      	ldrh	r3, [r4, #12]
 8013d0a:	d106      	bne.n	8013d1a <__sflush_r+0x66>
 8013d0c:	6829      	ldr	r1, [r5, #0]
 8013d0e:	291d      	cmp	r1, #29
 8013d10:	d82c      	bhi.n	8013d6c <__sflush_r+0xb8>
 8013d12:	4a2a      	ldr	r2, [pc, #168]	; (8013dbc <__sflush_r+0x108>)
 8013d14:	40ca      	lsrs	r2, r1
 8013d16:	07d6      	lsls	r6, r2, #31
 8013d18:	d528      	bpl.n	8013d6c <__sflush_r+0xb8>
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	6062      	str	r2, [r4, #4]
 8013d1e:	04d9      	lsls	r1, r3, #19
 8013d20:	6922      	ldr	r2, [r4, #16]
 8013d22:	6022      	str	r2, [r4, #0]
 8013d24:	d504      	bpl.n	8013d30 <__sflush_r+0x7c>
 8013d26:	1c42      	adds	r2, r0, #1
 8013d28:	d101      	bne.n	8013d2e <__sflush_r+0x7a>
 8013d2a:	682b      	ldr	r3, [r5, #0]
 8013d2c:	b903      	cbnz	r3, 8013d30 <__sflush_r+0x7c>
 8013d2e:	6560      	str	r0, [r4, #84]	; 0x54
 8013d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d32:	602f      	str	r7, [r5, #0]
 8013d34:	2900      	cmp	r1, #0
 8013d36:	d0ca      	beq.n	8013cce <__sflush_r+0x1a>
 8013d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d3c:	4299      	cmp	r1, r3
 8013d3e:	d002      	beq.n	8013d46 <__sflush_r+0x92>
 8013d40:	4628      	mov	r0, r5
 8013d42:	f7fd fb2b 	bl	801139c <_free_r>
 8013d46:	2000      	movs	r0, #0
 8013d48:	6360      	str	r0, [r4, #52]	; 0x34
 8013d4a:	e7c1      	b.n	8013cd0 <__sflush_r+0x1c>
 8013d4c:	6a21      	ldr	r1, [r4, #32]
 8013d4e:	2301      	movs	r3, #1
 8013d50:	4628      	mov	r0, r5
 8013d52:	47b0      	blx	r6
 8013d54:	1c41      	adds	r1, r0, #1
 8013d56:	d1c7      	bne.n	8013ce8 <__sflush_r+0x34>
 8013d58:	682b      	ldr	r3, [r5, #0]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d0c4      	beq.n	8013ce8 <__sflush_r+0x34>
 8013d5e:	2b1d      	cmp	r3, #29
 8013d60:	d001      	beq.n	8013d66 <__sflush_r+0xb2>
 8013d62:	2b16      	cmp	r3, #22
 8013d64:	d101      	bne.n	8013d6a <__sflush_r+0xb6>
 8013d66:	602f      	str	r7, [r5, #0]
 8013d68:	e7b1      	b.n	8013cce <__sflush_r+0x1a>
 8013d6a:	89a3      	ldrh	r3, [r4, #12]
 8013d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d70:	81a3      	strh	r3, [r4, #12]
 8013d72:	e7ad      	b.n	8013cd0 <__sflush_r+0x1c>
 8013d74:	690f      	ldr	r7, [r1, #16]
 8013d76:	2f00      	cmp	r7, #0
 8013d78:	d0a9      	beq.n	8013cce <__sflush_r+0x1a>
 8013d7a:	0793      	lsls	r3, r2, #30
 8013d7c:	680e      	ldr	r6, [r1, #0]
 8013d7e:	bf08      	it	eq
 8013d80:	694b      	ldreq	r3, [r1, #20]
 8013d82:	600f      	str	r7, [r1, #0]
 8013d84:	bf18      	it	ne
 8013d86:	2300      	movne	r3, #0
 8013d88:	eba6 0807 	sub.w	r8, r6, r7
 8013d8c:	608b      	str	r3, [r1, #8]
 8013d8e:	f1b8 0f00 	cmp.w	r8, #0
 8013d92:	dd9c      	ble.n	8013cce <__sflush_r+0x1a>
 8013d94:	6a21      	ldr	r1, [r4, #32]
 8013d96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013d98:	4643      	mov	r3, r8
 8013d9a:	463a      	mov	r2, r7
 8013d9c:	4628      	mov	r0, r5
 8013d9e:	47b0      	blx	r6
 8013da0:	2800      	cmp	r0, #0
 8013da2:	dc06      	bgt.n	8013db2 <__sflush_r+0xfe>
 8013da4:	89a3      	ldrh	r3, [r4, #12]
 8013da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013daa:	81a3      	strh	r3, [r4, #12]
 8013dac:	f04f 30ff 	mov.w	r0, #4294967295
 8013db0:	e78e      	b.n	8013cd0 <__sflush_r+0x1c>
 8013db2:	4407      	add	r7, r0
 8013db4:	eba8 0800 	sub.w	r8, r8, r0
 8013db8:	e7e9      	b.n	8013d8e <__sflush_r+0xda>
 8013dba:	bf00      	nop
 8013dbc:	20400001 	.word	0x20400001

08013dc0 <_fflush_r>:
 8013dc0:	b538      	push	{r3, r4, r5, lr}
 8013dc2:	690b      	ldr	r3, [r1, #16]
 8013dc4:	4605      	mov	r5, r0
 8013dc6:	460c      	mov	r4, r1
 8013dc8:	b913      	cbnz	r3, 8013dd0 <_fflush_r+0x10>
 8013dca:	2500      	movs	r5, #0
 8013dcc:	4628      	mov	r0, r5
 8013dce:	bd38      	pop	{r3, r4, r5, pc}
 8013dd0:	b118      	cbz	r0, 8013dda <_fflush_r+0x1a>
 8013dd2:	6983      	ldr	r3, [r0, #24]
 8013dd4:	b90b      	cbnz	r3, 8013dda <_fflush_r+0x1a>
 8013dd6:	f7fe ff0f 	bl	8012bf8 <__sinit>
 8013dda:	4b14      	ldr	r3, [pc, #80]	; (8013e2c <_fflush_r+0x6c>)
 8013ddc:	429c      	cmp	r4, r3
 8013dde:	d11b      	bne.n	8013e18 <_fflush_r+0x58>
 8013de0:	686c      	ldr	r4, [r5, #4]
 8013de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d0ef      	beq.n	8013dca <_fflush_r+0xa>
 8013dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013dec:	07d0      	lsls	r0, r2, #31
 8013dee:	d404      	bmi.n	8013dfa <_fflush_r+0x3a>
 8013df0:	0599      	lsls	r1, r3, #22
 8013df2:	d402      	bmi.n	8013dfa <_fflush_r+0x3a>
 8013df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013df6:	f7fe ffa2 	bl	8012d3e <__retarget_lock_acquire_recursive>
 8013dfa:	4628      	mov	r0, r5
 8013dfc:	4621      	mov	r1, r4
 8013dfe:	f7ff ff59 	bl	8013cb4 <__sflush_r>
 8013e02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e04:	07da      	lsls	r2, r3, #31
 8013e06:	4605      	mov	r5, r0
 8013e08:	d4e0      	bmi.n	8013dcc <_fflush_r+0xc>
 8013e0a:	89a3      	ldrh	r3, [r4, #12]
 8013e0c:	059b      	lsls	r3, r3, #22
 8013e0e:	d4dd      	bmi.n	8013dcc <_fflush_r+0xc>
 8013e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e12:	f7fe ff95 	bl	8012d40 <__retarget_lock_release_recursive>
 8013e16:	e7d9      	b.n	8013dcc <_fflush_r+0xc>
 8013e18:	4b05      	ldr	r3, [pc, #20]	; (8013e30 <_fflush_r+0x70>)
 8013e1a:	429c      	cmp	r4, r3
 8013e1c:	d101      	bne.n	8013e22 <_fflush_r+0x62>
 8013e1e:	68ac      	ldr	r4, [r5, #8]
 8013e20:	e7df      	b.n	8013de2 <_fflush_r+0x22>
 8013e22:	4b04      	ldr	r3, [pc, #16]	; (8013e34 <_fflush_r+0x74>)
 8013e24:	429c      	cmp	r4, r3
 8013e26:	bf08      	it	eq
 8013e28:	68ec      	ldreq	r4, [r5, #12]
 8013e2a:	e7da      	b.n	8013de2 <_fflush_r+0x22>
 8013e2c:	080ca244 	.word	0x080ca244
 8013e30:	080ca264 	.word	0x080ca264
 8013e34:	080ca224 	.word	0x080ca224

08013e38 <fiprintf>:
 8013e38:	b40e      	push	{r1, r2, r3}
 8013e3a:	b503      	push	{r0, r1, lr}
 8013e3c:	4601      	mov	r1, r0
 8013e3e:	ab03      	add	r3, sp, #12
 8013e40:	4805      	ldr	r0, [pc, #20]	; (8013e58 <fiprintf+0x20>)
 8013e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e46:	6800      	ldr	r0, [r0, #0]
 8013e48:	9301      	str	r3, [sp, #4]
 8013e4a:	f7ff fcbf 	bl	80137cc <_vfiprintf_r>
 8013e4e:	b002      	add	sp, #8
 8013e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e54:	b003      	add	sp, #12
 8013e56:	4770      	bx	lr
 8013e58:	20001490 	.word	0x20001490

08013e5c <_lseek_r>:
 8013e5c:	b538      	push	{r3, r4, r5, lr}
 8013e5e:	4d07      	ldr	r5, [pc, #28]	; (8013e7c <_lseek_r+0x20>)
 8013e60:	4604      	mov	r4, r0
 8013e62:	4608      	mov	r0, r1
 8013e64:	4611      	mov	r1, r2
 8013e66:	2200      	movs	r2, #0
 8013e68:	602a      	str	r2, [r5, #0]
 8013e6a:	461a      	mov	r2, r3
 8013e6c:	f000 feaa 	bl	8014bc4 <_lseek>
 8013e70:	1c43      	adds	r3, r0, #1
 8013e72:	d102      	bne.n	8013e7a <_lseek_r+0x1e>
 8013e74:	682b      	ldr	r3, [r5, #0]
 8013e76:	b103      	cbz	r3, 8013e7a <_lseek_r+0x1e>
 8013e78:	6023      	str	r3, [r4, #0]
 8013e7a:	bd38      	pop	{r3, r4, r5, pc}
 8013e7c:	20011314 	.word	0x20011314

08013e80 <__swhatbuf_r>:
 8013e80:	b570      	push	{r4, r5, r6, lr}
 8013e82:	460e      	mov	r6, r1
 8013e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e88:	2900      	cmp	r1, #0
 8013e8a:	b096      	sub	sp, #88	; 0x58
 8013e8c:	4614      	mov	r4, r2
 8013e8e:	461d      	mov	r5, r3
 8013e90:	da07      	bge.n	8013ea2 <__swhatbuf_r+0x22>
 8013e92:	2300      	movs	r3, #0
 8013e94:	602b      	str	r3, [r5, #0]
 8013e96:	89b3      	ldrh	r3, [r6, #12]
 8013e98:	061a      	lsls	r2, r3, #24
 8013e9a:	d410      	bmi.n	8013ebe <__swhatbuf_r+0x3e>
 8013e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ea0:	e00e      	b.n	8013ec0 <__swhatbuf_r+0x40>
 8013ea2:	466a      	mov	r2, sp
 8013ea4:	f000 f8aa 	bl	8013ffc <_fstat_r>
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	dbf2      	blt.n	8013e92 <__swhatbuf_r+0x12>
 8013eac:	9a01      	ldr	r2, [sp, #4]
 8013eae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013eb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013eb6:	425a      	negs	r2, r3
 8013eb8:	415a      	adcs	r2, r3
 8013eba:	602a      	str	r2, [r5, #0]
 8013ebc:	e7ee      	b.n	8013e9c <__swhatbuf_r+0x1c>
 8013ebe:	2340      	movs	r3, #64	; 0x40
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	6023      	str	r3, [r4, #0]
 8013ec4:	b016      	add	sp, #88	; 0x58
 8013ec6:	bd70      	pop	{r4, r5, r6, pc}

08013ec8 <__smakebuf_r>:
 8013ec8:	898b      	ldrh	r3, [r1, #12]
 8013eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013ecc:	079d      	lsls	r5, r3, #30
 8013ece:	4606      	mov	r6, r0
 8013ed0:	460c      	mov	r4, r1
 8013ed2:	d507      	bpl.n	8013ee4 <__smakebuf_r+0x1c>
 8013ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013ed8:	6023      	str	r3, [r4, #0]
 8013eda:	6123      	str	r3, [r4, #16]
 8013edc:	2301      	movs	r3, #1
 8013ede:	6163      	str	r3, [r4, #20]
 8013ee0:	b002      	add	sp, #8
 8013ee2:	bd70      	pop	{r4, r5, r6, pc}
 8013ee4:	ab01      	add	r3, sp, #4
 8013ee6:	466a      	mov	r2, sp
 8013ee8:	f7ff ffca 	bl	8013e80 <__swhatbuf_r>
 8013eec:	9900      	ldr	r1, [sp, #0]
 8013eee:	4605      	mov	r5, r0
 8013ef0:	4630      	mov	r0, r6
 8013ef2:	f7fd faa3 	bl	801143c <_malloc_r>
 8013ef6:	b948      	cbnz	r0, 8013f0c <__smakebuf_r+0x44>
 8013ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013efc:	059a      	lsls	r2, r3, #22
 8013efe:	d4ef      	bmi.n	8013ee0 <__smakebuf_r+0x18>
 8013f00:	f023 0303 	bic.w	r3, r3, #3
 8013f04:	f043 0302 	orr.w	r3, r3, #2
 8013f08:	81a3      	strh	r3, [r4, #12]
 8013f0a:	e7e3      	b.n	8013ed4 <__smakebuf_r+0xc>
 8013f0c:	4b0d      	ldr	r3, [pc, #52]	; (8013f44 <__smakebuf_r+0x7c>)
 8013f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f10:	89a3      	ldrh	r3, [r4, #12]
 8013f12:	6020      	str	r0, [r4, #0]
 8013f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f18:	81a3      	strh	r3, [r4, #12]
 8013f1a:	9b00      	ldr	r3, [sp, #0]
 8013f1c:	6163      	str	r3, [r4, #20]
 8013f1e:	9b01      	ldr	r3, [sp, #4]
 8013f20:	6120      	str	r0, [r4, #16]
 8013f22:	b15b      	cbz	r3, 8013f3c <__smakebuf_r+0x74>
 8013f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f28:	4630      	mov	r0, r6
 8013f2a:	f000 f879 	bl	8014020 <_isatty_r>
 8013f2e:	b128      	cbz	r0, 8013f3c <__smakebuf_r+0x74>
 8013f30:	89a3      	ldrh	r3, [r4, #12]
 8013f32:	f023 0303 	bic.w	r3, r3, #3
 8013f36:	f043 0301 	orr.w	r3, r3, #1
 8013f3a:	81a3      	strh	r3, [r4, #12]
 8013f3c:	89a0      	ldrh	r0, [r4, #12]
 8013f3e:	4305      	orrs	r5, r0
 8013f40:	81a5      	strh	r5, [r4, #12]
 8013f42:	e7cd      	b.n	8013ee0 <__smakebuf_r+0x18>
 8013f44:	08012b91 	.word	0x08012b91

08013f48 <__ascii_mbtowc>:
 8013f48:	b082      	sub	sp, #8
 8013f4a:	b901      	cbnz	r1, 8013f4e <__ascii_mbtowc+0x6>
 8013f4c:	a901      	add	r1, sp, #4
 8013f4e:	b142      	cbz	r2, 8013f62 <__ascii_mbtowc+0x1a>
 8013f50:	b14b      	cbz	r3, 8013f66 <__ascii_mbtowc+0x1e>
 8013f52:	7813      	ldrb	r3, [r2, #0]
 8013f54:	600b      	str	r3, [r1, #0]
 8013f56:	7812      	ldrb	r2, [r2, #0]
 8013f58:	1e10      	subs	r0, r2, #0
 8013f5a:	bf18      	it	ne
 8013f5c:	2001      	movne	r0, #1
 8013f5e:	b002      	add	sp, #8
 8013f60:	4770      	bx	lr
 8013f62:	4610      	mov	r0, r2
 8013f64:	e7fb      	b.n	8013f5e <__ascii_mbtowc+0x16>
 8013f66:	f06f 0001 	mvn.w	r0, #1
 8013f6a:	e7f8      	b.n	8013f5e <__ascii_mbtowc+0x16>

08013f6c <memmove>:
 8013f6c:	4288      	cmp	r0, r1
 8013f6e:	b510      	push	{r4, lr}
 8013f70:	eb01 0402 	add.w	r4, r1, r2
 8013f74:	d902      	bls.n	8013f7c <memmove+0x10>
 8013f76:	4284      	cmp	r4, r0
 8013f78:	4623      	mov	r3, r4
 8013f7a:	d807      	bhi.n	8013f8c <memmove+0x20>
 8013f7c:	1e43      	subs	r3, r0, #1
 8013f7e:	42a1      	cmp	r1, r4
 8013f80:	d008      	beq.n	8013f94 <memmove+0x28>
 8013f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013f8a:	e7f8      	b.n	8013f7e <memmove+0x12>
 8013f8c:	4402      	add	r2, r0
 8013f8e:	4601      	mov	r1, r0
 8013f90:	428a      	cmp	r2, r1
 8013f92:	d100      	bne.n	8013f96 <memmove+0x2a>
 8013f94:	bd10      	pop	{r4, pc}
 8013f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013f9e:	e7f7      	b.n	8013f90 <memmove+0x24>

08013fa0 <_malloc_usable_size_r>:
 8013fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fa4:	1f18      	subs	r0, r3, #4
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	bfbc      	itt	lt
 8013faa:	580b      	ldrlt	r3, [r1, r0]
 8013fac:	18c0      	addlt	r0, r0, r3
 8013fae:	4770      	bx	lr

08013fb0 <_read_r>:
 8013fb0:	b538      	push	{r3, r4, r5, lr}
 8013fb2:	4d07      	ldr	r5, [pc, #28]	; (8013fd0 <_read_r+0x20>)
 8013fb4:	4604      	mov	r4, r0
 8013fb6:	4608      	mov	r0, r1
 8013fb8:	4611      	mov	r1, r2
 8013fba:	2200      	movs	r2, #0
 8013fbc:	602a      	str	r2, [r5, #0]
 8013fbe:	461a      	mov	r2, r3
 8013fc0:	f000 fe08 	bl	8014bd4 <_read>
 8013fc4:	1c43      	adds	r3, r0, #1
 8013fc6:	d102      	bne.n	8013fce <_read_r+0x1e>
 8013fc8:	682b      	ldr	r3, [r5, #0]
 8013fca:	b103      	cbz	r3, 8013fce <_read_r+0x1e>
 8013fcc:	6023      	str	r3, [r4, #0]
 8013fce:	bd38      	pop	{r3, r4, r5, pc}
 8013fd0:	20011314 	.word	0x20011314

08013fd4 <__ascii_wctomb>:
 8013fd4:	b149      	cbz	r1, 8013fea <__ascii_wctomb+0x16>
 8013fd6:	2aff      	cmp	r2, #255	; 0xff
 8013fd8:	bf85      	ittet	hi
 8013fda:	238a      	movhi	r3, #138	; 0x8a
 8013fdc:	6003      	strhi	r3, [r0, #0]
 8013fde:	700a      	strbls	r2, [r1, #0]
 8013fe0:	f04f 30ff 	movhi.w	r0, #4294967295
 8013fe4:	bf98      	it	ls
 8013fe6:	2001      	movls	r0, #1
 8013fe8:	4770      	bx	lr
 8013fea:	4608      	mov	r0, r1
 8013fec:	4770      	bx	lr

08013fee <abort>:
 8013fee:	b508      	push	{r3, lr}
 8013ff0:	2006      	movs	r0, #6
 8013ff2:	f000 f84d 	bl	8014090 <raise>
 8013ff6:	2001      	movs	r0, #1
 8013ff8:	f000 fdfc 	bl	8014bf4 <_exit>

08013ffc <_fstat_r>:
 8013ffc:	b538      	push	{r3, r4, r5, lr}
 8013ffe:	4d07      	ldr	r5, [pc, #28]	; (801401c <_fstat_r+0x20>)
 8014000:	2300      	movs	r3, #0
 8014002:	4604      	mov	r4, r0
 8014004:	4608      	mov	r0, r1
 8014006:	4611      	mov	r1, r2
 8014008:	602b      	str	r3, [r5, #0]
 801400a:	f000 fdbb 	bl	8014b84 <_fstat>
 801400e:	1c43      	adds	r3, r0, #1
 8014010:	d102      	bne.n	8014018 <_fstat_r+0x1c>
 8014012:	682b      	ldr	r3, [r5, #0]
 8014014:	b103      	cbz	r3, 8014018 <_fstat_r+0x1c>
 8014016:	6023      	str	r3, [r4, #0]
 8014018:	bd38      	pop	{r3, r4, r5, pc}
 801401a:	bf00      	nop
 801401c:	20011314 	.word	0x20011314

08014020 <_isatty_r>:
 8014020:	b538      	push	{r3, r4, r5, lr}
 8014022:	4d06      	ldr	r5, [pc, #24]	; (801403c <_isatty_r+0x1c>)
 8014024:	2300      	movs	r3, #0
 8014026:	4604      	mov	r4, r0
 8014028:	4608      	mov	r0, r1
 801402a:	602b      	str	r3, [r5, #0]
 801402c:	f000 fdba 	bl	8014ba4 <_isatty>
 8014030:	1c43      	adds	r3, r0, #1
 8014032:	d102      	bne.n	801403a <_isatty_r+0x1a>
 8014034:	682b      	ldr	r3, [r5, #0]
 8014036:	b103      	cbz	r3, 801403a <_isatty_r+0x1a>
 8014038:	6023      	str	r3, [r4, #0]
 801403a:	bd38      	pop	{r3, r4, r5, pc}
 801403c:	20011314 	.word	0x20011314

08014040 <_raise_r>:
 8014040:	291f      	cmp	r1, #31
 8014042:	b538      	push	{r3, r4, r5, lr}
 8014044:	4604      	mov	r4, r0
 8014046:	460d      	mov	r5, r1
 8014048:	d904      	bls.n	8014054 <_raise_r+0x14>
 801404a:	2316      	movs	r3, #22
 801404c:	6003      	str	r3, [r0, #0]
 801404e:	f04f 30ff 	mov.w	r0, #4294967295
 8014052:	bd38      	pop	{r3, r4, r5, pc}
 8014054:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014056:	b112      	cbz	r2, 801405e <_raise_r+0x1e>
 8014058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801405c:	b94b      	cbnz	r3, 8014072 <_raise_r+0x32>
 801405e:	4620      	mov	r0, r4
 8014060:	f000 f830 	bl	80140c4 <_getpid_r>
 8014064:	462a      	mov	r2, r5
 8014066:	4601      	mov	r1, r0
 8014068:	4620      	mov	r0, r4
 801406a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801406e:	f000 b817 	b.w	80140a0 <_kill_r>
 8014072:	2b01      	cmp	r3, #1
 8014074:	d00a      	beq.n	801408c <_raise_r+0x4c>
 8014076:	1c59      	adds	r1, r3, #1
 8014078:	d103      	bne.n	8014082 <_raise_r+0x42>
 801407a:	2316      	movs	r3, #22
 801407c:	6003      	str	r3, [r0, #0]
 801407e:	2001      	movs	r0, #1
 8014080:	e7e7      	b.n	8014052 <_raise_r+0x12>
 8014082:	2400      	movs	r4, #0
 8014084:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014088:	4628      	mov	r0, r5
 801408a:	4798      	blx	r3
 801408c:	2000      	movs	r0, #0
 801408e:	e7e0      	b.n	8014052 <_raise_r+0x12>

08014090 <raise>:
 8014090:	4b02      	ldr	r3, [pc, #8]	; (801409c <raise+0xc>)
 8014092:	4601      	mov	r1, r0
 8014094:	6818      	ldr	r0, [r3, #0]
 8014096:	f7ff bfd3 	b.w	8014040 <_raise_r>
 801409a:	bf00      	nop
 801409c:	20001490 	.word	0x20001490

080140a0 <_kill_r>:
 80140a0:	b538      	push	{r3, r4, r5, lr}
 80140a2:	4d07      	ldr	r5, [pc, #28]	; (80140c0 <_kill_r+0x20>)
 80140a4:	2300      	movs	r3, #0
 80140a6:	4604      	mov	r4, r0
 80140a8:	4608      	mov	r0, r1
 80140aa:	4611      	mov	r1, r2
 80140ac:	602b      	str	r3, [r5, #0]
 80140ae:	f000 fd81 	bl	8014bb4 <_kill>
 80140b2:	1c43      	adds	r3, r0, #1
 80140b4:	d102      	bne.n	80140bc <_kill_r+0x1c>
 80140b6:	682b      	ldr	r3, [r5, #0]
 80140b8:	b103      	cbz	r3, 80140bc <_kill_r+0x1c>
 80140ba:	6023      	str	r3, [r4, #0]
 80140bc:	bd38      	pop	{r3, r4, r5, pc}
 80140be:	bf00      	nop
 80140c0:	20011314 	.word	0x20011314

080140c4 <_getpid_r>:
 80140c4:	f000 bd66 	b.w	8014b94 <_getpid>

080140c8 <fabsf>:
 80140c8:	ee10 3a10 	vmov	r3, s0
 80140cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80140d0:	ee00 3a10 	vmov	s0, r3
 80140d4:	4770      	bx	lr
	...

080140d8 <expf>:
 80140d8:	b508      	push	{r3, lr}
 80140da:	ed2d 8b02 	vpush	{d8}
 80140de:	eef0 8a40 	vmov.f32	s17, s0
 80140e2:	f000 f8cf 	bl	8014284 <__ieee754_expf>
 80140e6:	4b16      	ldr	r3, [pc, #88]	; (8014140 <expf+0x68>)
 80140e8:	f993 3000 	ldrsb.w	r3, [r3]
 80140ec:	3301      	adds	r3, #1
 80140ee:	eeb0 8a40 	vmov.f32	s16, s0
 80140f2:	d011      	beq.n	8014118 <expf+0x40>
 80140f4:	eeb0 0a68 	vmov.f32	s0, s17
 80140f8:	f000 fc5b 	bl	80149b2 <finitef>
 80140fc:	b160      	cbz	r0, 8014118 <expf+0x40>
 80140fe:	eddf 7a11 	vldr	s15, [pc, #68]	; 8014144 <expf+0x6c>
 8014102:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801410a:	dd0a      	ble.n	8014122 <expf+0x4a>
 801410c:	f7fd f8fe 	bl	801130c <__errno>
 8014110:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8014148 <expf+0x70>
 8014114:	2322      	movs	r3, #34	; 0x22
 8014116:	6003      	str	r3, [r0, #0]
 8014118:	eeb0 0a48 	vmov.f32	s0, s16
 801411c:	ecbd 8b02 	vpop	{d8}
 8014120:	bd08      	pop	{r3, pc}
 8014122:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801414c <expf+0x74>
 8014126:	eef4 8ae7 	vcmpe.f32	s17, s15
 801412a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801412e:	d5f3      	bpl.n	8014118 <expf+0x40>
 8014130:	f7fd f8ec 	bl	801130c <__errno>
 8014134:	2322      	movs	r3, #34	; 0x22
 8014136:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8014150 <expf+0x78>
 801413a:	6003      	str	r3, [r0, #0]
 801413c:	e7ec      	b.n	8014118 <expf+0x40>
 801413e:	bf00      	nop
 8014140:	20001660 	.word	0x20001660
 8014144:	42b17180 	.word	0x42b17180
 8014148:	7f800000 	.word	0x7f800000
 801414c:	c2cff1b5 	.word	0xc2cff1b5
 8014150:	00000000 	.word	0x00000000

08014154 <powf>:
 8014154:	b508      	push	{r3, lr}
 8014156:	ed2d 8b04 	vpush	{d8-d9}
 801415a:	eeb0 9a40 	vmov.f32	s18, s0
 801415e:	eef0 8a60 	vmov.f32	s17, s1
 8014162:	f000 f963 	bl	801442c <__ieee754_powf>
 8014166:	4b43      	ldr	r3, [pc, #268]	; (8014274 <powf+0x120>)
 8014168:	f993 3000 	ldrsb.w	r3, [r3]
 801416c:	3301      	adds	r3, #1
 801416e:	eeb0 8a40 	vmov.f32	s16, s0
 8014172:	d012      	beq.n	801419a <powf+0x46>
 8014174:	eef4 8a68 	vcmp.f32	s17, s17
 8014178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801417c:	d60d      	bvs.n	801419a <powf+0x46>
 801417e:	eeb4 9a49 	vcmp.f32	s18, s18
 8014182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014186:	d70d      	bvc.n	80141a4 <powf+0x50>
 8014188:	eef5 8a40 	vcmp.f32	s17, #0.0
 801418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014190:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014194:	bf08      	it	eq
 8014196:	eeb0 8a67 	vmoveq.f32	s16, s15
 801419a:	eeb0 0a48 	vmov.f32	s0, s16
 801419e:	ecbd 8b04 	vpop	{d8-d9}
 80141a2:	bd08      	pop	{r3, pc}
 80141a4:	eddf 9a34 	vldr	s19, [pc, #208]	; 8014278 <powf+0x124>
 80141a8:	eeb4 9a69 	vcmp.f32	s18, s19
 80141ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141b0:	d116      	bne.n	80141e0 <powf+0x8c>
 80141b2:	eef4 8a69 	vcmp.f32	s17, s19
 80141b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ba:	d057      	beq.n	801426c <powf+0x118>
 80141bc:	eeb0 0a68 	vmov.f32	s0, s17
 80141c0:	f000 fbf7 	bl	80149b2 <finitef>
 80141c4:	2800      	cmp	r0, #0
 80141c6:	d0e8      	beq.n	801419a <powf+0x46>
 80141c8:	eef4 8ae9 	vcmpe.f32	s17, s19
 80141cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d0:	d5e3      	bpl.n	801419a <powf+0x46>
 80141d2:	f7fd f89b 	bl	801130c <__errno>
 80141d6:	2321      	movs	r3, #33	; 0x21
 80141d8:	6003      	str	r3, [r0, #0]
 80141da:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801427c <powf+0x128>
 80141de:	e7dc      	b.n	801419a <powf+0x46>
 80141e0:	f000 fbe7 	bl	80149b2 <finitef>
 80141e4:	bb50      	cbnz	r0, 801423c <powf+0xe8>
 80141e6:	eeb0 0a49 	vmov.f32	s0, s18
 80141ea:	f000 fbe2 	bl	80149b2 <finitef>
 80141ee:	b328      	cbz	r0, 801423c <powf+0xe8>
 80141f0:	eeb0 0a68 	vmov.f32	s0, s17
 80141f4:	f000 fbdd 	bl	80149b2 <finitef>
 80141f8:	b300      	cbz	r0, 801423c <powf+0xe8>
 80141fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80141fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014202:	d706      	bvc.n	8014212 <powf+0xbe>
 8014204:	f7fd f882 	bl	801130c <__errno>
 8014208:	2321      	movs	r3, #33	; 0x21
 801420a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 801420e:	6003      	str	r3, [r0, #0]
 8014210:	e7c3      	b.n	801419a <powf+0x46>
 8014212:	f7fd f87b 	bl	801130c <__errno>
 8014216:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801421a:	2322      	movs	r3, #34	; 0x22
 801421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014220:	6003      	str	r3, [r0, #0]
 8014222:	d508      	bpl.n	8014236 <powf+0xe2>
 8014224:	eeb0 0a68 	vmov.f32	s0, s17
 8014228:	f000 fbd6 	bl	80149d8 <rintf>
 801422c:	eeb4 0a68 	vcmp.f32	s0, s17
 8014230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014234:	d1d1      	bne.n	80141da <powf+0x86>
 8014236:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8014280 <powf+0x12c>
 801423a:	e7ae      	b.n	801419a <powf+0x46>
 801423c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014244:	d1a9      	bne.n	801419a <powf+0x46>
 8014246:	eeb0 0a49 	vmov.f32	s0, s18
 801424a:	f000 fbb2 	bl	80149b2 <finitef>
 801424e:	2800      	cmp	r0, #0
 8014250:	d0a3      	beq.n	801419a <powf+0x46>
 8014252:	eeb0 0a68 	vmov.f32	s0, s17
 8014256:	f000 fbac 	bl	80149b2 <finitef>
 801425a:	2800      	cmp	r0, #0
 801425c:	d09d      	beq.n	801419a <powf+0x46>
 801425e:	f7fd f855 	bl	801130c <__errno>
 8014262:	2322      	movs	r3, #34	; 0x22
 8014264:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8014278 <powf+0x124>
 8014268:	6003      	str	r3, [r0, #0]
 801426a:	e796      	b.n	801419a <powf+0x46>
 801426c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014270:	e793      	b.n	801419a <powf+0x46>
 8014272:	bf00      	nop
 8014274:	20001660 	.word	0x20001660
 8014278:	00000000 	.word	0x00000000
 801427c:	ff800000 	.word	0xff800000
 8014280:	7f800000 	.word	0x7f800000

08014284 <__ieee754_expf>:
 8014284:	ee10 2a10 	vmov	r2, s0
 8014288:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801428c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014290:	d902      	bls.n	8014298 <__ieee754_expf+0x14>
 8014292:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014296:	4770      	bx	lr
 8014298:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801429c:	d106      	bne.n	80142ac <__ieee754_expf+0x28>
 801429e:	eddf 7a51 	vldr	s15, [pc, #324]	; 80143e4 <__ieee754_expf+0x160>
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	bf18      	it	ne
 80142a6:	eeb0 0a67 	vmovne.f32	s0, s15
 80142aa:	4770      	bx	lr
 80142ac:	484e      	ldr	r0, [pc, #312]	; (80143e8 <__ieee754_expf+0x164>)
 80142ae:	4282      	cmp	r2, r0
 80142b0:	dd04      	ble.n	80142bc <__ieee754_expf+0x38>
 80142b2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80143ec <__ieee754_expf+0x168>
 80142b6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80142ba:	4770      	bx	lr
 80142bc:	2a00      	cmp	r2, #0
 80142be:	da03      	bge.n	80142c8 <__ieee754_expf+0x44>
 80142c0:	4a4b      	ldr	r2, [pc, #300]	; (80143f0 <__ieee754_expf+0x16c>)
 80142c2:	4291      	cmp	r1, r2
 80142c4:	f200 808a 	bhi.w	80143dc <__ieee754_expf+0x158>
 80142c8:	4a4a      	ldr	r2, [pc, #296]	; (80143f4 <__ieee754_expf+0x170>)
 80142ca:	4291      	cmp	r1, r2
 80142cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80142d0:	d954      	bls.n	801437c <__ieee754_expf+0xf8>
 80142d2:	4a49      	ldr	r2, [pc, #292]	; (80143f8 <__ieee754_expf+0x174>)
 80142d4:	4291      	cmp	r1, r2
 80142d6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80142da:	d836      	bhi.n	801434a <__ieee754_expf+0xc6>
 80142dc:	4947      	ldr	r1, [pc, #284]	; (80143fc <__ieee754_expf+0x178>)
 80142de:	4411      	add	r1, r2
 80142e0:	ed91 7a00 	vldr	s14, [r1]
 80142e4:	4946      	ldr	r1, [pc, #280]	; (8014400 <__ieee754_expf+0x17c>)
 80142e6:	440a      	add	r2, r1
 80142e8:	edd2 7a00 	vldr	s15, [r2]
 80142ec:	ee30 7a47 	vsub.f32	s14, s0, s14
 80142f0:	f1c3 0201 	rsb	r2, r3, #1
 80142f4:	1ad2      	subs	r2, r2, r3
 80142f6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80142fa:	ee60 6a00 	vmul.f32	s13, s0, s0
 80142fe:	eddf 5a41 	vldr	s11, [pc, #260]	; 8014404 <__ieee754_expf+0x180>
 8014302:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8014408 <__ieee754_expf+0x184>
 8014306:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801430a:	eddf 5a40 	vldr	s11, [pc, #256]	; 801440c <__ieee754_expf+0x188>
 801430e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8014312:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8014410 <__ieee754_expf+0x18c>
 8014316:	eea5 5aa6 	vfma.f32	s10, s11, s13
 801431a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8014414 <__ieee754_expf+0x190>
 801431e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8014322:	eeb0 5a40 	vmov.f32	s10, s0
 8014326:	eea5 5ae6 	vfms.f32	s10, s11, s13
 801432a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801432e:	eef0 6a45 	vmov.f32	s13, s10
 8014332:	ee20 5a05 	vmul.f32	s10, s0, s10
 8014336:	bb92      	cbnz	r2, 801439e <__ieee754_expf+0x11a>
 8014338:	ee76 6ae5 	vsub.f32	s13, s13, s11
 801433c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8014340:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014344:	ee36 0a40 	vsub.f32	s0, s12, s0
 8014348:	4770      	bx	lr
 801434a:	4b33      	ldr	r3, [pc, #204]	; (8014418 <__ieee754_expf+0x194>)
 801434c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801441c <__ieee754_expf+0x198>
 8014350:	4413      	add	r3, r2
 8014352:	edd3 7a00 	vldr	s15, [r3]
 8014356:	eee0 7a07 	vfma.f32	s15, s0, s14
 801435a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014420 <__ieee754_expf+0x19c>
 801435e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014362:	ee17 2a90 	vmov	r2, s15
 8014366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801436a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801436e:	eeb0 7a40 	vmov.f32	s14, s0
 8014372:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8014424 <__ieee754_expf+0x1a0>
 8014376:	ee67 7a80 	vmul.f32	s15, s15, s0
 801437a:	e7bc      	b.n	80142f6 <__ieee754_expf+0x72>
 801437c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8014380:	d20b      	bcs.n	801439a <__ieee754_expf+0x116>
 8014382:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80143ec <__ieee754_expf+0x168>
 8014386:	ee70 6a26 	vadd.f32	s13, s0, s13
 801438a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014392:	dd02      	ble.n	801439a <__ieee754_expf+0x116>
 8014394:	ee30 0a06 	vadd.f32	s0, s0, s12
 8014398:	4770      	bx	lr
 801439a:	2200      	movs	r2, #0
 801439c:	e7ad      	b.n	80142fa <__ieee754_expf+0x76>
 801439e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80143a2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80143a6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80143aa:	bfb8      	it	lt
 80143ac:	3264      	addlt	r2, #100	; 0x64
 80143ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80143b2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80143b6:	ee76 7a40 	vsub.f32	s15, s12, s0
 80143ba:	ee17 3a90 	vmov	r3, s15
 80143be:	bfab      	itete	ge
 80143c0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80143c4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80143c8:	ee00 3a10 	vmovge	s0, r3
 80143cc:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8014428 <__ieee754_expf+0x1a4>
 80143d0:	bfbc      	itt	lt
 80143d2:	ee00 3a10 	vmovlt	s0, r3
 80143d6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80143da:	4770      	bx	lr
 80143dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80143e4 <__ieee754_expf+0x160>
 80143e0:	4770      	bx	lr
 80143e2:	bf00      	nop
 80143e4:	00000000 	.word	0x00000000
 80143e8:	42b17217 	.word	0x42b17217
 80143ec:	7149f2ca 	.word	0x7149f2ca
 80143f0:	42cff1b5 	.word	0x42cff1b5
 80143f4:	3eb17218 	.word	0x3eb17218
 80143f8:	3f851591 	.word	0x3f851591
 80143fc:	080ca544 	.word	0x080ca544
 8014400:	080ca54c 	.word	0x080ca54c
 8014404:	3331bb4c 	.word	0x3331bb4c
 8014408:	b5ddea0e 	.word	0xb5ddea0e
 801440c:	388ab355 	.word	0x388ab355
 8014410:	bb360b61 	.word	0xbb360b61
 8014414:	3e2aaaab 	.word	0x3e2aaaab
 8014418:	080ca53c 	.word	0x080ca53c
 801441c:	3fb8aa3b 	.word	0x3fb8aa3b
 8014420:	3f317180 	.word	0x3f317180
 8014424:	3717f7d1 	.word	0x3717f7d1
 8014428:	0d800000 	.word	0x0d800000

0801442c <__ieee754_powf>:
 801442c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014430:	ee10 5a90 	vmov	r5, s1
 8014434:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8014438:	ed2d 8b02 	vpush	{d8}
 801443c:	eeb0 8a40 	vmov.f32	s16, s0
 8014440:	eef0 8a60 	vmov.f32	s17, s1
 8014444:	f000 8291 	beq.w	801496a <__ieee754_powf+0x53e>
 8014448:	ee10 8a10 	vmov	r8, s0
 801444c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8014450:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014454:	dc06      	bgt.n	8014464 <__ieee754_powf+0x38>
 8014456:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801445a:	dd0a      	ble.n	8014472 <__ieee754_powf+0x46>
 801445c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014460:	f000 8283 	beq.w	801496a <__ieee754_powf+0x53e>
 8014464:	ecbd 8b02 	vpop	{d8}
 8014468:	48d8      	ldr	r0, [pc, #864]	; (80147cc <__ieee754_powf+0x3a0>)
 801446a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801446e:	f000 baad 	b.w	80149cc <nanf>
 8014472:	f1b8 0f00 	cmp.w	r8, #0
 8014476:	da1f      	bge.n	80144b8 <__ieee754_powf+0x8c>
 8014478:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801447c:	da2e      	bge.n	80144dc <__ieee754_powf+0xb0>
 801447e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8014482:	f2c0 827b 	blt.w	801497c <__ieee754_powf+0x550>
 8014486:	15fb      	asrs	r3, r7, #23
 8014488:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801448c:	fa47 f603 	asr.w	r6, r7, r3
 8014490:	fa06 f303 	lsl.w	r3, r6, r3
 8014494:	42bb      	cmp	r3, r7
 8014496:	f040 8271 	bne.w	801497c <__ieee754_powf+0x550>
 801449a:	f006 0601 	and.w	r6, r6, #1
 801449e:	f1c6 0602 	rsb	r6, r6, #2
 80144a2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80144a6:	d120      	bne.n	80144ea <__ieee754_powf+0xbe>
 80144a8:	2d00      	cmp	r5, #0
 80144aa:	f280 8264 	bge.w	8014976 <__ieee754_powf+0x54a>
 80144ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80144b2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80144b6:	e00d      	b.n	80144d4 <__ieee754_powf+0xa8>
 80144b8:	2600      	movs	r6, #0
 80144ba:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80144be:	d1f0      	bne.n	80144a2 <__ieee754_powf+0x76>
 80144c0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80144c4:	f000 8251 	beq.w	801496a <__ieee754_powf+0x53e>
 80144c8:	dd0a      	ble.n	80144e0 <__ieee754_powf+0xb4>
 80144ca:	2d00      	cmp	r5, #0
 80144cc:	f280 8250 	bge.w	8014970 <__ieee754_powf+0x544>
 80144d0:	ed9f 0abf 	vldr	s0, [pc, #764]	; 80147d0 <__ieee754_powf+0x3a4>
 80144d4:	ecbd 8b02 	vpop	{d8}
 80144d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144dc:	2602      	movs	r6, #2
 80144de:	e7ec      	b.n	80144ba <__ieee754_powf+0x8e>
 80144e0:	2d00      	cmp	r5, #0
 80144e2:	daf5      	bge.n	80144d0 <__ieee754_powf+0xa4>
 80144e4:	eeb1 0a68 	vneg.f32	s0, s17
 80144e8:	e7f4      	b.n	80144d4 <__ieee754_powf+0xa8>
 80144ea:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80144ee:	d102      	bne.n	80144f6 <__ieee754_powf+0xca>
 80144f0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80144f4:	e7ee      	b.n	80144d4 <__ieee754_powf+0xa8>
 80144f6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80144fa:	eeb0 0a48 	vmov.f32	s0, s16
 80144fe:	d108      	bne.n	8014512 <__ieee754_powf+0xe6>
 8014500:	f1b8 0f00 	cmp.w	r8, #0
 8014504:	db05      	blt.n	8014512 <__ieee754_powf+0xe6>
 8014506:	ecbd 8b02 	vpop	{d8}
 801450a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801450e:	f000 ba4d 	b.w	80149ac <__ieee754_sqrtf>
 8014512:	f7ff fdd9 	bl	80140c8 <fabsf>
 8014516:	b124      	cbz	r4, 8014522 <__ieee754_powf+0xf6>
 8014518:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801451c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014520:	d117      	bne.n	8014552 <__ieee754_powf+0x126>
 8014522:	2d00      	cmp	r5, #0
 8014524:	bfbc      	itt	lt
 8014526:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801452a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801452e:	f1b8 0f00 	cmp.w	r8, #0
 8014532:	dacf      	bge.n	80144d4 <__ieee754_powf+0xa8>
 8014534:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8014538:	ea54 0306 	orrs.w	r3, r4, r6
 801453c:	d104      	bne.n	8014548 <__ieee754_powf+0x11c>
 801453e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014542:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014546:	e7c5      	b.n	80144d4 <__ieee754_powf+0xa8>
 8014548:	2e01      	cmp	r6, #1
 801454a:	d1c3      	bne.n	80144d4 <__ieee754_powf+0xa8>
 801454c:	eeb1 0a40 	vneg.f32	s0, s0
 8014550:	e7c0      	b.n	80144d4 <__ieee754_powf+0xa8>
 8014552:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8014556:	3801      	subs	r0, #1
 8014558:	ea56 0300 	orrs.w	r3, r6, r0
 801455c:	d104      	bne.n	8014568 <__ieee754_powf+0x13c>
 801455e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8014562:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8014566:	e7b5      	b.n	80144d4 <__ieee754_powf+0xa8>
 8014568:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801456c:	dd6b      	ble.n	8014646 <__ieee754_powf+0x21a>
 801456e:	4b99      	ldr	r3, [pc, #612]	; (80147d4 <__ieee754_powf+0x3a8>)
 8014570:	429c      	cmp	r4, r3
 8014572:	dc06      	bgt.n	8014582 <__ieee754_powf+0x156>
 8014574:	2d00      	cmp	r5, #0
 8014576:	daab      	bge.n	80144d0 <__ieee754_powf+0xa4>
 8014578:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80147d8 <__ieee754_powf+0x3ac>
 801457c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014580:	e7a8      	b.n	80144d4 <__ieee754_powf+0xa8>
 8014582:	4b96      	ldr	r3, [pc, #600]	; (80147dc <__ieee754_powf+0x3b0>)
 8014584:	429c      	cmp	r4, r3
 8014586:	dd02      	ble.n	801458e <__ieee754_powf+0x162>
 8014588:	2d00      	cmp	r5, #0
 801458a:	dcf5      	bgt.n	8014578 <__ieee754_powf+0x14c>
 801458c:	e7a0      	b.n	80144d0 <__ieee754_powf+0xa4>
 801458e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014592:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014596:	eddf 6a92 	vldr	s13, [pc, #584]	; 80147e0 <__ieee754_powf+0x3b4>
 801459a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801459e:	eee0 6a67 	vfms.f32	s13, s0, s15
 80145a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80145a6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80145aa:	ee20 7a00 	vmul.f32	s14, s0, s0
 80145ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80145b2:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80147e4 <__ieee754_powf+0x3b8>
 80145b6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80145ba:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80147e8 <__ieee754_powf+0x3bc>
 80145be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80145c2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80147ec <__ieee754_powf+0x3c0>
 80145c6:	eef0 6a67 	vmov.f32	s13, s15
 80145ca:	eee0 6a07 	vfma.f32	s13, s0, s14
 80145ce:	ee16 3a90 	vmov	r3, s13
 80145d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80145d6:	f023 030f 	bic.w	r3, r3, #15
 80145da:	ee00 3a90 	vmov	s1, r3
 80145de:	eee0 0a47 	vfms.f32	s1, s0, s14
 80145e2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80145e6:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80145ea:	f025 050f 	bic.w	r5, r5, #15
 80145ee:	ee07 5a10 	vmov	s14, r5
 80145f2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80145f6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80145fa:	ee07 3a90 	vmov	s15, r3
 80145fe:	eee7 0a27 	vfma.f32	s1, s14, s15
 8014602:	3e01      	subs	r6, #1
 8014604:	ea56 0200 	orrs.w	r2, r6, r0
 8014608:	ee07 5a10 	vmov	s14, r5
 801460c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014610:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014614:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8014618:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801461c:	ee17 4a10 	vmov	r4, s14
 8014620:	bf08      	it	eq
 8014622:	eeb0 8a40 	vmoveq.f32	s16, s0
 8014626:	2c00      	cmp	r4, #0
 8014628:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801462c:	f340 8184 	ble.w	8014938 <__ieee754_powf+0x50c>
 8014630:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8014634:	f340 80fc 	ble.w	8014830 <__ieee754_powf+0x404>
 8014638:	eddf 7a67 	vldr	s15, [pc, #412]	; 80147d8 <__ieee754_powf+0x3ac>
 801463c:	ee28 0a27 	vmul.f32	s0, s16, s15
 8014640:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014644:	e746      	b.n	80144d4 <__ieee754_powf+0xa8>
 8014646:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801464a:	bf01      	itttt	eq
 801464c:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80147f0 <__ieee754_powf+0x3c4>
 8014650:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8014654:	f06f 0217 	mvneq.w	r2, #23
 8014658:	ee17 4a90 	vmoveq	r4, s15
 801465c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8014660:	bf18      	it	ne
 8014662:	2200      	movne	r2, #0
 8014664:	3b7f      	subs	r3, #127	; 0x7f
 8014666:	4413      	add	r3, r2
 8014668:	4a62      	ldr	r2, [pc, #392]	; (80147f4 <__ieee754_powf+0x3c8>)
 801466a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801466e:	4294      	cmp	r4, r2
 8014670:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8014674:	dd06      	ble.n	8014684 <__ieee754_powf+0x258>
 8014676:	4a60      	ldr	r2, [pc, #384]	; (80147f8 <__ieee754_powf+0x3cc>)
 8014678:	4294      	cmp	r4, r2
 801467a:	f340 80a4 	ble.w	80147c6 <__ieee754_powf+0x39a>
 801467e:	3301      	adds	r3, #1
 8014680:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8014684:	2400      	movs	r4, #0
 8014686:	4a5d      	ldr	r2, [pc, #372]	; (80147fc <__ieee754_powf+0x3d0>)
 8014688:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801468c:	ee07 1a90 	vmov	s15, r1
 8014690:	ed92 7a00 	vldr	s14, [r2]
 8014694:	4a5a      	ldr	r2, [pc, #360]	; (8014800 <__ieee754_powf+0x3d4>)
 8014696:	ee37 6a27 	vadd.f32	s12, s14, s15
 801469a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801469e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80146a2:	1049      	asrs	r1, r1, #1
 80146a4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80146a8:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80146ac:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80146b0:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80146b4:	ee06 1a10 	vmov	s12, r1
 80146b8:	ee65 4a26 	vmul.f32	s9, s10, s13
 80146bc:	ee36 7a47 	vsub.f32	s14, s12, s14
 80146c0:	ee14 7a90 	vmov	r7, s9
 80146c4:	4017      	ands	r7, r2
 80146c6:	ee05 7a90 	vmov	s11, r7
 80146ca:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80146ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80146d2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8014804 <__ieee754_powf+0x3d8>
 80146d6:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80146da:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80146de:	ee25 6a26 	vmul.f32	s12, s10, s13
 80146e2:	eddf 6a49 	vldr	s13, [pc, #292]	; 8014808 <__ieee754_powf+0x3dc>
 80146e6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80146ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 801480c <__ieee754_powf+0x3e0>
 80146ee:	eee7 6a27 	vfma.f32	s13, s14, s15
 80146f2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80147e0 <__ieee754_powf+0x3b4>
 80146f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80146fa:	eddf 6a45 	vldr	s13, [pc, #276]	; 8014810 <__ieee754_powf+0x3e4>
 80146fe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014702:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8014814 <__ieee754_powf+0x3e8>
 8014706:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801470a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801470e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8014712:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014716:	eee5 6a07 	vfma.f32	s13, s10, s14
 801471a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801471e:	eef0 7a45 	vmov.f32	s15, s10
 8014722:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8014726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801472a:	ee17 1a90 	vmov	r1, s15
 801472e:	4011      	ands	r1, r2
 8014730:	ee07 1a90 	vmov	s15, r1
 8014734:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8014738:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801473c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014740:	ee27 7a24 	vmul.f32	s14, s14, s9
 8014744:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014748:	eeb0 6a47 	vmov.f32	s12, s14
 801474c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014750:	ee16 1a10 	vmov	r1, s12
 8014754:	4011      	ands	r1, r2
 8014756:	ee06 1a90 	vmov	s13, r1
 801475a:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801475e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8014818 <__ieee754_powf+0x3ec>
 8014762:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801481c <__ieee754_powf+0x3f0>
 8014766:	ee37 7a66 	vsub.f32	s14, s14, s13
 801476a:	ee06 1a10 	vmov	s12, r1
 801476e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014772:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014820 <__ieee754_powf+0x3f4>
 8014776:	492b      	ldr	r1, [pc, #172]	; (8014824 <__ieee754_powf+0x3f8>)
 8014778:	eea6 7a27 	vfma.f32	s14, s12, s15
 801477c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014780:	edd1 7a00 	vldr	s15, [r1]
 8014784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014788:	ee07 3a90 	vmov	s15, r3
 801478c:	4b26      	ldr	r3, [pc, #152]	; (8014828 <__ieee754_powf+0x3fc>)
 801478e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014792:	eef0 7a47 	vmov.f32	s15, s14
 8014796:	eee6 7a25 	vfma.f32	s15, s12, s11
 801479a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801479e:	edd4 0a00 	vldr	s1, [r4]
 80147a2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80147a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80147aa:	ee17 3a90 	vmov	r3, s15
 80147ae:	4013      	ands	r3, r2
 80147b0:	ee07 3a90 	vmov	s15, r3
 80147b4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80147b8:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80147bc:	eee6 6a65 	vfms.f32	s13, s12, s11
 80147c0:	ee77 7a66 	vsub.f32	s15, s14, s13
 80147c4:	e70f      	b.n	80145e6 <__ieee754_powf+0x1ba>
 80147c6:	2401      	movs	r4, #1
 80147c8:	e75d      	b.n	8014686 <__ieee754_powf+0x25a>
 80147ca:	bf00      	nop
 80147cc:	080ca430 	.word	0x080ca430
 80147d0:	00000000 	.word	0x00000000
 80147d4:	3f7ffff7 	.word	0x3f7ffff7
 80147d8:	7149f2ca 	.word	0x7149f2ca
 80147dc:	3f800007 	.word	0x3f800007
 80147e0:	3eaaaaab 	.word	0x3eaaaaab
 80147e4:	3fb8aa3b 	.word	0x3fb8aa3b
 80147e8:	36eca570 	.word	0x36eca570
 80147ec:	3fb8aa00 	.word	0x3fb8aa00
 80147f0:	4b800000 	.word	0x4b800000
 80147f4:	001cc471 	.word	0x001cc471
 80147f8:	005db3d6 	.word	0x005db3d6
 80147fc:	080ca554 	.word	0x080ca554
 8014800:	fffff000 	.word	0xfffff000
 8014804:	3e6c3255 	.word	0x3e6c3255
 8014808:	3e53f142 	.word	0x3e53f142
 801480c:	3e8ba305 	.word	0x3e8ba305
 8014810:	3edb6db7 	.word	0x3edb6db7
 8014814:	3f19999a 	.word	0x3f19999a
 8014818:	3f76384f 	.word	0x3f76384f
 801481c:	3f763800 	.word	0x3f763800
 8014820:	369dc3a0 	.word	0x369dc3a0
 8014824:	080ca564 	.word	0x080ca564
 8014828:	080ca55c 	.word	0x080ca55c
 801482c:	3338aa3c 	.word	0x3338aa3c
 8014830:	f040 8092 	bne.w	8014958 <__ieee754_powf+0x52c>
 8014834:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801482c <__ieee754_powf+0x400>
 8014838:	ee37 7a67 	vsub.f32	s14, s14, s15
 801483c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014840:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014848:	f73f aef6 	bgt.w	8014638 <__ieee754_powf+0x20c>
 801484c:	15db      	asrs	r3, r3, #23
 801484e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8014852:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014856:	4103      	asrs	r3, r0
 8014858:	4423      	add	r3, r4
 801485a:	4949      	ldr	r1, [pc, #292]	; (8014980 <__ieee754_powf+0x554>)
 801485c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014860:	3a7f      	subs	r2, #127	; 0x7f
 8014862:	4111      	asrs	r1, r2
 8014864:	ea23 0101 	bic.w	r1, r3, r1
 8014868:	ee07 1a10 	vmov	s14, r1
 801486c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014870:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014874:	f1c2 0217 	rsb	r2, r2, #23
 8014878:	4110      	asrs	r0, r2
 801487a:	2c00      	cmp	r4, #0
 801487c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014880:	bfb8      	it	lt
 8014882:	4240      	neglt	r0, r0
 8014884:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014888:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8014984 <__ieee754_powf+0x558>
 801488c:	ee17 3a10 	vmov	r3, s14
 8014890:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014894:	f023 030f 	bic.w	r3, r3, #15
 8014898:	ee07 3a10 	vmov	s14, r3
 801489c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148a0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80148a4:	eddf 7a38 	vldr	s15, [pc, #224]	; 8014988 <__ieee754_powf+0x55c>
 80148a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80148ac:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80148b0:	eddf 6a36 	vldr	s13, [pc, #216]	; 801498c <__ieee754_powf+0x560>
 80148b4:	eeb0 0a67 	vmov.f32	s0, s15
 80148b8:	eea7 0a26 	vfma.f32	s0, s14, s13
 80148bc:	eeb0 6a40 	vmov.f32	s12, s0
 80148c0:	eea7 6a66 	vfms.f32	s12, s14, s13
 80148c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80148c8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80148cc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8014990 <__ieee754_powf+0x564>
 80148d0:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8014994 <__ieee754_powf+0x568>
 80148d4:	eea7 6a26 	vfma.f32	s12, s14, s13
 80148d8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8014998 <__ieee754_powf+0x56c>
 80148dc:	eee6 6a07 	vfma.f32	s13, s12, s14
 80148e0:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801499c <__ieee754_powf+0x570>
 80148e4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80148e8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80149a0 <__ieee754_powf+0x574>
 80148ec:	eee6 6a07 	vfma.f32	s13, s12, s14
 80148f0:	eeb0 6a40 	vmov.f32	s12, s0
 80148f4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80148f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80148fc:	eeb0 7a46 	vmov.f32	s14, s12
 8014900:	ee77 6a66 	vsub.f32	s13, s14, s13
 8014904:	ee20 6a06 	vmul.f32	s12, s0, s12
 8014908:	eee0 7a27 	vfma.f32	s15, s0, s15
 801490c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8014910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014914:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014918:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801491c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014920:	ee10 3a10 	vmov	r3, s0
 8014924:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8014928:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801492c:	da1a      	bge.n	8014964 <__ieee754_powf+0x538>
 801492e:	f000 f8af 	bl	8014a90 <scalbnf>
 8014932:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014936:	e5cd      	b.n	80144d4 <__ieee754_powf+0xa8>
 8014938:	4a1a      	ldr	r2, [pc, #104]	; (80149a4 <__ieee754_powf+0x578>)
 801493a:	4293      	cmp	r3, r2
 801493c:	dd02      	ble.n	8014944 <__ieee754_powf+0x518>
 801493e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80149a8 <__ieee754_powf+0x57c>
 8014942:	e67b      	b.n	801463c <__ieee754_powf+0x210>
 8014944:	d108      	bne.n	8014958 <__ieee754_powf+0x52c>
 8014946:	ee37 7a67 	vsub.f32	s14, s14, s15
 801494a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014952:	f6ff af7b 	blt.w	801484c <__ieee754_powf+0x420>
 8014956:	e7f2      	b.n	801493e <__ieee754_powf+0x512>
 8014958:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801495c:	f73f af76 	bgt.w	801484c <__ieee754_powf+0x420>
 8014960:	2000      	movs	r0, #0
 8014962:	e78f      	b.n	8014884 <__ieee754_powf+0x458>
 8014964:	ee00 3a10 	vmov	s0, r3
 8014968:	e7e3      	b.n	8014932 <__ieee754_powf+0x506>
 801496a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801496e:	e5b1      	b.n	80144d4 <__ieee754_powf+0xa8>
 8014970:	eeb0 0a68 	vmov.f32	s0, s17
 8014974:	e5ae      	b.n	80144d4 <__ieee754_powf+0xa8>
 8014976:	eeb0 0a48 	vmov.f32	s0, s16
 801497a:	e5ab      	b.n	80144d4 <__ieee754_powf+0xa8>
 801497c:	2600      	movs	r6, #0
 801497e:	e590      	b.n	80144a2 <__ieee754_powf+0x76>
 8014980:	007fffff 	.word	0x007fffff
 8014984:	3f317218 	.word	0x3f317218
 8014988:	35bfbe8c 	.word	0x35bfbe8c
 801498c:	3f317200 	.word	0x3f317200
 8014990:	3331bb4c 	.word	0x3331bb4c
 8014994:	b5ddea0e 	.word	0xb5ddea0e
 8014998:	388ab355 	.word	0x388ab355
 801499c:	bb360b61 	.word	0xbb360b61
 80149a0:	3e2aaaab 	.word	0x3e2aaaab
 80149a4:	43160000 	.word	0x43160000
 80149a8:	0da24260 	.word	0x0da24260

080149ac <__ieee754_sqrtf>:
 80149ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80149b0:	4770      	bx	lr

080149b2 <finitef>:
 80149b2:	b082      	sub	sp, #8
 80149b4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80149b8:	9801      	ldr	r0, [sp, #4]
 80149ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80149be:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80149c2:	bfac      	ite	ge
 80149c4:	2000      	movge	r0, #0
 80149c6:	2001      	movlt	r0, #1
 80149c8:	b002      	add	sp, #8
 80149ca:	4770      	bx	lr

080149cc <nanf>:
 80149cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80149d4 <nanf+0x8>
 80149d0:	4770      	bx	lr
 80149d2:	bf00      	nop
 80149d4:	7fc00000 	.word	0x7fc00000

080149d8 <rintf>:
 80149d8:	ee10 2a10 	vmov	r2, s0
 80149dc:	b513      	push	{r0, r1, r4, lr}
 80149de:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80149e2:	397f      	subs	r1, #127	; 0x7f
 80149e4:	2916      	cmp	r1, #22
 80149e6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80149ea:	dc47      	bgt.n	8014a7c <rintf+0xa4>
 80149ec:	b32b      	cbz	r3, 8014a3a <rintf+0x62>
 80149ee:	2900      	cmp	r1, #0
 80149f0:	ee10 3a10 	vmov	r3, s0
 80149f4:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 80149f8:	da21      	bge.n	8014a3e <rintf+0x66>
 80149fa:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80149fe:	425b      	negs	r3, r3
 8014a00:	4921      	ldr	r1, [pc, #132]	; (8014a88 <rintf+0xb0>)
 8014a02:	0a5b      	lsrs	r3, r3, #9
 8014a04:	0d12      	lsrs	r2, r2, #20
 8014a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014a0a:	0512      	lsls	r2, r2, #20
 8014a0c:	4313      	orrs	r3, r2
 8014a0e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8014a12:	ee07 3a90 	vmov	s15, r3
 8014a16:	edd1 6a00 	vldr	s13, [r1]
 8014a1a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8014a1e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8014a22:	eddd 7a01 	vldr	s15, [sp, #4]
 8014a26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014a2a:	ee17 3a90 	vmov	r3, s15
 8014a2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014a32:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8014a36:	ee00 3a10 	vmov	s0, r3
 8014a3a:	b002      	add	sp, #8
 8014a3c:	bd10      	pop	{r4, pc}
 8014a3e:	4a13      	ldr	r2, [pc, #76]	; (8014a8c <rintf+0xb4>)
 8014a40:	410a      	asrs	r2, r1
 8014a42:	4213      	tst	r3, r2
 8014a44:	d0f9      	beq.n	8014a3a <rintf+0x62>
 8014a46:	0854      	lsrs	r4, r2, #1
 8014a48:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8014a4c:	d006      	beq.n	8014a5c <rintf+0x84>
 8014a4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8014a52:	ea23 0304 	bic.w	r3, r3, r4
 8014a56:	fa42 f101 	asr.w	r1, r2, r1
 8014a5a:	430b      	orrs	r3, r1
 8014a5c:	4a0a      	ldr	r2, [pc, #40]	; (8014a88 <rintf+0xb0>)
 8014a5e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8014a62:	ed90 7a00 	vldr	s14, [r0]
 8014a66:	ee07 3a90 	vmov	s15, r3
 8014a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a6e:	edcd 7a01 	vstr	s15, [sp, #4]
 8014a72:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014a76:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014a7a:	e7de      	b.n	8014a3a <rintf+0x62>
 8014a7c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014a80:	d3db      	bcc.n	8014a3a <rintf+0x62>
 8014a82:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014a86:	e7d8      	b.n	8014a3a <rintf+0x62>
 8014a88:	080ca56c 	.word	0x080ca56c
 8014a8c:	007fffff 	.word	0x007fffff

08014a90 <scalbnf>:
 8014a90:	ee10 3a10 	vmov	r3, s0
 8014a94:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8014a98:	d025      	beq.n	8014ae6 <scalbnf+0x56>
 8014a9a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014a9e:	d302      	bcc.n	8014aa6 <scalbnf+0x16>
 8014aa0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014aa4:	4770      	bx	lr
 8014aa6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8014aaa:	d122      	bne.n	8014af2 <scalbnf+0x62>
 8014aac:	4b2a      	ldr	r3, [pc, #168]	; (8014b58 <scalbnf+0xc8>)
 8014aae:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014b5c <scalbnf+0xcc>
 8014ab2:	4298      	cmp	r0, r3
 8014ab4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014ab8:	db16      	blt.n	8014ae8 <scalbnf+0x58>
 8014aba:	ee10 3a10 	vmov	r3, s0
 8014abe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014ac2:	3a19      	subs	r2, #25
 8014ac4:	4402      	add	r2, r0
 8014ac6:	2afe      	cmp	r2, #254	; 0xfe
 8014ac8:	dd15      	ble.n	8014af6 <scalbnf+0x66>
 8014aca:	ee10 3a10 	vmov	r3, s0
 8014ace:	eddf 7a24 	vldr	s15, [pc, #144]	; 8014b60 <scalbnf+0xd0>
 8014ad2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014b64 <scalbnf+0xd4>
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	eeb0 7a67 	vmov.f32	s14, s15
 8014adc:	bfb8      	it	lt
 8014ade:	eef0 7a66 	vmovlt.f32	s15, s13
 8014ae2:	ee27 0a27 	vmul.f32	s0, s14, s15
 8014ae6:	4770      	bx	lr
 8014ae8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014b68 <scalbnf+0xd8>
 8014aec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014af0:	4770      	bx	lr
 8014af2:	0dd2      	lsrs	r2, r2, #23
 8014af4:	e7e6      	b.n	8014ac4 <scalbnf+0x34>
 8014af6:	2a00      	cmp	r2, #0
 8014af8:	dd06      	ble.n	8014b08 <scalbnf+0x78>
 8014afa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014afe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014b02:	ee00 3a10 	vmov	s0, r3
 8014b06:	4770      	bx	lr
 8014b08:	f112 0f16 	cmn.w	r2, #22
 8014b0c:	da1a      	bge.n	8014b44 <scalbnf+0xb4>
 8014b0e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014b12:	4298      	cmp	r0, r3
 8014b14:	ee10 3a10 	vmov	r3, s0
 8014b18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014b1c:	dd0a      	ble.n	8014b34 <scalbnf+0xa4>
 8014b1e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8014b60 <scalbnf+0xd0>
 8014b22:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014b64 <scalbnf+0xd4>
 8014b26:	eef0 7a40 	vmov.f32	s15, s0
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	bf18      	it	ne
 8014b2e:	eeb0 0a47 	vmovne.f32	s0, s14
 8014b32:	e7db      	b.n	8014aec <scalbnf+0x5c>
 8014b34:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8014b68 <scalbnf+0xd8>
 8014b38:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014b6c <scalbnf+0xdc>
 8014b3c:	eef0 7a40 	vmov.f32	s15, s0
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	e7f3      	b.n	8014b2c <scalbnf+0x9c>
 8014b44:	3219      	adds	r2, #25
 8014b46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014b4a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014b4e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014b70 <scalbnf+0xe0>
 8014b52:	ee07 3a10 	vmov	s14, r3
 8014b56:	e7c4      	b.n	8014ae2 <scalbnf+0x52>
 8014b58:	ffff3cb0 	.word	0xffff3cb0
 8014b5c:	4c000000 	.word	0x4c000000
 8014b60:	7149f2ca 	.word	0x7149f2ca
 8014b64:	f149f2ca 	.word	0xf149f2ca
 8014b68:	0da24260 	.word	0x0da24260
 8014b6c:	8da24260 	.word	0x8da24260
 8014b70:	33000000 	.word	0x33000000

08014b74 <_close>:
 8014b74:	4b02      	ldr	r3, [pc, #8]	; (8014b80 <_close+0xc>)
 8014b76:	2258      	movs	r2, #88	; 0x58
 8014b78:	601a      	str	r2, [r3, #0]
 8014b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b7e:	4770      	bx	lr
 8014b80:	20011314 	.word	0x20011314

08014b84 <_fstat>:
 8014b84:	4b02      	ldr	r3, [pc, #8]	; (8014b90 <_fstat+0xc>)
 8014b86:	2258      	movs	r2, #88	; 0x58
 8014b88:	601a      	str	r2, [r3, #0]
 8014b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b8e:	4770      	bx	lr
 8014b90:	20011314 	.word	0x20011314

08014b94 <_getpid>:
 8014b94:	4b02      	ldr	r3, [pc, #8]	; (8014ba0 <_getpid+0xc>)
 8014b96:	2258      	movs	r2, #88	; 0x58
 8014b98:	601a      	str	r2, [r3, #0]
 8014b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b9e:	4770      	bx	lr
 8014ba0:	20011314 	.word	0x20011314

08014ba4 <_isatty>:
 8014ba4:	4b02      	ldr	r3, [pc, #8]	; (8014bb0 <_isatty+0xc>)
 8014ba6:	2258      	movs	r2, #88	; 0x58
 8014ba8:	601a      	str	r2, [r3, #0]
 8014baa:	2000      	movs	r0, #0
 8014bac:	4770      	bx	lr
 8014bae:	bf00      	nop
 8014bb0:	20011314 	.word	0x20011314

08014bb4 <_kill>:
 8014bb4:	4b02      	ldr	r3, [pc, #8]	; (8014bc0 <_kill+0xc>)
 8014bb6:	2258      	movs	r2, #88	; 0x58
 8014bb8:	601a      	str	r2, [r3, #0]
 8014bba:	f04f 30ff 	mov.w	r0, #4294967295
 8014bbe:	4770      	bx	lr
 8014bc0:	20011314 	.word	0x20011314

08014bc4 <_lseek>:
 8014bc4:	4b02      	ldr	r3, [pc, #8]	; (8014bd0 <_lseek+0xc>)
 8014bc6:	2258      	movs	r2, #88	; 0x58
 8014bc8:	601a      	str	r2, [r3, #0]
 8014bca:	f04f 30ff 	mov.w	r0, #4294967295
 8014bce:	4770      	bx	lr
 8014bd0:	20011314 	.word	0x20011314

08014bd4 <_read>:
 8014bd4:	4b02      	ldr	r3, [pc, #8]	; (8014be0 <_read+0xc>)
 8014bd6:	2258      	movs	r2, #88	; 0x58
 8014bd8:	601a      	str	r2, [r3, #0]
 8014bda:	f04f 30ff 	mov.w	r0, #4294967295
 8014bde:	4770      	bx	lr
 8014be0:	20011314 	.word	0x20011314

08014be4 <_write>:
 8014be4:	4b02      	ldr	r3, [pc, #8]	; (8014bf0 <_write+0xc>)
 8014be6:	2258      	movs	r2, #88	; 0x58
 8014be8:	601a      	str	r2, [r3, #0]
 8014bea:	f04f 30ff 	mov.w	r0, #4294967295
 8014bee:	4770      	bx	lr
 8014bf0:	20011314 	.word	0x20011314

08014bf4 <_exit>:
 8014bf4:	e7fe      	b.n	8014bf4 <_exit>
	...

08014bf8 <_init>:
 8014bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bfa:	bf00      	nop
 8014bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014bfe:	bc08      	pop	{r3}
 8014c00:	469e      	mov	lr, r3
 8014c02:	4770      	bx	lr

08014c04 <_fini>:
 8014c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c06:	bf00      	nop
 8014c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c0a:	bc08      	pop	{r3}
 8014c0c:	469e      	mov	lr, r3
 8014c0e:	4770      	bx	lr
